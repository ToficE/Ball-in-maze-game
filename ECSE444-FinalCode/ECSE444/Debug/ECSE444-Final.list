
ECSE444-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dfbc  08010000  08010000  00020000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004c090  0802dfc0  0802dfc0  0003dfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807a050  0807a050  0009047c  2**0
                  CONTENTS
  4 .ARM          00000008  0807a050  0807a050  0008a050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807a058  0807a058  0009047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807a058  0807a058  0008a058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807a05c  0807a05c  0008a05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000047c  20000000  0807a060  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028a8  2000047c  0807a4dc  0009047c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d24  0807a4dc  00092d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0009047c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000254ac  00000000  00000000  000904ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b1e  00000000  00000000  000b5958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  000ba478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  000bc088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ffb5  00000000  00000000  000bda70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258b5  00000000  00000000  000eda25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011aade  00000000  00000000  001132da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0022ddb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087d4  00000000  00000000  0022de80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00236654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00236750  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00236774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	2000047c 	.word	0x2000047c
 801001c:	00000000 	.word	0x00000000
 8010020:	0802dfa4 	.word	0x0802dfa4

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000480 	.word	0x20000480
 801003c:	0802dfa4 	.word	0x0802dfa4
	...

08020000 <kalman>:
kalman: //label
	// push local variables used on stack

	//enable FPU

	PUSH {R1-R3,LR} // fixed-point push
 8020000:	b50e      	push	{r1, r2, r3, lr}

	LDR   R2, =0xE000ED88      	  // load CPACR
 8020002:	4a22      	ldr	r2, [pc, #136]	; (802008c <EXIT+0xa>)
	LDR     R3, [R2]              // retrieve CPACR value
 8020004:	6813      	ldr	r3, [r2, #0]
	ORR     R3, R3, #(0xF << 20)  // Set bits 20-23 to enable CP10 and CP11 coprocessors for FP operations
 8020006:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
	STR     R3, [R2]              // Write back to the CPACR
 802000a:	6013      	str	r3, [r2, #0]
	DSB                           // data sync barrier (wait for all memory accesses)
 802000c:	f3bf 8f4f 	dsb	sy
	ISB                           // instruction sync barrier (wait for all instructions)
 8020010:	f3bf 8f6f 	isb	sy

	VPUSH {S1-S6} // floating-point push
 8020014:	ed6d 0a06 	vpush	{s1-s6}

	MOV R1, #1
 8020018:	f04f 0101 	mov.w	r1, #1
	VMSR FPSCR, R1 // clear FPSCR by writing to it
 802001c:	eee1 1a10 	vmsr	fpscr, r1

	// load q, r, x, p, and k from memory
	VLDR.32 S1, [R0] // q
 8020020:	edd0 0a00 	vldr	s1, [r0]
	VLDR.32 S2, [R0, #4] // r
 8020024:	ed90 1a01 	vldr	s2, [r0, #4]
	VLDR.32 S3, [R0, #8] // x
 8020028:	edd0 1a02 	vldr	s3, [r0, #8]
	VLDR.32 S4, [R0, #12] // p
 802002c:	ed90 2a03 	vldr	s4, [r0, #12]
	//VLDR.32 S5, [R0, #16] // k (no need to load?)

	// arithmic
	VADD.F32 S4, S4, S1 // p = p + q
 8020030:	ee32 2a20 	vadd.f32	s4, s4, s1
	VADD.F32 S6, S4, S2 // den = p + r
 8020034:	ee32 3a01 	vadd.f32	s6, s4, s2
	VDIV.F32 S5, S4, S6 // k = p/den (need to store k)
 8020038:	eec2 2a03 	vdiv.f32	s5, s4, s6
	VSUB.F32 S0, S0, S3 // mult = measurement - x
 802003c:	ee30 0a61 	vsub.f32	s0, s0, s3
	VMUL.F32 S6, S5, S0 // addr = k*mult
 8020040:	ee22 3a80 	vmul.f32	s6, s5, s0
	VADD.F32 S3, S6, S3 // x = addr + x
 8020044:	ee73 1a21 	vadd.f32	s3, s6, s3

	// p = (1-k)*p
	// p = p - k*p
	VMUL.F32 S6, S5, S4 // mul = k*p
 8020048:	ee22 3a82 	vmul.f32	s6, s5, s4
	VSUB.F32 S4, S4, S6 // p = p - mul
 802004c:	ee32 2a43 	vsub.f32	s4, s4, s6

	// store variables
	VSTR S3, [R0, #8] // store x
 8020050:	edc0 1a02 	vstr	s3, [r0, #8]
	VSTR S4, [R0, #12] // store p
 8020054:	ed80 2a03 	vstr	s4, [r0, #12]
	VSTR S5, [R0, #16] // store k
 8020058:	edc0 2a04 	vstr	s5, [r0, #16]

	// check division by zero, overflow and underflow
	VMRS R1, FPSCR 	//Copy FPSCR to R1
 802005c:	eef1 1a10 	vmrs	r1, fpscr
	TST R1, #0x2 // test the DZC (Division by zero) bit
 8020060:	f011 0f02 	tst.w	r1, #2
	BNE ERROR // bracnh to error if division by zero has happened
 8020064:	d10b      	bne.n	802007e <ERROR>
	TST  R1, #0x4  	// test the OFC (overflow cumulative) bit in FPSCR
 8020066:	f011 0f04 	tst.w	r1, #4
	BNE ERROR 	// branch to error if overflow has happened
 802006a:	d108      	bne.n	802007e <ERROR>
	TST R1, #0x8 // test the UFC (undeflow cumulative) bit in FPSCR
 802006c:	f011 0f08 	tst.w	r1, #8
	BNE ERROR // branch to error if underflow has happened
 8020070:	d105      	bne.n	802007e <ERROR>

	// We can reduce the above instruction to:
	// This TST instruction checks if any of the flag bits are set to 1.
	TST R1, #14 // bin(0...01110) = dec(14)
 8020072:	f011 0f0e 	tst.w	r1, #14
	BNE ERROR
 8020076:	d102      	bne.n	802007e <ERROR>

	// These two instructions are reach iff no division by zero,
	// underflow or overflow occured.
	MOV R0, #0 // If the function returns 0 in the C code,
 8020078:	f04f 0000 	mov.w	r0, #0
			   // then no exception has occured.
	B EXIT
 802007c:	e001      	b.n	8020082 <EXIT>

0802007e <ERROR>:

	ERROR:
	MOV R0, #-1 // return -1. If the function returns -1 in the C code,
 802007e:	f04f 30ff 	mov.w	r0, #4294967295

08020082 <EXIT>:
				// then an exception must have occured.

	EXIT:
	// retrieve local variables from stack used in subroutine
	VPOP {S1-S6} // floating-point pop
 8020082:	ecfd 0a06 	vpop	{s1-s6}
	POP {R1-R3,LR} // fixed-point pop
 8020086:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
	BX LR // exit subroutine
 802008a:	4770      	bx	lr
	LDR   R2, =0xE000ED88      	  // load CPACR
 802008c:	e000ed88 	.word	0xe000ed88

08020090 <strlen>:
 8020090:	4603      	mov	r3, r0
 8020092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020096:	2a00      	cmp	r2, #0
 8020098:	d1fb      	bne.n	8020092 <strlen+0x2>
 802009a:	1a18      	subs	r0, r3, r0
 802009c:	3801      	subs	r0, #1
 802009e:	4770      	bx	lr

080200a0 <memchr>:
 80200a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80200a4:	2a10      	cmp	r2, #16
 80200a6:	db2b      	blt.n	8020100 <memchr+0x60>
 80200a8:	f010 0f07 	tst.w	r0, #7
 80200ac:	d008      	beq.n	80200c0 <memchr+0x20>
 80200ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200b2:	3a01      	subs	r2, #1
 80200b4:	428b      	cmp	r3, r1
 80200b6:	d02d      	beq.n	8020114 <memchr+0x74>
 80200b8:	f010 0f07 	tst.w	r0, #7
 80200bc:	b342      	cbz	r2, 8020110 <memchr+0x70>
 80200be:	d1f6      	bne.n	80200ae <memchr+0xe>
 80200c0:	b4f0      	push	{r4, r5, r6, r7}
 80200c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80200c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80200ca:	f022 0407 	bic.w	r4, r2, #7
 80200ce:	f07f 0700 	mvns.w	r7, #0
 80200d2:	2300      	movs	r3, #0
 80200d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80200d8:	3c08      	subs	r4, #8
 80200da:	ea85 0501 	eor.w	r5, r5, r1
 80200de:	ea86 0601 	eor.w	r6, r6, r1
 80200e2:	fa85 f547 	uadd8	r5, r5, r7
 80200e6:	faa3 f587 	sel	r5, r3, r7
 80200ea:	fa86 f647 	uadd8	r6, r6, r7
 80200ee:	faa5 f687 	sel	r6, r5, r7
 80200f2:	b98e      	cbnz	r6, 8020118 <memchr+0x78>
 80200f4:	d1ee      	bne.n	80200d4 <memchr+0x34>
 80200f6:	bcf0      	pop	{r4, r5, r6, r7}
 80200f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80200fc:	f002 0207 	and.w	r2, r2, #7
 8020100:	b132      	cbz	r2, 8020110 <memchr+0x70>
 8020102:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020106:	3a01      	subs	r2, #1
 8020108:	ea83 0301 	eor.w	r3, r3, r1
 802010c:	b113      	cbz	r3, 8020114 <memchr+0x74>
 802010e:	d1f8      	bne.n	8020102 <memchr+0x62>
 8020110:	2000      	movs	r0, #0
 8020112:	4770      	bx	lr
 8020114:	3801      	subs	r0, #1
 8020116:	4770      	bx	lr
 8020118:	2d00      	cmp	r5, #0
 802011a:	bf06      	itte	eq
 802011c:	4635      	moveq	r5, r6
 802011e:	3803      	subeq	r0, #3
 8020120:	3807      	subne	r0, #7
 8020122:	f015 0f01 	tst.w	r5, #1
 8020126:	d107      	bne.n	8020138 <memchr+0x98>
 8020128:	3001      	adds	r0, #1
 802012a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802012e:	bf02      	ittt	eq
 8020130:	3001      	addeq	r0, #1
 8020132:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020136:	3001      	addeq	r0, #1
 8020138:	bcf0      	pop	{r4, r5, r6, r7}
 802013a:	3801      	subs	r0, #1
 802013c:	4770      	bx	lr
 802013e:	bf00      	nop

08020140 <__aeabi_drsub>:
 8020140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020144:	e002      	b.n	802014c <__adddf3>
 8020146:	bf00      	nop

08020148 <__aeabi_dsub>:
 8020148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802014c <__adddf3>:
 802014c:	b530      	push	{r4, r5, lr}
 802014e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020156:	ea94 0f05 	teq	r4, r5
 802015a:	bf08      	it	eq
 802015c:	ea90 0f02 	teqeq	r0, r2
 8020160:	bf1f      	itttt	ne
 8020162:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020166:	ea55 0c02 	orrsne.w	ip, r5, r2
 802016a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802016e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020172:	f000 80e2 	beq.w	802033a <__adddf3+0x1ee>
 8020176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802017a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802017e:	bfb8      	it	lt
 8020180:	426d      	neglt	r5, r5
 8020182:	dd0c      	ble.n	802019e <__adddf3+0x52>
 8020184:	442c      	add	r4, r5
 8020186:	ea80 0202 	eor.w	r2, r0, r2
 802018a:	ea81 0303 	eor.w	r3, r1, r3
 802018e:	ea82 0000 	eor.w	r0, r2, r0
 8020192:	ea83 0101 	eor.w	r1, r3, r1
 8020196:	ea80 0202 	eor.w	r2, r0, r2
 802019a:	ea81 0303 	eor.w	r3, r1, r3
 802019e:	2d36      	cmp	r5, #54	; 0x36
 80201a0:	bf88      	it	hi
 80201a2:	bd30      	pophi	{r4, r5, pc}
 80201a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80201a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80201ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80201b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80201b4:	d002      	beq.n	80201bc <__adddf3+0x70>
 80201b6:	4240      	negs	r0, r0
 80201b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80201bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80201c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80201c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80201c8:	d002      	beq.n	80201d0 <__adddf3+0x84>
 80201ca:	4252      	negs	r2, r2
 80201cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80201d0:	ea94 0f05 	teq	r4, r5
 80201d4:	f000 80a7 	beq.w	8020326 <__adddf3+0x1da>
 80201d8:	f1a4 0401 	sub.w	r4, r4, #1
 80201dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80201e0:	db0d      	blt.n	80201fe <__adddf3+0xb2>
 80201e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80201e6:	fa22 f205 	lsr.w	r2, r2, r5
 80201ea:	1880      	adds	r0, r0, r2
 80201ec:	f141 0100 	adc.w	r1, r1, #0
 80201f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80201f4:	1880      	adds	r0, r0, r2
 80201f6:	fa43 f305 	asr.w	r3, r3, r5
 80201fa:	4159      	adcs	r1, r3
 80201fc:	e00e      	b.n	802021c <__adddf3+0xd0>
 80201fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020202:	f10e 0e20 	add.w	lr, lr, #32
 8020206:	2a01      	cmp	r2, #1
 8020208:	fa03 fc0e 	lsl.w	ip, r3, lr
 802020c:	bf28      	it	cs
 802020e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020212:	fa43 f305 	asr.w	r3, r3, r5
 8020216:	18c0      	adds	r0, r0, r3
 8020218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802021c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020220:	d507      	bpl.n	8020232 <__adddf3+0xe6>
 8020222:	f04f 0e00 	mov.w	lr, #0
 8020226:	f1dc 0c00 	rsbs	ip, ip, #0
 802022a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802022e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020236:	d31b      	bcc.n	8020270 <__adddf3+0x124>
 8020238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802023c:	d30c      	bcc.n	8020258 <__adddf3+0x10c>
 802023e:	0849      	lsrs	r1, r1, #1
 8020240:	ea5f 0030 	movs.w	r0, r0, rrx
 8020244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020248:	f104 0401 	add.w	r4, r4, #1
 802024c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020254:	f080 809a 	bcs.w	802038c <__adddf3+0x240>
 8020258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802025c:	bf08      	it	eq
 802025e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020262:	f150 0000 	adcs.w	r0, r0, #0
 8020266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802026a:	ea41 0105 	orr.w	r1, r1, r5
 802026e:	bd30      	pop	{r4, r5, pc}
 8020270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020274:	4140      	adcs	r0, r0
 8020276:	eb41 0101 	adc.w	r1, r1, r1
 802027a:	3c01      	subs	r4, #1
 802027c:	bf28      	it	cs
 802027e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8020282:	d2e9      	bcs.n	8020258 <__adddf3+0x10c>
 8020284:	f091 0f00 	teq	r1, #0
 8020288:	bf04      	itt	eq
 802028a:	4601      	moveq	r1, r0
 802028c:	2000      	moveq	r0, #0
 802028e:	fab1 f381 	clz	r3, r1
 8020292:	bf08      	it	eq
 8020294:	3320      	addeq	r3, #32
 8020296:	f1a3 030b 	sub.w	r3, r3, #11
 802029a:	f1b3 0220 	subs.w	r2, r3, #32
 802029e:	da0c      	bge.n	80202ba <__adddf3+0x16e>
 80202a0:	320c      	adds	r2, #12
 80202a2:	dd08      	ble.n	80202b6 <__adddf3+0x16a>
 80202a4:	f102 0c14 	add.w	ip, r2, #20
 80202a8:	f1c2 020c 	rsb	r2, r2, #12
 80202ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80202b0:	fa21 f102 	lsr.w	r1, r1, r2
 80202b4:	e00c      	b.n	80202d0 <__adddf3+0x184>
 80202b6:	f102 0214 	add.w	r2, r2, #20
 80202ba:	bfd8      	it	le
 80202bc:	f1c2 0c20 	rsble	ip, r2, #32
 80202c0:	fa01 f102 	lsl.w	r1, r1, r2
 80202c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80202c8:	bfdc      	itt	le
 80202ca:	ea41 010c 	orrle.w	r1, r1, ip
 80202ce:	4090      	lslle	r0, r2
 80202d0:	1ae4      	subs	r4, r4, r3
 80202d2:	bfa2      	ittt	ge
 80202d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80202d8:	4329      	orrge	r1, r5
 80202da:	bd30      	popge	{r4, r5, pc}
 80202dc:	ea6f 0404 	mvn.w	r4, r4
 80202e0:	3c1f      	subs	r4, #31
 80202e2:	da1c      	bge.n	802031e <__adddf3+0x1d2>
 80202e4:	340c      	adds	r4, #12
 80202e6:	dc0e      	bgt.n	8020306 <__adddf3+0x1ba>
 80202e8:	f104 0414 	add.w	r4, r4, #20
 80202ec:	f1c4 0220 	rsb	r2, r4, #32
 80202f0:	fa20 f004 	lsr.w	r0, r0, r4
 80202f4:	fa01 f302 	lsl.w	r3, r1, r2
 80202f8:	ea40 0003 	orr.w	r0, r0, r3
 80202fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020300:	ea45 0103 	orr.w	r1, r5, r3
 8020304:	bd30      	pop	{r4, r5, pc}
 8020306:	f1c4 040c 	rsb	r4, r4, #12
 802030a:	f1c4 0220 	rsb	r2, r4, #32
 802030e:	fa20 f002 	lsr.w	r0, r0, r2
 8020312:	fa01 f304 	lsl.w	r3, r1, r4
 8020316:	ea40 0003 	orr.w	r0, r0, r3
 802031a:	4629      	mov	r1, r5
 802031c:	bd30      	pop	{r4, r5, pc}
 802031e:	fa21 f004 	lsr.w	r0, r1, r4
 8020322:	4629      	mov	r1, r5
 8020324:	bd30      	pop	{r4, r5, pc}
 8020326:	f094 0f00 	teq	r4, #0
 802032a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802032e:	bf06      	itte	eq
 8020330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020334:	3401      	addeq	r4, #1
 8020336:	3d01      	subne	r5, #1
 8020338:	e74e      	b.n	80201d8 <__adddf3+0x8c>
 802033a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802033e:	bf18      	it	ne
 8020340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020344:	d029      	beq.n	802039a <__adddf3+0x24e>
 8020346:	ea94 0f05 	teq	r4, r5
 802034a:	bf08      	it	eq
 802034c:	ea90 0f02 	teqeq	r0, r2
 8020350:	d005      	beq.n	802035e <__adddf3+0x212>
 8020352:	ea54 0c00 	orrs.w	ip, r4, r0
 8020356:	bf04      	itt	eq
 8020358:	4619      	moveq	r1, r3
 802035a:	4610      	moveq	r0, r2
 802035c:	bd30      	pop	{r4, r5, pc}
 802035e:	ea91 0f03 	teq	r1, r3
 8020362:	bf1e      	ittt	ne
 8020364:	2100      	movne	r1, #0
 8020366:	2000      	movne	r0, #0
 8020368:	bd30      	popne	{r4, r5, pc}
 802036a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802036e:	d105      	bne.n	802037c <__adddf3+0x230>
 8020370:	0040      	lsls	r0, r0, #1
 8020372:	4149      	adcs	r1, r1
 8020374:	bf28      	it	cs
 8020376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802037a:	bd30      	pop	{r4, r5, pc}
 802037c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020380:	bf3c      	itt	cc
 8020382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020386:	bd30      	popcc	{r4, r5, pc}
 8020388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802038c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020394:	f04f 0000 	mov.w	r0, #0
 8020398:	bd30      	pop	{r4, r5, pc}
 802039a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802039e:	bf1a      	itte	ne
 80203a0:	4619      	movne	r1, r3
 80203a2:	4610      	movne	r0, r2
 80203a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80203a8:	bf1c      	itt	ne
 80203aa:	460b      	movne	r3, r1
 80203ac:	4602      	movne	r2, r0
 80203ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80203b2:	bf06      	itte	eq
 80203b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80203b8:	ea91 0f03 	teqeq	r1, r3
 80203bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80203c0:	bd30      	pop	{r4, r5, pc}
 80203c2:	bf00      	nop

080203c4 <__aeabi_ui2d>:
 80203c4:	f090 0f00 	teq	r0, #0
 80203c8:	bf04      	itt	eq
 80203ca:	2100      	moveq	r1, #0
 80203cc:	4770      	bxeq	lr
 80203ce:	b530      	push	{r4, r5, lr}
 80203d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80203d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80203d8:	f04f 0500 	mov.w	r5, #0
 80203dc:	f04f 0100 	mov.w	r1, #0
 80203e0:	e750      	b.n	8020284 <__adddf3+0x138>
 80203e2:	bf00      	nop

080203e4 <__aeabi_i2d>:
 80203e4:	f090 0f00 	teq	r0, #0
 80203e8:	bf04      	itt	eq
 80203ea:	2100      	moveq	r1, #0
 80203ec:	4770      	bxeq	lr
 80203ee:	b530      	push	{r4, r5, lr}
 80203f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80203f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80203f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80203fc:	bf48      	it	mi
 80203fe:	4240      	negmi	r0, r0
 8020400:	f04f 0100 	mov.w	r1, #0
 8020404:	e73e      	b.n	8020284 <__adddf3+0x138>
 8020406:	bf00      	nop

08020408 <__aeabi_f2d>:
 8020408:	0042      	lsls	r2, r0, #1
 802040a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802040e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020416:	bf1f      	itttt	ne
 8020418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802041c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020424:	4770      	bxne	lr
 8020426:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802042a:	bf08      	it	eq
 802042c:	4770      	bxeq	lr
 802042e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020432:	bf04      	itt	eq
 8020434:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020438:	4770      	bxeq	lr
 802043a:	b530      	push	{r4, r5, lr}
 802043c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020444:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020448:	e71c      	b.n	8020284 <__adddf3+0x138>
 802044a:	bf00      	nop

0802044c <__aeabi_ul2d>:
 802044c:	ea50 0201 	orrs.w	r2, r0, r1
 8020450:	bf08      	it	eq
 8020452:	4770      	bxeq	lr
 8020454:	b530      	push	{r4, r5, lr}
 8020456:	f04f 0500 	mov.w	r5, #0
 802045a:	e00a      	b.n	8020472 <__aeabi_l2d+0x16>

0802045c <__aeabi_l2d>:
 802045c:	ea50 0201 	orrs.w	r2, r0, r1
 8020460:	bf08      	it	eq
 8020462:	4770      	bxeq	lr
 8020464:	b530      	push	{r4, r5, lr}
 8020466:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802046a:	d502      	bpl.n	8020472 <__aeabi_l2d+0x16>
 802046c:	4240      	negs	r0, r0
 802046e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020472:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020476:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802047a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802047e:	f43f aed8 	beq.w	8020232 <__adddf3+0xe6>
 8020482:	f04f 0203 	mov.w	r2, #3
 8020486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802048a:	bf18      	it	ne
 802048c:	3203      	addne	r2, #3
 802048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020492:	bf18      	it	ne
 8020494:	3203      	addne	r2, #3
 8020496:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802049a:	f1c2 0320 	rsb	r3, r2, #32
 802049e:	fa00 fc03 	lsl.w	ip, r0, r3
 80204a2:	fa20 f002 	lsr.w	r0, r0, r2
 80204a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80204aa:	ea40 000e 	orr.w	r0, r0, lr
 80204ae:	fa21 f102 	lsr.w	r1, r1, r2
 80204b2:	4414      	add	r4, r2
 80204b4:	e6bd      	b.n	8020232 <__adddf3+0xe6>
 80204b6:	bf00      	nop

080204b8 <__aeabi_dmul>:
 80204b8:	b570      	push	{r4, r5, r6, lr}
 80204ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80204be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80204c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80204c6:	bf1d      	ittte	ne
 80204c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80204cc:	ea94 0f0c 	teqne	r4, ip
 80204d0:	ea95 0f0c 	teqne	r5, ip
 80204d4:	f000 f8de 	bleq	8020694 <__aeabi_dmul+0x1dc>
 80204d8:	442c      	add	r4, r5
 80204da:	ea81 0603 	eor.w	r6, r1, r3
 80204de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80204e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80204e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80204ea:	bf18      	it	ne
 80204ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80204f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80204f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80204f8:	d038      	beq.n	802056c <__aeabi_dmul+0xb4>
 80204fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80204fe:	f04f 0500 	mov.w	r5, #0
 8020502:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020506:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802050a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802050e:	f04f 0600 	mov.w	r6, #0
 8020512:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020516:	f09c 0f00 	teq	ip, #0
 802051a:	bf18      	it	ne
 802051c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020520:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020524:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020528:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802052c:	d204      	bcs.n	8020538 <__aeabi_dmul+0x80>
 802052e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020532:	416d      	adcs	r5, r5
 8020534:	eb46 0606 	adc.w	r6, r6, r6
 8020538:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802053c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020540:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020544:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020548:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802054c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020550:	bf88      	it	hi
 8020552:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020556:	d81e      	bhi.n	8020596 <__aeabi_dmul+0xde>
 8020558:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802055c:	bf08      	it	eq
 802055e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020562:	f150 0000 	adcs.w	r0, r0, #0
 8020566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802056a:	bd70      	pop	{r4, r5, r6, pc}
 802056c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020570:	ea46 0101 	orr.w	r1, r6, r1
 8020574:	ea40 0002 	orr.w	r0, r0, r2
 8020578:	ea81 0103 	eor.w	r1, r1, r3
 802057c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020580:	bfc2      	ittt	gt
 8020582:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020586:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802058a:	bd70      	popgt	{r4, r5, r6, pc}
 802058c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020590:	f04f 0e00 	mov.w	lr, #0
 8020594:	3c01      	subs	r4, #1
 8020596:	f300 80ab 	bgt.w	80206f0 <__aeabi_dmul+0x238>
 802059a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802059e:	bfde      	ittt	le
 80205a0:	2000      	movle	r0, #0
 80205a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80205a6:	bd70      	pople	{r4, r5, r6, pc}
 80205a8:	f1c4 0400 	rsb	r4, r4, #0
 80205ac:	3c20      	subs	r4, #32
 80205ae:	da35      	bge.n	802061c <__aeabi_dmul+0x164>
 80205b0:	340c      	adds	r4, #12
 80205b2:	dc1b      	bgt.n	80205ec <__aeabi_dmul+0x134>
 80205b4:	f104 0414 	add.w	r4, r4, #20
 80205b8:	f1c4 0520 	rsb	r5, r4, #32
 80205bc:	fa00 f305 	lsl.w	r3, r0, r5
 80205c0:	fa20 f004 	lsr.w	r0, r0, r4
 80205c4:	fa01 f205 	lsl.w	r2, r1, r5
 80205c8:	ea40 0002 	orr.w	r0, r0, r2
 80205cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80205d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80205d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80205d8:	fa21 f604 	lsr.w	r6, r1, r4
 80205dc:	eb42 0106 	adc.w	r1, r2, r6
 80205e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80205e4:	bf08      	it	eq
 80205e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80205ea:	bd70      	pop	{r4, r5, r6, pc}
 80205ec:	f1c4 040c 	rsb	r4, r4, #12
 80205f0:	f1c4 0520 	rsb	r5, r4, #32
 80205f4:	fa00 f304 	lsl.w	r3, r0, r4
 80205f8:	fa20 f005 	lsr.w	r0, r0, r5
 80205fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020600:	ea40 0002 	orr.w	r0, r0, r2
 8020604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802060c:	f141 0100 	adc.w	r1, r1, #0
 8020610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020614:	bf08      	it	eq
 8020616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802061a:	bd70      	pop	{r4, r5, r6, pc}
 802061c:	f1c4 0520 	rsb	r5, r4, #32
 8020620:	fa00 f205 	lsl.w	r2, r0, r5
 8020624:	ea4e 0e02 	orr.w	lr, lr, r2
 8020628:	fa20 f304 	lsr.w	r3, r0, r4
 802062c:	fa01 f205 	lsl.w	r2, r1, r5
 8020630:	ea43 0302 	orr.w	r3, r3, r2
 8020634:	fa21 f004 	lsr.w	r0, r1, r4
 8020638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802063c:	fa21 f204 	lsr.w	r2, r1, r4
 8020640:	ea20 0002 	bic.w	r0, r0, r2
 8020644:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802064c:	bf08      	it	eq
 802064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020652:	bd70      	pop	{r4, r5, r6, pc}
 8020654:	f094 0f00 	teq	r4, #0
 8020658:	d10f      	bne.n	802067a <__aeabi_dmul+0x1c2>
 802065a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802065e:	0040      	lsls	r0, r0, #1
 8020660:	eb41 0101 	adc.w	r1, r1, r1
 8020664:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020668:	bf08      	it	eq
 802066a:	3c01      	subeq	r4, #1
 802066c:	d0f7      	beq.n	802065e <__aeabi_dmul+0x1a6>
 802066e:	ea41 0106 	orr.w	r1, r1, r6
 8020672:	f095 0f00 	teq	r5, #0
 8020676:	bf18      	it	ne
 8020678:	4770      	bxne	lr
 802067a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802067e:	0052      	lsls	r2, r2, #1
 8020680:	eb43 0303 	adc.w	r3, r3, r3
 8020684:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020688:	bf08      	it	eq
 802068a:	3d01      	subeq	r5, #1
 802068c:	d0f7      	beq.n	802067e <__aeabi_dmul+0x1c6>
 802068e:	ea43 0306 	orr.w	r3, r3, r6
 8020692:	4770      	bx	lr
 8020694:	ea94 0f0c 	teq	r4, ip
 8020698:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802069c:	bf18      	it	ne
 802069e:	ea95 0f0c 	teqne	r5, ip
 80206a2:	d00c      	beq.n	80206be <__aeabi_dmul+0x206>
 80206a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80206a8:	bf18      	it	ne
 80206aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80206ae:	d1d1      	bne.n	8020654 <__aeabi_dmul+0x19c>
 80206b0:	ea81 0103 	eor.w	r1, r1, r3
 80206b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80206b8:	f04f 0000 	mov.w	r0, #0
 80206bc:	bd70      	pop	{r4, r5, r6, pc}
 80206be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80206c2:	bf06      	itte	eq
 80206c4:	4610      	moveq	r0, r2
 80206c6:	4619      	moveq	r1, r3
 80206c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80206cc:	d019      	beq.n	8020702 <__aeabi_dmul+0x24a>
 80206ce:	ea94 0f0c 	teq	r4, ip
 80206d2:	d102      	bne.n	80206da <__aeabi_dmul+0x222>
 80206d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80206d8:	d113      	bne.n	8020702 <__aeabi_dmul+0x24a>
 80206da:	ea95 0f0c 	teq	r5, ip
 80206de:	d105      	bne.n	80206ec <__aeabi_dmul+0x234>
 80206e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80206e4:	bf1c      	itt	ne
 80206e6:	4610      	movne	r0, r2
 80206e8:	4619      	movne	r1, r3
 80206ea:	d10a      	bne.n	8020702 <__aeabi_dmul+0x24a>
 80206ec:	ea81 0103 	eor.w	r1, r1, r3
 80206f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80206f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80206f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80206fc:	f04f 0000 	mov.w	r0, #0
 8020700:	bd70      	pop	{r4, r5, r6, pc}
 8020702:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020706:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802070a:	bd70      	pop	{r4, r5, r6, pc}

0802070c <__aeabi_ddiv>:
 802070c:	b570      	push	{r4, r5, r6, lr}
 802070e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020712:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020716:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802071a:	bf1d      	ittte	ne
 802071c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020720:	ea94 0f0c 	teqne	r4, ip
 8020724:	ea95 0f0c 	teqne	r5, ip
 8020728:	f000 f8a7 	bleq	802087a <__aeabi_ddiv+0x16e>
 802072c:	eba4 0405 	sub.w	r4, r4, r5
 8020730:	ea81 0e03 	eor.w	lr, r1, r3
 8020734:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020738:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802073c:	f000 8088 	beq.w	8020850 <__aeabi_ddiv+0x144>
 8020740:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020744:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020748:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802074c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020750:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020754:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020758:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802075c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020760:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020764:	429d      	cmp	r5, r3
 8020766:	bf08      	it	eq
 8020768:	4296      	cmpeq	r6, r2
 802076a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802076e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020772:	d202      	bcs.n	802077a <__aeabi_ddiv+0x6e>
 8020774:	085b      	lsrs	r3, r3, #1
 8020776:	ea4f 0232 	mov.w	r2, r2, rrx
 802077a:	1ab6      	subs	r6, r6, r2
 802077c:	eb65 0503 	sbc.w	r5, r5, r3
 8020780:	085b      	lsrs	r3, r3, #1
 8020782:	ea4f 0232 	mov.w	r2, r2, rrx
 8020786:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802078a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802078e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020796:	bf22      	ittt	cs
 8020798:	1ab6      	subcs	r6, r6, r2
 802079a:	4675      	movcs	r5, lr
 802079c:	ea40 000c 	orrcs.w	r0, r0, ip
 80207a0:	085b      	lsrs	r3, r3, #1
 80207a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80207a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80207aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207ae:	bf22      	ittt	cs
 80207b0:	1ab6      	subcs	r6, r6, r2
 80207b2:	4675      	movcs	r5, lr
 80207b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80207b8:	085b      	lsrs	r3, r3, #1
 80207ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80207be:	ebb6 0e02 	subs.w	lr, r6, r2
 80207c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207c6:	bf22      	ittt	cs
 80207c8:	1ab6      	subcs	r6, r6, r2
 80207ca:	4675      	movcs	r5, lr
 80207cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80207d0:	085b      	lsrs	r3, r3, #1
 80207d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80207d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80207da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207de:	bf22      	ittt	cs
 80207e0:	1ab6      	subcs	r6, r6, r2
 80207e2:	4675      	movcs	r5, lr
 80207e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80207e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80207ec:	d018      	beq.n	8020820 <__aeabi_ddiv+0x114>
 80207ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80207f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80207f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80207fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80207fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020802:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020806:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802080a:	d1c0      	bne.n	802078e <__aeabi_ddiv+0x82>
 802080c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020810:	d10b      	bne.n	802082a <__aeabi_ddiv+0x11e>
 8020812:	ea41 0100 	orr.w	r1, r1, r0
 8020816:	f04f 0000 	mov.w	r0, #0
 802081a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802081e:	e7b6      	b.n	802078e <__aeabi_ddiv+0x82>
 8020820:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020824:	bf04      	itt	eq
 8020826:	4301      	orreq	r1, r0
 8020828:	2000      	moveq	r0, #0
 802082a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802082e:	bf88      	it	hi
 8020830:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020834:	f63f aeaf 	bhi.w	8020596 <__aeabi_dmul+0xde>
 8020838:	ebb5 0c03 	subs.w	ip, r5, r3
 802083c:	bf04      	itt	eq
 802083e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020842:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020846:	f150 0000 	adcs.w	r0, r0, #0
 802084a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802084e:	bd70      	pop	{r4, r5, r6, pc}
 8020850:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020854:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020858:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802085c:	bfc2      	ittt	gt
 802085e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020862:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020866:	bd70      	popgt	{r4, r5, r6, pc}
 8020868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802086c:	f04f 0e00 	mov.w	lr, #0
 8020870:	3c01      	subs	r4, #1
 8020872:	e690      	b.n	8020596 <__aeabi_dmul+0xde>
 8020874:	ea45 0e06 	orr.w	lr, r5, r6
 8020878:	e68d      	b.n	8020596 <__aeabi_dmul+0xde>
 802087a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802087e:	ea94 0f0c 	teq	r4, ip
 8020882:	bf08      	it	eq
 8020884:	ea95 0f0c 	teqeq	r5, ip
 8020888:	f43f af3b 	beq.w	8020702 <__aeabi_dmul+0x24a>
 802088c:	ea94 0f0c 	teq	r4, ip
 8020890:	d10a      	bne.n	80208a8 <__aeabi_ddiv+0x19c>
 8020892:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020896:	f47f af34 	bne.w	8020702 <__aeabi_dmul+0x24a>
 802089a:	ea95 0f0c 	teq	r5, ip
 802089e:	f47f af25 	bne.w	80206ec <__aeabi_dmul+0x234>
 80208a2:	4610      	mov	r0, r2
 80208a4:	4619      	mov	r1, r3
 80208a6:	e72c      	b.n	8020702 <__aeabi_dmul+0x24a>
 80208a8:	ea95 0f0c 	teq	r5, ip
 80208ac:	d106      	bne.n	80208bc <__aeabi_ddiv+0x1b0>
 80208ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208b2:	f43f aefd 	beq.w	80206b0 <__aeabi_dmul+0x1f8>
 80208b6:	4610      	mov	r0, r2
 80208b8:	4619      	mov	r1, r3
 80208ba:	e722      	b.n	8020702 <__aeabi_dmul+0x24a>
 80208bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80208c0:	bf18      	it	ne
 80208c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80208c6:	f47f aec5 	bne.w	8020654 <__aeabi_dmul+0x19c>
 80208ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80208ce:	f47f af0d 	bne.w	80206ec <__aeabi_dmul+0x234>
 80208d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80208d6:	f47f aeeb 	bne.w	80206b0 <__aeabi_dmul+0x1f8>
 80208da:	e712      	b.n	8020702 <__aeabi_dmul+0x24a>

080208dc <__gedf2>:
 80208dc:	f04f 3cff 	mov.w	ip, #4294967295
 80208e0:	e006      	b.n	80208f0 <__cmpdf2+0x4>
 80208e2:	bf00      	nop

080208e4 <__ledf2>:
 80208e4:	f04f 0c01 	mov.w	ip, #1
 80208e8:	e002      	b.n	80208f0 <__cmpdf2+0x4>
 80208ea:	bf00      	nop

080208ec <__cmpdf2>:
 80208ec:	f04f 0c01 	mov.w	ip, #1
 80208f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80208f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80208f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80208fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020900:	bf18      	it	ne
 8020902:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020906:	d01b      	beq.n	8020940 <__cmpdf2+0x54>
 8020908:	b001      	add	sp, #4
 802090a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802090e:	bf0c      	ite	eq
 8020910:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020914:	ea91 0f03 	teqne	r1, r3
 8020918:	bf02      	ittt	eq
 802091a:	ea90 0f02 	teqeq	r0, r2
 802091e:	2000      	moveq	r0, #0
 8020920:	4770      	bxeq	lr
 8020922:	f110 0f00 	cmn.w	r0, #0
 8020926:	ea91 0f03 	teq	r1, r3
 802092a:	bf58      	it	pl
 802092c:	4299      	cmppl	r1, r3
 802092e:	bf08      	it	eq
 8020930:	4290      	cmpeq	r0, r2
 8020932:	bf2c      	ite	cs
 8020934:	17d8      	asrcs	r0, r3, #31
 8020936:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802093a:	f040 0001 	orr.w	r0, r0, #1
 802093e:	4770      	bx	lr
 8020940:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020948:	d102      	bne.n	8020950 <__cmpdf2+0x64>
 802094a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802094e:	d107      	bne.n	8020960 <__cmpdf2+0x74>
 8020950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020958:	d1d6      	bne.n	8020908 <__cmpdf2+0x1c>
 802095a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802095e:	d0d3      	beq.n	8020908 <__cmpdf2+0x1c>
 8020960:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020964:	4770      	bx	lr
 8020966:	bf00      	nop

08020968 <__aeabi_cdrcmple>:
 8020968:	4684      	mov	ip, r0
 802096a:	4610      	mov	r0, r2
 802096c:	4662      	mov	r2, ip
 802096e:	468c      	mov	ip, r1
 8020970:	4619      	mov	r1, r3
 8020972:	4663      	mov	r3, ip
 8020974:	e000      	b.n	8020978 <__aeabi_cdcmpeq>
 8020976:	bf00      	nop

08020978 <__aeabi_cdcmpeq>:
 8020978:	b501      	push	{r0, lr}
 802097a:	f7ff ffb7 	bl	80208ec <__cmpdf2>
 802097e:	2800      	cmp	r0, #0
 8020980:	bf48      	it	mi
 8020982:	f110 0f00 	cmnmi.w	r0, #0
 8020986:	bd01      	pop	{r0, pc}

08020988 <__aeabi_dcmpeq>:
 8020988:	f84d ed08 	str.w	lr, [sp, #-8]!
 802098c:	f7ff fff4 	bl	8020978 <__aeabi_cdcmpeq>
 8020990:	bf0c      	ite	eq
 8020992:	2001      	moveq	r0, #1
 8020994:	2000      	movne	r0, #0
 8020996:	f85d fb08 	ldr.w	pc, [sp], #8
 802099a:	bf00      	nop

0802099c <__aeabi_dcmplt>:
 802099c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209a0:	f7ff ffea 	bl	8020978 <__aeabi_cdcmpeq>
 80209a4:	bf34      	ite	cc
 80209a6:	2001      	movcc	r0, #1
 80209a8:	2000      	movcs	r0, #0
 80209aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80209ae:	bf00      	nop

080209b0 <__aeabi_dcmple>:
 80209b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209b4:	f7ff ffe0 	bl	8020978 <__aeabi_cdcmpeq>
 80209b8:	bf94      	ite	ls
 80209ba:	2001      	movls	r0, #1
 80209bc:	2000      	movhi	r0, #0
 80209be:	f85d fb08 	ldr.w	pc, [sp], #8
 80209c2:	bf00      	nop

080209c4 <__aeabi_dcmpge>:
 80209c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209c8:	f7ff ffce 	bl	8020968 <__aeabi_cdrcmple>
 80209cc:	bf94      	ite	ls
 80209ce:	2001      	movls	r0, #1
 80209d0:	2000      	movhi	r0, #0
 80209d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80209d6:	bf00      	nop

080209d8 <__aeabi_dcmpgt>:
 80209d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209dc:	f7ff ffc4 	bl	8020968 <__aeabi_cdrcmple>
 80209e0:	bf34      	ite	cc
 80209e2:	2001      	movcc	r0, #1
 80209e4:	2000      	movcs	r0, #0
 80209e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80209ea:	bf00      	nop

080209ec <__aeabi_dcmpun>:
 80209ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80209f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80209f4:	d102      	bne.n	80209fc <__aeabi_dcmpun+0x10>
 80209f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80209fa:	d10a      	bne.n	8020a12 <__aeabi_dcmpun+0x26>
 80209fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a04:	d102      	bne.n	8020a0c <__aeabi_dcmpun+0x20>
 8020a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020a0a:	d102      	bne.n	8020a12 <__aeabi_dcmpun+0x26>
 8020a0c:	f04f 0000 	mov.w	r0, #0
 8020a10:	4770      	bx	lr
 8020a12:	f04f 0001 	mov.w	r0, #1
 8020a16:	4770      	bx	lr

08020a18 <__aeabi_d2iz>:
 8020a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020a20:	d215      	bcs.n	8020a4e <__aeabi_d2iz+0x36>
 8020a22:	d511      	bpl.n	8020a48 <__aeabi_d2iz+0x30>
 8020a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020a2c:	d912      	bls.n	8020a54 <__aeabi_d2iz+0x3c>
 8020a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8020a42:	bf18      	it	ne
 8020a44:	4240      	negne	r0, r0
 8020a46:	4770      	bx	lr
 8020a48:	f04f 0000 	mov.w	r0, #0
 8020a4c:	4770      	bx	lr
 8020a4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020a52:	d105      	bne.n	8020a60 <__aeabi_d2iz+0x48>
 8020a54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020a58:	bf08      	it	eq
 8020a5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020a5e:	4770      	bx	lr
 8020a60:	f04f 0000 	mov.w	r0, #0
 8020a64:	4770      	bx	lr
 8020a66:	bf00      	nop

08020a68 <__aeabi_d2f>:
 8020a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020a70:	bf24      	itt	cs
 8020a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020a7a:	d90d      	bls.n	8020a98 <__aeabi_d2f+0x30>
 8020a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020a90:	bf08      	it	eq
 8020a92:	f020 0001 	biceq.w	r0, r0, #1
 8020a96:	4770      	bx	lr
 8020a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020a9c:	d121      	bne.n	8020ae2 <__aeabi_d2f+0x7a>
 8020a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020aa2:	bfbc      	itt	lt
 8020aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020aa8:	4770      	bxlt	lr
 8020aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020ab2:	f1c2 0218 	rsb	r2, r2, #24
 8020ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8020aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8020abe:	fa20 f002 	lsr.w	r0, r0, r2
 8020ac2:	bf18      	it	ne
 8020ac4:	f040 0001 	orrne.w	r0, r0, #1
 8020ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020ad4:	ea40 000c 	orr.w	r0, r0, ip
 8020ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8020adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020ae0:	e7cc      	b.n	8020a7c <__aeabi_d2f+0x14>
 8020ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020ae6:	d107      	bne.n	8020af8 <__aeabi_d2f+0x90>
 8020ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020aec:	bf1e      	ittt	ne
 8020aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020af6:	4770      	bxne	lr
 8020af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020b04:	4770      	bx	lr
 8020b06:	bf00      	nop

08020b08 <__aeabi_uldivmod>:
 8020b08:	b953      	cbnz	r3, 8020b20 <__aeabi_uldivmod+0x18>
 8020b0a:	b94a      	cbnz	r2, 8020b20 <__aeabi_uldivmod+0x18>
 8020b0c:	2900      	cmp	r1, #0
 8020b0e:	bf08      	it	eq
 8020b10:	2800      	cmpeq	r0, #0
 8020b12:	bf1c      	itt	ne
 8020b14:	f04f 31ff 	movne.w	r1, #4294967295
 8020b18:	f04f 30ff 	movne.w	r0, #4294967295
 8020b1c:	f000 b974 	b.w	8020e08 <__aeabi_idiv0>
 8020b20:	f1ad 0c08 	sub.w	ip, sp, #8
 8020b24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020b28:	f000 f806 	bl	8020b38 <__udivmoddi4>
 8020b2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020b34:	b004      	add	sp, #16
 8020b36:	4770      	bx	lr

08020b38 <__udivmoddi4>:
 8020b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b3c:	9d08      	ldr	r5, [sp, #32]
 8020b3e:	4604      	mov	r4, r0
 8020b40:	468e      	mov	lr, r1
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d14d      	bne.n	8020be2 <__udivmoddi4+0xaa>
 8020b46:	428a      	cmp	r2, r1
 8020b48:	4694      	mov	ip, r2
 8020b4a:	d969      	bls.n	8020c20 <__udivmoddi4+0xe8>
 8020b4c:	fab2 f282 	clz	r2, r2
 8020b50:	b152      	cbz	r2, 8020b68 <__udivmoddi4+0x30>
 8020b52:	fa01 f302 	lsl.w	r3, r1, r2
 8020b56:	f1c2 0120 	rsb	r1, r2, #32
 8020b5a:	fa20 f101 	lsr.w	r1, r0, r1
 8020b5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8020b62:	ea41 0e03 	orr.w	lr, r1, r3
 8020b66:	4094      	lsls	r4, r2
 8020b68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020b6c:	0c21      	lsrs	r1, r4, #16
 8020b6e:	fbbe f6f8 	udiv	r6, lr, r8
 8020b72:	fa1f f78c 	uxth.w	r7, ip
 8020b76:	fb08 e316 	mls	r3, r8, r6, lr
 8020b7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020b7e:	fb06 f107 	mul.w	r1, r6, r7
 8020b82:	4299      	cmp	r1, r3
 8020b84:	d90a      	bls.n	8020b9c <__udivmoddi4+0x64>
 8020b86:	eb1c 0303 	adds.w	r3, ip, r3
 8020b8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8020b8e:	f080 811f 	bcs.w	8020dd0 <__udivmoddi4+0x298>
 8020b92:	4299      	cmp	r1, r3
 8020b94:	f240 811c 	bls.w	8020dd0 <__udivmoddi4+0x298>
 8020b98:	3e02      	subs	r6, #2
 8020b9a:	4463      	add	r3, ip
 8020b9c:	1a5b      	subs	r3, r3, r1
 8020b9e:	b2a4      	uxth	r4, r4
 8020ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8020ba4:	fb08 3310 	mls	r3, r8, r0, r3
 8020ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020bac:	fb00 f707 	mul.w	r7, r0, r7
 8020bb0:	42a7      	cmp	r7, r4
 8020bb2:	d90a      	bls.n	8020bca <__udivmoddi4+0x92>
 8020bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8020bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8020bbc:	f080 810a 	bcs.w	8020dd4 <__udivmoddi4+0x29c>
 8020bc0:	42a7      	cmp	r7, r4
 8020bc2:	f240 8107 	bls.w	8020dd4 <__udivmoddi4+0x29c>
 8020bc6:	4464      	add	r4, ip
 8020bc8:	3802      	subs	r0, #2
 8020bca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020bce:	1be4      	subs	r4, r4, r7
 8020bd0:	2600      	movs	r6, #0
 8020bd2:	b11d      	cbz	r5, 8020bdc <__udivmoddi4+0xa4>
 8020bd4:	40d4      	lsrs	r4, r2
 8020bd6:	2300      	movs	r3, #0
 8020bd8:	e9c5 4300 	strd	r4, r3, [r5]
 8020bdc:	4631      	mov	r1, r6
 8020bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020be2:	428b      	cmp	r3, r1
 8020be4:	d909      	bls.n	8020bfa <__udivmoddi4+0xc2>
 8020be6:	2d00      	cmp	r5, #0
 8020be8:	f000 80ef 	beq.w	8020dca <__udivmoddi4+0x292>
 8020bec:	2600      	movs	r6, #0
 8020bee:	e9c5 0100 	strd	r0, r1, [r5]
 8020bf2:	4630      	mov	r0, r6
 8020bf4:	4631      	mov	r1, r6
 8020bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bfa:	fab3 f683 	clz	r6, r3
 8020bfe:	2e00      	cmp	r6, #0
 8020c00:	d14a      	bne.n	8020c98 <__udivmoddi4+0x160>
 8020c02:	428b      	cmp	r3, r1
 8020c04:	d302      	bcc.n	8020c0c <__udivmoddi4+0xd4>
 8020c06:	4282      	cmp	r2, r0
 8020c08:	f200 80f9 	bhi.w	8020dfe <__udivmoddi4+0x2c6>
 8020c0c:	1a84      	subs	r4, r0, r2
 8020c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8020c12:	2001      	movs	r0, #1
 8020c14:	469e      	mov	lr, r3
 8020c16:	2d00      	cmp	r5, #0
 8020c18:	d0e0      	beq.n	8020bdc <__udivmoddi4+0xa4>
 8020c1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8020c1e:	e7dd      	b.n	8020bdc <__udivmoddi4+0xa4>
 8020c20:	b902      	cbnz	r2, 8020c24 <__udivmoddi4+0xec>
 8020c22:	deff      	udf	#255	; 0xff
 8020c24:	fab2 f282 	clz	r2, r2
 8020c28:	2a00      	cmp	r2, #0
 8020c2a:	f040 8092 	bne.w	8020d52 <__udivmoddi4+0x21a>
 8020c2e:	eba1 010c 	sub.w	r1, r1, ip
 8020c32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020c36:	fa1f fe8c 	uxth.w	lr, ip
 8020c3a:	2601      	movs	r6, #1
 8020c3c:	0c20      	lsrs	r0, r4, #16
 8020c3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8020c42:	fb07 1113 	mls	r1, r7, r3, r1
 8020c46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020c4a:	fb0e f003 	mul.w	r0, lr, r3
 8020c4e:	4288      	cmp	r0, r1
 8020c50:	d908      	bls.n	8020c64 <__udivmoddi4+0x12c>
 8020c52:	eb1c 0101 	adds.w	r1, ip, r1
 8020c56:	f103 38ff 	add.w	r8, r3, #4294967295
 8020c5a:	d202      	bcs.n	8020c62 <__udivmoddi4+0x12a>
 8020c5c:	4288      	cmp	r0, r1
 8020c5e:	f200 80cb 	bhi.w	8020df8 <__udivmoddi4+0x2c0>
 8020c62:	4643      	mov	r3, r8
 8020c64:	1a09      	subs	r1, r1, r0
 8020c66:	b2a4      	uxth	r4, r4
 8020c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8020c6c:	fb07 1110 	mls	r1, r7, r0, r1
 8020c70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8020c74:	fb0e fe00 	mul.w	lr, lr, r0
 8020c78:	45a6      	cmp	lr, r4
 8020c7a:	d908      	bls.n	8020c8e <__udivmoddi4+0x156>
 8020c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8020c80:	f100 31ff 	add.w	r1, r0, #4294967295
 8020c84:	d202      	bcs.n	8020c8c <__udivmoddi4+0x154>
 8020c86:	45a6      	cmp	lr, r4
 8020c88:	f200 80bb 	bhi.w	8020e02 <__udivmoddi4+0x2ca>
 8020c8c:	4608      	mov	r0, r1
 8020c8e:	eba4 040e 	sub.w	r4, r4, lr
 8020c92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8020c96:	e79c      	b.n	8020bd2 <__udivmoddi4+0x9a>
 8020c98:	f1c6 0720 	rsb	r7, r6, #32
 8020c9c:	40b3      	lsls	r3, r6
 8020c9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8020ca2:	ea4c 0c03 	orr.w	ip, ip, r3
 8020ca6:	fa20 f407 	lsr.w	r4, r0, r7
 8020caa:	fa01 f306 	lsl.w	r3, r1, r6
 8020cae:	431c      	orrs	r4, r3
 8020cb0:	40f9      	lsrs	r1, r7
 8020cb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8020cb6:	fa00 f306 	lsl.w	r3, r0, r6
 8020cba:	fbb1 f8f9 	udiv	r8, r1, r9
 8020cbe:	0c20      	lsrs	r0, r4, #16
 8020cc0:	fa1f fe8c 	uxth.w	lr, ip
 8020cc4:	fb09 1118 	mls	r1, r9, r8, r1
 8020cc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020ccc:	fb08 f00e 	mul.w	r0, r8, lr
 8020cd0:	4288      	cmp	r0, r1
 8020cd2:	fa02 f206 	lsl.w	r2, r2, r6
 8020cd6:	d90b      	bls.n	8020cf0 <__udivmoddi4+0x1b8>
 8020cd8:	eb1c 0101 	adds.w	r1, ip, r1
 8020cdc:	f108 3aff 	add.w	sl, r8, #4294967295
 8020ce0:	f080 8088 	bcs.w	8020df4 <__udivmoddi4+0x2bc>
 8020ce4:	4288      	cmp	r0, r1
 8020ce6:	f240 8085 	bls.w	8020df4 <__udivmoddi4+0x2bc>
 8020cea:	f1a8 0802 	sub.w	r8, r8, #2
 8020cee:	4461      	add	r1, ip
 8020cf0:	1a09      	subs	r1, r1, r0
 8020cf2:	b2a4      	uxth	r4, r4
 8020cf4:	fbb1 f0f9 	udiv	r0, r1, r9
 8020cf8:	fb09 1110 	mls	r1, r9, r0, r1
 8020cfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020d00:	fb00 fe0e 	mul.w	lr, r0, lr
 8020d04:	458e      	cmp	lr, r1
 8020d06:	d908      	bls.n	8020d1a <__udivmoddi4+0x1e2>
 8020d08:	eb1c 0101 	adds.w	r1, ip, r1
 8020d0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8020d10:	d26c      	bcs.n	8020dec <__udivmoddi4+0x2b4>
 8020d12:	458e      	cmp	lr, r1
 8020d14:	d96a      	bls.n	8020dec <__udivmoddi4+0x2b4>
 8020d16:	3802      	subs	r0, #2
 8020d18:	4461      	add	r1, ip
 8020d1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020d1e:	fba0 9402 	umull	r9, r4, r0, r2
 8020d22:	eba1 010e 	sub.w	r1, r1, lr
 8020d26:	42a1      	cmp	r1, r4
 8020d28:	46c8      	mov	r8, r9
 8020d2a:	46a6      	mov	lr, r4
 8020d2c:	d356      	bcc.n	8020ddc <__udivmoddi4+0x2a4>
 8020d2e:	d053      	beq.n	8020dd8 <__udivmoddi4+0x2a0>
 8020d30:	b15d      	cbz	r5, 8020d4a <__udivmoddi4+0x212>
 8020d32:	ebb3 0208 	subs.w	r2, r3, r8
 8020d36:	eb61 010e 	sbc.w	r1, r1, lr
 8020d3a:	fa01 f707 	lsl.w	r7, r1, r7
 8020d3e:	fa22 f306 	lsr.w	r3, r2, r6
 8020d42:	40f1      	lsrs	r1, r6
 8020d44:	431f      	orrs	r7, r3
 8020d46:	e9c5 7100 	strd	r7, r1, [r5]
 8020d4a:	2600      	movs	r6, #0
 8020d4c:	4631      	mov	r1, r6
 8020d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d52:	f1c2 0320 	rsb	r3, r2, #32
 8020d56:	40d8      	lsrs	r0, r3
 8020d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8020d5c:	fa21 f303 	lsr.w	r3, r1, r3
 8020d60:	4091      	lsls	r1, r2
 8020d62:	4301      	orrs	r1, r0
 8020d64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020d68:	fa1f fe8c 	uxth.w	lr, ip
 8020d6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8020d70:	fb07 3610 	mls	r6, r7, r0, r3
 8020d74:	0c0b      	lsrs	r3, r1, #16
 8020d76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020d7a:	fb00 f60e 	mul.w	r6, r0, lr
 8020d7e:	429e      	cmp	r6, r3
 8020d80:	fa04 f402 	lsl.w	r4, r4, r2
 8020d84:	d908      	bls.n	8020d98 <__udivmoddi4+0x260>
 8020d86:	eb1c 0303 	adds.w	r3, ip, r3
 8020d8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8020d8e:	d22f      	bcs.n	8020df0 <__udivmoddi4+0x2b8>
 8020d90:	429e      	cmp	r6, r3
 8020d92:	d92d      	bls.n	8020df0 <__udivmoddi4+0x2b8>
 8020d94:	3802      	subs	r0, #2
 8020d96:	4463      	add	r3, ip
 8020d98:	1b9b      	subs	r3, r3, r6
 8020d9a:	b289      	uxth	r1, r1
 8020d9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8020da0:	fb07 3316 	mls	r3, r7, r6, r3
 8020da4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020da8:	fb06 f30e 	mul.w	r3, r6, lr
 8020dac:	428b      	cmp	r3, r1
 8020dae:	d908      	bls.n	8020dc2 <__udivmoddi4+0x28a>
 8020db0:	eb1c 0101 	adds.w	r1, ip, r1
 8020db4:	f106 38ff 	add.w	r8, r6, #4294967295
 8020db8:	d216      	bcs.n	8020de8 <__udivmoddi4+0x2b0>
 8020dba:	428b      	cmp	r3, r1
 8020dbc:	d914      	bls.n	8020de8 <__udivmoddi4+0x2b0>
 8020dbe:	3e02      	subs	r6, #2
 8020dc0:	4461      	add	r1, ip
 8020dc2:	1ac9      	subs	r1, r1, r3
 8020dc4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020dc8:	e738      	b.n	8020c3c <__udivmoddi4+0x104>
 8020dca:	462e      	mov	r6, r5
 8020dcc:	4628      	mov	r0, r5
 8020dce:	e705      	b.n	8020bdc <__udivmoddi4+0xa4>
 8020dd0:	4606      	mov	r6, r0
 8020dd2:	e6e3      	b.n	8020b9c <__udivmoddi4+0x64>
 8020dd4:	4618      	mov	r0, r3
 8020dd6:	e6f8      	b.n	8020bca <__udivmoddi4+0x92>
 8020dd8:	454b      	cmp	r3, r9
 8020dda:	d2a9      	bcs.n	8020d30 <__udivmoddi4+0x1f8>
 8020ddc:	ebb9 0802 	subs.w	r8, r9, r2
 8020de0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8020de4:	3801      	subs	r0, #1
 8020de6:	e7a3      	b.n	8020d30 <__udivmoddi4+0x1f8>
 8020de8:	4646      	mov	r6, r8
 8020dea:	e7ea      	b.n	8020dc2 <__udivmoddi4+0x28a>
 8020dec:	4620      	mov	r0, r4
 8020dee:	e794      	b.n	8020d1a <__udivmoddi4+0x1e2>
 8020df0:	4640      	mov	r0, r8
 8020df2:	e7d1      	b.n	8020d98 <__udivmoddi4+0x260>
 8020df4:	46d0      	mov	r8, sl
 8020df6:	e77b      	b.n	8020cf0 <__udivmoddi4+0x1b8>
 8020df8:	3b02      	subs	r3, #2
 8020dfa:	4461      	add	r1, ip
 8020dfc:	e732      	b.n	8020c64 <__udivmoddi4+0x12c>
 8020dfe:	4630      	mov	r0, r6
 8020e00:	e709      	b.n	8020c16 <__udivmoddi4+0xde>
 8020e02:	4464      	add	r4, ip
 8020e04:	3802      	subs	r0, #2
 8020e06:	e742      	b.n	8020c8e <__udivmoddi4+0x156>

08020e08 <__aeabi_idiv0>:
 8020e08:	4770      	bx	lr
 8020e0a:	bf00      	nop

08020e0c <Initialize_Game>:
/*
 *  @brief  Initialize game
 *  @params ball position (x, y), maze array, timestep
  * @retval None.
 */
void Initialize_Game(float timestep) {
 8020e0c:	b480      	push	{r7}
 8020e0e:	b083      	sub	sp, #12
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	ed87 0a01 	vstr	s0, [r7, #4]
	// dt for numerical integration
	dt = timestep;
 8020e16:	4a1a      	ldr	r2, [pc, #104]	; (8020e80 <Initialize_Game+0x74>)
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	6013      	str	r3, [r2, #0]
//	t_start = clock();

	// initialize ball params
	x_angle = 0.0;
 8020e1c:	4b19      	ldr	r3, [pc, #100]	; (8020e84 <Initialize_Game+0x78>)
 8020e1e:	f04f 0200 	mov.w	r2, #0
 8020e22:	601a      	str	r2, [r3, #0]
	y_angle = 0.0;
 8020e24:	4b18      	ldr	r3, [pc, #96]	; (8020e88 <Initialize_Game+0x7c>)
 8020e26:	f04f 0200 	mov.w	r2, #0
 8020e2a:	601a      	str	r2, [r3, #0]

	d_x = 0;
 8020e2c:	4b17      	ldr	r3, [pc, #92]	; (8020e8c <Initialize_Game+0x80>)
 8020e2e:	f04f 0200 	mov.w	r2, #0
 8020e32:	601a      	str	r2, [r3, #0]
	d_y = 0;
 8020e34:	4b16      	ldr	r3, [pc, #88]	; (8020e90 <Initialize_Game+0x84>)
 8020e36:	f04f 0200 	mov.w	r2, #0
 8020e3a:	601a      	str	r2, [r3, #0]

	Dx = 0;
 8020e3c:	4b15      	ldr	r3, [pc, #84]	; (8020e94 <Initialize_Game+0x88>)
 8020e3e:	f04f 0200 	mov.w	r2, #0
 8020e42:	601a      	str	r2, [r3, #0]
	Dy = 0;
 8020e44:	4b14      	ldr	r3, [pc, #80]	; (8020e98 <Initialize_Game+0x8c>)
 8020e46:	f04f 0200 	mov.w	r2, #0
 8020e4a:	601a      	str	r2, [r3, #0]

	v_x = 0.0;
 8020e4c:	4b13      	ldr	r3, [pc, #76]	; (8020e9c <Initialize_Game+0x90>)
 8020e4e:	f04f 0200 	mov.w	r2, #0
 8020e52:	601a      	str	r2, [r3, #0]
	v_x_prev = 0.0;
 8020e54:	4b12      	ldr	r3, [pc, #72]	; (8020ea0 <Initialize_Game+0x94>)
 8020e56:	f04f 0200 	mov.w	r2, #0
 8020e5a:	601a      	str	r2, [r3, #0]

	v_y = 0.0;
 8020e5c:	4b11      	ldr	r3, [pc, #68]	; (8020ea4 <Initialize_Game+0x98>)
 8020e5e:	f04f 0200 	mov.w	r2, #0
 8020e62:	601a      	str	r2, [r3, #0]
	v_y_prev = 0.0;
 8020e64:	4b10      	ldr	r3, [pc, #64]	; (8020ea8 <Initialize_Game+0x9c>)
 8020e66:	f04f 0200 	mov.w	r2, #0
 8020e6a:	601a      	str	r2, [r3, #0]

	win = 0; //set win boolean to 0
 8020e6c:	4b0f      	ldr	r3, [pc, #60]	; (8020eac <Initialize_Game+0xa0>)
 8020e6e:	2200      	movs	r2, #0
 8020e70:	601a      	str	r2, [r3, #0]
}
 8020e72:	bf00      	nop
 8020e74:	370c      	adds	r7, #12
 8020e76:	46bd      	mov	sp, r7
 8020e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e7c:	4770      	bx	lr
 8020e7e:	bf00      	nop
 8020e80:	200004a0 	.word	0x200004a0
 8020e84:	20000498 	.word	0x20000498
 8020e88:	2000049c 	.word	0x2000049c
 8020e8c:	200004bc 	.word	0x200004bc
 8020e90:	200004c0 	.word	0x200004c0
 8020e94:	200004c4 	.word	0x200004c4
 8020e98:	200004c8 	.word	0x200004c8
 8020e9c:	200004a4 	.word	0x200004a4
 8020ea0:	200004a8 	.word	0x200004a8
 8020ea4:	200004b4 	.word	0x200004b4
 8020ea8:	200004b8 	.word	0x200004b8
 8020eac:	200004d4 	.word	0x200004d4

08020eb0 <Init_Ball>:

void Init_Ball(int x_pos, int y_pos){
 8020eb0:	b580      	push	{r7, lr}
 8020eb2:	b082      	sub	sp, #8
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
 8020eb8:	6039      	str	r1, [r7, #0]
	x_ball_pos = x_pos;
 8020eba:	4a0a      	ldr	r2, [pc, #40]	; (8020ee4 <Init_Ball+0x34>)
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	6013      	str	r3, [r2, #0]
	y_ball_pos = y_pos;
 8020ec0:	4a09      	ldr	r2, [pc, #36]	; (8020ee8 <Init_Ball+0x38>)
 8020ec2:	683b      	ldr	r3, [r7, #0]
 8020ec4:	6013      	str	r3, [r2, #0]
	ssd1306_DrawCircle(x_pos, y_pos, BALL_RADIUS, White);
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	b2d8      	uxtb	r0, r3
 8020eca:	683b      	ldr	r3, [r7, #0]
 8020ecc:	b2d9      	uxtb	r1, r3
 8020ece:	2301      	movs	r3, #1
 8020ed0:	2201      	movs	r2, #1
 8020ed2:	f009 fc5f 	bl	802a794 <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 8020ed6:	f009 fb1b 	bl	802a510 <ssd1306_UpdateScreen>
}
 8020eda:	bf00      	nop
 8020edc:	3708      	adds	r7, #8
 8020ede:	46bd      	mov	sp, r7
 8020ee0:	bd80      	pop	{r7, pc}
 8020ee2:	bf00      	nop
 8020ee4:	200004cc 	.word	0x200004cc
 8020ee8:	200004d0 	.word	0x200004d0

08020eec <Update_Position>:



void Update_Position(int dx, int dy){
 8020eec:	b580      	push	{r7, lr}
 8020eee:	b082      	sub	sp, #8
 8020ef0:	af00      	add	r7, sp, #0
 8020ef2:	6078      	str	r0, [r7, #4]
 8020ef4:	6039      	str	r1, [r7, #0]
	ssd1306_DrawCircle(x_ball_pos, y_ball_pos, BALL_RADIUS, Black);
 8020ef6:	4b12      	ldr	r3, [pc, #72]	; (8020f40 <Update_Position+0x54>)
 8020ef8:	681b      	ldr	r3, [r3, #0]
 8020efa:	b2d8      	uxtb	r0, r3
 8020efc:	4b11      	ldr	r3, [pc, #68]	; (8020f44 <Update_Position+0x58>)
 8020efe:	681b      	ldr	r3, [r3, #0]
 8020f00:	b2d9      	uxtb	r1, r3
 8020f02:	2300      	movs	r3, #0
 8020f04:	2201      	movs	r2, #1
 8020f06:	f009 fc45 	bl	802a794 <ssd1306_DrawCircle>
	x_ball_pos += dx;
 8020f0a:	4b0d      	ldr	r3, [pc, #52]	; (8020f40 <Update_Position+0x54>)
 8020f0c:	681a      	ldr	r2, [r3, #0]
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	4413      	add	r3, r2
 8020f12:	4a0b      	ldr	r2, [pc, #44]	; (8020f40 <Update_Position+0x54>)
 8020f14:	6013      	str	r3, [r2, #0]
	y_ball_pos += dy;
 8020f16:	4b0b      	ldr	r3, [pc, #44]	; (8020f44 <Update_Position+0x58>)
 8020f18:	681a      	ldr	r2, [r3, #0]
 8020f1a:	683b      	ldr	r3, [r7, #0]
 8020f1c:	4413      	add	r3, r2
 8020f1e:	4a09      	ldr	r2, [pc, #36]	; (8020f44 <Update_Position+0x58>)
 8020f20:	6013      	str	r3, [r2, #0]
	ssd1306_DrawCircle(x_ball_pos, y_ball_pos, BALL_RADIUS, White);
 8020f22:	4b07      	ldr	r3, [pc, #28]	; (8020f40 <Update_Position+0x54>)
 8020f24:	681b      	ldr	r3, [r3, #0]
 8020f26:	b2d8      	uxtb	r0, r3
 8020f28:	4b06      	ldr	r3, [pc, #24]	; (8020f44 <Update_Position+0x58>)
 8020f2a:	681b      	ldr	r3, [r3, #0]
 8020f2c:	b2d9      	uxtb	r1, r3
 8020f2e:	2301      	movs	r3, #1
 8020f30:	2201      	movs	r2, #1
 8020f32:	f009 fc2f 	bl	802a794 <ssd1306_DrawCircle>
}
 8020f36:	bf00      	nop
 8020f38:	3708      	adds	r7, #8
 8020f3a:	46bd      	mov	sp, r7
 8020f3c:	bd80      	pop	{r7, pc}
 8020f3e:	bf00      	nop
 8020f40:	200004cc 	.word	0x200004cc
 8020f44:	200004d0 	.word	0x200004d0

08020f48 <winSequence>:

/**
 * display the ball entering the win area and display a win string
 */
void winSequence(){
 8020f48:	b580      	push	{r7, lr}
 8020f4a:	b084      	sub	sp, #16
 8020f4c:	af00      	add	r7, sp, #0
	char winString[] = "Win!";
 8020f4e:	4a18      	ldr	r2, [pc, #96]	; (8020fb0 <winSequence+0x68>)
 8020f50:	1d3b      	adds	r3, r7, #4
 8020f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020f56:	6018      	str	r0, [r3, #0]
 8020f58:	3304      	adds	r3, #4
 8020f5a:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i<BALL_RADIUS+2;i++){ //little ball sucking animation
 8020f5c:	2300      	movs	r3, #0
 8020f5e:	60fb      	str	r3, [r7, #12]
 8020f60:	e00c      	b.n	8020f7c <winSequence+0x34>
		Update_Position(0,-1);
 8020f62:	f04f 31ff 	mov.w	r1, #4294967295
 8020f66:	2000      	movs	r0, #0
 8020f68:	f7ff ffc0 	bl	8020eec <Update_Position>
		ssd1306_UpdateScreen();
 8020f6c:	f009 fad0 	bl	802a510 <ssd1306_UpdateScreen>
		HAL_Delay(100);
 8020f70:	2064      	movs	r0, #100	; 0x64
 8020f72:	f003 f9e7 	bl	8024344 <HAL_Delay>
	for (int i = 0; i<BALL_RADIUS+2;i++){ //little ball sucking animation
 8020f76:	68fb      	ldr	r3, [r7, #12]
 8020f78:	3301      	adds	r3, #1
 8020f7a:	60fb      	str	r3, [r7, #12]
 8020f7c:	68fb      	ldr	r3, [r7, #12]
 8020f7e:	2b02      	cmp	r3, #2
 8020f80:	ddef      	ble.n	8020f62 <winSequence+0x1a>
	}
	ssd1306_SetCursor(42,23); //center string
 8020f82:	2117      	movs	r1, #23
 8020f84:	202a      	movs	r0, #42	; 0x2a
 8020f86:	f009 fbed 	bl	802a764 <ssd1306_SetCursor>
	ssd1306_WriteString(winString, Font_11x18, White); //write winning string
 8020f8a:	4a0a      	ldr	r2, [pc, #40]	; (8020fb4 <winSequence+0x6c>)
 8020f8c:	1d38      	adds	r0, r7, #4
 8020f8e:	2301      	movs	r3, #1
 8020f90:	ca06      	ldmia	r2, {r1, r2}
 8020f92:	f009 fbc1 	bl	802a718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8020f96:	f009 fabb 	bl	802a510 <ssd1306_UpdateScreen>
	playSounds();
 8020f9a:	f001 f84d 	bl	8022038 <playSounds>

	HAL_Delay(500);
 8020f9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020fa2:	f003 f9cf 	bl	8024344 <HAL_Delay>
}
 8020fa6:	bf00      	nop
 8020fa8:	3710      	adds	r7, #16
 8020faa:	46bd      	mov	sp, r7
 8020fac:	bd80      	pop	{r7, pc}
 8020fae:	bf00      	nop
 8020fb0:	0802dfc0 	.word	0x0802dfc0
 8020fb4:	200002a4 	.word	0x200002a4

08020fb8 <gameOver>:


void gameOver(){
 8020fb8:	b580      	push	{r7, lr}
 8020fba:	b084      	sub	sp, #16
 8020fbc:	af00      	add	r7, sp, #0
	char lossString[] = "GAME OVER!";
 8020fbe:	4a0f      	ldr	r2, [pc, #60]	; (8020ffc <gameOver+0x44>)
 8020fc0:	1d3b      	adds	r3, r7, #4
 8020fc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8020fc4:	c303      	stmia	r3!, {r0, r1}
 8020fc6:	801a      	strh	r2, [r3, #0]
 8020fc8:	3302      	adds	r3, #2
 8020fca:	0c12      	lsrs	r2, r2, #16
 8020fcc:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(14,23); //center string
 8020fce:	2117      	movs	r1, #23
 8020fd0:	200e      	movs	r0, #14
 8020fd2:	f009 fbc7 	bl	802a764 <ssd1306_SetCursor>
	ssd1306_WriteString(lossString, Font_11x18, White); //write winning string
 8020fd6:	4a0a      	ldr	r2, [pc, #40]	; (8021000 <gameOver+0x48>)
 8020fd8:	1d38      	adds	r0, r7, #4
 8020fda:	2301      	movs	r3, #1
 8020fdc:	ca06      	ldmia	r2, {r1, r2}
 8020fde:	f009 fb9b 	bl	802a718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8020fe2:	f009 fa95 	bl	802a510 <ssd1306_UpdateScreen>
	//playSounds();
	playGameOverSound();
 8020fe6:	f001 f887 	bl	80220f8 <playGameOverSound>
	HAL_Delay(500);
 8020fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020fee:	f003 f9a9 	bl	8024344 <HAL_Delay>
}
 8020ff2:	bf00      	nop
 8020ff4:	3710      	adds	r7, #16
 8020ff6:	46bd      	mov	sp, r7
 8020ff8:	bd80      	pop	{r7, pc}
 8020ffa:	bf00      	nop
 8020ffc:	0802dfc8 	.word	0x0802dfc8
 8021000:	200002a4 	.word	0x200002a4
 8021004:	00000000 	.word	0x00000000

08021008 <Calculate_Ball_Kinematics>:
/*
 *  @brief  Calculate potential ball velocity
 *  @params STM32 board orientation angles (theta_x, theta_y)
  * @retval None.
 */
void Calculate_Ball_Kinematics(float* theta_x_in, float* theta_y_in) {
 8021008:	b580      	push	{r7, lr}
 802100a:	b082      	sub	sp, #8
 802100c:	af00      	add	r7, sp, #0
 802100e:	6078      	str	r0, [r7, #4]
 8021010:	6039      	str	r1, [r7, #0]

	// transform angles to match simulation
	x_angle = -(*theta_y_in);
 8021012:	683b      	ldr	r3, [r7, #0]
 8021014:	edd3 7a00 	vldr	s15, [r3]
 8021018:	eef1 7a67 	vneg.f32	s15, s15
 802101c:	4bae      	ldr	r3, [pc, #696]	; (80212d8 <Calculate_Ball_Kinematics+0x2d0>)
 802101e:	edc3 7a00 	vstr	s15, [r3]
	y_angle = -(*theta_x_in);
 8021022:	687b      	ldr	r3, [r7, #4]
 8021024:	edd3 7a00 	vldr	s15, [r3]
 8021028:	eef1 7a67 	vneg.f32	s15, s15
 802102c:	4bab      	ldr	r3, [pc, #684]	; (80212dc <Calculate_Ball_Kinematics+0x2d4>)
 802102e:	edc3 7a00 	vstr	s15, [r3]

	// X-DIRECTION
	if (x_angle < 2 && x_angle > -2) {
 8021032:	4ba9      	ldr	r3, [pc, #676]	; (80212d8 <Calculate_Ball_Kinematics+0x2d0>)
 8021034:	edd3 7a00 	vldr	s15, [r3]
 8021038:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802103c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021044:	d521      	bpl.n	802108a <Calculate_Ball_Kinematics+0x82>
 8021046:	4ba4      	ldr	r3, [pc, #656]	; (80212d8 <Calculate_Ball_Kinematics+0x2d0>)
 8021048:	edd3 7a00 	vldr	s15, [r3]
 802104c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8021050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021058:	dd17      	ble.n	802108a <Calculate_Ball_Kinematics+0x82>
		// check if angle is negligible small
		a_x = 0;
 802105a:	4ba1      	ldr	r3, [pc, #644]	; (80212e0 <Calculate_Ball_Kinematics+0x2d8>)
 802105c:	f04f 0200 	mov.w	r2, #0
 8021060:	601a      	str	r2, [r3, #0]
		v_x_prev = v_x_prev*0.99;
 8021062:	4ba0      	ldr	r3, [pc, #640]	; (80212e4 <Calculate_Ball_Kinematics+0x2dc>)
 8021064:	681b      	ldr	r3, [r3, #0]
 8021066:	4618      	mov	r0, r3
 8021068:	f7ff f9ce 	bl	8020408 <__aeabi_f2d>
 802106c:	a394      	add	r3, pc, #592	; (adr r3, 80212c0 <Calculate_Ball_Kinematics+0x2b8>)
 802106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021072:	f7ff fa21 	bl	80204b8 <__aeabi_dmul>
 8021076:	4602      	mov	r2, r0
 8021078:	460b      	mov	r3, r1
 802107a:	4610      	mov	r0, r2
 802107c:	4619      	mov	r1, r3
 802107e:	f7ff fcf3 	bl	8020a68 <__aeabi_d2f>
 8021082:	4603      	mov	r3, r0
 8021084:	4a97      	ldr	r2, [pc, #604]	; (80212e4 <Calculate_Ball_Kinematics+0x2dc>)
 8021086:	6013      	str	r3, [r2, #0]
 8021088:	e030      	b.n	80210ec <Calculate_Ball_Kinematics+0xe4>
	} else {
		a_x = g*arm_sin_f32(x_angle*M_PI/180.0);
 802108a:	4b93      	ldr	r3, [pc, #588]	; (80212d8 <Calculate_Ball_Kinematics+0x2d0>)
 802108c:	681b      	ldr	r3, [r3, #0]
 802108e:	4618      	mov	r0, r3
 8021090:	f7ff f9ba 	bl	8020408 <__aeabi_f2d>
 8021094:	a38c      	add	r3, pc, #560	; (adr r3, 80212c8 <Calculate_Ball_Kinematics+0x2c0>)
 8021096:	e9d3 2300 	ldrd	r2, r3, [r3]
 802109a:	f7ff fa0d 	bl	80204b8 <__aeabi_dmul>
 802109e:	4602      	mov	r2, r0
 80210a0:	460b      	mov	r3, r1
 80210a2:	4610      	mov	r0, r2
 80210a4:	4619      	mov	r1, r3
 80210a6:	f04f 0200 	mov.w	r2, #0
 80210aa:	4b8f      	ldr	r3, [pc, #572]	; (80212e8 <Calculate_Ball_Kinematics+0x2e0>)
 80210ac:	f7ff fb2e 	bl	802070c <__aeabi_ddiv>
 80210b0:	4602      	mov	r2, r0
 80210b2:	460b      	mov	r3, r1
 80210b4:	4610      	mov	r0, r2
 80210b6:	4619      	mov	r1, r3
 80210b8:	f7ff fcd6 	bl	8020a68 <__aeabi_d2f>
 80210bc:	4603      	mov	r3, r0
 80210be:	ee00 3a10 	vmov	s0, r3
 80210c2:	f009 fc1f 	bl	802a904 <arm_sin_f32>
 80210c6:	ee10 3a10 	vmov	r3, s0
 80210ca:	4618      	mov	r0, r3
 80210cc:	f7ff f99c 	bl	8020408 <__aeabi_f2d>
 80210d0:	f04f 0200 	mov.w	r2, #0
 80210d4:	4b85      	ldr	r3, [pc, #532]	; (80212ec <Calculate_Ball_Kinematics+0x2e4>)
 80210d6:	f7ff f9ef 	bl	80204b8 <__aeabi_dmul>
 80210da:	4602      	mov	r2, r0
 80210dc:	460b      	mov	r3, r1
 80210de:	4610      	mov	r0, r2
 80210e0:	4619      	mov	r1, r3
 80210e2:	f7ff fcc1 	bl	8020a68 <__aeabi_d2f>
 80210e6:	4603      	mov	r3, r0
 80210e8:	4a7d      	ldr	r2, [pc, #500]	; (80212e0 <Calculate_Ball_Kinematics+0x2d8>)
 80210ea:	6013      	str	r3, [r2, #0]
	}

	if ((a_x > 0 && v_x_prev < 0) || (a_x < 0 && v_x_prev > 0)) {
 80210ec:	4b7c      	ldr	r3, [pc, #496]	; (80212e0 <Calculate_Ball_Kinematics+0x2d8>)
 80210ee:	edd3 7a00 	vldr	s15, [r3]
 80210f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80210f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210fa:	dd07      	ble.n	802110c <Calculate_Ball_Kinematics+0x104>
 80210fc:	4b79      	ldr	r3, [pc, #484]	; (80212e4 <Calculate_Ball_Kinematics+0x2dc>)
 80210fe:	edd3 7a00 	vldr	s15, [r3]
 8021102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802110a:	d40f      	bmi.n	802112c <Calculate_Ball_Kinematics+0x124>
 802110c:	4b74      	ldr	r3, [pc, #464]	; (80212e0 <Calculate_Ball_Kinematics+0x2d8>)
 802110e:	edd3 7a00 	vldr	s15, [r3]
 8021112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802111a:	d51a      	bpl.n	8021152 <Calculate_Ball_Kinematics+0x14a>
 802111c:	4b71      	ldr	r3, [pc, #452]	; (80212e4 <Calculate_Ball_Kinematics+0x2dc>)
 802111e:	edd3 7a00 	vldr	s15, [r3]
 8021122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802112a:	dd12      	ble.n	8021152 <Calculate_Ball_Kinematics+0x14a>
		// if they have opposite directions
		v_x_prev = v_x_prev*0.0001;
 802112c:	4b6d      	ldr	r3, [pc, #436]	; (80212e4 <Calculate_Ball_Kinematics+0x2dc>)
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	4618      	mov	r0, r3
 8021132:	f7ff f969 	bl	8020408 <__aeabi_f2d>
 8021136:	a366      	add	r3, pc, #408	; (adr r3, 80212d0 <Calculate_Ball_Kinematics+0x2c8>)
 8021138:	e9d3 2300 	ldrd	r2, r3, [r3]
 802113c:	f7ff f9bc 	bl	80204b8 <__aeabi_dmul>
 8021140:	4602      	mov	r2, r0
 8021142:	460b      	mov	r3, r1
 8021144:	4610      	mov	r0, r2
 8021146:	4619      	mov	r1, r3
 8021148:	f7ff fc8e 	bl	8020a68 <__aeabi_d2f>
 802114c:	4603      	mov	r3, r0
 802114e:	4a65      	ldr	r2, [pc, #404]	; (80212e4 <Calculate_Ball_Kinematics+0x2dc>)
 8021150:	6013      	str	r3, [r2, #0]
	}

	v_x = v_x_prev + a_x*dt;
 8021152:	4b63      	ldr	r3, [pc, #396]	; (80212e0 <Calculate_Ball_Kinematics+0x2d8>)
 8021154:	ed93 7a00 	vldr	s14, [r3]
 8021158:	4b65      	ldr	r3, [pc, #404]	; (80212f0 <Calculate_Ball_Kinematics+0x2e8>)
 802115a:	edd3 7a00 	vldr	s15, [r3]
 802115e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8021162:	4b60      	ldr	r3, [pc, #384]	; (80212e4 <Calculate_Ball_Kinematics+0x2dc>)
 8021164:	edd3 7a00 	vldr	s15, [r3]
 8021168:	ee77 7a27 	vadd.f32	s15, s14, s15
 802116c:	4b61      	ldr	r3, [pc, #388]	; (80212f4 <Calculate_Ball_Kinematics+0x2ec>)
 802116e:	edc3 7a00 	vstr	s15, [r3]

	// Y-DIRECTION
	if (y_angle < 2 && y_angle > -2) {
 8021172:	4b5a      	ldr	r3, [pc, #360]	; (80212dc <Calculate_Ball_Kinematics+0x2d4>)
 8021174:	edd3 7a00 	vldr	s15, [r3]
 8021178:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802117c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021184:	d521      	bpl.n	80211ca <Calculate_Ball_Kinematics+0x1c2>
 8021186:	4b55      	ldr	r3, [pc, #340]	; (80212dc <Calculate_Ball_Kinematics+0x2d4>)
 8021188:	edd3 7a00 	vldr	s15, [r3]
 802118c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8021190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021198:	dd17      	ble.n	80211ca <Calculate_Ball_Kinematics+0x1c2>
		// check if angle is negligible small
		a_y = 0;
 802119a:	4b57      	ldr	r3, [pc, #348]	; (80212f8 <Calculate_Ball_Kinematics+0x2f0>)
 802119c:	f04f 0200 	mov.w	r2, #0
 80211a0:	601a      	str	r2, [r3, #0]
		v_y_prev = v_y_prev*0.99;
 80211a2:	4b56      	ldr	r3, [pc, #344]	; (80212fc <Calculate_Ball_Kinematics+0x2f4>)
 80211a4:	681b      	ldr	r3, [r3, #0]
 80211a6:	4618      	mov	r0, r3
 80211a8:	f7ff f92e 	bl	8020408 <__aeabi_f2d>
 80211ac:	a344      	add	r3, pc, #272	; (adr r3, 80212c0 <Calculate_Ball_Kinematics+0x2b8>)
 80211ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211b2:	f7ff f981 	bl	80204b8 <__aeabi_dmul>
 80211b6:	4602      	mov	r2, r0
 80211b8:	460b      	mov	r3, r1
 80211ba:	4610      	mov	r0, r2
 80211bc:	4619      	mov	r1, r3
 80211be:	f7ff fc53 	bl	8020a68 <__aeabi_d2f>
 80211c2:	4603      	mov	r3, r0
 80211c4:	4a4d      	ldr	r2, [pc, #308]	; (80212fc <Calculate_Ball_Kinematics+0x2f4>)
 80211c6:	6013      	str	r3, [r2, #0]
 80211c8:	e030      	b.n	802122c <Calculate_Ball_Kinematics+0x224>
	} else {
		a_y = g*arm_sin_f32(y_angle*M_PI/180.0);
 80211ca:	4b44      	ldr	r3, [pc, #272]	; (80212dc <Calculate_Ball_Kinematics+0x2d4>)
 80211cc:	681b      	ldr	r3, [r3, #0]
 80211ce:	4618      	mov	r0, r3
 80211d0:	f7ff f91a 	bl	8020408 <__aeabi_f2d>
 80211d4:	a33c      	add	r3, pc, #240	; (adr r3, 80212c8 <Calculate_Ball_Kinematics+0x2c0>)
 80211d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211da:	f7ff f96d 	bl	80204b8 <__aeabi_dmul>
 80211de:	4602      	mov	r2, r0
 80211e0:	460b      	mov	r3, r1
 80211e2:	4610      	mov	r0, r2
 80211e4:	4619      	mov	r1, r3
 80211e6:	f04f 0200 	mov.w	r2, #0
 80211ea:	4b3f      	ldr	r3, [pc, #252]	; (80212e8 <Calculate_Ball_Kinematics+0x2e0>)
 80211ec:	f7ff fa8e 	bl	802070c <__aeabi_ddiv>
 80211f0:	4602      	mov	r2, r0
 80211f2:	460b      	mov	r3, r1
 80211f4:	4610      	mov	r0, r2
 80211f6:	4619      	mov	r1, r3
 80211f8:	f7ff fc36 	bl	8020a68 <__aeabi_d2f>
 80211fc:	4603      	mov	r3, r0
 80211fe:	ee00 3a10 	vmov	s0, r3
 8021202:	f009 fb7f 	bl	802a904 <arm_sin_f32>
 8021206:	ee10 3a10 	vmov	r3, s0
 802120a:	4618      	mov	r0, r3
 802120c:	f7ff f8fc 	bl	8020408 <__aeabi_f2d>
 8021210:	f04f 0200 	mov.w	r2, #0
 8021214:	4b35      	ldr	r3, [pc, #212]	; (80212ec <Calculate_Ball_Kinematics+0x2e4>)
 8021216:	f7ff f94f 	bl	80204b8 <__aeabi_dmul>
 802121a:	4602      	mov	r2, r0
 802121c:	460b      	mov	r3, r1
 802121e:	4610      	mov	r0, r2
 8021220:	4619      	mov	r1, r3
 8021222:	f7ff fc21 	bl	8020a68 <__aeabi_d2f>
 8021226:	4603      	mov	r3, r0
 8021228:	4a33      	ldr	r2, [pc, #204]	; (80212f8 <Calculate_Ball_Kinematics+0x2f0>)
 802122a:	6013      	str	r3, [r2, #0]
	}

	if ((a_y > 0 && v_y_prev < 0) || (a_y < 0 && v_y_prev > 0)) {
 802122c:	4b32      	ldr	r3, [pc, #200]	; (80212f8 <Calculate_Ball_Kinematics+0x2f0>)
 802122e:	edd3 7a00 	vldr	s15, [r3]
 8021232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802123a:	dd07      	ble.n	802124c <Calculate_Ball_Kinematics+0x244>
 802123c:	4b2f      	ldr	r3, [pc, #188]	; (80212fc <Calculate_Ball_Kinematics+0x2f4>)
 802123e:	edd3 7a00 	vldr	s15, [r3]
 8021242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802124a:	d40f      	bmi.n	802126c <Calculate_Ball_Kinematics+0x264>
 802124c:	4b2a      	ldr	r3, [pc, #168]	; (80212f8 <Calculate_Ball_Kinematics+0x2f0>)
 802124e:	edd3 7a00 	vldr	s15, [r3]
 8021252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802125a:	d51a      	bpl.n	8021292 <Calculate_Ball_Kinematics+0x28a>
 802125c:	4b27      	ldr	r3, [pc, #156]	; (80212fc <Calculate_Ball_Kinematics+0x2f4>)
 802125e:	edd3 7a00 	vldr	s15, [r3]
 8021262:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802126a:	dd12      	ble.n	8021292 <Calculate_Ball_Kinematics+0x28a>
		// if they have opposite directions
		v_y_prev = v_y_prev*0.0001;
 802126c:	4b23      	ldr	r3, [pc, #140]	; (80212fc <Calculate_Ball_Kinematics+0x2f4>)
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	4618      	mov	r0, r3
 8021272:	f7ff f8c9 	bl	8020408 <__aeabi_f2d>
 8021276:	a316      	add	r3, pc, #88	; (adr r3, 80212d0 <Calculate_Ball_Kinematics+0x2c8>)
 8021278:	e9d3 2300 	ldrd	r2, r3, [r3]
 802127c:	f7ff f91c 	bl	80204b8 <__aeabi_dmul>
 8021280:	4602      	mov	r2, r0
 8021282:	460b      	mov	r3, r1
 8021284:	4610      	mov	r0, r2
 8021286:	4619      	mov	r1, r3
 8021288:	f7ff fbee 	bl	8020a68 <__aeabi_d2f>
 802128c:	4603      	mov	r3, r0
 802128e:	4a1b      	ldr	r2, [pc, #108]	; (80212fc <Calculate_Ball_Kinematics+0x2f4>)
 8021290:	6013      	str	r3, [r2, #0]
	}


	v_y = v_y_prev + a_y*dt;
 8021292:	4b19      	ldr	r3, [pc, #100]	; (80212f8 <Calculate_Ball_Kinematics+0x2f0>)
 8021294:	ed93 7a00 	vldr	s14, [r3]
 8021298:	4b15      	ldr	r3, [pc, #84]	; (80212f0 <Calculate_Ball_Kinematics+0x2e8>)
 802129a:	edd3 7a00 	vldr	s15, [r3]
 802129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80212a2:	4b16      	ldr	r3, [pc, #88]	; (80212fc <Calculate_Ball_Kinematics+0x2f4>)
 80212a4:	edd3 7a00 	vldr	s15, [r3]
 80212a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80212ac:	4b14      	ldr	r3, [pc, #80]	; (8021300 <Calculate_Ball_Kinematics+0x2f8>)
 80212ae:	edc3 7a00 	vstr	s15, [r3]


}
 80212b2:	bf00      	nop
 80212b4:	3708      	adds	r7, #8
 80212b6:	46bd      	mov	sp, r7
 80212b8:	bd80      	pop	{r7, pc}
 80212ba:	bf00      	nop
 80212bc:	f3af 8000 	nop.w
 80212c0:	7ae147ae 	.word	0x7ae147ae
 80212c4:	3fefae14 	.word	0x3fefae14
 80212c8:	54442d18 	.word	0x54442d18
 80212cc:	400921fb 	.word	0x400921fb
 80212d0:	eb1c432d 	.word	0xeb1c432d
 80212d4:	3f1a36e2 	.word	0x3f1a36e2
 80212d8:	20000498 	.word	0x20000498
 80212dc:	2000049c 	.word	0x2000049c
 80212e0:	200004ac 	.word	0x200004ac
 80212e4:	200004a8 	.word	0x200004a8
 80212e8:	40668000 	.word	0x40668000
 80212ec:	40240000 	.word	0x40240000
 80212f0:	200004a0 	.word	0x200004a0
 80212f4:	200004a4 	.word	0x200004a4
 80212f8:	200004b0 	.word	0x200004b0
 80212fc:	200004b8 	.word	0x200004b8
 8021300:	200004b4 	.word	0x200004b4

08021304 <Calculate_Ball_Velocity>:


void Calculate_Ball_Velocity() {
 8021304:	b480      	push	{r7}
 8021306:	af00      	add	r7, sp, #0

	if (v_x > 0) {
 8021308:	4b5b      	ldr	r3, [pc, #364]	; (8021478 <Calculate_Ball_Velocity+0x174>)
 802130a:	edd3 7a00 	vldr	s15, [r3]
 802130e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021316:	dd20      	ble.n	802135a <Calculate_Ball_Velocity+0x56>
		if (x_ball_pos >= SSD1306_WIDTH -1- BALL_RADIUS) {
 8021318:	4b58      	ldr	r3, [pc, #352]	; (802147c <Calculate_Ball_Velocity+0x178>)
 802131a:	681b      	ldr	r3, [r3, #0]
 802131c:	2b7d      	cmp	r3, #125	; 0x7d
 802131e:	dd07      	ble.n	8021330 <Calculate_Ball_Velocity+0x2c>
			v_x_prev = 0;
 8021320:	4b57      	ldr	r3, [pc, #348]	; (8021480 <Calculate_Ball_Velocity+0x17c>)
 8021322:	f04f 0200 	mov.w	r2, #0
 8021326:	601a      	str	r2, [r3, #0]
			v_x = 0;
 8021328:	4b53      	ldr	r3, [pc, #332]	; (8021478 <Calculate_Ball_Velocity+0x174>)
 802132a:	f04f 0200 	mov.w	r2, #0
 802132e:	601a      	str	r2, [r3, #0]
		}
		// avoid collision with wall directly
		if (mazeDisplayed[y_ball_pos][x_ball_pos+1+BALL_RADIUS] == 1) {
 8021330:	4b54      	ldr	r3, [pc, #336]	; (8021484 <Calculate_Ball_Velocity+0x180>)
 8021332:	681a      	ldr	r2, [r3, #0]
 8021334:	4b51      	ldr	r3, [pc, #324]	; (802147c <Calculate_Ball_Velocity+0x178>)
 8021336:	681b      	ldr	r3, [r3, #0]
 8021338:	3302      	adds	r3, #2
 802133a:	4953      	ldr	r1, [pc, #332]	; (8021488 <Calculate_Ball_Velocity+0x184>)
 802133c:	01d2      	lsls	r2, r2, #7
 802133e:	440a      	add	r2, r1
 8021340:	4413      	add	r3, r2
 8021342:	781b      	ldrb	r3, [r3, #0]
 8021344:	2b01      	cmp	r3, #1
 8021346:	d130      	bne.n	80213aa <Calculate_Ball_Velocity+0xa6>
			v_x_prev = 0;
 8021348:	4b4d      	ldr	r3, [pc, #308]	; (8021480 <Calculate_Ball_Velocity+0x17c>)
 802134a:	f04f 0200 	mov.w	r2, #0
 802134e:	601a      	str	r2, [r3, #0]
			v_x = 0;
 8021350:	4b49      	ldr	r3, [pc, #292]	; (8021478 <Calculate_Ball_Velocity+0x174>)
 8021352:	f04f 0200 	mov.w	r2, #0
 8021356:	601a      	str	r2, [r3, #0]
 8021358:	e027      	b.n	80213aa <Calculate_Ball_Velocity+0xa6>
		}
	}
	else if (v_x < 0) { // negative x velocity
 802135a:	4b47      	ldr	r3, [pc, #284]	; (8021478 <Calculate_Ball_Velocity+0x174>)
 802135c:	edd3 7a00 	vldr	s15, [r3]
 8021360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021368:	d51f      	bpl.n	80213aa <Calculate_Ball_Velocity+0xa6>
		if (x_ball_pos <= 0 + BALL_RADIUS + 1) {
 802136a:	4b44      	ldr	r3, [pc, #272]	; (802147c <Calculate_Ball_Velocity+0x178>)
 802136c:	681b      	ldr	r3, [r3, #0]
 802136e:	2b02      	cmp	r3, #2
 8021370:	dc07      	bgt.n	8021382 <Calculate_Ball_Velocity+0x7e>
			v_x_prev = 0;
 8021372:	4b43      	ldr	r3, [pc, #268]	; (8021480 <Calculate_Ball_Velocity+0x17c>)
 8021374:	f04f 0200 	mov.w	r2, #0
 8021378:	601a      	str	r2, [r3, #0]
			v_x = 0;
 802137a:	4b3f      	ldr	r3, [pc, #252]	; (8021478 <Calculate_Ball_Velocity+0x174>)
 802137c:	f04f 0200 	mov.w	r2, #0
 8021380:	601a      	str	r2, [r3, #0]
		}
		// avoid collision with wall directly
		if (mazeDisplayed[y_ball_pos][x_ball_pos-1-BALL_RADIUS] == 1) {
 8021382:	4b40      	ldr	r3, [pc, #256]	; (8021484 <Calculate_Ball_Velocity+0x180>)
 8021384:	681a      	ldr	r2, [r3, #0]
 8021386:	4b3d      	ldr	r3, [pc, #244]	; (802147c <Calculate_Ball_Velocity+0x178>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	3b02      	subs	r3, #2
 802138c:	493e      	ldr	r1, [pc, #248]	; (8021488 <Calculate_Ball_Velocity+0x184>)
 802138e:	01d2      	lsls	r2, r2, #7
 8021390:	440a      	add	r2, r1
 8021392:	4413      	add	r3, r2
 8021394:	781b      	ldrb	r3, [r3, #0]
 8021396:	2b01      	cmp	r3, #1
 8021398:	d107      	bne.n	80213aa <Calculate_Ball_Velocity+0xa6>
			v_x_prev = 0;
 802139a:	4b39      	ldr	r3, [pc, #228]	; (8021480 <Calculate_Ball_Velocity+0x17c>)
 802139c:	f04f 0200 	mov.w	r2, #0
 80213a0:	601a      	str	r2, [r3, #0]
			v_x = 0;
 80213a2:	4b35      	ldr	r3, [pc, #212]	; (8021478 <Calculate_Ball_Velocity+0x174>)
 80213a4:	f04f 0200 	mov.w	r2, #0
 80213a8:	601a      	str	r2, [r3, #0]
		}
	}

	// positive y velocity
	if (v_y > 0) {
 80213aa:	4b38      	ldr	r3, [pc, #224]	; (802148c <Calculate_Ball_Velocity+0x188>)
 80213ac:	edd3 7a00 	vldr	s15, [r3]
 80213b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80213b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213b8:	dd20      	ble.n	80213fc <Calculate_Ball_Velocity+0xf8>
		if (y_ball_pos >= SSD1306_HEIGHT -1- BALL_RADIUS) {
 80213ba:	4b32      	ldr	r3, [pc, #200]	; (8021484 <Calculate_Ball_Velocity+0x180>)
 80213bc:	681b      	ldr	r3, [r3, #0]
 80213be:	2b3d      	cmp	r3, #61	; 0x3d
 80213c0:	dd07      	ble.n	80213d2 <Calculate_Ball_Velocity+0xce>
			v_y_prev = 0;
 80213c2:	4b33      	ldr	r3, [pc, #204]	; (8021490 <Calculate_Ball_Velocity+0x18c>)
 80213c4:	f04f 0200 	mov.w	r2, #0
 80213c8:	601a      	str	r2, [r3, #0]
			v_y = 0;
 80213ca:	4b30      	ldr	r3, [pc, #192]	; (802148c <Calculate_Ball_Velocity+0x188>)
 80213cc:	f04f 0200 	mov.w	r2, #0
 80213d0:	601a      	str	r2, [r3, #0]
		}
		// avoid collision with wall direclty
		if (mazeDisplayed[y_ball_pos+1+BALL_RADIUS][x_ball_pos] == 1) {
 80213d2:	4b2c      	ldr	r3, [pc, #176]	; (8021484 <Calculate_Ball_Velocity+0x180>)
 80213d4:	681b      	ldr	r3, [r3, #0]
 80213d6:	1c9a      	adds	r2, r3, #2
 80213d8:	4b28      	ldr	r3, [pc, #160]	; (802147c <Calculate_Ball_Velocity+0x178>)
 80213da:	681b      	ldr	r3, [r3, #0]
 80213dc:	492a      	ldr	r1, [pc, #168]	; (8021488 <Calculate_Ball_Velocity+0x184>)
 80213de:	01d2      	lsls	r2, r2, #7
 80213e0:	440a      	add	r2, r1
 80213e2:	4413      	add	r3, r2
 80213e4:	781b      	ldrb	r3, [r3, #0]
 80213e6:	2b01      	cmp	r3, #1
 80213e8:	d142      	bne.n	8021470 <Calculate_Ball_Velocity+0x16c>
			v_y_prev = 0;
 80213ea:	4b29      	ldr	r3, [pc, #164]	; (8021490 <Calculate_Ball_Velocity+0x18c>)
 80213ec:	f04f 0200 	mov.w	r2, #0
 80213f0:	601a      	str	r2, [r3, #0]
			v_y = 0;
 80213f2:	4b26      	ldr	r3, [pc, #152]	; (802148c <Calculate_Ball_Velocity+0x188>)
 80213f4:	f04f 0200 	mov.w	r2, #0
 80213f8:	601a      	str	r2, [r3, #0]
 80213fa:	e039      	b.n	8021470 <Calculate_Ball_Velocity+0x16c>
		}
	}
	else if (v_y < 0) { // negative y velocity
 80213fc:	4b23      	ldr	r3, [pc, #140]	; (802148c <Calculate_Ball_Velocity+0x188>)
 80213fe:	edd3 7a00 	vldr	s15, [r3]
 8021402:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802140a:	d531      	bpl.n	8021470 <Calculate_Ball_Velocity+0x16c>
		if (y_ball_pos <= 0 + BALL_RADIUS + 1) {
 802140c:	4b1d      	ldr	r3, [pc, #116]	; (8021484 <Calculate_Ball_Velocity+0x180>)
 802140e:	681b      	ldr	r3, [r3, #0]
 8021410:	2b02      	cmp	r3, #2
 8021412:	dc19      	bgt.n	8021448 <Calculate_Ball_Velocity+0x144>
			v_y_prev = 0;
 8021414:	4b1e      	ldr	r3, [pc, #120]	; (8021490 <Calculate_Ball_Velocity+0x18c>)
 8021416:	f04f 0200 	mov.w	r2, #0
 802141a:	601a      	str	r2, [r3, #0]
			v_y = 0;
 802141c:	4b1b      	ldr	r3, [pc, #108]	; (802148c <Calculate_Ball_Velocity+0x188>)
 802141e:	f04f 0200 	mov.w	r2, #0
 8021422:	601a      	str	r2, [r3, #0]
			//upper collision => check for win
			if (mazeDisplayed[0][x_ball_pos-1-BALL_RADIUS] == 0 && mazeDisplayed[0][x_ball_pos+1+BALL_RADIUS] == 0){ //check if opening has been found
 8021424:	4b15      	ldr	r3, [pc, #84]	; (802147c <Calculate_Ball_Velocity+0x178>)
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	3b02      	subs	r3, #2
 802142a:	4a17      	ldr	r2, [pc, #92]	; (8021488 <Calculate_Ball_Velocity+0x184>)
 802142c:	5cd3      	ldrb	r3, [r2, r3]
 802142e:	2b00      	cmp	r3, #0
 8021430:	d10a      	bne.n	8021448 <Calculate_Ball_Velocity+0x144>
 8021432:	4b12      	ldr	r3, [pc, #72]	; (802147c <Calculate_Ball_Velocity+0x178>)
 8021434:	681b      	ldr	r3, [r3, #0]
 8021436:	3302      	adds	r3, #2
 8021438:	4a13      	ldr	r2, [pc, #76]	; (8021488 <Calculate_Ball_Velocity+0x184>)
 802143a:	5cd3      	ldrb	r3, [r2, r3]
 802143c:	2b00      	cmp	r3, #0
 802143e:	d103      	bne.n	8021448 <Calculate_Ball_Velocity+0x144>
				win = 1;
 8021440:	4b14      	ldr	r3, [pc, #80]	; (8021494 <Calculate_Ball_Velocity+0x190>)
 8021442:	2201      	movs	r2, #1
 8021444:	601a      	str	r2, [r3, #0]
//				t_end = clock();
				return;
 8021446:	e013      	b.n	8021470 <Calculate_Ball_Velocity+0x16c>
			}
		}
		// avoid collision with wall directly
		if (mazeDisplayed[y_ball_pos-1-BALL_RADIUS][x_ball_pos] == 1) {
 8021448:	4b0e      	ldr	r3, [pc, #56]	; (8021484 <Calculate_Ball_Velocity+0x180>)
 802144a:	681b      	ldr	r3, [r3, #0]
 802144c:	1e9a      	subs	r2, r3, #2
 802144e:	4b0b      	ldr	r3, [pc, #44]	; (802147c <Calculate_Ball_Velocity+0x178>)
 8021450:	681b      	ldr	r3, [r3, #0]
 8021452:	490d      	ldr	r1, [pc, #52]	; (8021488 <Calculate_Ball_Velocity+0x184>)
 8021454:	01d2      	lsls	r2, r2, #7
 8021456:	440a      	add	r2, r1
 8021458:	4413      	add	r3, r2
 802145a:	781b      	ldrb	r3, [r3, #0]
 802145c:	2b01      	cmp	r3, #1
 802145e:	d107      	bne.n	8021470 <Calculate_Ball_Velocity+0x16c>
			v_y_prev = 0;
 8021460:	4b0b      	ldr	r3, [pc, #44]	; (8021490 <Calculate_Ball_Velocity+0x18c>)
 8021462:	f04f 0200 	mov.w	r2, #0
 8021466:	601a      	str	r2, [r3, #0]
			v_y = 0;
 8021468:	4b08      	ldr	r3, [pc, #32]	; (802148c <Calculate_Ball_Velocity+0x188>)
 802146a:	f04f 0200 	mov.w	r2, #0
 802146e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8021470:	46bd      	mov	sp, r7
 8021472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021476:	4770      	bx	lr
 8021478:	200004a4 	.word	0x200004a4
 802147c:	200004cc 	.word	0x200004cc
 8021480:	200004a8 	.word	0x200004a8
 8021484:	200004d0 	.word	0x200004d0
 8021488:	20000808 	.word	0x20000808
 802148c:	200004b4 	.word	0x200004b4
 8021490:	200004b8 	.word	0x200004b8
 8021494:	200004d4 	.word	0x200004d4

08021498 <Calculate_Delta_Displacement>:

///*
// *  @brief  Calculate ball displacement
//  * @retval None.
// */
void Calculate_Delta_Displacement() {
 8021498:	b5b0      	push	{r4, r5, r7, lr}
 802149a:	af00      	add	r7, sp, #0
	// calculate displacement over timestep
	// AREA UNDER CURVE SEGMENT (Trapezium)
	d_x = (0.5)*(v_x_prev + v_x)*dt;
 802149c:	4b2d      	ldr	r3, [pc, #180]	; (8021554 <Calculate_Delta_Displacement+0xbc>)
 802149e:	ed93 7a00 	vldr	s14, [r3]
 80214a2:	4b2d      	ldr	r3, [pc, #180]	; (8021558 <Calculate_Delta_Displacement+0xc0>)
 80214a4:	edd3 7a00 	vldr	s15, [r3]
 80214a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80214ac:	ee17 0a90 	vmov	r0, s15
 80214b0:	f7fe ffaa 	bl	8020408 <__aeabi_f2d>
 80214b4:	f04f 0200 	mov.w	r2, #0
 80214b8:	4b28      	ldr	r3, [pc, #160]	; (802155c <Calculate_Delta_Displacement+0xc4>)
 80214ba:	f7fe fffd 	bl	80204b8 <__aeabi_dmul>
 80214be:	4602      	mov	r2, r0
 80214c0:	460b      	mov	r3, r1
 80214c2:	4614      	mov	r4, r2
 80214c4:	461d      	mov	r5, r3
 80214c6:	4b26      	ldr	r3, [pc, #152]	; (8021560 <Calculate_Delta_Displacement+0xc8>)
 80214c8:	681b      	ldr	r3, [r3, #0]
 80214ca:	4618      	mov	r0, r3
 80214cc:	f7fe ff9c 	bl	8020408 <__aeabi_f2d>
 80214d0:	4602      	mov	r2, r0
 80214d2:	460b      	mov	r3, r1
 80214d4:	4620      	mov	r0, r4
 80214d6:	4629      	mov	r1, r5
 80214d8:	f7fe ffee 	bl	80204b8 <__aeabi_dmul>
 80214dc:	4602      	mov	r2, r0
 80214de:	460b      	mov	r3, r1
 80214e0:	4610      	mov	r0, r2
 80214e2:	4619      	mov	r1, r3
 80214e4:	f7ff fac0 	bl	8020a68 <__aeabi_d2f>
 80214e8:	4603      	mov	r3, r0
 80214ea:	4a1e      	ldr	r2, [pc, #120]	; (8021564 <Calculate_Delta_Displacement+0xcc>)
 80214ec:	6013      	str	r3, [r2, #0]
	d_y = (0.5)*(v_y_prev + v_y)*dt;
 80214ee:	4b1e      	ldr	r3, [pc, #120]	; (8021568 <Calculate_Delta_Displacement+0xd0>)
 80214f0:	ed93 7a00 	vldr	s14, [r3]
 80214f4:	4b1d      	ldr	r3, [pc, #116]	; (802156c <Calculate_Delta_Displacement+0xd4>)
 80214f6:	edd3 7a00 	vldr	s15, [r3]
 80214fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80214fe:	ee17 0a90 	vmov	r0, s15
 8021502:	f7fe ff81 	bl	8020408 <__aeabi_f2d>
 8021506:	f04f 0200 	mov.w	r2, #0
 802150a:	4b14      	ldr	r3, [pc, #80]	; (802155c <Calculate_Delta_Displacement+0xc4>)
 802150c:	f7fe ffd4 	bl	80204b8 <__aeabi_dmul>
 8021510:	4602      	mov	r2, r0
 8021512:	460b      	mov	r3, r1
 8021514:	4614      	mov	r4, r2
 8021516:	461d      	mov	r5, r3
 8021518:	4b11      	ldr	r3, [pc, #68]	; (8021560 <Calculate_Delta_Displacement+0xc8>)
 802151a:	681b      	ldr	r3, [r3, #0]
 802151c:	4618      	mov	r0, r3
 802151e:	f7fe ff73 	bl	8020408 <__aeabi_f2d>
 8021522:	4602      	mov	r2, r0
 8021524:	460b      	mov	r3, r1
 8021526:	4620      	mov	r0, r4
 8021528:	4629      	mov	r1, r5
 802152a:	f7fe ffc5 	bl	80204b8 <__aeabi_dmul>
 802152e:	4602      	mov	r2, r0
 8021530:	460b      	mov	r3, r1
 8021532:	4610      	mov	r0, r2
 8021534:	4619      	mov	r1, r3
 8021536:	f7ff fa97 	bl	8020a68 <__aeabi_d2f>
 802153a:	4603      	mov	r3, r0
 802153c:	4a0c      	ldr	r2, [pc, #48]	; (8021570 <Calculate_Delta_Displacement+0xd8>)
 802153e:	6013      	str	r3, [r2, #0]

	// update velocity
	v_x_prev = v_x;
 8021540:	4b05      	ldr	r3, [pc, #20]	; (8021558 <Calculate_Delta_Displacement+0xc0>)
 8021542:	681b      	ldr	r3, [r3, #0]
 8021544:	4a03      	ldr	r2, [pc, #12]	; (8021554 <Calculate_Delta_Displacement+0xbc>)
 8021546:	6013      	str	r3, [r2, #0]
	v_y_prev = v_y;
 8021548:	4b08      	ldr	r3, [pc, #32]	; (802156c <Calculate_Delta_Displacement+0xd4>)
 802154a:	681b      	ldr	r3, [r3, #0]
 802154c:	4a06      	ldr	r2, [pc, #24]	; (8021568 <Calculate_Delta_Displacement+0xd0>)
 802154e:	6013      	str	r3, [r2, #0]
}
 8021550:	bf00      	nop
 8021552:	bdb0      	pop	{r4, r5, r7, pc}
 8021554:	200004a8 	.word	0x200004a8
 8021558:	200004a4 	.word	0x200004a4
 802155c:	3fe00000 	.word	0x3fe00000
 8021560:	200004a0 	.word	0x200004a0
 8021564:	200004bc 	.word	0x200004bc
 8021568:	200004b8 	.word	0x200004b8
 802156c:	200004b4 	.word	0x200004b4
 8021570:	200004c0 	.word	0x200004c0

08021574 <Accumulate_Displacement>:
/*
 *  @brief  Calculate ball displacement factor
 *  @params displacement factor Q (size = 2)
  * @retval None.
 */
void Accumulate_Displacement() {
 8021574:	b480      	push	{r7}
 8021576:	af00      	add	r7, sp, #0
	Dx += d_x;
 8021578:	4b0d      	ldr	r3, [pc, #52]	; (80215b0 <Accumulate_Displacement+0x3c>)
 802157a:	ed93 7a00 	vldr	s14, [r3]
 802157e:	4b0d      	ldr	r3, [pc, #52]	; (80215b4 <Accumulate_Displacement+0x40>)
 8021580:	edd3 7a00 	vldr	s15, [r3]
 8021584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021588:	4b09      	ldr	r3, [pc, #36]	; (80215b0 <Accumulate_Displacement+0x3c>)
 802158a:	edc3 7a00 	vstr	s15, [r3]
	Dy += d_y;
 802158e:	4b0a      	ldr	r3, [pc, #40]	; (80215b8 <Accumulate_Displacement+0x44>)
 8021590:	ed93 7a00 	vldr	s14, [r3]
 8021594:	4b09      	ldr	r3, [pc, #36]	; (80215bc <Accumulate_Displacement+0x48>)
 8021596:	edd3 7a00 	vldr	s15, [r3]
 802159a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802159e:	4b06      	ldr	r3, [pc, #24]	; (80215b8 <Accumulate_Displacement+0x44>)
 80215a0:	edc3 7a00 	vstr	s15, [r3]
}
 80215a4:	bf00      	nop
 80215a6:	46bd      	mov	sp, r7
 80215a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ac:	4770      	bx	lr
 80215ae:	bf00      	nop
 80215b0:	200004c4 	.word	0x200004c4
 80215b4:	200004bc 	.word	0x200004bc
 80215b8:	200004c8 	.word	0x200004c8
 80215bc:	200004c0 	.word	0x200004c0

080215c0 <Determine_Ball_Movement>:

int Determine_Ball_Movement(float* theta_x_in, float* theta_y_in) {
 80215c0:	b580      	push	{r7, lr}
 80215c2:	b082      	sub	sp, #8
 80215c4:	af00      	add	r7, sp, #0
 80215c6:	6078      	str	r0, [r7, #4]
 80215c8:	6039      	str	r1, [r7, #0]
	Calculate_Ball_Kinematics(theta_x_in, theta_y_in);
 80215ca:	6839      	ldr	r1, [r7, #0]
 80215cc:	6878      	ldr	r0, [r7, #4]
 80215ce:	f7ff fd1b 	bl	8021008 <Calculate_Ball_Kinematics>
	Calculate_Ball_Velocity();
 80215d2:	f7ff fe97 	bl	8021304 <Calculate_Ball_Velocity>
	//check for win
	if (win == 1){
 80215d6:	4b38      	ldr	r3, [pc, #224]	; (80216b8 <Determine_Ball_Movement+0xf8>)
 80215d8:	681b      	ldr	r3, [r3, #0]
 80215da:	2b01      	cmp	r3, #1
 80215dc:	d101      	bne.n	80215e2 <Determine_Ball_Movement+0x22>
		return 1;
 80215de:	2301      	movs	r3, #1
 80215e0:	e05e      	b.n	80216a0 <Determine_Ball_Movement+0xe0>
	}
	Calculate_Delta_Displacement();
 80215e2:	f7ff ff59 	bl	8021498 <Calculate_Delta_Displacement>
	Accumulate_Displacement();
 80215e6:	f7ff ffc5 	bl	8021574 <Accumulate_Displacement>
	// assume that each pixel represents 1mm
	if (Dx >= DISP_SCALE) {
 80215ea:	4b34      	ldr	r3, [pc, #208]	; (80216bc <Determine_Ball_Movement+0xfc>)
 80215ec:	681b      	ldr	r3, [r3, #0]
 80215ee:	4618      	mov	r0, r3
 80215f0:	f7fe ff0a 	bl	8020408 <__aeabi_f2d>
 80215f4:	a32c      	add	r3, pc, #176	; (adr r3, 80216a8 <Determine_Ball_Movement+0xe8>)
 80215f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215fa:	f7ff f9e3 	bl	80209c4 <__aeabi_dcmpge>
 80215fe:	4603      	mov	r3, r0
 8021600:	2b00      	cmp	r3, #0
 8021602:	d008      	beq.n	8021616 <Determine_Ball_Movement+0x56>
		Update_Position(1, 0);
 8021604:	2100      	movs	r1, #0
 8021606:	2001      	movs	r0, #1
 8021608:	f7ff fc70 	bl	8020eec <Update_Position>
		Dx = 0;
 802160c:	4b2b      	ldr	r3, [pc, #172]	; (80216bc <Determine_Ball_Movement+0xfc>)
 802160e:	f04f 0200 	mov.w	r2, #0
 8021612:	601a      	str	r2, [r3, #0]
 8021614:	e015      	b.n	8021642 <Determine_Ball_Movement+0x82>
	}
	else if (Dx <= -DISP_SCALE) {
 8021616:	4b29      	ldr	r3, [pc, #164]	; (80216bc <Determine_Ball_Movement+0xfc>)
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	4618      	mov	r0, r3
 802161c:	f7fe fef4 	bl	8020408 <__aeabi_f2d>
 8021620:	a323      	add	r3, pc, #140	; (adr r3, 80216b0 <Determine_Ball_Movement+0xf0>)
 8021622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021626:	f7ff f9c3 	bl	80209b0 <__aeabi_dcmple>
 802162a:	4603      	mov	r3, r0
 802162c:	2b00      	cmp	r3, #0
 802162e:	d008      	beq.n	8021642 <Determine_Ball_Movement+0x82>
		Update_Position(-1, 0);
 8021630:	2100      	movs	r1, #0
 8021632:	f04f 30ff 	mov.w	r0, #4294967295
 8021636:	f7ff fc59 	bl	8020eec <Update_Position>
		Dx = 0;
 802163a:	4b20      	ldr	r3, [pc, #128]	; (80216bc <Determine_Ball_Movement+0xfc>)
 802163c:	f04f 0200 	mov.w	r2, #0
 8021640:	601a      	str	r2, [r3, #0]
	}

	if (Dy >= DISP_SCALE) {
 8021642:	4b1f      	ldr	r3, [pc, #124]	; (80216c0 <Determine_Ball_Movement+0x100>)
 8021644:	681b      	ldr	r3, [r3, #0]
 8021646:	4618      	mov	r0, r3
 8021648:	f7fe fede 	bl	8020408 <__aeabi_f2d>
 802164c:	a316      	add	r3, pc, #88	; (adr r3, 80216a8 <Determine_Ball_Movement+0xe8>)
 802164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021652:	f7ff f9b7 	bl	80209c4 <__aeabi_dcmpge>
 8021656:	4603      	mov	r3, r0
 8021658:	2b00      	cmp	r3, #0
 802165a:	d008      	beq.n	802166e <Determine_Ball_Movement+0xae>
		Update_Position(0, 1);
 802165c:	2101      	movs	r1, #1
 802165e:	2000      	movs	r0, #0
 8021660:	f7ff fc44 	bl	8020eec <Update_Position>
		Dy = 0;
 8021664:	4b16      	ldr	r3, [pc, #88]	; (80216c0 <Determine_Ball_Movement+0x100>)
 8021666:	f04f 0200 	mov.w	r2, #0
 802166a:	601a      	str	r2, [r3, #0]
 802166c:	e015      	b.n	802169a <Determine_Ball_Movement+0xda>
	}
	else if (Dy <= -DISP_SCALE) {
 802166e:	4b14      	ldr	r3, [pc, #80]	; (80216c0 <Determine_Ball_Movement+0x100>)
 8021670:	681b      	ldr	r3, [r3, #0]
 8021672:	4618      	mov	r0, r3
 8021674:	f7fe fec8 	bl	8020408 <__aeabi_f2d>
 8021678:	a30d      	add	r3, pc, #52	; (adr r3, 80216b0 <Determine_Ball_Movement+0xf0>)
 802167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802167e:	f7ff f997 	bl	80209b0 <__aeabi_dcmple>
 8021682:	4603      	mov	r3, r0
 8021684:	2b00      	cmp	r3, #0
 8021686:	d008      	beq.n	802169a <Determine_Ball_Movement+0xda>
		Update_Position(0, -1);
 8021688:	f04f 31ff 	mov.w	r1, #4294967295
 802168c:	2000      	movs	r0, #0
 802168e:	f7ff fc2d 	bl	8020eec <Update_Position>
		Dy = 0;
 8021692:	4b0b      	ldr	r3, [pc, #44]	; (80216c0 <Determine_Ball_Movement+0x100>)
 8021694:	f04f 0200 	mov.w	r2, #0
 8021698:	601a      	str	r2, [r3, #0]
	}
	ssd1306_UpdateScreen();
 802169a:	f008 ff39 	bl	802a510 <ssd1306_UpdateScreen>
	return 0;
 802169e:	2300      	movs	r3, #0
}
 80216a0:	4618      	mov	r0, r3
 80216a2:	3708      	adds	r7, #8
 80216a4:	46bd      	mov	sp, r7
 80216a6:	bd80      	pop	{r7, pc}
 80216a8:	835d548e 	.word	0x835d548e
 80216ac:	3f22b97d 	.word	0x3f22b97d
 80216b0:	835d548e 	.word	0x835d548e
 80216b4:	bf22b97d 	.word	0xbf22b97d
 80216b8:	200004d4 	.word	0x200004d4
 80216bc:	200004c4 	.word	0x200004c4
 80216c0:	200004c8 	.word	0x200004c8

080216c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80216c4:	b480      	push	{r7}
 80216c6:	b083      	sub	sp, #12
 80216c8:	af00      	add	r7, sp, #0
 80216ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80216cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80216d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80216d4:	f003 0301 	and.w	r3, r3, #1
 80216d8:	2b00      	cmp	r3, #0
 80216da:	d013      	beq.n	8021704 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80216dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80216e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80216e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	d00b      	beq.n	8021704 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80216ec:	e000      	b.n	80216f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80216ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80216f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80216f4:	681b      	ldr	r3, [r3, #0]
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	d0f9      	beq.n	80216ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80216fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80216fe:	687a      	ldr	r2, [r7, #4]
 8021700:	b2d2      	uxtb	r2, r2
 8021702:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8021704:	687b      	ldr	r3, [r7, #4]
}
 8021706:	4618      	mov	r0, r3
 8021708:	370c      	adds	r7, #12
 802170a:	46bd      	mov	sp, r7
 802170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021710:	4770      	bx	lr
	...

08021714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8021714:	b580      	push	{r7, lr}
 8021716:	b08c      	sub	sp, #48	; 0x30
 8021718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802171a:	f002 fd9f 	bl	802425c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802171e:	f000 f8e5 	bl	80218ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8021722:	f000 fb55 	bl	8021dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8021726:	f000 fb29 	bl	8021d7c <MX_DMA_Init>
  MX_I2C1_Init();
 802172a:	f000 f965 	bl	80219f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 802172e:	f000 fad9 	bl	8021ce4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8021732:	f000 f9a1 	bl	8021a78 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8021736:	f000 f9df 	bl	8021af8 <MX_OCTOSPI1_Init>
  MX_DAC1_Init();
 802173a:	f000 f929 	bl	8021990 <MX_DAC1_Init>
  MX_TIM2_Init();
 802173e:	f000 fa83 	bl	8021c48 <MX_TIM2_Init>
  MX_TIM1_Init();
 8021742:	f000 fa2d 	bl	8021ba0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize sensors
  Sensors_Init();
 8021746:	f000 fe4b 	bl	80223e0 <Sensors_Init>

  mazeDisplayInit();
 802174a:	f000 fc1b 	bl	8021f84 <mazeDisplayInit>
  displayMaze1();
 802174e:	f000 fd49 	bl	80221e4 <displayMaze1>

  int startPosition = determineStartPosition();
 8021752:	f000 fc4f 	bl	8021ff4 <determineStartPosition>
 8021756:	62b8      	str	r0, [r7, #40]	; 0x28
  int startRow = startPosition /16;
 8021758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802175a:	2b00      	cmp	r3, #0
 802175c:	da00      	bge.n	8021760 <main+0x4c>
 802175e:	330f      	adds	r3, #15
 8021760:	111b      	asrs	r3, r3, #4
 8021762:	627b      	str	r3, [r7, #36]	; 0x24
  int startColumn = startPosition % 16;
 8021764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021766:	425a      	negs	r2, r3
 8021768:	f003 030f 	and.w	r3, r3, #15
 802176c:	f002 020f 	and.w	r2, r2, #15
 8021770:	bf58      	it	pl
 8021772:	4253      	negpl	r3, r2
 8021774:	623b      	str	r3, [r7, #32]

  int xPosition = startColumn * 8 +4;
 8021776:	6a3b      	ldr	r3, [r7, #32]
 8021778:	00db      	lsls	r3, r3, #3
 802177a:	3304      	adds	r3, #4
 802177c:	61fb      	str	r3, [r7, #28]
  int yPosition = startRow * 8 + 4;
 802177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021780:	00db      	lsls	r3, r3, #3
 8021782:	3304      	adds	r3, #4
 8021784:	61bb      	str	r3, [r7, #24]


  Init_Ball(xPosition,yPosition);
 8021786:	69b9      	ldr	r1, [r7, #24]
 8021788:	69f8      	ldr	r0, [r7, #28]
 802178a:	f7ff fb91 	bl	8020eb0 <Init_Ball>

  //Init_Ball(startColumn * 8 + 4, startRow * 8 + 4);

  // set sampling frequency and measure gyro bias
  Set_Sampling_Frequency(SAMPLING_FREQUENCY);
 802178e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021792:	f000 fe31 	bl	80223f8 <Set_Sampling_Frequency>
  Measure_Gyro_Bias();
 8021796:	f000 fe55 	bl	8022444 <Measure_Gyro_Bias>

  // initialize maze and ball
  Initialize_Game(TIMESTEP);
 802179a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80218bc <main+0x1a8>
 802179e:	f7ff fb35 	bl	8020e0c <Initialize_Game>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80217a2:	2100      	movs	r1, #0
 80217a4:	4846      	ldr	r0, [pc, #280]	; (80218c0 <main+0x1ac>)
 80217a6:	f002 ff24 	bl	80245f2 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80217aa:	4846      	ldr	r0, [pc, #280]	; (80218c4 <main+0x1b0>)
 80217ac:	f007 fb8a 	bl	8028ec4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80217b0:	4845      	ldr	r0, [pc, #276]	; (80218c8 <main+0x1b4>)
 80217b2:	f007 fb87 	bl	8028ec4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 80217b6:	2300      	movs	r3, #0
 80217b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  timeSec = 0;
 80217ba:	4b44      	ldr	r3, [pc, #272]	; (80218cc <main+0x1b8>)
 80217bc:	2200      	movs	r2, #0
 80217be:	601a      	str	r2, [r3, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (timeSec > MAXTIME){
 80217c0:	4b42      	ldr	r3, [pc, #264]	; (80218cc <main+0x1b8>)
 80217c2:	681b      	ldr	r3, [r3, #0]
 80217c4:	2b1e      	cmp	r3, #30
 80217c6:	dd07      	ble.n	80217d8 <main+0xc4>
		  overBool = 1; //set to 1 to stop timer
 80217c8:	4b41      	ldr	r3, [pc, #260]	; (80218d0 <main+0x1bc>)
 80217ca:	2201      	movs	r2, #1
 80217cc:	601a      	str	r2, [r3, #0]
		  gameOver();
 80217ce:	f7ff fbf3 	bl	8020fb8 <gameOver>
		  winBool = 1; // just to restart the game
 80217d2:	4b40      	ldr	r3, [pc, #256]	; (80218d4 <main+0x1c0>)
 80217d4:	2201      	movs	r2, #1
 80217d6:	601a      	str	r2, [r3, #0]
	  }
	  if (winBool == 1){ //if win has been found
 80217d8:	4b3e      	ldr	r3, [pc, #248]	; (80218d4 <main+0x1c0>)
 80217da:	681b      	ldr	r3, [r3, #0]
 80217dc:	2b01      	cmp	r3, #1
 80217de:	d136      	bne.n	802184e <main+0x13a>
		if (overBool!=1){
 80217e0:	4b3b      	ldr	r3, [pc, #236]	; (80218d0 <main+0x1bc>)
 80217e2:	681b      	ldr	r3, [r3, #0]
 80217e4:	2b01      	cmp	r3, #1
 80217e6:	d001      	beq.n	80217ec <main+0xd8>
			winSequence();
 80217e8:	f7ff fbae 	bl	8020f48 <winSequence>
		}

		//restart the game
		clearScreen();
 80217ec:	f000 fcf0 	bl	80221d0 <clearScreen>
		selectRandomMaze();
 80217f0:	f000 fcd0 	bl	8022194 <selectRandomMaze>
		int startPosition = determineStartPosition();
 80217f4:	f000 fbfe 	bl	8021ff4 <determineStartPosition>
 80217f8:	6178      	str	r0, [r7, #20]
		int startRow = startPosition /16;
 80217fa:	697b      	ldr	r3, [r7, #20]
 80217fc:	2b00      	cmp	r3, #0
 80217fe:	da00      	bge.n	8021802 <main+0xee>
 8021800:	330f      	adds	r3, #15
 8021802:	111b      	asrs	r3, r3, #4
 8021804:	613b      	str	r3, [r7, #16]
		int startColumn = startPosition % 16;
 8021806:	697b      	ldr	r3, [r7, #20]
 8021808:	425a      	negs	r2, r3
 802180a:	f003 030f 	and.w	r3, r3, #15
 802180e:	f002 020f 	and.w	r2, r2, #15
 8021812:	bf58      	it	pl
 8021814:	4253      	negpl	r3, r2
 8021816:	60fb      	str	r3, [r7, #12]

		int xPosition = startColumn * 8 +4;
 8021818:	68fb      	ldr	r3, [r7, #12]
 802181a:	00db      	lsls	r3, r3, #3
 802181c:	3304      	adds	r3, #4
 802181e:	60bb      	str	r3, [r7, #8]
		int yPosition = startRow * 8 + 4;
 8021820:	693b      	ldr	r3, [r7, #16]
 8021822:	00db      	lsls	r3, r3, #3
 8021824:	3304      	adds	r3, #4
 8021826:	607b      	str	r3, [r7, #4]


		Init_Ball(xPosition,yPosition);
 8021828:	6879      	ldr	r1, [r7, #4]
 802182a:	68b8      	ldr	r0, [r7, #8]
 802182c:	f7ff fb40 	bl	8020eb0 <Init_Ball>
		displayMaze1();
 8021830:	f000 fcd8 	bl	80221e4 <displayMaze1>
		Initialize_Game(TIMESTEP);
 8021834:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80218bc <main+0x1a8>
 8021838:	f7ff fae8 	bl	8020e0c <Initialize_Game>
		timeSec = 0;
 802183c:	4b23      	ldr	r3, [pc, #140]	; (80218cc <main+0x1b8>)
 802183e:	2200      	movs	r2, #0
 8021840:	601a      	str	r2, [r3, #0]
//		updateTime(timeSec);
		winBool = 0; //reset win boolean
 8021842:	4b24      	ldr	r3, [pc, #144]	; (80218d4 <main+0x1c0>)
 8021844:	2200      	movs	r2, #0
 8021846:	601a      	str	r2, [r3, #0]
		overBool = 0;
 8021848:	4b21      	ldr	r3, [pc, #132]	; (80218d0 <main+0x1bc>)
 802184a:	2200      	movs	r2, #0
 802184c:	601a      	str	r2, [r3, #0]
	  }

	  Measure_Orientation(orientation);
 802184e:	4822      	ldr	r0, [pc, #136]	; (80218d8 <main+0x1c4>)
 8021850:	f000 fe3e 	bl	80224d0 <Measure_Orientation>
	  x = orientation[0];
 8021854:	4b20      	ldr	r3, [pc, #128]	; (80218d8 <main+0x1c4>)
 8021856:	681b      	ldr	r3, [r3, #0]
 8021858:	4a20      	ldr	r2, [pc, #128]	; (80218dc <main+0x1c8>)
 802185a:	6013      	str	r3, [r2, #0]
	  y = orientation[1];
 802185c:	4b1e      	ldr	r3, [pc, #120]	; (80218d8 <main+0x1c4>)
 802185e:	685b      	ldr	r3, [r3, #4]
 8021860:	4a1f      	ldr	r2, [pc, #124]	; (80218e0 <main+0x1cc>)
 8021862:	6013      	str	r3, [r2, #0]

	  HAL_Delay(1);
 8021864:	2001      	movs	r0, #1
 8021866:	f002 fd6d 	bl	8024344 <HAL_Delay>

	  if (counter%10 == 0) {
 802186a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802186c:	4b1d      	ldr	r3, [pc, #116]	; (80218e4 <main+0x1d0>)
 802186e:	fb83 2301 	smull	r2, r3, r3, r1
 8021872:	109a      	asrs	r2, r3, #2
 8021874:	17cb      	asrs	r3, r1, #31
 8021876:	1ad2      	subs	r2, r2, r3
 8021878:	4613      	mov	r3, r2
 802187a:	009b      	lsls	r3, r3, #2
 802187c:	4413      	add	r3, r2
 802187e:	005b      	lsls	r3, r3, #1
 8021880:	1aca      	subs	r2, r1, r3
 8021882:	2a00      	cmp	r2, #0
 8021884:	d106      	bne.n	8021894 <main+0x180>
		 winBool = Determine_Ball_Movement(&x, &y);
 8021886:	4916      	ldr	r1, [pc, #88]	; (80218e0 <main+0x1cc>)
 8021888:	4814      	ldr	r0, [pc, #80]	; (80218dc <main+0x1c8>)
 802188a:	f7ff fe99 	bl	80215c0 <Determine_Ball_Movement>
 802188e:	4603      	mov	r3, r0
 8021890:	4a10      	ldr	r2, [pc, #64]	; (80218d4 <main+0x1c0>)
 8021892:	6013      	str	r3, [r2, #0]
	  }
	  if (counter%100 == 0) {
 8021894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021896:	4b14      	ldr	r3, [pc, #80]	; (80218e8 <main+0x1d4>)
 8021898:	fb83 1302 	smull	r1, r3, r3, r2
 802189c:	1159      	asrs	r1, r3, #5
 802189e:	17d3      	asrs	r3, r2, #31
 80218a0:	1acb      	subs	r3, r1, r3
 80218a2:	2164      	movs	r1, #100	; 0x64
 80218a4:	fb01 f303 	mul.w	r3, r1, r3
 80218a8:	1ad3      	subs	r3, r2, r3
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d101      	bne.n	80218b2 <main+0x19e>
		  displayMaze1();
 80218ae:	f000 fc99 	bl	80221e4 <displayMaze1>
//		  displayTime();
	  }

	  counter++;
 80218b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218b4:	3301      	adds	r3, #1
 80218b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (timeSec > MAXTIME){
 80218b8:	e782      	b.n	80217c0 <main+0xac>
 80218ba:	bf00      	nop
 80218bc:	3c23d70a 	.word	0x3c23d70a
 80218c0:	200004d8 	.word	0x200004d8
 80218c4:	20000644 	.word	0x20000644
 80218c8:	20000690 	.word	0x20000690
 80218cc:	2000077c 	.word	0x2000077c
 80218d0:	20000780 	.word	0x20000780
 80218d4:	20000784 	.word	0x20000784
 80218d8:	2000076c 	.word	0x2000076c
 80218dc:	20000774 	.word	0x20000774
 80218e0:	20000778 	.word	0x20000778
 80218e4:	66666667 	.word	0x66666667
 80218e8:	51eb851f 	.word	0x51eb851f

080218ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80218ec:	b580      	push	{r7, lr}
 80218ee:	b096      	sub	sp, #88	; 0x58
 80218f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80218f2:	f107 0314 	add.w	r3, r7, #20
 80218f6:	2244      	movs	r2, #68	; 0x44
 80218f8:	2100      	movs	r1, #0
 80218fa:	4618      	mov	r0, r3
 80218fc:	f009 f89a 	bl	802aa34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8021900:	463b      	mov	r3, r7
 8021902:	2200      	movs	r2, #0
 8021904:	601a      	str	r2, [r3, #0]
 8021906:	605a      	str	r2, [r3, #4]
 8021908:	609a      	str	r2, [r3, #8]
 802190a:	60da      	str	r2, [r3, #12]
 802190c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 802190e:	2000      	movs	r0, #0
 8021910:	f005 fdec 	bl	80274ec <HAL_PWREx_ControlVoltageScaling>
 8021914:	4603      	mov	r3, r0
 8021916:	2b00      	cmp	r3, #0
 8021918:	d001      	beq.n	802191e <SystemClock_Config+0x32>
  {
    Error_Handler();
 802191a:	f000 fb2d 	bl	8021f78 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 802191e:	2310      	movs	r3, #16
 8021920:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8021922:	2301      	movs	r3, #1
 8021924:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8021926:	2300      	movs	r3, #0
 8021928:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 802192a:	2360      	movs	r3, #96	; 0x60
 802192c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802192e:	2302      	movs	r3, #2
 8021930:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8021932:	2301      	movs	r3, #1
 8021934:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8021936:	2301      	movs	r3, #1
 8021938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 802193a:	233c      	movs	r3, #60	; 0x3c
 802193c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802193e:	2302      	movs	r3, #2
 8021940:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8021942:	2302      	movs	r3, #2
 8021944:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8021946:	2302      	movs	r3, #2
 8021948:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802194a:	f107 0314 	add.w	r3, r7, #20
 802194e:	4618      	mov	r0, r3
 8021950:	f005 fe70 	bl	8027634 <HAL_RCC_OscConfig>
 8021954:	4603      	mov	r3, r0
 8021956:	2b00      	cmp	r3, #0
 8021958:	d001      	beq.n	802195e <SystemClock_Config+0x72>
  {
    Error_Handler();
 802195a:	f000 fb0d 	bl	8021f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802195e:	230f      	movs	r3, #15
 8021960:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021962:	2303      	movs	r3, #3
 8021964:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8021966:	2300      	movs	r3, #0
 8021968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802196a:	2300      	movs	r3, #0
 802196c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802196e:	2300      	movs	r3, #0
 8021970:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021972:	463b      	mov	r3, r7
 8021974:	2105      	movs	r1, #5
 8021976:	4618      	mov	r0, r3
 8021978:	f006 fa76 	bl	8027e68 <HAL_RCC_ClockConfig>
 802197c:	4603      	mov	r3, r0
 802197e:	2b00      	cmp	r3, #0
 8021980:	d001      	beq.n	8021986 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8021982:	f000 faf9 	bl	8021f78 <Error_Handler>
  }
}
 8021986:	bf00      	nop
 8021988:	3758      	adds	r7, #88	; 0x58
 802198a:	46bd      	mov	sp, r7
 802198c:	bd80      	pop	{r7, pc}
	...

08021990 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8021990:	b580      	push	{r7, lr}
 8021992:	b08a      	sub	sp, #40	; 0x28
 8021994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8021996:	463b      	mov	r3, r7
 8021998:	2228      	movs	r2, #40	; 0x28
 802199a:	2100      	movs	r1, #0
 802199c:	4618      	mov	r0, r3
 802199e:	f009 f849 	bl	802aa34 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80219a2:	4b13      	ldr	r3, [pc, #76]	; (80219f0 <MX_DAC1_Init+0x60>)
 80219a4:	4a13      	ldr	r2, [pc, #76]	; (80219f4 <MX_DAC1_Init+0x64>)
 80219a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80219a8:	4811      	ldr	r0, [pc, #68]	; (80219f0 <MX_DAC1_Init+0x60>)
 80219aa:	f002 fe00 	bl	80245ae <HAL_DAC_Init>
 80219ae:	4603      	mov	r3, r0
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	d001      	beq.n	80219b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80219b4:	f000 fae0 	bl	8021f78 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80219b8:	2300      	movs	r3, #0
 80219ba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 80219bc:	2306      	movs	r3, #6
 80219be:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80219c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80219c4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80219c6:	2300      	movs	r3, #0
 80219c8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80219ca:	2300      	movs	r3, #0
 80219cc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80219ce:	2300      	movs	r3, #0
 80219d0:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80219d2:	463b      	mov	r3, r7
 80219d4:	2200      	movs	r2, #0
 80219d6:	4619      	mov	r1, r3
 80219d8:	4805      	ldr	r0, [pc, #20]	; (80219f0 <MX_DAC1_Init+0x60>)
 80219da:	f002 ff8d 	bl	80248f8 <HAL_DAC_ConfigChannel>
 80219de:	4603      	mov	r3, r0
 80219e0:	2b00      	cmp	r3, #0
 80219e2:	d001      	beq.n	80219e8 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80219e4:	f000 fac8 	bl	8021f78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80219e8:	bf00      	nop
 80219ea:	3728      	adds	r7, #40	; 0x28
 80219ec:	46bd      	mov	sp, r7
 80219ee:	bd80      	pop	{r7, pc}
 80219f0:	200004d8 	.word	0x200004d8
 80219f4:	40007400 	.word	0x40007400

080219f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80219f8:	b580      	push	{r7, lr}
 80219fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80219fc:	4b1b      	ldr	r3, [pc, #108]	; (8021a6c <MX_I2C1_Init+0x74>)
 80219fe:	4a1c      	ldr	r2, [pc, #112]	; (8021a70 <MX_I2C1_Init+0x78>)
 8021a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8021a02:	4b1a      	ldr	r3, [pc, #104]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a04:	4a1b      	ldr	r2, [pc, #108]	; (8021a74 <MX_I2C1_Init+0x7c>)
 8021a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8021a08:	4b18      	ldr	r3, [pc, #96]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a0a:	2200      	movs	r2, #0
 8021a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021a0e:	4b17      	ldr	r3, [pc, #92]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a10:	2201      	movs	r2, #1
 8021a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021a14:	4b15      	ldr	r3, [pc, #84]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a16:	2200      	movs	r2, #0
 8021a18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8021a1a:	4b14      	ldr	r3, [pc, #80]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a1c:	2200      	movs	r2, #0
 8021a1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8021a20:	4b12      	ldr	r3, [pc, #72]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a22:	2200      	movs	r2, #0
 8021a24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021a26:	4b11      	ldr	r3, [pc, #68]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a28:	2200      	movs	r2, #0
 8021a2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8021a2c:	4b0f      	ldr	r3, [pc, #60]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a2e:	2200      	movs	r2, #0
 8021a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8021a32:	480e      	ldr	r0, [pc, #56]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a34:	f003 fe94 	bl	8025760 <HAL_I2C_Init>
 8021a38:	4603      	mov	r3, r0
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d001      	beq.n	8021a42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8021a3e:	f000 fa9b 	bl	8021f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8021a42:	2100      	movs	r1, #0
 8021a44:	4809      	ldr	r0, [pc, #36]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a46:	f004 fc1d 	bl	8026284 <HAL_I2CEx_ConfigAnalogFilter>
 8021a4a:	4603      	mov	r3, r0
 8021a4c:	2b00      	cmp	r3, #0
 8021a4e:	d001      	beq.n	8021a54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8021a50:	f000 fa92 	bl	8021f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8021a54:	2100      	movs	r1, #0
 8021a56:	4805      	ldr	r0, [pc, #20]	; (8021a6c <MX_I2C1_Init+0x74>)
 8021a58:	f004 fc5f 	bl	802631a <HAL_I2CEx_ConfigDigitalFilter>
 8021a5c:	4603      	mov	r3, r0
 8021a5e:	2b00      	cmp	r3, #0
 8021a60:	d001      	beq.n	8021a66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8021a62:	f000 fa89 	bl	8021f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8021a66:	bf00      	nop
 8021a68:	bd80      	pop	{r7, pc}
 8021a6a:	bf00      	nop
 8021a6c:	2000054c 	.word	0x2000054c
 8021a70:	40005400 	.word	0x40005400
 8021a74:	00b03fdb 	.word	0x00b03fdb

08021a78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8021a78:	b580      	push	{r7, lr}
 8021a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8021a7c:	4b1b      	ldr	r3, [pc, #108]	; (8021aec <MX_I2C2_Init+0x74>)
 8021a7e:	4a1c      	ldr	r2, [pc, #112]	; (8021af0 <MX_I2C2_Init+0x78>)
 8021a80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8021a82:	4b1a      	ldr	r3, [pc, #104]	; (8021aec <MX_I2C2_Init+0x74>)
 8021a84:	4a1b      	ldr	r2, [pc, #108]	; (8021af4 <MX_I2C2_Init+0x7c>)
 8021a86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8021a88:	4b18      	ldr	r3, [pc, #96]	; (8021aec <MX_I2C2_Init+0x74>)
 8021a8a:	2200      	movs	r2, #0
 8021a8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021a8e:	4b17      	ldr	r3, [pc, #92]	; (8021aec <MX_I2C2_Init+0x74>)
 8021a90:	2201      	movs	r2, #1
 8021a92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021a94:	4b15      	ldr	r3, [pc, #84]	; (8021aec <MX_I2C2_Init+0x74>)
 8021a96:	2200      	movs	r2, #0
 8021a98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8021a9a:	4b14      	ldr	r3, [pc, #80]	; (8021aec <MX_I2C2_Init+0x74>)
 8021a9c:	2200      	movs	r2, #0
 8021a9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8021aa0:	4b12      	ldr	r3, [pc, #72]	; (8021aec <MX_I2C2_Init+0x74>)
 8021aa2:	2200      	movs	r2, #0
 8021aa4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021aa6:	4b11      	ldr	r3, [pc, #68]	; (8021aec <MX_I2C2_Init+0x74>)
 8021aa8:	2200      	movs	r2, #0
 8021aaa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8021aac:	4b0f      	ldr	r3, [pc, #60]	; (8021aec <MX_I2C2_Init+0x74>)
 8021aae:	2200      	movs	r2, #0
 8021ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8021ab2:	480e      	ldr	r0, [pc, #56]	; (8021aec <MX_I2C2_Init+0x74>)
 8021ab4:	f003 fe54 	bl	8025760 <HAL_I2C_Init>
 8021ab8:	4603      	mov	r3, r0
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d001      	beq.n	8021ac2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8021abe:	f000 fa5b 	bl	8021f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8021ac2:	2100      	movs	r1, #0
 8021ac4:	4809      	ldr	r0, [pc, #36]	; (8021aec <MX_I2C2_Init+0x74>)
 8021ac6:	f004 fbdd 	bl	8026284 <HAL_I2CEx_ConfigAnalogFilter>
 8021aca:	4603      	mov	r3, r0
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	d001      	beq.n	8021ad4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8021ad0:	f000 fa52 	bl	8021f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8021ad4:	2100      	movs	r1, #0
 8021ad6:	4805      	ldr	r0, [pc, #20]	; (8021aec <MX_I2C2_Init+0x74>)
 8021ad8:	f004 fc1f 	bl	802631a <HAL_I2CEx_ConfigDigitalFilter>
 8021adc:	4603      	mov	r3, r0
 8021ade:	2b00      	cmp	r3, #0
 8021ae0:	d001      	beq.n	8021ae6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8021ae2:	f000 fa49 	bl	8021f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8021ae6:	bf00      	nop
 8021ae8:	bd80      	pop	{r7, pc}
 8021aea:	bf00      	nop
 8021aec:	200005a0 	.word	0x200005a0
 8021af0:	40005800 	.word	0x40005800
 8021af4:	307075b1 	.word	0x307075b1

08021af8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b086      	sub	sp, #24
 8021afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8021afe:	1d3b      	adds	r3, r7, #4
 8021b00:	2200      	movs	r2, #0
 8021b02:	601a      	str	r2, [r3, #0]
 8021b04:	605a      	str	r2, [r3, #4]
 8021b06:	609a      	str	r2, [r3, #8]
 8021b08:	60da      	str	r2, [r3, #12]
 8021b0a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8021b0c:	4b22      	ldr	r3, [pc, #136]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b0e:	4a23      	ldr	r2, [pc, #140]	; (8021b9c <MX_OCTOSPI1_Init+0xa4>)
 8021b10:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8021b12:	4b21      	ldr	r3, [pc, #132]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b14:	2201      	movs	r2, #1
 8021b16:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8021b18:	4b1f      	ldr	r3, [pc, #124]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b1a:	2200      	movs	r2, #0
 8021b1c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8021b1e:	4b1e      	ldr	r3, [pc, #120]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b20:	2200      	movs	r2, #0
 8021b22:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8021b24:	4b1c      	ldr	r3, [pc, #112]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b26:	2220      	movs	r2, #32
 8021b28:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8021b2a:	4b1b      	ldr	r3, [pc, #108]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b2c:	2201      	movs	r2, #1
 8021b2e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8021b30:	4b19      	ldr	r3, [pc, #100]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b32:	2200      	movs	r2, #0
 8021b34:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8021b36:	4b18      	ldr	r3, [pc, #96]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b38:	2200      	movs	r2, #0
 8021b3a:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8021b3c:	4b16      	ldr	r3, [pc, #88]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b3e:	2201      	movs	r2, #1
 8021b40:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8021b42:	4b15      	ldr	r3, [pc, #84]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b44:	2200      	movs	r2, #0
 8021b46:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8021b48:	4b13      	ldr	r3, [pc, #76]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b4a:	2200      	movs	r2, #0
 8021b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8021b4e:	4b12      	ldr	r3, [pc, #72]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b50:	2200      	movs	r2, #0
 8021b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8021b54:	4b10      	ldr	r3, [pc, #64]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b56:	2208      	movs	r2, #8
 8021b58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8021b5a:	480f      	ldr	r0, [pc, #60]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b5c:	f004 fc2a 	bl	80263b4 <HAL_OSPI_Init>
 8021b60:	4603      	mov	r3, r0
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	d001      	beq.n	8021b6a <MX_OCTOSPI1_Init+0x72>
  {
    Error_Handler();
 8021b66:	f000 fa07 	bl	8021f78 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8021b6a:	2301      	movs	r3, #1
 8021b6c:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8021b6e:	2301      	movs	r3, #1
 8021b70:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8021b72:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8021b76:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8021b78:	1d3b      	adds	r3, r7, #4
 8021b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8021b7e:	4619      	mov	r1, r3
 8021b80:	4805      	ldr	r0, [pc, #20]	; (8021b98 <MX_OCTOSPI1_Init+0xa0>)
 8021b82:	f004 ff15 	bl	80269b0 <HAL_OSPIM_Config>
 8021b86:	4603      	mov	r3, r0
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	d001      	beq.n	8021b90 <MX_OCTOSPI1_Init+0x98>
  {
    Error_Handler();
 8021b8c:	f000 f9f4 	bl	8021f78 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8021b90:	bf00      	nop
 8021b92:	3718      	adds	r7, #24
 8021b94:	46bd      	mov	sp, r7
 8021b96:	bd80      	pop	{r7, pc}
 8021b98:	200005f4 	.word	0x200005f4
 8021b9c:	a0001000 	.word	0xa0001000

08021ba0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8021ba0:	b580      	push	{r7, lr}
 8021ba2:	b088      	sub	sp, #32
 8021ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021ba6:	f107 0310 	add.w	r3, r7, #16
 8021baa:	2200      	movs	r2, #0
 8021bac:	601a      	str	r2, [r3, #0]
 8021bae:	605a      	str	r2, [r3, #4]
 8021bb0:	609a      	str	r2, [r3, #8]
 8021bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021bb4:	1d3b      	adds	r3, r7, #4
 8021bb6:	2200      	movs	r2, #0
 8021bb8:	601a      	str	r2, [r3, #0]
 8021bba:	605a      	str	r2, [r3, #4]
 8021bbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021bbe:	4b20      	ldr	r3, [pc, #128]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021bc0:	4a20      	ldr	r2, [pc, #128]	; (8021c44 <MX_TIM1_Init+0xa4>)
 8021bc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8021bc4:	4b1e      	ldr	r3, [pc, #120]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021bc6:	2200      	movs	r2, #0
 8021bc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021bca:	4b1d      	ldr	r3, [pc, #116]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021bcc:	2200      	movs	r2, #0
 8021bce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2722;
 8021bd0:	4b1b      	ldr	r3, [pc, #108]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021bd2:	f640 22a2 	movw	r2, #2722	; 0xaa2
 8021bd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021bd8:	4b19      	ldr	r3, [pc, #100]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021bda:	2200      	movs	r2, #0
 8021bdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021bde:	4b18      	ldr	r3, [pc, #96]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021be0:	2200      	movs	r2, #0
 8021be2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021be4:	4b16      	ldr	r3, [pc, #88]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021be6:	2200      	movs	r2, #0
 8021be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8021bea:	4815      	ldr	r0, [pc, #84]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021bec:	f007 f912 	bl	8028e14 <HAL_TIM_Base_Init>
 8021bf0:	4603      	mov	r3, r0
 8021bf2:	2b00      	cmp	r3, #0
 8021bf4:	d001      	beq.n	8021bfa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8021bf6:	f000 f9bf 	bl	8021f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021bfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8021c00:	f107 0310 	add.w	r3, r7, #16
 8021c04:	4619      	mov	r1, r3
 8021c06:	480e      	ldr	r0, [pc, #56]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021c08:	f007 faeb 	bl	80291e2 <HAL_TIM_ConfigClockSource>
 8021c0c:	4603      	mov	r3, r0
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	d001      	beq.n	8021c16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8021c12:	f000 f9b1 	bl	8021f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8021c16:	2320      	movs	r3, #32
 8021c18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8021c1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021c1e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021c20:	2300      	movs	r3, #0
 8021c22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021c24:	1d3b      	adds	r3, r7, #4
 8021c26:	4619      	mov	r1, r3
 8021c28:	4805      	ldr	r0, [pc, #20]	; (8021c40 <MX_TIM1_Init+0xa0>)
 8021c2a:	f007 fcff 	bl	802962c <HAL_TIMEx_MasterConfigSynchronization>
 8021c2e:	4603      	mov	r3, r0
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	d001      	beq.n	8021c38 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8021c34:	f000 f9a0 	bl	8021f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8021c38:	bf00      	nop
 8021c3a:	3720      	adds	r7, #32
 8021c3c:	46bd      	mov	sp, r7
 8021c3e:	bd80      	pop	{r7, pc}
 8021c40:	20000644 	.word	0x20000644
 8021c44:	40012c00 	.word	0x40012c00

08021c48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8021c48:	b580      	push	{r7, lr}
 8021c4a:	b088      	sub	sp, #32
 8021c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021c4e:	f107 0310 	add.w	r3, r7, #16
 8021c52:	2200      	movs	r2, #0
 8021c54:	601a      	str	r2, [r3, #0]
 8021c56:	605a      	str	r2, [r3, #4]
 8021c58:	609a      	str	r2, [r3, #8]
 8021c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021c5c:	1d3b      	adds	r3, r7, #4
 8021c5e:	2200      	movs	r2, #0
 8021c60:	601a      	str	r2, [r3, #0]
 8021c62:	605a      	str	r2, [r3, #4]
 8021c64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8021c66:	4b1d      	ldr	r3, [pc, #116]	; (8021cdc <MX_TIM2_Init+0x94>)
 8021c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021c6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8021c6e:	4b1b      	ldr	r3, [pc, #108]	; (8021cdc <MX_TIM2_Init+0x94>)
 8021c70:	2278      	movs	r2, #120	; 0x78
 8021c72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021c74:	4b19      	ldr	r3, [pc, #100]	; (8021cdc <MX_TIM2_Init+0x94>)
 8021c76:	2200      	movs	r2, #0
 8021c78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8021c7a:	4b18      	ldr	r3, [pc, #96]	; (8021cdc <MX_TIM2_Init+0x94>)
 8021c7c:	4a18      	ldr	r2, [pc, #96]	; (8021ce0 <MX_TIM2_Init+0x98>)
 8021c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021c80:	4b16      	ldr	r3, [pc, #88]	; (8021cdc <MX_TIM2_Init+0x94>)
 8021c82:	2200      	movs	r2, #0
 8021c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021c86:	4b15      	ldr	r3, [pc, #84]	; (8021cdc <MX_TIM2_Init+0x94>)
 8021c88:	2200      	movs	r2, #0
 8021c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8021c8c:	4813      	ldr	r0, [pc, #76]	; (8021cdc <MX_TIM2_Init+0x94>)
 8021c8e:	f007 f8c1 	bl	8028e14 <HAL_TIM_Base_Init>
 8021c92:	4603      	mov	r3, r0
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	d001      	beq.n	8021c9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8021c98:	f000 f96e 	bl	8021f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021ca0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8021ca2:	f107 0310 	add.w	r3, r7, #16
 8021ca6:	4619      	mov	r1, r3
 8021ca8:	480c      	ldr	r0, [pc, #48]	; (8021cdc <MX_TIM2_Init+0x94>)
 8021caa:	f007 fa9a 	bl	80291e2 <HAL_TIM_ConfigClockSource>
 8021cae:	4603      	mov	r3, r0
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d001      	beq.n	8021cb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8021cb4:	f000 f960 	bl	8021f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8021cb8:	2320      	movs	r3, #32
 8021cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021cbc:	2300      	movs	r3, #0
 8021cbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8021cc0:	1d3b      	adds	r3, r7, #4
 8021cc2:	4619      	mov	r1, r3
 8021cc4:	4805      	ldr	r0, [pc, #20]	; (8021cdc <MX_TIM2_Init+0x94>)
 8021cc6:	f007 fcb1 	bl	802962c <HAL_TIMEx_MasterConfigSynchronization>
 8021cca:	4603      	mov	r3, r0
 8021ccc:	2b00      	cmp	r3, #0
 8021cce:	d001      	beq.n	8021cd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8021cd0:	f000 f952 	bl	8021f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8021cd4:	bf00      	nop
 8021cd6:	3720      	adds	r7, #32
 8021cd8:	46bd      	mov	sp, r7
 8021cda:	bd80      	pop	{r7, pc}
 8021cdc:	20000690 	.word	0x20000690
 8021ce0:	000f4240 	.word	0x000f4240

08021ce4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8021ce4:	b580      	push	{r7, lr}
 8021ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8021ce8:	4b22      	ldr	r3, [pc, #136]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021cea:	4a23      	ldr	r2, [pc, #140]	; (8021d78 <MX_USART1_UART_Init+0x94>)
 8021cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8021cee:	4b21      	ldr	r3, [pc, #132]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8021cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8021cf6:	4b1f      	ldr	r3, [pc, #124]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021cf8:	2200      	movs	r2, #0
 8021cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8021cfc:	4b1d      	ldr	r3, [pc, #116]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021cfe:	2200      	movs	r2, #0
 8021d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8021d02:	4b1c      	ldr	r3, [pc, #112]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d04:	2200      	movs	r2, #0
 8021d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8021d08:	4b1a      	ldr	r3, [pc, #104]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d0a:	220c      	movs	r2, #12
 8021d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021d0e:	4b19      	ldr	r3, [pc, #100]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d10:	2200      	movs	r2, #0
 8021d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8021d14:	4b17      	ldr	r3, [pc, #92]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d16:	2200      	movs	r2, #0
 8021d18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8021d1a:	4b16      	ldr	r3, [pc, #88]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d1c:	2200      	movs	r2, #0
 8021d1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8021d20:	4b14      	ldr	r3, [pc, #80]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d22:	2200      	movs	r2, #0
 8021d24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8021d26:	4b13      	ldr	r3, [pc, #76]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d28:	2200      	movs	r2, #0
 8021d2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8021d2c:	4811      	ldr	r0, [pc, #68]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d2e:	f007 fd23 	bl	8029778 <HAL_UART_Init>
 8021d32:	4603      	mov	r3, r0
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	d001      	beq.n	8021d3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8021d38:	f000 f91e 	bl	8021f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021d3c:	2100      	movs	r1, #0
 8021d3e:	480d      	ldr	r0, [pc, #52]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d40:	f008 fa54 	bl	802a1ec <HAL_UARTEx_SetTxFifoThreshold>
 8021d44:	4603      	mov	r3, r0
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	d001      	beq.n	8021d4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8021d4a:	f000 f915 	bl	8021f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021d4e:	2100      	movs	r1, #0
 8021d50:	4808      	ldr	r0, [pc, #32]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d52:	f008 fa89 	bl	802a268 <HAL_UARTEx_SetRxFifoThreshold>
 8021d56:	4603      	mov	r3, r0
 8021d58:	2b00      	cmp	r3, #0
 8021d5a:	d001      	beq.n	8021d60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8021d5c:	f000 f90c 	bl	8021f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8021d60:	4804      	ldr	r0, [pc, #16]	; (8021d74 <MX_USART1_UART_Init+0x90>)
 8021d62:	f008 fa0a 	bl	802a17a <HAL_UARTEx_DisableFifoMode>
 8021d66:	4603      	mov	r3, r0
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	d001      	beq.n	8021d70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8021d6c:	f000 f904 	bl	8021f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8021d70:	bf00      	nop
 8021d72:	bd80      	pop	{r7, pc}
 8021d74:	200006dc 	.word	0x200006dc
 8021d78:	40013800 	.word	0x40013800

08021d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8021d7c:	b580      	push	{r7, lr}
 8021d7e:	b082      	sub	sp, #8
 8021d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8021d82:	4b12      	ldr	r3, [pc, #72]	; (8021dcc <MX_DMA_Init+0x50>)
 8021d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021d86:	4a11      	ldr	r2, [pc, #68]	; (8021dcc <MX_DMA_Init+0x50>)
 8021d88:	f043 0304 	orr.w	r3, r3, #4
 8021d8c:	6493      	str	r3, [r2, #72]	; 0x48
 8021d8e:	4b0f      	ldr	r3, [pc, #60]	; (8021dcc <MX_DMA_Init+0x50>)
 8021d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021d92:	f003 0304 	and.w	r3, r3, #4
 8021d96:	607b      	str	r3, [r7, #4]
 8021d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8021d9a:	4b0c      	ldr	r3, [pc, #48]	; (8021dcc <MX_DMA_Init+0x50>)
 8021d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021d9e:	4a0b      	ldr	r2, [pc, #44]	; (8021dcc <MX_DMA_Init+0x50>)
 8021da0:	f043 0301 	orr.w	r3, r3, #1
 8021da4:	6493      	str	r3, [r2, #72]	; 0x48
 8021da6:	4b09      	ldr	r3, [pc, #36]	; (8021dcc <MX_DMA_Init+0x50>)
 8021da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021daa:	f003 0301 	and.w	r3, r3, #1
 8021dae:	603b      	str	r3, [r7, #0]
 8021db0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8021db2:	2200      	movs	r2, #0
 8021db4:	2100      	movs	r1, #0
 8021db6:	200b      	movs	r0, #11
 8021db8:	f002 fbc3 	bl	8024542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8021dbc:	200b      	movs	r0, #11
 8021dbe:	f002 fbdc 	bl	802457a <HAL_NVIC_EnableIRQ>

}
 8021dc2:	bf00      	nop
 8021dc4:	3708      	adds	r7, #8
 8021dc6:	46bd      	mov	sp, r7
 8021dc8:	bd80      	pop	{r7, pc}
 8021dca:	bf00      	nop
 8021dcc:	40021000 	.word	0x40021000

08021dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8021dd0:	b580      	push	{r7, lr}
 8021dd2:	b08a      	sub	sp, #40	; 0x28
 8021dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021dd6:	f107 0314 	add.w	r3, r7, #20
 8021dda:	2200      	movs	r2, #0
 8021ddc:	601a      	str	r2, [r3, #0]
 8021dde:	605a      	str	r2, [r3, #4]
 8021de0:	609a      	str	r2, [r3, #8]
 8021de2:	60da      	str	r2, [r3, #12]
 8021de4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021de6:	4b25      	ldr	r3, [pc, #148]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021dea:	4a24      	ldr	r2, [pc, #144]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021dec:	f043 0304 	orr.w	r3, r3, #4
 8021df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8021df2:	4b22      	ldr	r3, [pc, #136]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021df6:	f003 0304 	and.w	r3, r3, #4
 8021dfa:	613b      	str	r3, [r7, #16]
 8021dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021dfe:	4b1f      	ldr	r3, [pc, #124]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021e02:	4a1e      	ldr	r2, [pc, #120]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021e04:	f043 0301 	orr.w	r3, r3, #1
 8021e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8021e0a:	4b1c      	ldr	r3, [pc, #112]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021e0e:	f003 0301 	and.w	r3, r3, #1
 8021e12:	60fb      	str	r3, [r7, #12]
 8021e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8021e16:	4b19      	ldr	r3, [pc, #100]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021e1a:	4a18      	ldr	r2, [pc, #96]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021e1c:	f043 0310 	orr.w	r3, r3, #16
 8021e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8021e22:	4b16      	ldr	r3, [pc, #88]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021e26:	f003 0310 	and.w	r3, r3, #16
 8021e2a:	60bb      	str	r3, [r7, #8]
 8021e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021e2e:	4b13      	ldr	r3, [pc, #76]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021e32:	4a12      	ldr	r2, [pc, #72]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021e34:	f043 0302 	orr.w	r3, r3, #2
 8021e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8021e3a:	4b10      	ldr	r3, [pc, #64]	; (8021e7c <MX_GPIO_Init+0xac>)
 8021e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021e3e:	f003 0302 	and.w	r3, r3, #2
 8021e42:	607b      	str	r3, [r7, #4]
 8021e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8021e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8021e4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8021e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e52:	2300      	movs	r3, #0
 8021e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8021e56:	f107 0314 	add.w	r3, r7, #20
 8021e5a:	4619      	mov	r1, r3
 8021e5c:	4808      	ldr	r0, [pc, #32]	; (8021e80 <MX_GPIO_Init+0xb0>)
 8021e5e:	f003 f9e3 	bl	8025228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8021e62:	2200      	movs	r2, #0
 8021e64:	2100      	movs	r1, #0
 8021e66:	2028      	movs	r0, #40	; 0x28
 8021e68:	f002 fb6b 	bl	8024542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8021e6c:	2028      	movs	r0, #40	; 0x28
 8021e6e:	f002 fb84 	bl	802457a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8021e72:	bf00      	nop
 8021e74:	3728      	adds	r7, #40	; 0x28
 8021e76:	46bd      	mov	sp, r7
 8021e78:	bd80      	pop	{r7, pc}
 8021e7a:	bf00      	nop
 8021e7c:	40021000 	.word	0x40021000
 8021e80:	48000800 	.word	0x48000800

08021e84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021e84:	b580      	push	{r7, lr}
 8021e86:	b082      	sub	sp, #8
 8021e88:	af00      	add	r7, sp, #0
 8021e8a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && winBool == 0 && overBool == 0 ) {
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	681b      	ldr	r3, [r3, #0]
 8021e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021e94:	d112      	bne.n	8021ebc <HAL_TIM_PeriodElapsedCallback+0x38>
 8021e96:	4b0b      	ldr	r3, [pc, #44]	; (8021ec4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8021e98:	681b      	ldr	r3, [r3, #0]
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	d10e      	bne.n	8021ebc <HAL_TIM_PeriodElapsedCallback+0x38>
 8021e9e:	4b0a      	ldr	r3, [pc, #40]	; (8021ec8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8021ea0:	681b      	ldr	r3, [r3, #0]
 8021ea2:	2b00      	cmp	r3, #0
 8021ea4:	d10a      	bne.n	8021ebc <HAL_TIM_PeriodElapsedCallback+0x38>
//		HAL_IncTick();
		timeSec++;
 8021ea6:	4b09      	ldr	r3, [pc, #36]	; (8021ecc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8021ea8:	681b      	ldr	r3, [r3, #0]
 8021eaa:	3301      	adds	r3, #1
 8021eac:	4a07      	ldr	r2, [pc, #28]	; (8021ecc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8021eae:	6013      	str	r3, [r2, #0]
		updateTime(timeSec, MAXTIME);
 8021eb0:	4b06      	ldr	r3, [pc, #24]	; (8021ecc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	211e      	movs	r1, #30
 8021eb6:	4618      	mov	r0, r3
 8021eb8:	f000 f93a 	bl	8022130 <updateTime>
	}
}
 8021ebc:	bf00      	nop
 8021ebe:	3708      	adds	r7, #8
 8021ec0:	46bd      	mov	sp, r7
 8021ec2:	bd80      	pop	{r7, pc}
 8021ec4:	20000784 	.word	0x20000784
 8021ec8:	20000780 	.word	0x20000780
 8021ecc:	2000077c 	.word	0x2000077c

08021ed0 <HAL_GPIO_EXTI_Callback>:

//callback function for interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8021ed0:	b580      	push	{r7, lr}
 8021ed2:	b088      	sub	sp, #32
 8021ed4:	af00      	add	r7, sp, #0
 8021ed6:	4603      	mov	r3, r0
 8021ed8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) { //verify pin
 8021eda:	88fb      	ldrh	r3, [r7, #6]
 8021edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8021ee0:	d127      	bne.n	8021f32 <HAL_GPIO_EXTI_Callback+0x62>
		clearScreen();
 8021ee2:	f000 f975 	bl	80221d0 <clearScreen>
		selectRandomMaze();
 8021ee6:	f000 f955 	bl	8022194 <selectRandomMaze>
		int startPosition = determineStartPosition();
 8021eea:	f000 f883 	bl	8021ff4 <determineStartPosition>
 8021eee:	61f8      	str	r0, [r7, #28]
		int startRow = startPosition /16;
 8021ef0:	69fb      	ldr	r3, [r7, #28]
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	da00      	bge.n	8021ef8 <HAL_GPIO_EXTI_Callback+0x28>
 8021ef6:	330f      	adds	r3, #15
 8021ef8:	111b      	asrs	r3, r3, #4
 8021efa:	61bb      	str	r3, [r7, #24]
		int startColumn = startPosition % 16;
 8021efc:	69fb      	ldr	r3, [r7, #28]
 8021efe:	425a      	negs	r2, r3
 8021f00:	f003 030f 	and.w	r3, r3, #15
 8021f04:	f002 020f 	and.w	r2, r2, #15
 8021f08:	bf58      	it	pl
 8021f0a:	4253      	negpl	r3, r2
 8021f0c:	617b      	str	r3, [r7, #20]

		int xPosition = startColumn * 8 +4;
 8021f0e:	697b      	ldr	r3, [r7, #20]
 8021f10:	00db      	lsls	r3, r3, #3
 8021f12:	3304      	adds	r3, #4
 8021f14:	613b      	str	r3, [r7, #16]
		int yPosition = startRow * 8 + 4;
 8021f16:	69bb      	ldr	r3, [r7, #24]
 8021f18:	00db      	lsls	r3, r3, #3
 8021f1a:	3304      	adds	r3, #4
 8021f1c:	60fb      	str	r3, [r7, #12]


		Init_Ball(xPosition,yPosition);
 8021f1e:	68f9      	ldr	r1, [r7, #12]
 8021f20:	6938      	ldr	r0, [r7, #16]
 8021f22:	f7fe ffc5 	bl	8020eb0 <Init_Ball>
		displayMaze1();
 8021f26:	f000 f95d 	bl	80221e4 <displayMaze1>
		Initialize_Game(TIMESTEP);
 8021f2a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8021f3c <HAL_GPIO_EXTI_Callback+0x6c>
 8021f2e:	f7fe ff6d 	bl	8020e0c <Initialize_Game>
	}
}
 8021f32:	bf00      	nop
 8021f34:	3720      	adds	r7, #32
 8021f36:	46bd      	mov	sp, r7
 8021f38:	bd80      	pop	{r7, pc}
 8021f3a:	bf00      	nop
 8021f3c:	3c23d70a 	.word	0x3c23d70a

08021f40 <_write>:



//function for printing to console (swb port 0)
int _write(int file, char *ptr, int len)
{
 8021f40:	b580      	push	{r7, lr}
 8021f42:	b086      	sub	sp, #24
 8021f44:	af00      	add	r7, sp, #0
 8021f46:	60f8      	str	r0, [r7, #12]
 8021f48:	60b9      	str	r1, [r7, #8]
 8021f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021f4c:	2300      	movs	r3, #0
 8021f4e:	617b      	str	r3, [r7, #20]
 8021f50:	e009      	b.n	8021f66 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8021f52:	68bb      	ldr	r3, [r7, #8]
 8021f54:	1c5a      	adds	r2, r3, #1
 8021f56:	60ba      	str	r2, [r7, #8]
 8021f58:	781b      	ldrb	r3, [r3, #0]
 8021f5a:	4618      	mov	r0, r3
 8021f5c:	f7ff fbb2 	bl	80216c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021f60:	697b      	ldr	r3, [r7, #20]
 8021f62:	3301      	adds	r3, #1
 8021f64:	617b      	str	r3, [r7, #20]
 8021f66:	697a      	ldr	r2, [r7, #20]
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	429a      	cmp	r2, r3
 8021f6c:	dbf1      	blt.n	8021f52 <_write+0x12>
  }
  return len;
 8021f6e:	687b      	ldr	r3, [r7, #4]
}
 8021f70:	4618      	mov	r0, r3
 8021f72:	3718      	adds	r7, #24
 8021f74:	46bd      	mov	sp, r7
 8021f76:	bd80      	pop	{r7, pc}

08021f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021f78:	b480      	push	{r7}
 8021f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021f7c:	b672      	cpsid	i
}
 8021f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021f80:	e7fe      	b.n	8021f80 <Error_Handler+0x8>
	...

08021f84 <mazeDisplayInit>:
uint32_t sineValue[500];
uint32_t sine2Value[200];

#define MAZE_NUM 4; //number of mazes currently loaded to QPSI

void mazeDisplayInit() {
 8021f84:	b580      	push	{r7, lr}
 8021f86:	af00      	add	r7, sp, #0
	  BSP_QSPI_Init();
 8021f88:	f000 fea0 	bl	8022ccc <BSP_QSPI_Init>
	  srand(time(NULL));  // seed the random number generator
 8021f8c:	2000      	movs	r0, #0
 8021f8e:	f009 fa4f 	bl	802b430 <time>
 8021f92:	4602      	mov	r2, r0
 8021f94:	460b      	mov	r3, r1
 8021f96:	4613      	mov	r3, r2
 8021f98:	4618      	mov	r0, r3
 8021f9a:	f009 f9bd 	bl	802b318 <srand>
	  ssd1306_Init();
 8021f9e:	f008 fa29 	bl	802a3f4 <ssd1306_Init>

	  writeMazesToFlash();
 8021fa2:	f000 f80b 	bl	8021fbc <writeMazesToFlash>
	  //initializeSounds();


	  readMazeFromSector(0, rMaze); //read initial maze
 8021fa6:	4904      	ldr	r1, [pc, #16]	; (8021fb8 <mazeDisplayInit+0x34>)
 8021fa8:	2000      	movs	r0, #0
 8021faa:	f000 fa05 	bl	80223b8 <readMazeFromSector>
//	  readMazeFromSector(1, rMaze);
	  convertLoadedMazeToDisplayedMaze(rMaze);
 8021fae:	4802      	ldr	r0, [pc, #8]	; (8021fb8 <mazeDisplayInit+0x34>)
 8021fb0:	f000 f946 	bl	8022240 <convertLoadedMazeToDisplayedMaze>
}
 8021fb4:	bf00      	nop
 8021fb6:	bd80      	pop	{r7, pc}
 8021fb8:	20000788 	.word	0x20000788

08021fbc <writeMazesToFlash>:

void writeMazesToFlash() {
 8021fbc:	b580      	push	{r7, lr}
 8021fbe:	af00      	add	r7, sp, #0
	writeMazeToSectors(0, toLoadMaze4);
 8021fc0:	4908      	ldr	r1, [pc, #32]	; (8021fe4 <writeMazesToFlash+0x28>)
 8021fc2:	2000      	movs	r0, #0
 8021fc4:	f000 f9da 	bl	802237c <writeMazeToSectors>
	writeMazeToSectors(1, toLoadMaze5);
 8021fc8:	4907      	ldr	r1, [pc, #28]	; (8021fe8 <writeMazesToFlash+0x2c>)
 8021fca:	2001      	movs	r0, #1
 8021fcc:	f000 f9d6 	bl	802237c <writeMazeToSectors>
	writeMazeToSectors(2, toLoadMaze6);
 8021fd0:	4906      	ldr	r1, [pc, #24]	; (8021fec <writeMazesToFlash+0x30>)
 8021fd2:	2002      	movs	r0, #2
 8021fd4:	f000 f9d2 	bl	802237c <writeMazeToSectors>
	writeMazeToSectors(3, toLoadMaze7);
 8021fd8:	4905      	ldr	r1, [pc, #20]	; (8021ff0 <writeMazesToFlash+0x34>)
 8021fda:	2003      	movs	r0, #3
 8021fdc:	f000 f9ce 	bl	802237c <writeMazeToSectors>
}
 8021fe0:	bf00      	nop
 8021fe2:	bd80      	pop	{r7, pc}
 8021fe4:	20000000 	.word	0x20000000
 8021fe8:	20000080 	.word	0x20000080
 8021fec:	20000100 	.word	0x20000100
 8021ff0:	20000180 	.word	0x20000180

08021ff4 <determineStartPosition>:

int determineStartPosition() {
 8021ff4:	b480      	push	{r7}
 8021ff6:	b083      	sub	sp, #12
 8021ff8:	af00      	add	r7, sp, #0
	int result = -1;
 8021ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8021ffe:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 128; i++) {
 8022000:	2300      	movs	r3, #0
 8022002:	607b      	str	r3, [r7, #4]
 8022004:	e00c      	b.n	8022020 <determineStartPosition+0x2c>
		if(rMaze[i] & 32) {
 8022006:	4a0b      	ldr	r2, [pc, #44]	; (8022034 <determineStartPosition+0x40>)
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	4413      	add	r3, r2
 802200c:	781b      	ldrb	r3, [r3, #0]
 802200e:	f003 0320 	and.w	r3, r3, #32
 8022012:	2b00      	cmp	r3, #0
 8022014:	d001      	beq.n	802201a <determineStartPosition+0x26>
			return i;
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	e006      	b.n	8022028 <determineStartPosition+0x34>
	for(int i = 0; i < 128; i++) {
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	3301      	adds	r3, #1
 802201e:	607b      	str	r3, [r7, #4]
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	2b7f      	cmp	r3, #127	; 0x7f
 8022024:	ddef      	ble.n	8022006 <determineStartPosition+0x12>
		}
	}

	return result;
 8022026:	683b      	ldr	r3, [r7, #0]
}
 8022028:	4618      	mov	r0, r3
 802202a:	370c      	adds	r7, #12
 802202c:	46bd      	mov	sp, r7
 802202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022032:	4770      	bx	lr
 8022034:	20000788 	.word	0x20000788

08022038 <playSounds>:
//
//	  j+=1;
//	}
}

void playSounds() {
 8022038:	b580      	push	{r7, lr}
 802203a:	b082      	sub	sp, #8
 802203c:	af02      	add	r7, sp, #8
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 802203e:	2300      	movs	r3, #0
 8022040:	9300      	str	r3, [sp, #0]
 8022042:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 8022046:	4a2a      	ldr	r2, [pc, #168]	; (80220f0 <playSounds+0xb8>)
 8022048:	2100      	movs	r1, #0
 802204a:	482a      	ldr	r0, [pc, #168]	; (80220f4 <playSounds+0xbc>)
 802204c:	f002 fb24 	bl	8024698 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 8022050:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8022054:	f002 f976 	bl	8024344 <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8022058:	2100      	movs	r1, #0
 802205a:	4826      	ldr	r0, [pc, #152]	; (80220f4 <playSounds+0xbc>)
 802205c:	f002 fbe8 	bl	8024830 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 8022060:	2300      	movs	r3, #0
 8022062:	9300      	str	r3, [sp, #0]
 8022064:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 8022068:	4a21      	ldr	r2, [pc, #132]	; (80220f0 <playSounds+0xb8>)
 802206a:	2100      	movs	r1, #0
 802206c:	4821      	ldr	r0, [pc, #132]	; (80220f4 <playSounds+0xbc>)
 802206e:	f002 fb13 	bl	8024698 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 8022072:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8022076:	f002 f965 	bl	8024344 <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 802207a:	2100      	movs	r1, #0
 802207c:	481d      	ldr	r0, [pc, #116]	; (80220f4 <playSounds+0xbc>)
 802207e:	f002 fbd7 	bl	8024830 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 8022082:	2300      	movs	r3, #0
 8022084:	9300      	str	r3, [sp, #0]
 8022086:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 802208a:	4a19      	ldr	r2, [pc, #100]	; (80220f0 <playSounds+0xb8>)
 802208c:	2100      	movs	r1, #0
 802208e:	4819      	ldr	r0, [pc, #100]	; (80220f4 <playSounds+0xbc>)
 8022090:	f002 fb02 	bl	8024698 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 8022094:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8022098:	f002 f954 	bl	8024344 <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 802209c:	2100      	movs	r1, #0
 802209e:	4815      	ldr	r0, [pc, #84]	; (80220f4 <playSounds+0xbc>)
 80220a0:	f002 fbc6 	bl	8024830 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 80220a4:	2300      	movs	r3, #0
 80220a6:	9300      	str	r3, [sp, #0]
 80220a8:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 80220ac:	4a10      	ldr	r2, [pc, #64]	; (80220f0 <playSounds+0xb8>)
 80220ae:	2100      	movs	r1, #0
 80220b0:	4810      	ldr	r0, [pc, #64]	; (80220f4 <playSounds+0xbc>)
 80220b2:	f002 faf1 	bl	8024698 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 80220b6:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80220ba:	f002 f943 	bl	8024344 <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80220be:	2100      	movs	r1, #0
 80220c0:	480c      	ldr	r0, [pc, #48]	; (80220f4 <playSounds+0xbc>)
 80220c2:	f002 fbb5 	bl	8024830 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 80220c6:	2300      	movs	r3, #0
 80220c8:	9300      	str	r3, [sp, #0]
 80220ca:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 80220ce:	4a08      	ldr	r2, [pc, #32]	; (80220f0 <playSounds+0xb8>)
 80220d0:	2100      	movs	r1, #0
 80220d2:	4808      	ldr	r0, [pc, #32]	; (80220f4 <playSounds+0xbc>)
 80220d4:	f002 fae0 	bl	8024698 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 80220d8:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80220dc:	f002 f932 	bl	8024344 <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80220e0:	2100      	movs	r1, #0
 80220e2:	4804      	ldr	r0, [pc, #16]	; (80220f4 <playSounds+0xbc>)
 80220e4:	f002 fba4 	bl	8024830 <HAL_DAC_Stop_DMA>
}
 80220e8:	bf00      	nop
 80220ea:	46bd      	mov	sp, r7
 80220ec:	bd80      	pop	{r7, pc}
 80220ee:	bf00      	nop
 80220f0:	0802dfe0 	.word	0x0802dfe0
 80220f4:	200004d8 	.word	0x200004d8

080220f8 <playGameOverSound>:

void playGameOverSound() {
 80220f8:	b580      	push	{r7, lr}
 80220fa:	b082      	sub	sp, #8
 80220fc:	af02      	add	r7, sp, #8
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) gameover_sig, SIGNAL_LENGTH_GO, DAC_ALIGN_12B_R);
 80220fe:	2300      	movs	r3, #0
 8022100:	9300      	str	r3, [sp, #0]
 8022102:	f44f 339a 	mov.w	r3, #78848	; 0x13400
 8022106:	4a08      	ldr	r2, [pc, #32]	; (8022128 <playGameOverSound+0x30>)
 8022108:	2100      	movs	r1, #0
 802210a:	4808      	ldr	r0, [pc, #32]	; (802212c <playGameOverSound+0x34>)
 802210c:	f002 fac4 	bl	8024698 <HAL_DAC_Start_DMA>
	HAL_Delay(1800);
 8022110:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8022114:	f002 f916 	bl	8024344 <HAL_Delay>
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8022118:	2100      	movs	r1, #0
 802211a:	4804      	ldr	r0, [pc, #16]	; (802212c <playGameOverSound+0x34>)
 802211c:	f002 fb88 	bl	8024830 <HAL_DAC_Stop_DMA>
}
 8022120:	bf00      	nop
 8022122:	46bd      	mov	sp, r7
 8022124:	bd80      	pop	{r7, pc}
 8022126:	bf00      	nop
 8022128:	08052fe0 	.word	0x08052fe0
 802212c:	200004d8 	.word	0x200004d8

08022130 <updateTime>:


void updateTime(int i, int maxtime){
 8022130:	b580      	push	{r7, lr}
 8022132:	b088      	sub	sp, #32
 8022134:	af00      	add	r7, sp, #0
 8022136:	6078      	str	r0, [r7, #4]
 8022138:	6039      	str	r1, [r7, #0]
	ssd1306_SetCursor(115,2); //top right
 802213a:	2102      	movs	r1, #2
 802213c:	2073      	movs	r0, #115	; 0x73
 802213e:	f008 fb11 	bl	802a764 <ssd1306_SetCursor>
	int num = maxtime-i;
 8022142:	683a      	ldr	r2, [r7, #0]
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	1ad3      	subs	r3, r2, r3
 8022148:	61fb      	str	r3, [r7, #28]
	char str[20];
	if (num<10){ //single digit
 802214a:	69fb      	ldr	r3, [r7, #28]
 802214c:	2b09      	cmp	r3, #9
 802214e:	dc07      	bgt.n	8022160 <updateTime+0x30>
		sprintf(str, "%02d", num);
 8022150:	f107 0308 	add.w	r3, r7, #8
 8022154:	69fa      	ldr	r2, [r7, #28]
 8022156:	490c      	ldr	r1, [pc, #48]	; (8022188 <updateTime+0x58>)
 8022158:	4618      	mov	r0, r3
 802215a:	f009 f949 	bl	802b3f0 <siprintf>
 802215e:	e006      	b.n	802216e <updateTime+0x3e>
	}else{
		sprintf(str, "%d", num);
 8022160:	f107 0308 	add.w	r3, r7, #8
 8022164:	69fa      	ldr	r2, [r7, #28]
 8022166:	4909      	ldr	r1, [pc, #36]	; (802218c <updateTime+0x5c>)
 8022168:	4618      	mov	r0, r3
 802216a:	f009 f941 	bl	802b3f0 <siprintf>
	}
	ssd1306_WriteString(str, Font_6x8, White); //write winning string
 802216e:	4a08      	ldr	r2, [pc, #32]	; (8022190 <updateTime+0x60>)
 8022170:	f107 0008 	add.w	r0, r7, #8
 8022174:	2301      	movs	r3, #1
 8022176:	ca06      	ldmia	r2, {r1, r2}
 8022178:	f008 face 	bl	802a718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 802217c:	f008 f9c8 	bl	802a510 <ssd1306_UpdateScreen>
}
 8022180:	bf00      	nop
 8022182:	3720      	adds	r7, #32
 8022184:	46bd      	mov	sp, r7
 8022186:	bd80      	pop	{r7, pc}
 8022188:	0802dfd4 	.word	0x0802dfd4
 802218c:	0802dfdc 	.word	0x0802dfdc
 8022190:	2000029c 	.word	0x2000029c

08022194 <selectRandomMaze>:


/*
 * fct to randomely select mazes from the number of mazes currently loaded to flash
 */
void selectRandomMaze(){
 8022194:	b580      	push	{r7, lr}
 8022196:	b082      	sub	sp, #8
 8022198:	af00      	add	r7, sp, #0

	int sel = rand() % MAZE_NUM;
 802219a:	f009 f8eb 	bl	802b374 <rand>
 802219e:	4603      	mov	r3, r0
 80221a0:	425a      	negs	r2, r3
 80221a2:	f003 0303 	and.w	r3, r3, #3
 80221a6:	f002 0203 	and.w	r2, r2, #3
 80221aa:	bf58      	it	pl
 80221ac:	4253      	negpl	r3, r2
 80221ae:	607b      	str	r3, [r7, #4]
	readMazeFromSector(sel, rMaze);
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	b29b      	uxth	r3, r3
 80221b4:	4905      	ldr	r1, [pc, #20]	; (80221cc <selectRandomMaze+0x38>)
 80221b6:	4618      	mov	r0, r3
 80221b8:	f000 f8fe 	bl	80223b8 <readMazeFromSector>
	convertLoadedMazeToDisplayedMaze(rMaze);
 80221bc:	4803      	ldr	r0, [pc, #12]	; (80221cc <selectRandomMaze+0x38>)
 80221be:	f000 f83f 	bl	8022240 <convertLoadedMazeToDisplayedMaze>
}
 80221c2:	bf00      	nop
 80221c4:	3708      	adds	r7, #8
 80221c6:	46bd      	mov	sp, r7
 80221c8:	bd80      	pop	{r7, pc}
 80221ca:	bf00      	nop
 80221cc:	20000788 	.word	0x20000788

080221d0 <clearScreen>:

void clearScreen(){
 80221d0:	b580      	push	{r7, lr}
 80221d2:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80221d4:	2000      	movs	r0, #0
 80221d6:	f008 f977 	bl	802a4c8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80221da:	f008 f999 	bl	802a510 <ssd1306_UpdateScreen>
}
 80221de:	bf00      	nop
 80221e0:	bd80      	pop	{r7, pc}
	...

080221e4 <displayMaze1>:

void displayMaze1() {
 80221e4:	b580      	push	{r7, lr}
 80221e6:	b082      	sub	sp, #8
 80221e8:	af00      	add	r7, sp, #0
	  for(int i = 0; i < 64; i++) {
 80221ea:	2300      	movs	r3, #0
 80221ec:	607b      	str	r3, [r7, #4]
 80221ee:	e01c      	b.n	802222a <displayMaze1+0x46>
		  for(int j = 0; j < 128; j++) {
 80221f0:	2300      	movs	r3, #0
 80221f2:	603b      	str	r3, [r7, #0]
 80221f4:	e013      	b.n	802221e <displayMaze1+0x3a>
			  if(mazeDisplayed[i][j] == 1) {
 80221f6:	4a11      	ldr	r2, [pc, #68]	; (802223c <displayMaze1+0x58>)
 80221f8:	687b      	ldr	r3, [r7, #4]
 80221fa:	01db      	lsls	r3, r3, #7
 80221fc:	441a      	add	r2, r3
 80221fe:	683b      	ldr	r3, [r7, #0]
 8022200:	4413      	add	r3, r2
 8022202:	781b      	ldrb	r3, [r3, #0]
 8022204:	2b01      	cmp	r3, #1
 8022206:	d107      	bne.n	8022218 <displayMaze1+0x34>
				  ssd1306_DrawPixel(j, i, White);
 8022208:	683b      	ldr	r3, [r7, #0]
 802220a:	b2db      	uxtb	r3, r3
 802220c:	687a      	ldr	r2, [r7, #4]
 802220e:	b2d1      	uxtb	r1, r2
 8022210:	2201      	movs	r2, #1
 8022212:	4618      	mov	r0, r3
 8022214:	f008 f9a4 	bl	802a560 <ssd1306_DrawPixel>
		  for(int j = 0; j < 128; j++) {
 8022218:	683b      	ldr	r3, [r7, #0]
 802221a:	3301      	adds	r3, #1
 802221c:	603b      	str	r3, [r7, #0]
 802221e:	683b      	ldr	r3, [r7, #0]
 8022220:	2b7f      	cmp	r3, #127	; 0x7f
 8022222:	dde8      	ble.n	80221f6 <displayMaze1+0x12>
	  for(int i = 0; i < 64; i++) {
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	3301      	adds	r3, #1
 8022228:	607b      	str	r3, [r7, #4]
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	2b3f      	cmp	r3, #63	; 0x3f
 802222e:	dddf      	ble.n	80221f0 <displayMaze1+0xc>
			  }
		  }
	  }

	  ssd1306_UpdateScreen();
 8022230:	f008 f96e 	bl	802a510 <ssd1306_UpdateScreen>
}
 8022234:	bf00      	nop
 8022236:	3708      	adds	r7, #8
 8022238:	46bd      	mov	sp, r7
 802223a:	bd80      	pop	{r7, pc}
 802223c:	20000808 	.word	0x20000808

08022240 <convertLoadedMazeToDisplayedMaze>:


void convertLoadedMazeToDisplayedMaze(uint8_t *loadedMaze) {
 8022240:	b480      	push	{r7}
 8022242:	b08b      	sub	sp, #44	; 0x2c
 8022244:	af00      	add	r7, sp, #0
 8022246:	6078      	str	r0, [r7, #4]
	//Initialize the Array with Zeros
		for(int i = 0; i < 64; i++) {
 8022248:	2300      	movs	r3, #0
 802224a:	627b      	str	r3, [r7, #36]	; 0x24
 802224c:	e013      	b.n	8022276 <convertLoadedMazeToDisplayedMaze+0x36>
			for(int j = 0; j < 128; j++) {
 802224e:	2300      	movs	r3, #0
 8022250:	623b      	str	r3, [r7, #32]
 8022252:	e00a      	b.n	802226a <convertLoadedMazeToDisplayedMaze+0x2a>
				mazeDisplayed[i][j] = 0;
 8022254:	4a48      	ldr	r2, [pc, #288]	; (8022378 <convertLoadedMazeToDisplayedMaze+0x138>)
 8022256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022258:	01db      	lsls	r3, r3, #7
 802225a:	441a      	add	r2, r3
 802225c:	6a3b      	ldr	r3, [r7, #32]
 802225e:	4413      	add	r3, r2
 8022260:	2200      	movs	r2, #0
 8022262:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 128; j++) {
 8022264:	6a3b      	ldr	r3, [r7, #32]
 8022266:	3301      	adds	r3, #1
 8022268:	623b      	str	r3, [r7, #32]
 802226a:	6a3b      	ldr	r3, [r7, #32]
 802226c:	2b7f      	cmp	r3, #127	; 0x7f
 802226e:	ddf1      	ble.n	8022254 <convertLoadedMazeToDisplayedMaze+0x14>
		for(int i = 0; i < 64; i++) {
 8022270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022272:	3301      	adds	r3, #1
 8022274:	627b      	str	r3, [r7, #36]	; 0x24
 8022276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022278:	2b3f      	cmp	r3, #63	; 0x3f
 802227a:	dde8      	ble.n	802224e <convertLoadedMazeToDisplayedMaze+0xe>
			}
		}

		//Iterate over all the cells in loaded Maze
		for(int i = 0; i < 128; i++) {
 802227c:	2300      	movs	r3, #0
 802227e:	61fb      	str	r3, [r7, #28]
 8022280:	e06f      	b.n	8022362 <convertLoadedMazeToDisplayedMaze+0x122>
			uint8_t cellRow = i / 16;
 8022282:	69fb      	ldr	r3, [r7, #28]
 8022284:	2b00      	cmp	r3, #0
 8022286:	da00      	bge.n	802228a <convertLoadedMazeToDisplayedMaze+0x4a>
 8022288:	330f      	adds	r3, #15
 802228a:	111b      	asrs	r3, r3, #4
 802228c:	75fb      	strb	r3, [r7, #23]
			uint8_t cellColumn = i %16;
 802228e:	69fb      	ldr	r3, [r7, #28]
 8022290:	425a      	negs	r2, r3
 8022292:	f003 030f 	and.w	r3, r3, #15
 8022296:	f002 020f 	and.w	r2, r2, #15
 802229a:	bf58      	it	pl
 802229c:	4253      	negpl	r3, r2
 802229e:	75bb      	strb	r3, [r7, #22]

			uint8_t cellNumber  = loadedMaze[i];
 80222a0:	69fb      	ldr	r3, [r7, #28]
 80222a2:	687a      	ldr	r2, [r7, #4]
 80222a4:	4413      	add	r3, r2
 80222a6:	781b      	ldrb	r3, [r3, #0]
 80222a8:	757b      	strb	r3, [r7, #21]
			uint8_t topWall = cellNumber  & 1;
 80222aa:	7d7b      	ldrb	r3, [r7, #21]
 80222ac:	f003 0301 	and.w	r3, r3, #1
 80222b0:	753b      	strb	r3, [r7, #20]
			uint8_t leftWall = cellNumber & 2;
 80222b2:	7d7b      	ldrb	r3, [r7, #21]
 80222b4:	f003 0302 	and.w	r3, r3, #2
 80222b8:	74fb      	strb	r3, [r7, #19]
			uint8_t bottomWall = cellNumber & 4;
 80222ba:	7d7b      	ldrb	r3, [r7, #21]
 80222bc:	f003 0304 	and.w	r3, r3, #4
 80222c0:	74bb      	strb	r3, [r7, #18]
			uint8_t rightWall = cellNumber & 8;
 80222c2:	7d7b      	ldrb	r3, [r7, #21]
 80222c4:	f003 0308 	and.w	r3, r3, #8
 80222c8:	747b      	strb	r3, [r7, #17]

			uint8_t leftWallIndex = cellColumn * 8;
 80222ca:	7dbb      	ldrb	r3, [r7, #22]
 80222cc:	00db      	lsls	r3, r3, #3
 80222ce:	743b      	strb	r3, [r7, #16]
			uint8_t rightWallIndex = leftWallIndex + 7;
 80222d0:	7c3b      	ldrb	r3, [r7, #16]
 80222d2:	3307      	adds	r3, #7
 80222d4:	73fb      	strb	r3, [r7, #15]
			uint8_t topWallIndex = cellRow * 8;
 80222d6:	7dfb      	ldrb	r3, [r7, #23]
 80222d8:	00db      	lsls	r3, r3, #3
 80222da:	73bb      	strb	r3, [r7, #14]
			uint8_t bottomWallIndex = topWallIndex + 7;
 80222dc:	7bbb      	ldrb	r3, [r7, #14]
 80222de:	3307      	adds	r3, #7
 80222e0:	737b      	strb	r3, [r7, #13]

			for(int k = 0; k < 8; k++) {
 80222e2:	2300      	movs	r3, #0
 80222e4:	61bb      	str	r3, [r7, #24]
 80222e6:	e036      	b.n	8022356 <convertLoadedMazeToDisplayedMaze+0x116>
				if(topWall != 0) {
 80222e8:	7d3b      	ldrb	r3, [r7, #20]
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	d009      	beq.n	8022302 <convertLoadedMazeToDisplayedMaze+0xc2>
					mazeDisplayed[topWallIndex][leftWallIndex+k]= 1;
 80222ee:	7bba      	ldrb	r2, [r7, #14]
 80222f0:	7c39      	ldrb	r1, [r7, #16]
 80222f2:	69bb      	ldr	r3, [r7, #24]
 80222f4:	440b      	add	r3, r1
 80222f6:	4920      	ldr	r1, [pc, #128]	; (8022378 <convertLoadedMazeToDisplayedMaze+0x138>)
 80222f8:	01d2      	lsls	r2, r2, #7
 80222fa:	440a      	add	r2, r1
 80222fc:	4413      	add	r3, r2
 80222fe:	2201      	movs	r2, #1
 8022300:	701a      	strb	r2, [r3, #0]
				}

				if(bottomWall != 0) {
 8022302:	7cbb      	ldrb	r3, [r7, #18]
 8022304:	2b00      	cmp	r3, #0
 8022306:	d009      	beq.n	802231c <convertLoadedMazeToDisplayedMaze+0xdc>
					mazeDisplayed[bottomWallIndex][leftWallIndex+k] = 1;
 8022308:	7b7a      	ldrb	r2, [r7, #13]
 802230a:	7c39      	ldrb	r1, [r7, #16]
 802230c:	69bb      	ldr	r3, [r7, #24]
 802230e:	440b      	add	r3, r1
 8022310:	4919      	ldr	r1, [pc, #100]	; (8022378 <convertLoadedMazeToDisplayedMaze+0x138>)
 8022312:	01d2      	lsls	r2, r2, #7
 8022314:	440a      	add	r2, r1
 8022316:	4413      	add	r3, r2
 8022318:	2201      	movs	r2, #1
 802231a:	701a      	strb	r2, [r3, #0]
				}

				if(leftWall != 0) {
 802231c:	7cfb      	ldrb	r3, [r7, #19]
 802231e:	2b00      	cmp	r3, #0
 8022320:	d009      	beq.n	8022336 <convertLoadedMazeToDisplayedMaze+0xf6>
					mazeDisplayed[topWallIndex+k][leftWallIndex] = 1;
 8022322:	7bba      	ldrb	r2, [r7, #14]
 8022324:	69bb      	ldr	r3, [r7, #24]
 8022326:	441a      	add	r2, r3
 8022328:	7c3b      	ldrb	r3, [r7, #16]
 802232a:	4913      	ldr	r1, [pc, #76]	; (8022378 <convertLoadedMazeToDisplayedMaze+0x138>)
 802232c:	01d2      	lsls	r2, r2, #7
 802232e:	440a      	add	r2, r1
 8022330:	4413      	add	r3, r2
 8022332:	2201      	movs	r2, #1
 8022334:	701a      	strb	r2, [r3, #0]
				}

				if(rightWall != 0) {
 8022336:	7c7b      	ldrb	r3, [r7, #17]
 8022338:	2b00      	cmp	r3, #0
 802233a:	d009      	beq.n	8022350 <convertLoadedMazeToDisplayedMaze+0x110>
					mazeDisplayed[topWallIndex+k][rightWallIndex] = 1;
 802233c:	7bba      	ldrb	r2, [r7, #14]
 802233e:	69bb      	ldr	r3, [r7, #24]
 8022340:	441a      	add	r2, r3
 8022342:	7bfb      	ldrb	r3, [r7, #15]
 8022344:	490c      	ldr	r1, [pc, #48]	; (8022378 <convertLoadedMazeToDisplayedMaze+0x138>)
 8022346:	01d2      	lsls	r2, r2, #7
 8022348:	440a      	add	r2, r1
 802234a:	4413      	add	r3, r2
 802234c:	2201      	movs	r2, #1
 802234e:	701a      	strb	r2, [r3, #0]
			for(int k = 0; k < 8; k++) {
 8022350:	69bb      	ldr	r3, [r7, #24]
 8022352:	3301      	adds	r3, #1
 8022354:	61bb      	str	r3, [r7, #24]
 8022356:	69bb      	ldr	r3, [r7, #24]
 8022358:	2b07      	cmp	r3, #7
 802235a:	ddc5      	ble.n	80222e8 <convertLoadedMazeToDisplayedMaze+0xa8>
		for(int i = 0; i < 128; i++) {
 802235c:	69fb      	ldr	r3, [r7, #28]
 802235e:	3301      	adds	r3, #1
 8022360:	61fb      	str	r3, [r7, #28]
 8022362:	69fb      	ldr	r3, [r7, #28]
 8022364:	2b7f      	cmp	r3, #127	; 0x7f
 8022366:	dd8c      	ble.n	8022282 <convertLoadedMazeToDisplayedMaze+0x42>
				}
			}
		}
}
 8022368:	bf00      	nop
 802236a:	bf00      	nop
 802236c:	372c      	adds	r7, #44	; 0x2c
 802236e:	46bd      	mov	sp, r7
 8022370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022374:	4770      	bx	lr
 8022376:	bf00      	nop
 8022378:	20000808 	.word	0x20000808

0802237c <writeMazeToSectors>:


void writeMazeToSectors(uint16_t mazeNumber, uint8_t *mazeToSave) {
 802237c:	b580      	push	{r7, lr}
 802237e:	b084      	sub	sp, #16
 8022380:	af00      	add	r7, sp, #0
 8022382:	4603      	mov	r3, r0
 8022384:	6039      	str	r1, [r7, #0]
 8022386:	80fb      	strh	r3, [r7, #6]
	uint16_t firstSector = mazeNumber;
 8022388:	88fb      	ldrh	r3, [r7, #6]
 802238a:	81fb      	strh	r3, [r7, #14]

	if(BSP_QSPI_Erase_Sector(firstSector) != QSPI_OK) {
 802238c:	89fb      	ldrh	r3, [r7, #14]
 802238e:	4618      	mov	r0, r3
 8022390:	f000 fdf2 	bl	8022f78 <BSP_QSPI_Erase_Sector>
//		UART_TX("Error Erase Sector 1\n", 21);
	}

	while(BSP_QSPI_GetStatus() != QSPI_OK);
 8022394:	bf00      	nop
 8022396:	f000 fe37 	bl	8023008 <BSP_QSPI_GetStatus>
 802239a:	4603      	mov	r3, r0
 802239c:	2b00      	cmp	r3, #0
 802239e:	d1fa      	bne.n	8022396 <writeMazeToSectors+0x1a>

//	UART_TX("Sector Erase OK!\n", 17);

	uint32_t firstStartAddress = firstSector * 4096;
 80223a0:	89fb      	ldrh	r3, [r7, #14]
 80223a2:	031b      	lsls	r3, r3, #12
 80223a4:	60bb      	str	r3, [r7, #8]

	if(BSP_QSPI_Write(mazeToSave, firstStartAddress, 128) != QSPI_OK) {
 80223a6:	2280      	movs	r2, #128	; 0x80
 80223a8:	68b9      	ldr	r1, [r7, #8]
 80223aa:	6838      	ldr	r0, [r7, #0]
 80223ac:	f000 fd5e 	bl	8022e6c <BSP_QSPI_Write>
//		UART_TX("Write Error\n", 12);
	}


//	UART_TX("Maze Write OK\n", 14);
}
 80223b0:	bf00      	nop
 80223b2:	3710      	adds	r7, #16
 80223b4:	46bd      	mov	sp, r7
 80223b6:	bd80      	pop	{r7, pc}

080223b8 <readMazeFromSector>:

void readMazeFromSector(uint16_t mazeNumber, uint8_t *mazeBuffer) {
 80223b8:	b580      	push	{r7, lr}
 80223ba:	b084      	sub	sp, #16
 80223bc:	af00      	add	r7, sp, #0
 80223be:	4603      	mov	r3, r0
 80223c0:	6039      	str	r1, [r7, #0]
 80223c2:	80fb      	strh	r3, [r7, #6]
	uint16_t firstSector = mazeNumber;
 80223c4:	88fb      	ldrh	r3, [r7, #6]
 80223c6:	81fb      	strh	r3, [r7, #14]
	uint32_t firstStartAddress = firstSector * 4096;
 80223c8:	89fb      	ldrh	r3, [r7, #14]
 80223ca:	031b      	lsls	r3, r3, #12
 80223cc:	60bb      	str	r3, [r7, #8]

	if(BSP_QSPI_Read(mazeBuffer, firstStartAddress, 128) != QSPI_OK) {
 80223ce:	2280      	movs	r2, #128	; 0x80
 80223d0:	68b9      	ldr	r1, [r7, #8]
 80223d2:	6838      	ldr	r0, [r7, #0]
 80223d4:	f000 fcf8 	bl	8022dc8 <BSP_QSPI_Read>
//		UART_TX("Read Error\n", 11);
	}


//	UART_TX("Maze Read OK\n", 13);
}
 80223d8:	bf00      	nop
 80223da:	3710      	adds	r7, #16
 80223dc:	46bd      	mov	sp, r7
 80223de:	bd80      	pop	{r7, pc}

080223e0 <Sensors_Init>:

/*
 *  @brief  Initialize the ACCELERO and GYRO.
  * @retval None.
 */
void Sensors_Init() {
 80223e0:	b580      	push	{r7, lr}
 80223e2:	af00      	add	r7, sp, #0
	 BSP_GYRO_Init();
 80223e4:	f000 fbfe 	bl	8022be4 <BSP_GYRO_Init>
	 BSP_ACCELERO_Init();
 80223e8:	f000 fba6 	bl	8022b38 <BSP_ACCELERO_Init>

	 /* Set gyroscope to normal power mode. */
	 BSP_GYRO_LowPower(1);
 80223ec:	2001      	movs	r0, #1
 80223ee:	f000 fc3b 	bl	8022c68 <BSP_GYRO_LowPower>
}
 80223f2:	bf00      	nop
 80223f4:	bd80      	pop	{r7, pc}
	...

080223f8 <Set_Sampling_Frequency>:

/*
 *  @brief  Set sensor sampling frequency and sampling period.
  * @retval None.
 */
void Set_Sampling_Frequency(int frequency) {
 80223f8:	b580      	push	{r7, lr}
 80223fa:	b082      	sub	sp, #8
 80223fc:	af00      	add	r7, sp, #0
 80223fe:	6078      	str	r0, [r7, #4]
	SAMPLING_FREQUENCY = frequency;
 8022400:	4a0d      	ldr	r2, [pc, #52]	; (8022438 <Set_Sampling_Frequency+0x40>)
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	6013      	str	r3, [r2, #0]
	DT = 1.0/SAMPLING_FREQUENCY;
 8022406:	4b0c      	ldr	r3, [pc, #48]	; (8022438 <Set_Sampling_Frequency+0x40>)
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	4618      	mov	r0, r3
 802240c:	f7fd ffea 	bl	80203e4 <__aeabi_i2d>
 8022410:	4602      	mov	r2, r0
 8022412:	460b      	mov	r3, r1
 8022414:	f04f 0000 	mov.w	r0, #0
 8022418:	4908      	ldr	r1, [pc, #32]	; (802243c <Set_Sampling_Frequency+0x44>)
 802241a:	f7fe f977 	bl	802070c <__aeabi_ddiv>
 802241e:	4602      	mov	r2, r0
 8022420:	460b      	mov	r3, r1
 8022422:	4610      	mov	r0, r2
 8022424:	4619      	mov	r1, r3
 8022426:	f7fe fb1f 	bl	8020a68 <__aeabi_d2f>
 802242a:	4603      	mov	r3, r0
 802242c:	4a04      	ldr	r2, [pc, #16]	; (8022440 <Set_Sampling_Frequency+0x48>)
 802242e:	6013      	str	r3, [r2, #0]
}
 8022430:	bf00      	nop
 8022432:	3708      	adds	r7, #8
 8022434:	46bd      	mov	sp, r7
 8022436:	bd80      	pop	{r7, pc}
 8022438:	20002808 	.word	0x20002808
 802243c:	3ff00000 	.word	0x3ff00000
 8022440:	2000280c 	.word	0x2000280c

08022444 <Measure_Gyro_Bias>:

/*
 *  @brief  Measure GYRO bias
  * @retval None.
 */
void Measure_Gyro_Bias() {
 8022444:	b580      	push	{r7, lr}
 8022446:	b084      	sub	sp, #16
 8022448:	af00      	add	r7, sp, #0
	float sum_x, sum_y = 0;
 802244a:	f04f 0300 	mov.w	r3, #0
 802244e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 10000 ;i++){
 8022450:	2300      	movs	r3, #0
 8022452:	607b      	str	r3, [r7, #4]
 8022454:	e017      	b.n	8022486 <Measure_Gyro_Bias+0x42>
		BSP_GYRO_GetXYZ(gyro_xyz);
 8022456:	4819      	ldr	r0, [pc, #100]	; (80224bc <Measure_Gyro_Bias+0x78>)
 8022458:	f000 fc20 	bl	8022c9c <BSP_GYRO_GetXYZ>
		sum_x += gyro_xyz[0];
 802245c:	4b17      	ldr	r3, [pc, #92]	; (80224bc <Measure_Gyro_Bias+0x78>)
 802245e:	edd3 7a00 	vldr	s15, [r3]
 8022462:	ed97 7a03 	vldr	s14, [r7, #12]
 8022466:	ee77 7a27 	vadd.f32	s15, s14, s15
 802246a:	edc7 7a03 	vstr	s15, [r7, #12]
		sum_y += gyro_xyz[1];
 802246e:	4b13      	ldr	r3, [pc, #76]	; (80224bc <Measure_Gyro_Bias+0x78>)
 8022470:	edd3 7a01 	vldr	s15, [r3, #4]
 8022474:	ed97 7a02 	vldr	s14, [r7, #8]
 8022478:	ee77 7a27 	vadd.f32	s15, s14, s15
 802247c:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int i = 0; i < 10000 ;i++){
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	3301      	adds	r3, #1
 8022484:	607b      	str	r3, [r7, #4]
 8022486:	687b      	ldr	r3, [r7, #4]
 8022488:	f242 720f 	movw	r2, #9999	; 0x270f
 802248c:	4293      	cmp	r3, r2
 802248e:	dde2      	ble.n	8022456 <Measure_Gyro_Bias+0x12>
	}
	gyro_x_bias = sum_x/10000;
 8022490:	ed97 7a03 	vldr	s14, [r7, #12]
 8022494:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80224c0 <Measure_Gyro_Bias+0x7c>
 8022498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802249c:	4b09      	ldr	r3, [pc, #36]	; (80224c4 <Measure_Gyro_Bias+0x80>)
 802249e:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_bias = sum_y/10000;
 80224a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80224a6:	eddf 6a06 	vldr	s13, [pc, #24]	; 80224c0 <Measure_Gyro_Bias+0x7c>
 80224aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80224ae:	4b06      	ldr	r3, [pc, #24]	; (80224c8 <Measure_Gyro_Bias+0x84>)
 80224b0:	edc3 7a00 	vstr	s15, [r3]
}
 80224b4:	bf00      	nop
 80224b6:	3710      	adds	r7, #16
 80224b8:	46bd      	mov	sp, r7
 80224ba:	bd80      	pop	{r7, pc}
 80224bc:	20002818 	.word	0x20002818
 80224c0:	461c4000 	.word	0x461c4000
 80224c4:	20002810 	.word	0x20002810
 80224c8:	20002814 	.word	0x20002814
 80224cc:	00000000 	.word	0x00000000

080224d0 <Measure_Orientation>:

/*
 *  @brief  Measure STM32 Board Orientation
  * @retval 2-element orientation array (x, y).
 */
void Measure_Orientation(float* orientation) {
 80224d0:	b5b0      	push	{r4, r5, r7, lr}
 80224d2:	b084      	sub	sp, #16
 80224d4:	af00      	add	r7, sp, #0
 80224d6:	6078      	str	r0, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// sensor measurements
	BSP_ACCELERO_AccGetXYZ(accel_xyz);
 80224d8:	48d1      	ldr	r0, [pc, #836]	; (8022820 <Measure_Orientation+0x350>)
 80224da:	f000 fb6b 	bl	8022bb4 <BSP_ACCELERO_AccGetXYZ>
    BSP_GYRO_GetXYZ(gyro_xyz);
 80224de:	48d1      	ldr	r0, [pc, #836]	; (8022824 <Measure_Orientation+0x354>)
 80224e0:	f000 fbdc 	bl	8022c9c <BSP_GYRO_GetXYZ>

	// acceleration magnitude
	float accel_mag = sqrt(accel_xyz[0] * accel_xyz[0] + accel_xyz[1] * accel_xyz[1] + accel_xyz[2] * accel_xyz[2]);
 80224e4:	4bce      	ldr	r3, [pc, #824]	; (8022820 <Measure_Orientation+0x350>)
 80224e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80224ea:	461a      	mov	r2, r3
 80224ec:	4bcc      	ldr	r3, [pc, #816]	; (8022820 <Measure_Orientation+0x350>)
 80224ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80224f2:	fb03 f202 	mul.w	r2, r3, r2
 80224f6:	4bca      	ldr	r3, [pc, #808]	; (8022820 <Measure_Orientation+0x350>)
 80224f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80224fc:	4619      	mov	r1, r3
 80224fe:	4bc8      	ldr	r3, [pc, #800]	; (8022820 <Measure_Orientation+0x350>)
 8022500:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022504:	fb01 f303 	mul.w	r3, r1, r3
 8022508:	441a      	add	r2, r3
 802250a:	4bc5      	ldr	r3, [pc, #788]	; (8022820 <Measure_Orientation+0x350>)
 802250c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022510:	4619      	mov	r1, r3
 8022512:	4bc3      	ldr	r3, [pc, #780]	; (8022820 <Measure_Orientation+0x350>)
 8022514:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022518:	fb01 f303 	mul.w	r3, r1, r3
 802251c:	4413      	add	r3, r2
 802251e:	4618      	mov	r0, r3
 8022520:	f7fd ff60 	bl	80203e4 <__aeabi_i2d>
 8022524:	4602      	mov	r2, r0
 8022526:	460b      	mov	r3, r1
 8022528:	ec43 2b10 	vmov	d0, r2, r3
 802252c:	f00b f9de 	bl	802d8ec <sqrt>
 8022530:	ec53 2b10 	vmov	r2, r3, d0
 8022534:	4610      	mov	r0, r2
 8022536:	4619      	mov	r1, r3
 8022538:	f7fe fa96 	bl	8020a68 <__aeabi_d2f>
 802253c:	4603      	mov	r3, r0
 802253e:	60fb      	str	r3, [r7, #12]


	// normalization of acceleration
	accel_x = accel_xyz[0]/accel_mag;
 8022540:	4bb7      	ldr	r3, [pc, #732]	; (8022820 <Measure_Orientation+0x350>)
 8022542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022546:	ee07 3a90 	vmov	s15, r3
 802254a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802254e:	ed97 7a03 	vldr	s14, [r7, #12]
 8022552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022556:	4bb4      	ldr	r3, [pc, #720]	; (8022828 <Measure_Orientation+0x358>)
 8022558:	edc3 7a00 	vstr	s15, [r3]
	accel_y = accel_xyz[1]/accel_mag;
 802255c:	4bb0      	ldr	r3, [pc, #704]	; (8022820 <Measure_Orientation+0x350>)
 802255e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022562:	ee07 3a90 	vmov	s15, r3
 8022566:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802256a:	ed97 7a03 	vldr	s14, [r7, #12]
 802256e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022572:	4bae      	ldr	r3, [pc, #696]	; (802282c <Measure_Orientation+0x35c>)
 8022574:	edc3 7a00 	vstr	s15, [r3]
	accel_z = accel_xyz[2]/accel_mag;
 8022578:	4ba9      	ldr	r3, [pc, #676]	; (8022820 <Measure_Orientation+0x350>)
 802257a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802257e:	ee07 3a90 	vmov	s15, r3
 8022582:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8022586:	ed97 7a03 	vldr	s14, [r7, #12]
 802258a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802258e:	4ba8      	ldr	r3, [pc, #672]	; (8022830 <Measure_Orientation+0x360>)
 8022590:	edc3 7a00 	vstr	s15, [r3]

	// calculate roll and pitch
	roll_acc = atan2(accel_y, accel_z) * 180.0 / M_PI;
 8022594:	4ba5      	ldr	r3, [pc, #660]	; (802282c <Measure_Orientation+0x35c>)
 8022596:	681b      	ldr	r3, [r3, #0]
 8022598:	4618      	mov	r0, r3
 802259a:	f7fd ff35 	bl	8020408 <__aeabi_f2d>
 802259e:	4604      	mov	r4, r0
 80225a0:	460d      	mov	r5, r1
 80225a2:	4ba3      	ldr	r3, [pc, #652]	; (8022830 <Measure_Orientation+0x360>)
 80225a4:	681b      	ldr	r3, [r3, #0]
 80225a6:	4618      	mov	r0, r3
 80225a8:	f7fd ff2e 	bl	8020408 <__aeabi_f2d>
 80225ac:	4602      	mov	r2, r0
 80225ae:	460b      	mov	r3, r1
 80225b0:	ec43 2b11 	vmov	d1, r2, r3
 80225b4:	ec45 4b10 	vmov	d0, r4, r5
 80225b8:	f00b f996 	bl	802d8e8 <atan2>
 80225bc:	ec51 0b10 	vmov	r0, r1, d0
 80225c0:	f04f 0200 	mov.w	r2, #0
 80225c4:	4b9b      	ldr	r3, [pc, #620]	; (8022834 <Measure_Orientation+0x364>)
 80225c6:	f7fd ff77 	bl	80204b8 <__aeabi_dmul>
 80225ca:	4602      	mov	r2, r0
 80225cc:	460b      	mov	r3, r1
 80225ce:	4610      	mov	r0, r2
 80225d0:	4619      	mov	r1, r3
 80225d2:	a389      	add	r3, pc, #548	; (adr r3, 80227f8 <Measure_Orientation+0x328>)
 80225d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225d8:	f7fe f898 	bl	802070c <__aeabi_ddiv>
 80225dc:	4602      	mov	r2, r0
 80225de:	460b      	mov	r3, r1
 80225e0:	4610      	mov	r0, r2
 80225e2:	4619      	mov	r1, r3
 80225e4:	f7fe fa40 	bl	8020a68 <__aeabi_d2f>
 80225e8:	4603      	mov	r3, r0
 80225ea:	4a93      	ldr	r2, [pc, #588]	; (8022838 <Measure_Orientation+0x368>)
 80225ec:	6013      	str	r3, [r2, #0]
	pitch_acc = atan2(-accel_x, sqrt(accel_y * accel_y + accel_z * accel_z)) * 180.0 / M_PI;
 80225ee:	4b8e      	ldr	r3, [pc, #568]	; (8022828 <Measure_Orientation+0x358>)
 80225f0:	edd3 7a00 	vldr	s15, [r3]
 80225f4:	eef1 7a67 	vneg.f32	s15, s15
 80225f8:	ee17 3a90 	vmov	r3, s15
 80225fc:	4618      	mov	r0, r3
 80225fe:	f7fd ff03 	bl	8020408 <__aeabi_f2d>
 8022602:	4604      	mov	r4, r0
 8022604:	460d      	mov	r5, r1
 8022606:	4b89      	ldr	r3, [pc, #548]	; (802282c <Measure_Orientation+0x35c>)
 8022608:	ed93 7a00 	vldr	s14, [r3]
 802260c:	4b87      	ldr	r3, [pc, #540]	; (802282c <Measure_Orientation+0x35c>)
 802260e:	edd3 7a00 	vldr	s15, [r3]
 8022612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022616:	4b86      	ldr	r3, [pc, #536]	; (8022830 <Measure_Orientation+0x360>)
 8022618:	edd3 6a00 	vldr	s13, [r3]
 802261c:	4b84      	ldr	r3, [pc, #528]	; (8022830 <Measure_Orientation+0x360>)
 802261e:	edd3 7a00 	vldr	s15, [r3]
 8022622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022626:	ee77 7a27 	vadd.f32	s15, s14, s15
 802262a:	ee17 0a90 	vmov	r0, s15
 802262e:	f7fd feeb 	bl	8020408 <__aeabi_f2d>
 8022632:	4602      	mov	r2, r0
 8022634:	460b      	mov	r3, r1
 8022636:	ec43 2b10 	vmov	d0, r2, r3
 802263a:	f00b f957 	bl	802d8ec <sqrt>
 802263e:	eeb0 7a40 	vmov.f32	s14, s0
 8022642:	eef0 7a60 	vmov.f32	s15, s1
 8022646:	eeb0 1a47 	vmov.f32	s2, s14
 802264a:	eef0 1a67 	vmov.f32	s3, s15
 802264e:	ec45 4b10 	vmov	d0, r4, r5
 8022652:	f00b f949 	bl	802d8e8 <atan2>
 8022656:	ec51 0b10 	vmov	r0, r1, d0
 802265a:	f04f 0200 	mov.w	r2, #0
 802265e:	4b75      	ldr	r3, [pc, #468]	; (8022834 <Measure_Orientation+0x364>)
 8022660:	f7fd ff2a 	bl	80204b8 <__aeabi_dmul>
 8022664:	4602      	mov	r2, r0
 8022666:	460b      	mov	r3, r1
 8022668:	4610      	mov	r0, r2
 802266a:	4619      	mov	r1, r3
 802266c:	a362      	add	r3, pc, #392	; (adr r3, 80227f8 <Measure_Orientation+0x328>)
 802266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022672:	f7fe f84b 	bl	802070c <__aeabi_ddiv>
 8022676:	4602      	mov	r2, r0
 8022678:	460b      	mov	r3, r1
 802267a:	4610      	mov	r0, r2
 802267c:	4619      	mov	r1, r3
 802267e:	f7fe f9f3 	bl	8020a68 <__aeabi_d2f>
 8022682:	4603      	mov	r3, r0
 8022684:	4a6d      	ldr	r2, [pc, #436]	; (802283c <Measure_Orientation+0x36c>)
 8022686:	6013      	str	r3, [r2, #0]

	// Calculate yaw from magnetometer measurements
	// float yaw_mag = atan2(-mag_y, mag_x) * 180.0 / M_PI; // [-Wunused-variable]

	// remove bias from gyroscope measurements
	gyro_x = gyro_xyz[0] - gyro_x_bias;
 8022688:	4b66      	ldr	r3, [pc, #408]	; (8022824 <Measure_Orientation+0x354>)
 802268a:	ed93 7a00 	vldr	s14, [r3]
 802268e:	4b6c      	ldr	r3, [pc, #432]	; (8022840 <Measure_Orientation+0x370>)
 8022690:	edd3 7a00 	vldr	s15, [r3]
 8022694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022698:	4b6a      	ldr	r3, [pc, #424]	; (8022844 <Measure_Orientation+0x374>)
 802269a:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = gyro_xyz[1] - gyro_y_bias;
 802269e:	4b61      	ldr	r3, [pc, #388]	; (8022824 <Measure_Orientation+0x354>)
 80226a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80226a4:	4b68      	ldr	r3, [pc, #416]	; (8022848 <Measure_Orientation+0x378>)
 80226a6:	edd3 7a00 	vldr	s15, [r3]
 80226aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80226ae:	4b67      	ldr	r3, [pc, #412]	; (802284c <Measure_Orientation+0x37c>)
 80226b0:	edc3 7a00 	vstr	s15, [r3]

	/* LOW-PASS FILTER: remove noise from gyroscope measurements */
	kalman(&gyro_x_state, gyro_x);
 80226b4:	4b63      	ldr	r3, [pc, #396]	; (8022844 <Measure_Orientation+0x374>)
 80226b6:	edd3 7a00 	vldr	s15, [r3]
 80226ba:	eeb0 0a67 	vmov.f32	s0, s15
 80226be:	4864      	ldr	r0, [pc, #400]	; (8022850 <Measure_Orientation+0x380>)
 80226c0:	f7fd fc9e 	bl	8020000 <kalman>
	kalman(&gyro_y_state, gyro_y);
 80226c4:	4b61      	ldr	r3, [pc, #388]	; (802284c <Measure_Orientation+0x37c>)
 80226c6:	edd3 7a00 	vldr	s15, [r3]
 80226ca:	eeb0 0a67 	vmov.f32	s0, s15
 80226ce:	4861      	ldr	r0, [pc, #388]	; (8022854 <Measure_Orientation+0x384>)
 80226d0:	f7fd fc96 	bl	8020000 <kalman>

	/* obtain filtered results */
	gyro_x = gyro_x_state.x*GYRO_X_SENS;
 80226d4:	4b5e      	ldr	r3, [pc, #376]	; (8022850 <Measure_Orientation+0x380>)
 80226d6:	689b      	ldr	r3, [r3, #8]
 80226d8:	4618      	mov	r0, r3
 80226da:	f7fd fe95 	bl	8020408 <__aeabi_f2d>
 80226de:	a348      	add	r3, pc, #288	; (adr r3, 8022800 <Measure_Orientation+0x330>)
 80226e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226e4:	f7fd fee8 	bl	80204b8 <__aeabi_dmul>
 80226e8:	4602      	mov	r2, r0
 80226ea:	460b      	mov	r3, r1
 80226ec:	4610      	mov	r0, r2
 80226ee:	4619      	mov	r1, r3
 80226f0:	f7fe f9ba 	bl	8020a68 <__aeabi_d2f>
 80226f4:	4603      	mov	r3, r0
 80226f6:	4a53      	ldr	r2, [pc, #332]	; (8022844 <Measure_Orientation+0x374>)
 80226f8:	6013      	str	r3, [r2, #0]
	gyro_y = gyro_y_state.x*GYRO_Y_SENS;
 80226fa:	4b56      	ldr	r3, [pc, #344]	; (8022854 <Measure_Orientation+0x384>)
 80226fc:	689b      	ldr	r3, [r3, #8]
 80226fe:	4618      	mov	r0, r3
 8022700:	f7fd fe82 	bl	8020408 <__aeabi_f2d>
 8022704:	a340      	add	r3, pc, #256	; (adr r3, 8022808 <Measure_Orientation+0x338>)
 8022706:	e9d3 2300 	ldrd	r2, r3, [r3]
 802270a:	f7fd fed5 	bl	80204b8 <__aeabi_dmul>
 802270e:	4602      	mov	r2, r0
 8022710:	460b      	mov	r3, r1
 8022712:	4610      	mov	r0, r2
 8022714:	4619      	mov	r1, r3
 8022716:	f7fe f9a7 	bl	8020a68 <__aeabi_d2f>
 802271a:	4603      	mov	r3, r0
 802271c:	4a4b      	ldr	r2, [pc, #300]	; (802284c <Measure_Orientation+0x37c>)
 802271e:	6013      	str	r3, [r2, #0]
//	  if (gyro_y < min_gyro_y) {
//	  	  	  min_gyro_y = gyro_y;
//	  }

	/* integrate to obtain roll and pitch from gyroscope */
	roll_gyro = angle_x + gyro_x * DT;
 8022720:	4b48      	ldr	r3, [pc, #288]	; (8022844 <Measure_Orientation+0x374>)
 8022722:	ed93 7a00 	vldr	s14, [r3]
 8022726:	4b4c      	ldr	r3, [pc, #304]	; (8022858 <Measure_Orientation+0x388>)
 8022728:	edd3 7a00 	vldr	s15, [r3]
 802272c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022730:	4b4a      	ldr	r3, [pc, #296]	; (802285c <Measure_Orientation+0x38c>)
 8022732:	edd3 7a00 	vldr	s15, [r3]
 8022736:	ee77 7a27 	vadd.f32	s15, s14, s15
 802273a:	4b49      	ldr	r3, [pc, #292]	; (8022860 <Measure_Orientation+0x390>)
 802273c:	edc3 7a00 	vstr	s15, [r3]
	pitch_gyro = angle_y + gyro_y * DT;
 8022740:	4b42      	ldr	r3, [pc, #264]	; (802284c <Measure_Orientation+0x37c>)
 8022742:	ed93 7a00 	vldr	s14, [r3]
 8022746:	4b44      	ldr	r3, [pc, #272]	; (8022858 <Measure_Orientation+0x388>)
 8022748:	edd3 7a00 	vldr	s15, [r3]
 802274c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022750:	4b44      	ldr	r3, [pc, #272]	; (8022864 <Measure_Orientation+0x394>)
 8022752:	edd3 7a00 	vldr	s15, [r3]
 8022756:	ee77 7a27 	vadd.f32	s15, s14, s15
 802275a:	4b43      	ldr	r3, [pc, #268]	; (8022868 <Measure_Orientation+0x398>)
 802275c:	edc3 7a00 	vstr	s15, [r3]

	// complementary filter
	angle_x = GYRO_ALPHA * roll_gyro + ACCEL_MAG_ALPHA * roll_acc;
 8022760:	4b3f      	ldr	r3, [pc, #252]	; (8022860 <Measure_Orientation+0x390>)
 8022762:	681b      	ldr	r3, [r3, #0]
 8022764:	4618      	mov	r0, r3
 8022766:	f7fd fe4f 	bl	8020408 <__aeabi_f2d>
 802276a:	a329      	add	r3, pc, #164	; (adr r3, 8022810 <Measure_Orientation+0x340>)
 802276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022770:	f7fd fea2 	bl	80204b8 <__aeabi_dmul>
 8022774:	4602      	mov	r2, r0
 8022776:	460b      	mov	r3, r1
 8022778:	4614      	mov	r4, r2
 802277a:	461d      	mov	r5, r3
 802277c:	4b2e      	ldr	r3, [pc, #184]	; (8022838 <Measure_Orientation+0x368>)
 802277e:	681b      	ldr	r3, [r3, #0]
 8022780:	4618      	mov	r0, r3
 8022782:	f7fd fe41 	bl	8020408 <__aeabi_f2d>
 8022786:	a324      	add	r3, pc, #144	; (adr r3, 8022818 <Measure_Orientation+0x348>)
 8022788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802278c:	f7fd fe94 	bl	80204b8 <__aeabi_dmul>
 8022790:	4602      	mov	r2, r0
 8022792:	460b      	mov	r3, r1
 8022794:	4620      	mov	r0, r4
 8022796:	4629      	mov	r1, r5
 8022798:	f7fd fcd8 	bl	802014c <__adddf3>
 802279c:	4602      	mov	r2, r0
 802279e:	460b      	mov	r3, r1
 80227a0:	4610      	mov	r0, r2
 80227a2:	4619      	mov	r1, r3
 80227a4:	f7fe f960 	bl	8020a68 <__aeabi_d2f>
 80227a8:	4603      	mov	r3, r0
 80227aa:	4a2c      	ldr	r2, [pc, #176]	; (802285c <Measure_Orientation+0x38c>)
 80227ac:	6013      	str	r3, [r2, #0]
	angle_y = GYRO_ALPHA * pitch_gyro + ACCEL_MAG_ALPHA * pitch_acc;
 80227ae:	4b2e      	ldr	r3, [pc, #184]	; (8022868 <Measure_Orientation+0x398>)
 80227b0:	681b      	ldr	r3, [r3, #0]
 80227b2:	4618      	mov	r0, r3
 80227b4:	f7fd fe28 	bl	8020408 <__aeabi_f2d>
 80227b8:	a315      	add	r3, pc, #84	; (adr r3, 8022810 <Measure_Orientation+0x340>)
 80227ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227be:	f7fd fe7b 	bl	80204b8 <__aeabi_dmul>
 80227c2:	4602      	mov	r2, r0
 80227c4:	460b      	mov	r3, r1
 80227c6:	4614      	mov	r4, r2
 80227c8:	461d      	mov	r5, r3
 80227ca:	4b1c      	ldr	r3, [pc, #112]	; (802283c <Measure_Orientation+0x36c>)
 80227cc:	681b      	ldr	r3, [r3, #0]
 80227ce:	4618      	mov	r0, r3
 80227d0:	f7fd fe1a 	bl	8020408 <__aeabi_f2d>
 80227d4:	a310      	add	r3, pc, #64	; (adr r3, 8022818 <Measure_Orientation+0x348>)
 80227d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227da:	f7fd fe6d 	bl	80204b8 <__aeabi_dmul>
 80227de:	4602      	mov	r2, r0
 80227e0:	460b      	mov	r3, r1
 80227e2:	4620      	mov	r0, r4
 80227e4:	4629      	mov	r1, r5
 80227e6:	f7fd fcb1 	bl	802014c <__adddf3>
 80227ea:	4602      	mov	r2, r0
 80227ec:	460b      	mov	r3, r1
 80227ee:	4610      	mov	r0, r2
 80227f0:	4619      	mov	r1, r3
 80227f2:	e03b      	b.n	802286c <Measure_Orientation+0x39c>
 80227f4:	f3af 8000 	nop.w
 80227f8:	54442d18 	.word	0x54442d18
 80227fc:	400921fb 	.word	0x400921fb
 8022800:	728a0126 	.word	0x728a0126
 8022804:	3ea2bcc3 	.word	0x3ea2bcc3
 8022808:	f2eeacca 	.word	0xf2eeacca
 802280c:	3e9f024e 	.word	0x3e9f024e
 8022810:	cccccccd 	.word	0xcccccccd
 8022814:	3feccccc 	.word	0x3feccccc
 8022818:	9999999a 	.word	0x9999999a
 802281c:	3fb99999 	.word	0x3fb99999
 8022820:	2000282c 	.word	0x2000282c
 8022824:	20002818 	.word	0x20002818
 8022828:	20002834 	.word	0x20002834
 802282c:	20002838 	.word	0x20002838
 8022830:	2000283c 	.word	0x2000283c
 8022834:	40668000 	.word	0x40668000
 8022838:	20002848 	.word	0x20002848
 802283c:	2000284c 	.word	0x2000284c
 8022840:	20002810 	.word	0x20002810
 8022844:	20002824 	.word	0x20002824
 8022848:	20002814 	.word	0x20002814
 802284c:	20002828 	.word	0x20002828
 8022850:	20000200 	.word	0x20000200
 8022854:	20000214 	.word	0x20000214
 8022858:	2000280c 	.word	0x2000280c
 802285c:	20002850 	.word	0x20002850
 8022860:	20002840 	.word	0x20002840
 8022864:	20002854 	.word	0x20002854
 8022868:	20002844 	.word	0x20002844
 802286c:	f7fe f8fc 	bl	8020a68 <__aeabi_d2f>
 8022870:	4603      	mov	r3, r0
 8022872:	4a07      	ldr	r2, [pc, #28]	; (8022890 <Measure_Orientation+0x3c0>)
 8022874:	6013      	str	r3, [r2, #0]
//
//	/* obtain filtered results */
//	angle_x = angle_x_state.x;
//	angle_y = angle_y_state.x;

	orientation[0] = angle_x;
 8022876:	4b07      	ldr	r3, [pc, #28]	; (8022894 <Measure_Orientation+0x3c4>)
 8022878:	681a      	ldr	r2, [r3, #0]
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	601a      	str	r2, [r3, #0]
	orientation[1] = angle_y;
 802287e:	687b      	ldr	r3, [r7, #4]
 8022880:	3304      	adds	r3, #4
 8022882:	4a03      	ldr	r2, [pc, #12]	; (8022890 <Measure_Orientation+0x3c0>)
 8022884:	6812      	ldr	r2, [r2, #0]
 8022886:	601a      	str	r2, [r3, #0]

	// wait for the next sampling interval
	//HAL_Delay(DT);
}
 8022888:	bf00      	nop
 802288a:	3710      	adds	r7, #16
 802288c:	46bd      	mov	sp, r7
 802288e:	bdb0      	pop	{r4, r5, r7, pc}
 8022890:	20002854 	.word	0x20002854
 8022894:	20002850 	.word	0x20002850

08022898 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8022898:	b580      	push	{r7, lr}
 802289a:	b08a      	sub	sp, #40	; 0x28
 802289c:	af00      	add	r7, sp, #0
 802289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80228a0:	4b27      	ldr	r3, [pc, #156]	; (8022940 <I2Cx_MspInit+0xa8>)
 80228a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80228a4:	4a26      	ldr	r2, [pc, #152]	; (8022940 <I2Cx_MspInit+0xa8>)
 80228a6:	f043 0302 	orr.w	r3, r3, #2
 80228aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80228ac:	4b24      	ldr	r3, [pc, #144]	; (8022940 <I2Cx_MspInit+0xa8>)
 80228ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80228b0:	f003 0302 	and.w	r3, r3, #2
 80228b4:	613b      	str	r3, [r7, #16]
 80228b6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80228b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80228bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80228be:	2312      	movs	r3, #18
 80228c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80228c2:	2301      	movs	r3, #1
 80228c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80228c6:	2303      	movs	r3, #3
 80228c8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80228ca:	2304      	movs	r3, #4
 80228cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80228ce:	f107 0314 	add.w	r3, r7, #20
 80228d2:	4619      	mov	r1, r3
 80228d4:	481b      	ldr	r0, [pc, #108]	; (8022944 <I2Cx_MspInit+0xac>)
 80228d6:	f002 fca7 	bl	8025228 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80228da:	f107 0314 	add.w	r3, r7, #20
 80228de:	4619      	mov	r1, r3
 80228e0:	4818      	ldr	r0, [pc, #96]	; (8022944 <I2Cx_MspInit+0xac>)
 80228e2:	f002 fca1 	bl	8025228 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80228e6:	4b16      	ldr	r3, [pc, #88]	; (8022940 <I2Cx_MspInit+0xa8>)
 80228e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80228ea:	4a15      	ldr	r2, [pc, #84]	; (8022940 <I2Cx_MspInit+0xa8>)
 80228ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80228f0:	6593      	str	r3, [r2, #88]	; 0x58
 80228f2:	4b13      	ldr	r3, [pc, #76]	; (8022940 <I2Cx_MspInit+0xa8>)
 80228f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80228f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80228fa:	60fb      	str	r3, [r7, #12]
 80228fc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80228fe:	4b10      	ldr	r3, [pc, #64]	; (8022940 <I2Cx_MspInit+0xa8>)
 8022900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022902:	4a0f      	ldr	r2, [pc, #60]	; (8022940 <I2Cx_MspInit+0xa8>)
 8022904:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8022908:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 802290a:	4b0d      	ldr	r3, [pc, #52]	; (8022940 <I2Cx_MspInit+0xa8>)
 802290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802290e:	4a0c      	ldr	r2, [pc, #48]	; (8022940 <I2Cx_MspInit+0xa8>)
 8022910:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8022914:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8022916:	2200      	movs	r2, #0
 8022918:	210f      	movs	r1, #15
 802291a:	2021      	movs	r0, #33	; 0x21
 802291c:	f001 fe11 	bl	8024542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8022920:	2021      	movs	r0, #33	; 0x21
 8022922:	f001 fe2a 	bl	802457a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8022926:	2200      	movs	r2, #0
 8022928:	210f      	movs	r1, #15
 802292a:	2022      	movs	r0, #34	; 0x22
 802292c:	f001 fe09 	bl	8024542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8022930:	2022      	movs	r0, #34	; 0x22
 8022932:	f001 fe22 	bl	802457a <HAL_NVIC_EnableIRQ>
}
 8022936:	bf00      	nop
 8022938:	3728      	adds	r7, #40	; 0x28
 802293a:	46bd      	mov	sp, r7
 802293c:	bd80      	pop	{r7, pc}
 802293e:	bf00      	nop
 8022940:	40021000 	.word	0x40021000
 8022944:	48000400 	.word	0x48000400

08022948 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8022948:	b580      	push	{r7, lr}
 802294a:	b082      	sub	sp, #8
 802294c:	af00      	add	r7, sp, #0
 802294e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8022950:	687b      	ldr	r3, [r7, #4]
 8022952:	4a12      	ldr	r2, [pc, #72]	; (802299c <I2Cx_Init+0x54>)
 8022954:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	4a11      	ldr	r2, [pc, #68]	; (80229a0 <I2Cx_Init+0x58>)
 802295a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	2200      	movs	r2, #0
 8022960:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	2201      	movs	r2, #1
 8022966:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	2200      	movs	r2, #0
 802296c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 802296e:	687b      	ldr	r3, [r7, #4]
 8022970:	2200      	movs	r2, #0
 8022972:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	2200      	movs	r2, #0
 8022978:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 802297a:	687b      	ldr	r3, [r7, #4]
 802297c:	2200      	movs	r2, #0
 802297e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8022980:	6878      	ldr	r0, [r7, #4]
 8022982:	f7ff ff89 	bl	8022898 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8022986:	6878      	ldr	r0, [r7, #4]
 8022988:	f002 feea 	bl	8025760 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 802298c:	2100      	movs	r1, #0
 802298e:	6878      	ldr	r0, [r7, #4]
 8022990:	f003 fc78 	bl	8026284 <HAL_I2CEx_ConfigAnalogFilter>
}
 8022994:	bf00      	nop
 8022996:	3708      	adds	r7, #8
 8022998:	46bd      	mov	sp, r7
 802299a:	bd80      	pop	{r7, pc}
 802299c:	40005800 	.word	0x40005800
 80229a0:	00702681 	.word	0x00702681

080229a4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80229a4:	b580      	push	{r7, lr}
 80229a6:	b08a      	sub	sp, #40	; 0x28
 80229a8:	af04      	add	r7, sp, #16
 80229aa:	60f8      	str	r0, [r7, #12]
 80229ac:	4608      	mov	r0, r1
 80229ae:	4611      	mov	r1, r2
 80229b0:	461a      	mov	r2, r3
 80229b2:	4603      	mov	r3, r0
 80229b4:	72fb      	strb	r3, [r7, #11]
 80229b6:	460b      	mov	r3, r1
 80229b8:	813b      	strh	r3, [r7, #8]
 80229ba:	4613      	mov	r3, r2
 80229bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80229be:	2300      	movs	r3, #0
 80229c0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80229c2:	7afb      	ldrb	r3, [r7, #11]
 80229c4:	b299      	uxth	r1, r3
 80229c6:	88f8      	ldrh	r0, [r7, #6]
 80229c8:	893a      	ldrh	r2, [r7, #8]
 80229ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80229ce:	9302      	str	r3, [sp, #8]
 80229d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80229d2:	9301      	str	r3, [sp, #4]
 80229d4:	6a3b      	ldr	r3, [r7, #32]
 80229d6:	9300      	str	r3, [sp, #0]
 80229d8:	4603      	mov	r3, r0
 80229da:	68f8      	ldr	r0, [r7, #12]
 80229dc:	f003 f892 	bl	8025b04 <HAL_I2C_Mem_Read>
 80229e0:	4603      	mov	r3, r0
 80229e2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80229e4:	7dfb      	ldrb	r3, [r7, #23]
 80229e6:	2b00      	cmp	r3, #0
 80229e8:	d004      	beq.n	80229f4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80229ea:	7afb      	ldrb	r3, [r7, #11]
 80229ec:	4619      	mov	r1, r3
 80229ee:	68f8      	ldr	r0, [r7, #12]
 80229f0:	f000 f832 	bl	8022a58 <I2Cx_Error>
  }
  return status;
 80229f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80229f6:	4618      	mov	r0, r3
 80229f8:	3718      	adds	r7, #24
 80229fa:	46bd      	mov	sp, r7
 80229fc:	bd80      	pop	{r7, pc}

080229fe <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80229fe:	b580      	push	{r7, lr}
 8022a00:	b08a      	sub	sp, #40	; 0x28
 8022a02:	af04      	add	r7, sp, #16
 8022a04:	60f8      	str	r0, [r7, #12]
 8022a06:	4608      	mov	r0, r1
 8022a08:	4611      	mov	r1, r2
 8022a0a:	461a      	mov	r2, r3
 8022a0c:	4603      	mov	r3, r0
 8022a0e:	72fb      	strb	r3, [r7, #11]
 8022a10:	460b      	mov	r3, r1
 8022a12:	813b      	strh	r3, [r7, #8]
 8022a14:	4613      	mov	r3, r2
 8022a16:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8022a18:	2300      	movs	r3, #0
 8022a1a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8022a1c:	7afb      	ldrb	r3, [r7, #11]
 8022a1e:	b299      	uxth	r1, r3
 8022a20:	88f8      	ldrh	r0, [r7, #6]
 8022a22:	893a      	ldrh	r2, [r7, #8]
 8022a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8022a28:	9302      	str	r3, [sp, #8]
 8022a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022a2c:	9301      	str	r3, [sp, #4]
 8022a2e:	6a3b      	ldr	r3, [r7, #32]
 8022a30:	9300      	str	r3, [sp, #0]
 8022a32:	4603      	mov	r3, r0
 8022a34:	68f8      	ldr	r0, [r7, #12]
 8022a36:	f002 ff51 	bl	80258dc <HAL_I2C_Mem_Write>
 8022a3a:	4603      	mov	r3, r0
 8022a3c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8022a3e:	7dfb      	ldrb	r3, [r7, #23]
 8022a40:	2b00      	cmp	r3, #0
 8022a42:	d004      	beq.n	8022a4e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8022a44:	7afb      	ldrb	r3, [r7, #11]
 8022a46:	4619      	mov	r1, r3
 8022a48:	68f8      	ldr	r0, [r7, #12]
 8022a4a:	f000 f805 	bl	8022a58 <I2Cx_Error>
  }
  return status;
 8022a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8022a50:	4618      	mov	r0, r3
 8022a52:	3718      	adds	r7, #24
 8022a54:	46bd      	mov	sp, r7
 8022a56:	bd80      	pop	{r7, pc}

08022a58 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8022a58:	b580      	push	{r7, lr}
 8022a5a:	b082      	sub	sp, #8
 8022a5c:	af00      	add	r7, sp, #0
 8022a5e:	6078      	str	r0, [r7, #4]
 8022a60:	460b      	mov	r3, r1
 8022a62:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8022a64:	6878      	ldr	r0, [r7, #4]
 8022a66:	f002 ff0a 	bl	802587e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8022a6a:	6878      	ldr	r0, [r7, #4]
 8022a6c:	f7ff ff6c 	bl	8022948 <I2Cx_Init>
}
 8022a70:	bf00      	nop
 8022a72:	3708      	adds	r7, #8
 8022a74:	46bd      	mov	sp, r7
 8022a76:	bd80      	pop	{r7, pc}

08022a78 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8022a78:	b580      	push	{r7, lr}
 8022a7a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8022a7c:	4802      	ldr	r0, [pc, #8]	; (8022a88 <SENSOR_IO_Init+0x10>)
 8022a7e:	f7ff ff63 	bl	8022948 <I2Cx_Init>
}
 8022a82:	bf00      	nop
 8022a84:	bd80      	pop	{r7, pc}
 8022a86:	bf00      	nop
 8022a88:	20002858 	.word	0x20002858

08022a8c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8022a8c:	b580      	push	{r7, lr}
 8022a8e:	b084      	sub	sp, #16
 8022a90:	af02      	add	r7, sp, #8
 8022a92:	4603      	mov	r3, r0
 8022a94:	71fb      	strb	r3, [r7, #7]
 8022a96:	460b      	mov	r3, r1
 8022a98:	71bb      	strb	r3, [r7, #6]
 8022a9a:	4613      	mov	r3, r2
 8022a9c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8022a9e:	79bb      	ldrb	r3, [r7, #6]
 8022aa0:	b29a      	uxth	r2, r3
 8022aa2:	79f9      	ldrb	r1, [r7, #7]
 8022aa4:	2301      	movs	r3, #1
 8022aa6:	9301      	str	r3, [sp, #4]
 8022aa8:	1d7b      	adds	r3, r7, #5
 8022aaa:	9300      	str	r3, [sp, #0]
 8022aac:	2301      	movs	r3, #1
 8022aae:	4803      	ldr	r0, [pc, #12]	; (8022abc <SENSOR_IO_Write+0x30>)
 8022ab0:	f7ff ffa5 	bl	80229fe <I2Cx_WriteMultiple>
}
 8022ab4:	bf00      	nop
 8022ab6:	3708      	adds	r7, #8
 8022ab8:	46bd      	mov	sp, r7
 8022aba:	bd80      	pop	{r7, pc}
 8022abc:	20002858 	.word	0x20002858

08022ac0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8022ac0:	b580      	push	{r7, lr}
 8022ac2:	b086      	sub	sp, #24
 8022ac4:	af02      	add	r7, sp, #8
 8022ac6:	4603      	mov	r3, r0
 8022ac8:	460a      	mov	r2, r1
 8022aca:	71fb      	strb	r3, [r7, #7]
 8022acc:	4613      	mov	r3, r2
 8022ace:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8022ad0:	2300      	movs	r3, #0
 8022ad2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8022ad4:	79bb      	ldrb	r3, [r7, #6]
 8022ad6:	b29a      	uxth	r2, r3
 8022ad8:	79f9      	ldrb	r1, [r7, #7]
 8022ada:	2301      	movs	r3, #1
 8022adc:	9301      	str	r3, [sp, #4]
 8022ade:	f107 030f 	add.w	r3, r7, #15
 8022ae2:	9300      	str	r3, [sp, #0]
 8022ae4:	2301      	movs	r3, #1
 8022ae6:	4804      	ldr	r0, [pc, #16]	; (8022af8 <SENSOR_IO_Read+0x38>)
 8022ae8:	f7ff ff5c 	bl	80229a4 <I2Cx_ReadMultiple>

  return read_value;
 8022aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8022aee:	4618      	mov	r0, r3
 8022af0:	3710      	adds	r7, #16
 8022af2:	46bd      	mov	sp, r7
 8022af4:	bd80      	pop	{r7, pc}
 8022af6:	bf00      	nop
 8022af8:	20002858 	.word	0x20002858

08022afc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8022afc:	b580      	push	{r7, lr}
 8022afe:	b084      	sub	sp, #16
 8022b00:	af02      	add	r7, sp, #8
 8022b02:	603a      	str	r2, [r7, #0]
 8022b04:	461a      	mov	r2, r3
 8022b06:	4603      	mov	r3, r0
 8022b08:	71fb      	strb	r3, [r7, #7]
 8022b0a:	460b      	mov	r3, r1
 8022b0c:	71bb      	strb	r3, [r7, #6]
 8022b0e:	4613      	mov	r3, r2
 8022b10:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8022b12:	79bb      	ldrb	r3, [r7, #6]
 8022b14:	b29a      	uxth	r2, r3
 8022b16:	79f9      	ldrb	r1, [r7, #7]
 8022b18:	88bb      	ldrh	r3, [r7, #4]
 8022b1a:	9301      	str	r3, [sp, #4]
 8022b1c:	683b      	ldr	r3, [r7, #0]
 8022b1e:	9300      	str	r3, [sp, #0]
 8022b20:	2301      	movs	r3, #1
 8022b22:	4804      	ldr	r0, [pc, #16]	; (8022b34 <SENSOR_IO_ReadMultiple+0x38>)
 8022b24:	f7ff ff3e 	bl	80229a4 <I2Cx_ReadMultiple>
 8022b28:	4603      	mov	r3, r0
 8022b2a:	b29b      	uxth	r3, r3
}
 8022b2c:	4618      	mov	r0, r3
 8022b2e:	3708      	adds	r7, #8
 8022b30:	46bd      	mov	sp, r7
 8022b32:	bd80      	pop	{r7, pc}
 8022b34:	20002858 	.word	0x20002858

08022b38 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8022b38:	b580      	push	{r7, lr}
 8022b3a:	b084      	sub	sp, #16
 8022b3c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8022b3e:	2300      	movs	r3, #0
 8022b40:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8022b42:	2300      	movs	r3, #0
 8022b44:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8022b46:	4b19      	ldr	r3, [pc, #100]	; (8022bac <BSP_ACCELERO_Init+0x74>)
 8022b48:	689b      	ldr	r3, [r3, #8]
 8022b4a:	4798      	blx	r3
 8022b4c:	4603      	mov	r3, r0
 8022b4e:	2b6a      	cmp	r3, #106	; 0x6a
 8022b50:	d002      	beq.n	8022b58 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8022b52:	2301      	movs	r3, #1
 8022b54:	73fb      	strb	r3, [r7, #15]
 8022b56:	e024      	b.n	8022ba2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8022b58:	4b15      	ldr	r3, [pc, #84]	; (8022bb0 <BSP_ACCELERO_Init+0x78>)
 8022b5a:	4a14      	ldr	r2, [pc, #80]	; (8022bac <BSP_ACCELERO_Init+0x74>)
 8022b5c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8022b5e:	2330      	movs	r3, #48	; 0x30
 8022b60:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8022b62:	2300      	movs	r3, #0
 8022b64:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8022b66:	2300      	movs	r3, #0
 8022b68:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8022b6a:	2340      	movs	r3, #64	; 0x40
 8022b6c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8022b6e:	2300      	movs	r3, #0
 8022b70:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8022b72:	2300      	movs	r3, #0
 8022b74:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8022b76:	797a      	ldrb	r2, [r7, #5]
 8022b78:	7abb      	ldrb	r3, [r7, #10]
 8022b7a:	4313      	orrs	r3, r2
 8022b7c:	b2db      	uxtb	r3, r3
 8022b7e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8022b80:	7a3b      	ldrb	r3, [r7, #8]
 8022b82:	f043 0304 	orr.w	r3, r3, #4
 8022b86:	b2db      	uxtb	r3, r3
 8022b88:	021b      	lsls	r3, r3, #8
 8022b8a:	b21a      	sxth	r2, r3
 8022b8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8022b90:	4313      	orrs	r3, r2
 8022b92:	b21b      	sxth	r3, r3
 8022b94:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8022b96:	4b06      	ldr	r3, [pc, #24]	; (8022bb0 <BSP_ACCELERO_Init+0x78>)
 8022b98:	681b      	ldr	r3, [r3, #0]
 8022b9a:	681b      	ldr	r3, [r3, #0]
 8022b9c:	89ba      	ldrh	r2, [r7, #12]
 8022b9e:	4610      	mov	r0, r2
 8022ba0:	4798      	blx	r3
  }  

  return ret;
 8022ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8022ba4:	4618      	mov	r0, r3
 8022ba6:	3710      	adds	r7, #16
 8022ba8:	46bd      	mov	sp, r7
 8022baa:	bd80      	pop	{r7, pc}
 8022bac:	2000022c 	.word	0x2000022c
 8022bb0:	200028ac 	.word	0x200028ac

08022bb4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8022bb4:	b580      	push	{r7, lr}
 8022bb6:	b082      	sub	sp, #8
 8022bb8:	af00      	add	r7, sp, #0
 8022bba:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8022bbc:	4b08      	ldr	r3, [pc, #32]	; (8022be0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8022bbe:	681b      	ldr	r3, [r3, #0]
 8022bc0:	2b00      	cmp	r3, #0
 8022bc2:	d009      	beq.n	8022bd8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8022bc4:	4b06      	ldr	r3, [pc, #24]	; (8022be0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bca:	2b00      	cmp	r3, #0
 8022bcc:	d004      	beq.n	8022bd8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8022bce:	4b04      	ldr	r3, [pc, #16]	; (8022be0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bd4:	6878      	ldr	r0, [r7, #4]
 8022bd6:	4798      	blx	r3
    }
  }
}
 8022bd8:	bf00      	nop
 8022bda:	3708      	adds	r7, #8
 8022bdc:	46bd      	mov	sp, r7
 8022bde:	bd80      	pop	{r7, pc}
 8022be0:	200028ac 	.word	0x200028ac

08022be4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8022be4:	b580      	push	{r7, lr}
 8022be6:	b084      	sub	sp, #16
 8022be8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8022bea:	2301      	movs	r3, #1
 8022bec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8022bee:	2300      	movs	r3, #0
 8022bf0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8022bf2:	4b1b      	ldr	r3, [pc, #108]	; (8022c60 <BSP_GYRO_Init+0x7c>)
 8022bf4:	689b      	ldr	r3, [r3, #8]
 8022bf6:	4798      	blx	r3
 8022bf8:	4603      	mov	r3, r0
 8022bfa:	2b6a      	cmp	r3, #106	; 0x6a
 8022bfc:	d002      	beq.n	8022c04 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8022bfe:	2301      	movs	r3, #1
 8022c00:	73fb      	strb	r3, [r7, #15]
 8022c02:	e028      	b.n	8022c56 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8022c04:	4b17      	ldr	r3, [pc, #92]	; (8022c64 <BSP_GYRO_Init+0x80>)
 8022c06:	4a16      	ldr	r2, [pc, #88]	; (8022c60 <BSP_GYRO_Init+0x7c>)
 8022c08:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8022c0a:	2300      	movs	r3, #0
 8022c0c:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8022c0e:	2330      	movs	r3, #48	; 0x30
 8022c10:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8022c12:	2300      	movs	r3, #0
 8022c14:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8022c16:	2300      	movs	r3, #0
 8022c18:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8022c1a:	2340      	movs	r3, #64	; 0x40
 8022c1c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8022c1e:	2300      	movs	r3, #0
 8022c20:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8022c22:	230c      	movs	r3, #12
 8022c24:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8022c26:	7aba      	ldrb	r2, [r7, #10]
 8022c28:	797b      	ldrb	r3, [r7, #5]
 8022c2a:	4313      	orrs	r3, r2
 8022c2c:	b2db      	uxtb	r3, r3
 8022c2e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8022c30:	7a3b      	ldrb	r3, [r7, #8]
 8022c32:	f043 0304 	orr.w	r3, r3, #4
 8022c36:	b2db      	uxtb	r3, r3
 8022c38:	021b      	lsls	r3, r3, #8
 8022c3a:	b21a      	sxth	r2, r3
 8022c3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8022c40:	4313      	orrs	r3, r2
 8022c42:	b21b      	sxth	r3, r3
 8022c44:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8022c46:	4b07      	ldr	r3, [pc, #28]	; (8022c64 <BSP_GYRO_Init+0x80>)
 8022c48:	681b      	ldr	r3, [r3, #0]
 8022c4a:	681b      	ldr	r3, [r3, #0]
 8022c4c:	89ba      	ldrh	r2, [r7, #12]
 8022c4e:	4610      	mov	r0, r2
 8022c50:	4798      	blx	r3
    
    ret = GYRO_OK;
 8022c52:	2300      	movs	r3, #0
 8022c54:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8022c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8022c58:	4618      	mov	r0, r3
 8022c5a:	3710      	adds	r7, #16
 8022c5c:	46bd      	mov	sp, r7
 8022c5e:	bd80      	pop	{r7, pc}
 8022c60:	20000260 	.word	0x20000260
 8022c64:	200028b0 	.word	0x200028b0

08022c68 <BSP_GYRO_LowPower>:
/**
  * @brief  Set/Unset Gyroscope in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void BSP_GYRO_LowPower(uint16_t status)
{
 8022c68:	b580      	push	{r7, lr}
 8022c6a:	b082      	sub	sp, #8
 8022c6c:	af00      	add	r7, sp, #0
 8022c6e:	4603      	mov	r3, r0
 8022c70:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset component in low-power mode */
  if(GyroscopeDrv != NULL)
 8022c72:	4b09      	ldr	r3, [pc, #36]	; (8022c98 <BSP_GYRO_LowPower+0x30>)
 8022c74:	681b      	ldr	r3, [r3, #0]
 8022c76:	2b00      	cmp	r3, #0
 8022c78:	d00a      	beq.n	8022c90 <BSP_GYRO_LowPower+0x28>
  {
    if(GyroscopeDrv->LowPower!= NULL)
 8022c7a:	4b07      	ldr	r3, [pc, #28]	; (8022c98 <BSP_GYRO_LowPower+0x30>)
 8022c7c:	681b      	ldr	r3, [r3, #0]
 8022c7e:	691b      	ldr	r3, [r3, #16]
 8022c80:	2b00      	cmp	r3, #0
 8022c82:	d005      	beq.n	8022c90 <BSP_GYRO_LowPower+0x28>
    {
      GyroscopeDrv->LowPower(status);
 8022c84:	4b04      	ldr	r3, [pc, #16]	; (8022c98 <BSP_GYRO_LowPower+0x30>)
 8022c86:	681b      	ldr	r3, [r3, #0]
 8022c88:	691b      	ldr	r3, [r3, #16]
 8022c8a:	88fa      	ldrh	r2, [r7, #6]
 8022c8c:	4610      	mov	r0, r2
 8022c8e:	4798      	blx	r3
    }
  }
}
 8022c90:	bf00      	nop
 8022c92:	3708      	adds	r7, #8
 8022c94:	46bd      	mov	sp, r7
 8022c96:	bd80      	pop	{r7, pc}
 8022c98:	200028b0 	.word	0x200028b0

08022c9c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8022c9c:	b580      	push	{r7, lr}
 8022c9e:	b082      	sub	sp, #8
 8022ca0:	af00      	add	r7, sp, #0
 8022ca2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8022ca4:	4b08      	ldr	r3, [pc, #32]	; (8022cc8 <BSP_GYRO_GetXYZ+0x2c>)
 8022ca6:	681b      	ldr	r3, [r3, #0]
 8022ca8:	2b00      	cmp	r3, #0
 8022caa:	d009      	beq.n	8022cc0 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8022cac:	4b06      	ldr	r3, [pc, #24]	; (8022cc8 <BSP_GYRO_GetXYZ+0x2c>)
 8022cae:	681b      	ldr	r3, [r3, #0]
 8022cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cb2:	2b00      	cmp	r3, #0
 8022cb4:	d004      	beq.n	8022cc0 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8022cb6:	4b04      	ldr	r3, [pc, #16]	; (8022cc8 <BSP_GYRO_GetXYZ+0x2c>)
 8022cb8:	681b      	ldr	r3, [r3, #0]
 8022cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cbc:	6878      	ldr	r0, [r7, #4]
 8022cbe:	4798      	blx	r3
    }
  }
}
 8022cc0:	bf00      	nop
 8022cc2:	3708      	adds	r7, #8
 8022cc4:	46bd      	mov	sp, r7
 8022cc6:	bd80      	pop	{r7, pc}
 8022cc8:	200028b0 	.word	0x200028b0

08022ccc <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8022ccc:	b580      	push	{r7, lr}
 8022cce:	b084      	sub	sp, #16
 8022cd0:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8022cd2:	4b3b      	ldr	r3, [pc, #236]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022cd4:	4a3b      	ldr	r2, [pc, #236]	; (8022dc4 <BSP_QSPI_Init+0xf8>)
 8022cd6:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8022cd8:	4839      	ldr	r0, [pc, #228]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022cda:	f003 fc15 	bl	8026508 <HAL_OSPI_DeInit>
 8022cde:	4603      	mov	r3, r0
 8022ce0:	2b00      	cmp	r3, #0
 8022ce2:	d001      	beq.n	8022ce8 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8022ce4:	2301      	movs	r3, #1
 8022ce6:	e067      	b.n	8022db8 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8022ce8:	f000 f9fe 	bl	80230e8 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8022cec:	4b34      	ldr	r3, [pc, #208]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022cee:	2204      	movs	r2, #4
 8022cf0:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8022cf2:	4b33      	ldr	r3, [pc, #204]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022cf4:	2200      	movs	r2, #0
 8022cf6:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8022cf8:	4b31      	ldr	r3, [pc, #196]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022cfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8022cfe:	60da      	str	r2, [r3, #12]
 8022d00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8022d04:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022d06:	68bb      	ldr	r3, [r7, #8]
 8022d08:	fa93 f3a3 	rbit	r3, r3
 8022d0c:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8022d12:	68fb      	ldr	r3, [r7, #12]
 8022d14:	2b00      	cmp	r3, #0
 8022d16:	d101      	bne.n	8022d1c <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8022d18:	2320      	movs	r3, #32
 8022d1a:	e003      	b.n	8022d24 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8022d1c:	68fb      	ldr	r3, [r7, #12]
 8022d1e:	fab3 f383 	clz	r3, r3
 8022d22:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8022d24:	461a      	mov	r2, r3
 8022d26:	4b26      	ldr	r3, [pc, #152]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d28:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8022d2a:	4b25      	ldr	r3, [pc, #148]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d2c:	2201      	movs	r2, #1
 8022d2e:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8022d30:	4b23      	ldr	r3, [pc, #140]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d32:	2200      	movs	r2, #0
 8022d34:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8022d36:	4b22      	ldr	r3, [pc, #136]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d38:	2200      	movs	r2, #0
 8022d3a:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8022d3c:	4b20      	ldr	r3, [pc, #128]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d3e:	2204      	movs	r2, #4
 8022d40:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8022d42:	4b1f      	ldr	r3, [pc, #124]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d44:	2200      	movs	r2, #0
 8022d46:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8022d48:	4b1d      	ldr	r3, [pc, #116]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022d4e:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8022d50:	4b1b      	ldr	r3, [pc, #108]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d52:	2200      	movs	r2, #0
 8022d54:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8022d56:	4b1a      	ldr	r3, [pc, #104]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d58:	2200      	movs	r2, #0
 8022d5a:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8022d5c:	4818      	ldr	r0, [pc, #96]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d5e:	f003 fb29 	bl	80263b4 <HAL_OSPI_Init>
 8022d62:	4603      	mov	r3, r0
 8022d64:	2b00      	cmp	r3, #0
 8022d66:	d001      	beq.n	8022d6c <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8022d68:	2301      	movs	r3, #1
 8022d6a:	e025      	b.n	8022db8 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8022d6c:	4814      	ldr	r0, [pc, #80]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d6e:	f000 f9fb 	bl	8023168 <QSPI_ResetMemory>
 8022d72:	4603      	mov	r3, r0
 8022d74:	2b00      	cmp	r3, #0
 8022d76:	d001      	beq.n	8022d7c <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8022d78:	2304      	movs	r3, #4
 8022d7a:	e01d      	b.n	8022db8 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8022d7c:	2101      	movs	r1, #1
 8022d7e:	4810      	ldr	r0, [pc, #64]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d80:	f000 fae0 	bl	8023344 <QSPI_QuadMode>
 8022d84:	4603      	mov	r3, r0
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	d001      	beq.n	8022d8e <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8022d8a:	2301      	movs	r3, #1
 8022d8c:	e014      	b.n	8022db8 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8022d8e:	2101      	movs	r1, #1
 8022d90:	480b      	ldr	r0, [pc, #44]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022d92:	f000 fb83 	bl	802349c <QSPI_HighPerfMode>
 8022d96:	4603      	mov	r3, r0
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	d001      	beq.n	8022da0 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8022d9c:	2301      	movs	r3, #1
 8022d9e:	e00b      	b.n	8022db8 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8022da0:	4b07      	ldr	r3, [pc, #28]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022da2:	2202      	movs	r2, #2
 8022da4:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8022da6:	4806      	ldr	r0, [pc, #24]	; (8022dc0 <BSP_QSPI_Init+0xf4>)
 8022da8:	f003 fb04 	bl	80263b4 <HAL_OSPI_Init>
 8022dac:	4603      	mov	r3, r0
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	d001      	beq.n	8022db6 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 8022db2:	2301      	movs	r3, #1
 8022db4:	e000      	b.n	8022db8 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8022db6:	2300      	movs	r3, #0
}
 8022db8:	4618      	mov	r0, r3
 8022dba:	3710      	adds	r7, #16
 8022dbc:	46bd      	mov	sp, r7
 8022dbe:	bd80      	pop	{r7, pc}
 8022dc0:	200028b4 	.word	0x200028b4
 8022dc4:	a0001000 	.word	0xa0001000

08022dc8 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8022dc8:	b580      	push	{r7, lr}
 8022dca:	b098      	sub	sp, #96	; 0x60
 8022dcc:	af00      	add	r7, sp, #0
 8022dce:	60f8      	str	r0, [r7, #12]
 8022dd0:	60b9      	str	r1, [r7, #8]
 8022dd2:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8022dd4:	2300      	movs	r3, #0
 8022dd6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8022dd8:	2300      	movs	r3, #0
 8022dda:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8022ddc:	23eb      	movs	r3, #235	; 0xeb
 8022dde:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8022de0:	2301      	movs	r3, #1
 8022de2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8022de4:	2300      	movs	r3, #0
 8022de6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8022de8:	2300      	movs	r3, #0
 8022dea:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8022dec:	68bb      	ldr	r3, [r7, #8]
 8022dee:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8022df0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8022df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8022df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022dfa:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8022dfc:	2300      	movs	r3, #0
 8022dfe:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8022e00:	23aa      	movs	r3, #170	; 0xaa
 8022e02:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8022e04:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8022e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8022e0a:	2300      	movs	r3, #0
 8022e0c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8022e0e:	2300      	movs	r3, #0
 8022e10:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8022e12:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8022e16:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8022e18:	687b      	ldr	r3, [r7, #4]
 8022e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8022e1c:	2300      	movs	r3, #0
 8022e1e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8022e20:	2304      	movs	r3, #4
 8022e22:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8022e24:	2300      	movs	r3, #0
 8022e26:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8022e28:	2300      	movs	r3, #0
 8022e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022e2c:	f107 0310 	add.w	r3, r7, #16
 8022e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8022e34:	4619      	mov	r1, r3
 8022e36:	480c      	ldr	r0, [pc, #48]	; (8022e68 <BSP_QSPI_Read+0xa0>)
 8022e38:	f003 fb8d 	bl	8026556 <HAL_OSPI_Command>
 8022e3c:	4603      	mov	r3, r0
 8022e3e:	2b00      	cmp	r3, #0
 8022e40:	d001      	beq.n	8022e46 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8022e42:	2301      	movs	r3, #1
 8022e44:	e00b      	b.n	8022e5e <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8022e4a:	68f9      	ldr	r1, [r7, #12]
 8022e4c:	4806      	ldr	r0, [pc, #24]	; (8022e68 <BSP_QSPI_Read+0xa0>)
 8022e4e:	f003 fc76 	bl	802673e <HAL_OSPI_Receive>
 8022e52:	4603      	mov	r3, r0
 8022e54:	2b00      	cmp	r3, #0
 8022e56:	d001      	beq.n	8022e5c <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8022e58:	2301      	movs	r3, #1
 8022e5a:	e000      	b.n	8022e5e <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8022e5c:	2300      	movs	r3, #0
}
 8022e5e:	4618      	mov	r0, r3
 8022e60:	3760      	adds	r7, #96	; 0x60
 8022e62:	46bd      	mov	sp, r7
 8022e64:	bd80      	pop	{r7, pc}
 8022e66:	bf00      	nop
 8022e68:	200028b4 	.word	0x200028b4

08022e6c <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8022e6c:	b580      	push	{r7, lr}
 8022e6e:	b09c      	sub	sp, #112	; 0x70
 8022e70:	af00      	add	r7, sp, #0
 8022e72:	60f8      	str	r0, [r7, #12]
 8022e74:	60b9      	str	r1, [r7, #8]
 8022e76:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8022e78:	68bb      	ldr	r3, [r7, #8]
 8022e7a:	b2db      	uxtb	r3, r3
 8022e7c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022e80:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8022e82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	429a      	cmp	r2, r3
 8022e88:	d901      	bls.n	8022e8e <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8022e8a:	687b      	ldr	r3, [r7, #4]
 8022e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8022e8e:	68bb      	ldr	r3, [r7, #8]
 8022e90:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 8022e92:	68ba      	ldr	r2, [r7, #8]
 8022e94:	687b      	ldr	r3, [r7, #4]
 8022e96:	4413      	add	r3, r2
 8022e98:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8022e9e:	2300      	movs	r3, #0
 8022ea0:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 8022ea2:	2338      	movs	r3, #56	; 0x38
 8022ea4:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8022ea6:	2301      	movs	r3, #1
 8022ea8:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8022eaa:	2300      	movs	r3, #0
 8022eac:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8022eae:	2300      	movs	r3, #0
 8022eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8022eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8022eb6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8022eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022ebc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8022ebe:	2300      	movs	r3, #0
 8022ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8022ec2:	2300      	movs	r3, #0
 8022ec4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8022ec6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8022eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8022ecc:	2300      	movs	r3, #0
 8022ece:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8022ed0:	2300      	movs	r3, #0
 8022ed2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8022ed8:	2300      	movs	r3, #0
 8022eda:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8022edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8022ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8022ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022ee2:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8022ee4:	4823      	ldr	r0, [pc, #140]	; (8022f74 <BSP_QSPI_Write+0x108>)
 8022ee6:	f000 f986 	bl	80231f6 <QSPI_WriteEnable>
 8022eea:	4603      	mov	r3, r0
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d001      	beq.n	8022ef4 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8022ef0:	2301      	movs	r3, #1
 8022ef2:	e03b      	b.n	8022f6c <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022ef4:	f107 0314 	add.w	r3, r7, #20
 8022ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8022efc:	4619      	mov	r1, r3
 8022efe:	481d      	ldr	r0, [pc, #116]	; (8022f74 <BSP_QSPI_Write+0x108>)
 8022f00:	f003 fb29 	bl	8026556 <HAL_OSPI_Command>
 8022f04:	4603      	mov	r3, r0
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	d001      	beq.n	8022f0e <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8022f0a:	2301      	movs	r3, #1
 8022f0c:	e02e      	b.n	8022f6c <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8022f12:	68f9      	ldr	r1, [r7, #12]
 8022f14:	4817      	ldr	r0, [pc, #92]	; (8022f74 <BSP_QSPI_Write+0x108>)
 8022f16:	f003 fb9f 	bl	8026658 <HAL_OSPI_Transmit>
 8022f1a:	4603      	mov	r3, r0
 8022f1c:	2b00      	cmp	r3, #0
 8022f1e:	d001      	beq.n	8022f24 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8022f20:	2301      	movs	r3, #1
 8022f22:	e023      	b.n	8022f6c <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8022f24:	f241 3188 	movw	r1, #5000	; 0x1388
 8022f28:	4812      	ldr	r0, [pc, #72]	; (8022f74 <BSP_QSPI_Write+0x108>)
 8022f2a:	f000 f9c0 	bl	80232ae <QSPI_AutoPollingMemReady>
 8022f2e:	4603      	mov	r3, r0
 8022f30:	2b00      	cmp	r3, #0
 8022f32:	d001      	beq.n	8022f38 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8022f34:	2301      	movs	r3, #1
 8022f36:	e019      	b.n	8022f6c <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8022f38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8022f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022f3c:	4413      	add	r3, r2
 8022f3e:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8022f40:	68fa      	ldr	r2, [r7, #12]
 8022f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022f44:	4413      	add	r3, r2
 8022f46:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8022f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8022f4a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022f4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8022f50:	429a      	cmp	r2, r3
 8022f52:	d203      	bcs.n	8022f5c <BSP_QSPI_Write+0xf0>
 8022f54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8022f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8022f58:	1ad3      	subs	r3, r2, r3
 8022f5a:	e001      	b.n	8022f60 <BSP_QSPI_Write+0xf4>
 8022f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022f60:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 8022f62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8022f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022f66:	429a      	cmp	r2, r3
 8022f68:	d3b8      	bcc.n	8022edc <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8022f6a:	2300      	movs	r3, #0
}
 8022f6c:	4618      	mov	r0, r3
 8022f6e:	3770      	adds	r7, #112	; 0x70
 8022f70:	46bd      	mov	sp, r7
 8022f72:	bd80      	pop	{r7, pc}
 8022f74:	200028b4 	.word	0x200028b4

08022f78 <BSP_QSPI_Erase_Sector>:
  *       returns. Application has to call BSP_QSPI_GetStatus()
  *       to know when the device is available again (i.e. erase operation
  *       completed).
  */
uint8_t BSP_QSPI_Erase_Sector(uint32_t Sector)
{
 8022f78:	b580      	push	{r7, lr}
 8022f7a:	b096      	sub	sp, #88	; 0x58
 8022f7c:	af00      	add	r7, sp, #0
 8022f7e:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  
  if (Sector >= (uint32_t)(MX25R6435F_FLASH_SIZE/MX25R6435F_SECTOR_SIZE))
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8022f86:	d301      	bcc.n	8022f8c <BSP_QSPI_Erase_Sector+0x14>
  {
    return QSPI_ERROR;
 8022f88:	2301      	movs	r3, #1
 8022f8a:	e036      	b.n	8022ffa <BSP_QSPI_Erase_Sector+0x82>
  }
  
  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8022f8c:	2300      	movs	r3, #0
 8022f8e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8022f90:	2300      	movs	r3, #0
 8022f92:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = SECTOR_ERASE_CMD;
 8022f94:	2320      	movs	r3, #32
 8022f96:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8022f98:	2301      	movs	r3, #1
 8022f9a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8022f9c:	2300      	movs	r3, #0
 8022f9e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8022fa0:	2300      	movs	r3, #0
 8022fa2:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = (Sector * MX25R6435F_SECTOR_SIZE);
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	031b      	lsls	r3, r3, #12
 8022fa8:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8022faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022fae:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8022fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8022fb6:	2300      	movs	r3, #0
 8022fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8022fba:	2300      	movs	r3, #0
 8022fbc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8022fbe:	2300      	movs	r3, #0
 8022fc0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8022fc2:	2300      	movs	r3, #0
 8022fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8022fc6:	2300      	movs	r3, #0
 8022fc8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8022fca:	2300      	movs	r3, #0
 8022fcc:	657b      	str	r3, [r7, #84]	; 0x54
  
  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8022fce:	480d      	ldr	r0, [pc, #52]	; (8023004 <BSP_QSPI_Erase_Sector+0x8c>)
 8022fd0:	f000 f911 	bl	80231f6 <QSPI_WriteEnable>
 8022fd4:	4603      	mov	r3, r0
 8022fd6:	2b00      	cmp	r3, #0
 8022fd8:	d001      	beq.n	8022fde <BSP_QSPI_Erase_Sector+0x66>
  {
    return QSPI_ERROR;
 8022fda:	2301      	movs	r3, #1
 8022fdc:	e00d      	b.n	8022ffa <BSP_QSPI_Erase_Sector+0x82>
  }
  
  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022fde:	f107 0308 	add.w	r3, r7, #8
 8022fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8022fe6:	4619      	mov	r1, r3
 8022fe8:	4806      	ldr	r0, [pc, #24]	; (8023004 <BSP_QSPI_Erase_Sector+0x8c>)
 8022fea:	f003 fab4 	bl	8026556 <HAL_OSPI_Command>
 8022fee:	4603      	mov	r3, r0
 8022ff0:	2b00      	cmp	r3, #0
 8022ff2:	d001      	beq.n	8022ff8 <BSP_QSPI_Erase_Sector+0x80>
  {
    return QSPI_ERROR;
 8022ff4:	2301      	movs	r3, #1
 8022ff6:	e000      	b.n	8022ffa <BSP_QSPI_Erase_Sector+0x82>
  }
  
  return QSPI_OK;
 8022ff8:	2300      	movs	r3, #0
}
 8022ffa:	4618      	mov	r0, r3
 8022ffc:	3758      	adds	r7, #88	; 0x58
 8022ffe:	46bd      	mov	sp, r7
 8023000:	bd80      	pop	{r7, pc}
 8023002:	bf00      	nop
 8023004:	200028b4 	.word	0x200028b4

08023008 <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 8023008:	b580      	push	{r7, lr}
 802300a:	b096      	sub	sp, #88	; 0x58
 802300c:	af00      	add	r7, sp, #0
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read security register command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 802300e:	2300      	movs	r3, #0
 8023010:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8023012:	2300      	movs	r3, #0
 8023014:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = READ_SEC_REG_CMD;
 8023016:	232b      	movs	r3, #43	; 0x2b
 8023018:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 802301a:	2301      	movs	r3, #1
 802301c:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 802301e:	2300      	movs	r3, #0
 8023020:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8023022:	2300      	movs	r3, #0
 8023024:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8023026:	2300      	movs	r3, #0
 8023028:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 802302a:	2300      	movs	r3, #0
 802302c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 802302e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023032:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.NbData             = 1;
 8023034:	2301      	movs	r3, #1
 8023036:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8023038:	2300      	movs	r3, #0
 802303a:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DummyCycles        = 0;
 802303c:	2300      	movs	r3, #0
 802303e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8023040:	2300      	movs	r3, #0
 8023042:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8023044:	2300      	movs	r3, #0
 8023046:	657b      	str	r3, [r7, #84]	; 0x54

  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023048:	f107 0308 	add.w	r3, r7, #8
 802304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023050:	4619      	mov	r1, r3
 8023052:	4824      	ldr	r0, [pc, #144]	; (80230e4 <BSP_QSPI_GetStatus+0xdc>)
 8023054:	f003 fa7f 	bl	8026556 <HAL_OSPI_Command>
 8023058:	4603      	mov	r3, r0
 802305a:	2b00      	cmp	r3, #0
 802305c:	d001      	beq.n	8023062 <BSP_QSPI_GetStatus+0x5a>
  {
    return QSPI_ERROR;
 802305e:	2301      	movs	r3, #1
 8023060:	e03c      	b.n	80230dc <BSP_QSPI_GetStatus+0xd4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023062:	1dfb      	adds	r3, r7, #7
 8023064:	f241 3288 	movw	r2, #5000	; 0x1388
 8023068:	4619      	mov	r1, r3
 802306a:	481e      	ldr	r0, [pc, #120]	; (80230e4 <BSP_QSPI_GetStatus+0xdc>)
 802306c:	f003 fb67 	bl	802673e <HAL_OSPI_Receive>
 8023070:	4603      	mov	r3, r0
 8023072:	2b00      	cmp	r3, #0
 8023074:	d001      	beq.n	802307a <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 8023076:	2301      	movs	r3, #1
 8023078:	e030      	b.n	80230dc <BSP_QSPI_GetStatus+0xd4>
  }
  
  /* Check the value of the register */
  if ((reg & (MX25R6435F_SECR_P_FAIL | MX25R6435F_SECR_E_FAIL)) != 0)
 802307a:	79fb      	ldrb	r3, [r7, #7]
 802307c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8023080:	2b00      	cmp	r3, #0
 8023082:	d001      	beq.n	8023088 <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_ERROR;
 8023084:	2301      	movs	r3, #1
 8023086:	e029      	b.n	80230dc <BSP_QSPI_GetStatus+0xd4>
  }
  else if ((reg & (MX25R6435F_SECR_PSB | MX25R6435F_SECR_ESB)) != 0)
 8023088:	79fb      	ldrb	r3, [r7, #7]
 802308a:	f003 030c 	and.w	r3, r3, #12
 802308e:	2b00      	cmp	r3, #0
 8023090:	d001      	beq.n	8023096 <BSP_QSPI_GetStatus+0x8e>
  {
    return QSPI_SUSPENDED;
 8023092:	2308      	movs	r3, #8
 8023094:	e022      	b.n	80230dc <BSP_QSPI_GetStatus+0xd4>
  }

  /* Initialize the read status register command */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8023096:	2305      	movs	r3, #5
 8023098:	613b      	str	r3, [r7, #16]

  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802309a:	f107 0308 	add.w	r3, r7, #8
 802309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80230a2:	4619      	mov	r1, r3
 80230a4:	480f      	ldr	r0, [pc, #60]	; (80230e4 <BSP_QSPI_GetStatus+0xdc>)
 80230a6:	f003 fa56 	bl	8026556 <HAL_OSPI_Command>
 80230aa:	4603      	mov	r3, r0
 80230ac:	2b00      	cmp	r3, #0
 80230ae:	d001      	beq.n	80230b4 <BSP_QSPI_GetStatus+0xac>
  {
    return QSPI_ERROR;
 80230b0:	2301      	movs	r3, #1
 80230b2:	e013      	b.n	80230dc <BSP_QSPI_GetStatus+0xd4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80230b4:	1dfb      	adds	r3, r7, #7
 80230b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80230ba:	4619      	mov	r1, r3
 80230bc:	4809      	ldr	r0, [pc, #36]	; (80230e4 <BSP_QSPI_GetStatus+0xdc>)
 80230be:	f003 fb3e 	bl	802673e <HAL_OSPI_Receive>
 80230c2:	4603      	mov	r3, r0
 80230c4:	2b00      	cmp	r3, #0
 80230c6:	d001      	beq.n	80230cc <BSP_QSPI_GetStatus+0xc4>
  {
    return QSPI_ERROR;
 80230c8:	2301      	movs	r3, #1
 80230ca:	e007      	b.n	80230dc <BSP_QSPI_GetStatus+0xd4>
  }

  /* Check the value of the register */
  if ((reg & MX25R6435F_SR_WIP) != 0)
 80230cc:	79fb      	ldrb	r3, [r7, #7]
 80230ce:	f003 0301 	and.w	r3, r3, #1
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	d001      	beq.n	80230da <BSP_QSPI_GetStatus+0xd2>
  {
    return QSPI_BUSY;
 80230d6:	2302      	movs	r3, #2
 80230d8:	e000      	b.n	80230dc <BSP_QSPI_GetStatus+0xd4>
  }
  else
  {
    return QSPI_OK;
 80230da:	2300      	movs	r3, #0
  }
}
 80230dc:	4618      	mov	r0, r3
 80230de:	3758      	adds	r7, #88	; 0x58
 80230e0:	46bd      	mov	sp, r7
 80230e2:	bd80      	pop	{r7, pc}
 80230e4:	200028b4 	.word	0x200028b4

080230e8 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80230e8:	b580      	push	{r7, lr}
 80230ea:	b088      	sub	sp, #32
 80230ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 80230ee:	4b1c      	ldr	r3, [pc, #112]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 80230f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80230f2:	4a1b      	ldr	r2, [pc, #108]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 80230f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80230f8:	6513      	str	r3, [r2, #80]	; 0x50
 80230fa:	4b19      	ldr	r3, [pc, #100]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 80230fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80230fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023102:	60bb      	str	r3, [r7, #8]
 8023104:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8023106:	4b16      	ldr	r3, [pc, #88]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 8023108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802310a:	4a15      	ldr	r2, [pc, #84]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 802310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023110:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8023112:	4b13      	ldr	r3, [pc, #76]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 8023114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023116:	4a12      	ldr	r2, [pc, #72]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 8023118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802311c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802311e:	4b10      	ldr	r3, [pc, #64]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 8023120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023122:	4a0f      	ldr	r2, [pc, #60]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 8023124:	f043 0310 	orr.w	r3, r3, #16
 8023128:	64d3      	str	r3, [r2, #76]	; 0x4c
 802312a:	4b0d      	ldr	r3, [pc, #52]	; (8023160 <BSP_QSPI_MspInit+0x78>)
 802312c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802312e:	f003 0310 	and.w	r3, r3, #16
 8023132:	607b      	str	r3, [r7, #4]
 8023134:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8023136:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 802313a:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 802313c:	2302      	movs	r3, #2
 802313e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8023140:	2300      	movs	r3, #0
 8023142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8023144:	2303      	movs	r3, #3
 8023146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8023148:	230a      	movs	r3, #10
 802314a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802314c:	f107 030c 	add.w	r3, r7, #12
 8023150:	4619      	mov	r1, r3
 8023152:	4804      	ldr	r0, [pc, #16]	; (8023164 <BSP_QSPI_MspInit+0x7c>)
 8023154:	f002 f868 	bl	8025228 <HAL_GPIO_Init>
}
 8023158:	bf00      	nop
 802315a:	3720      	adds	r7, #32
 802315c:	46bd      	mov	sp, r7
 802315e:	bd80      	pop	{r7, pc}
 8023160:	40021000 	.word	0x40021000
 8023164:	48001000 	.word	0x48001000

08023168 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8023168:	b580      	push	{r7, lr}
 802316a:	b096      	sub	sp, #88	; 0x58
 802316c:	af00      	add	r7, sp, #0
 802316e:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8023170:	2300      	movs	r3, #0
 8023172:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8023174:	2300      	movs	r3, #0
 8023176:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8023178:	2366      	movs	r3, #102	; 0x66
 802317a:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 802317c:	2301      	movs	r3, #1
 802317e:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8023180:	2300      	movs	r3, #0
 8023182:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8023184:	2300      	movs	r3, #0
 8023186:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8023188:	2300      	movs	r3, #0
 802318a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 802318c:	2300      	movs	r3, #0
 802318e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8023190:	2300      	movs	r3, #0
 8023192:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8023194:	2300      	movs	r3, #0
 8023196:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8023198:	2300      	movs	r3, #0
 802319a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 802319c:	2300      	movs	r3, #0
 802319e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80231a0:	f107 0308 	add.w	r3, r7, #8
 80231a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80231a8:	4619      	mov	r1, r3
 80231aa:	6878      	ldr	r0, [r7, #4]
 80231ac:	f003 f9d3 	bl	8026556 <HAL_OSPI_Command>
 80231b0:	4603      	mov	r3, r0
 80231b2:	2b00      	cmp	r3, #0
 80231b4:	d001      	beq.n	80231ba <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 80231b6:	2301      	movs	r3, #1
 80231b8:	e019      	b.n	80231ee <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80231ba:	2399      	movs	r3, #153	; 0x99
 80231bc:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80231be:	f107 0308 	add.w	r3, r7, #8
 80231c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80231c6:	4619      	mov	r1, r3
 80231c8:	6878      	ldr	r0, [r7, #4]
 80231ca:	f003 f9c4 	bl	8026556 <HAL_OSPI_Command>
 80231ce:	4603      	mov	r3, r0
 80231d0:	2b00      	cmp	r3, #0
 80231d2:	d001      	beq.n	80231d8 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 80231d4:	2301      	movs	r3, #1
 80231d6:	e00a      	b.n	80231ee <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80231d8:	f241 3188 	movw	r1, #5000	; 0x1388
 80231dc:	6878      	ldr	r0, [r7, #4]
 80231de:	f000 f866 	bl	80232ae <QSPI_AutoPollingMemReady>
 80231e2:	4603      	mov	r3, r0
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	d001      	beq.n	80231ec <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 80231e8:	2301      	movs	r3, #1
 80231ea:	e000      	b.n	80231ee <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 80231ec:	2300      	movs	r3, #0
}
 80231ee:	4618      	mov	r0, r3
 80231f0:	3758      	adds	r7, #88	; 0x58
 80231f2:	46bd      	mov	sp, r7
 80231f4:	bd80      	pop	{r7, pc}

080231f6 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 80231f6:	b580      	push	{r7, lr}
 80231f8:	b09c      	sub	sp, #112	; 0x70
 80231fa:	af00      	add	r7, sp, #0
 80231fc:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80231fe:	2300      	movs	r3, #0
 8023200:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8023202:	2300      	movs	r3, #0
 8023204:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8023206:	2306      	movs	r3, #6
 8023208:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 802320a:	2301      	movs	r3, #1
 802320c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 802320e:	2300      	movs	r3, #0
 8023210:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8023212:	2300      	movs	r3, #0
 8023214:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8023216:	2300      	movs	r3, #0
 8023218:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 802321a:	2300      	movs	r3, #0
 802321c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 802321e:	2300      	movs	r3, #0
 8023220:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 8023222:	2300      	movs	r3, #0
 8023224:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8023226:	2300      	movs	r3, #0
 8023228:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 802322a:	2300      	movs	r3, #0
 802322c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802322e:	f107 0320 	add.w	r3, r7, #32
 8023232:	f241 3288 	movw	r2, #5000	; 0x1388
 8023236:	4619      	mov	r1, r3
 8023238:	6878      	ldr	r0, [r7, #4]
 802323a:	f003 f98c 	bl	8026556 <HAL_OSPI_Command>
 802323e:	4603      	mov	r3, r0
 8023240:	2b00      	cmp	r3, #0
 8023242:	d001      	beq.n	8023248 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8023244:	2301      	movs	r3, #1
 8023246:	e02e      	b.n	80232a6 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8023248:	2302      	movs	r3, #2
 802324a:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 802324c:	2302      	movs	r3, #2
 802324e:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8023250:	2300      	movs	r3, #0
 8023252:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8023254:	2310      	movs	r3, #16
 8023256:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8023258:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802325c:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 802325e:	2305      	movs	r3, #5
 8023260:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8023262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023266:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8023268:	2301      	movs	r3, #1
 802326a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 802326c:	2300      	movs	r3, #0
 802326e:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023270:	f107 0320 	add.w	r3, r7, #32
 8023274:	f241 3288 	movw	r2, #5000	; 0x1388
 8023278:	4619      	mov	r1, r3
 802327a:	6878      	ldr	r0, [r7, #4]
 802327c:	f003 f96b 	bl	8026556 <HAL_OSPI_Command>
 8023280:	4603      	mov	r3, r0
 8023282:	2b00      	cmp	r3, #0
 8023284:	d001      	beq.n	802328a <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8023286:	2301      	movs	r3, #1
 8023288:	e00d      	b.n	80232a6 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802328a:	f107 030c 	add.w	r3, r7, #12
 802328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8023292:	4619      	mov	r1, r3
 8023294:	6878      	ldr	r0, [r7, #4]
 8023296:	f003 faf5 	bl	8026884 <HAL_OSPI_AutoPolling>
 802329a:	4603      	mov	r3, r0
 802329c:	2b00      	cmp	r3, #0
 802329e:	d001      	beq.n	80232a4 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 80232a0:	2301      	movs	r3, #1
 80232a2:	e000      	b.n	80232a6 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 80232a4:	2300      	movs	r3, #0
}
 80232a6:	4618      	mov	r0, r3
 80232a8:	3770      	adds	r7, #112	; 0x70
 80232aa:	46bd      	mov	sp, r7
 80232ac:	bd80      	pop	{r7, pc}

080232ae <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80232ae:	b580      	push	{r7, lr}
 80232b0:	b09c      	sub	sp, #112	; 0x70
 80232b2:	af00      	add	r7, sp, #0
 80232b4:	6078      	str	r0, [r7, #4]
 80232b6:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80232b8:	2300      	movs	r3, #0
 80232ba:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80232bc:	2300      	movs	r3, #0
 80232be:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80232c0:	2305      	movs	r3, #5
 80232c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80232c4:	2301      	movs	r3, #1
 80232c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80232c8:	2300      	movs	r3, #0
 80232ca:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80232cc:	2300      	movs	r3, #0
 80232ce:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80232d0:	2300      	movs	r3, #0
 80232d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80232d4:	2300      	movs	r3, #0
 80232d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80232d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80232dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 80232de:	2301      	movs	r3, #1
 80232e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80232e2:	2300      	movs	r3, #0
 80232e4:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 80232e6:	2300      	movs	r3, #0
 80232e8:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80232ea:	2300      	movs	r3, #0
 80232ec:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80232ee:	2300      	movs	r3, #0
 80232f0:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 80232f2:	2300      	movs	r3, #0
 80232f4:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80232f6:	2301      	movs	r3, #1
 80232f8:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80232fa:	2300      	movs	r3, #0
 80232fc:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80232fe:	2310      	movs	r3, #16
 8023300:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8023302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023306:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023308:	f107 0320 	add.w	r3, r7, #32
 802330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023310:	4619      	mov	r1, r3
 8023312:	6878      	ldr	r0, [r7, #4]
 8023314:	f003 f91f 	bl	8026556 <HAL_OSPI_Command>
 8023318:	4603      	mov	r3, r0
 802331a:	2b00      	cmp	r3, #0
 802331c:	d001      	beq.n	8023322 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 802331e:	2301      	movs	r3, #1
 8023320:	e00c      	b.n	802333c <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8023322:	f107 030c 	add.w	r3, r7, #12
 8023326:	683a      	ldr	r2, [r7, #0]
 8023328:	4619      	mov	r1, r3
 802332a:	6878      	ldr	r0, [r7, #4]
 802332c:	f003 faaa 	bl	8026884 <HAL_OSPI_AutoPolling>
 8023330:	4603      	mov	r3, r0
 8023332:	2b00      	cmp	r3, #0
 8023334:	d001      	beq.n	802333a <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8023336:	2301      	movs	r3, #1
 8023338:	e000      	b.n	802333c <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 802333a:	2300      	movs	r3, #0
}
 802333c:	4618      	mov	r0, r3
 802333e:	3770      	adds	r7, #112	; 0x70
 8023340:	46bd      	mov	sp, r7
 8023342:	bd80      	pop	{r7, pc}

08023344 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8023344:	b580      	push	{r7, lr}
 8023346:	b098      	sub	sp, #96	; 0x60
 8023348:	af00      	add	r7, sp, #0
 802334a:	6078      	str	r0, [r7, #4]
 802334c:	460b      	mov	r3, r1
 802334e:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8023350:	2300      	movs	r3, #0
 8023352:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8023354:	2300      	movs	r3, #0
 8023356:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8023358:	2305      	movs	r3, #5
 802335a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 802335c:	2301      	movs	r3, #1
 802335e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8023360:	2300      	movs	r3, #0
 8023362:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8023364:	2300      	movs	r3, #0
 8023366:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8023368:	2300      	movs	r3, #0
 802336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 802336c:	2300      	movs	r3, #0
 802336e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8023370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023374:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8023376:	2300      	movs	r3, #0
 8023378:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 802337a:	2300      	movs	r3, #0
 802337c:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 802337e:	2301      	movs	r3, #1
 8023380:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8023382:	2300      	movs	r3, #0
 8023384:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8023386:	2300      	movs	r3, #0
 8023388:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802338a:	f107 0310 	add.w	r3, r7, #16
 802338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8023392:	4619      	mov	r1, r3
 8023394:	6878      	ldr	r0, [r7, #4]
 8023396:	f003 f8de 	bl	8026556 <HAL_OSPI_Command>
 802339a:	4603      	mov	r3, r0
 802339c:	2b00      	cmp	r3, #0
 802339e:	d001      	beq.n	80233a4 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 80233a0:	2301      	movs	r3, #1
 80233a2:	e077      	b.n	8023494 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80233a4:	f107 030f 	add.w	r3, r7, #15
 80233a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80233ac:	4619      	mov	r1, r3
 80233ae:	6878      	ldr	r0, [r7, #4]
 80233b0:	f003 f9c5 	bl	802673e <HAL_OSPI_Receive>
 80233b4:	4603      	mov	r3, r0
 80233b6:	2b00      	cmp	r3, #0
 80233b8:	d001      	beq.n	80233be <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 80233ba:	2301      	movs	r3, #1
 80233bc:	e06a      	b.n	8023494 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80233be:	6878      	ldr	r0, [r7, #4]
 80233c0:	f7ff ff19 	bl	80231f6 <QSPI_WriteEnable>
 80233c4:	4603      	mov	r3, r0
 80233c6:	2b00      	cmp	r3, #0
 80233c8:	d001      	beq.n	80233ce <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 80233ca:	2301      	movs	r3, #1
 80233cc:	e062      	b.n	8023494 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 80233ce:	78fb      	ldrb	r3, [r7, #3]
 80233d0:	2b01      	cmp	r3, #1
 80233d2:	d105      	bne.n	80233e0 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 80233d4:	7bfb      	ldrb	r3, [r7, #15]
 80233d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80233da:	b2db      	uxtb	r3, r3
 80233dc:	73fb      	strb	r3, [r7, #15]
 80233de:	e004      	b.n	80233ea <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 80233e0:	7bfb      	ldrb	r3, [r7, #15]
 80233e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80233e6:	b2db      	uxtb	r3, r3
 80233e8:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80233ea:	2301      	movs	r3, #1
 80233ec:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80233ee:	f107 0310 	add.w	r3, r7, #16
 80233f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80233f6:	4619      	mov	r1, r3
 80233f8:	6878      	ldr	r0, [r7, #4]
 80233fa:	f003 f8ac 	bl	8026556 <HAL_OSPI_Command>
 80233fe:	4603      	mov	r3, r0
 8023400:	2b00      	cmp	r3, #0
 8023402:	d001      	beq.n	8023408 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8023404:	2301      	movs	r3, #1
 8023406:	e045      	b.n	8023494 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023408:	f107 030f 	add.w	r3, r7, #15
 802340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023410:	4619      	mov	r1, r3
 8023412:	6878      	ldr	r0, [r7, #4]
 8023414:	f003 f920 	bl	8026658 <HAL_OSPI_Transmit>
 8023418:	4603      	mov	r3, r0
 802341a:	2b00      	cmp	r3, #0
 802341c:	d001      	beq.n	8023422 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 802341e:	2301      	movs	r3, #1
 8023420:	e038      	b.n	8023494 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8023422:	f241 3188 	movw	r1, #5000	; 0x1388
 8023426:	6878      	ldr	r0, [r7, #4]
 8023428:	f7ff ff41 	bl	80232ae <QSPI_AutoPollingMemReady>
 802342c:	4603      	mov	r3, r0
 802342e:	2b00      	cmp	r3, #0
 8023430:	d001      	beq.n	8023436 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8023432:	2301      	movs	r3, #1
 8023434:	e02e      	b.n	8023494 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8023436:	2305      	movs	r3, #5
 8023438:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802343a:	f107 0310 	add.w	r3, r7, #16
 802343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8023442:	4619      	mov	r1, r3
 8023444:	6878      	ldr	r0, [r7, #4]
 8023446:	f003 f886 	bl	8026556 <HAL_OSPI_Command>
 802344a:	4603      	mov	r3, r0
 802344c:	2b00      	cmp	r3, #0
 802344e:	d001      	beq.n	8023454 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8023450:	2301      	movs	r3, #1
 8023452:	e01f      	b.n	8023494 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023454:	f107 030f 	add.w	r3, r7, #15
 8023458:	f241 3288 	movw	r2, #5000	; 0x1388
 802345c:	4619      	mov	r1, r3
 802345e:	6878      	ldr	r0, [r7, #4]
 8023460:	f003 f96d 	bl	802673e <HAL_OSPI_Receive>
 8023464:	4603      	mov	r3, r0
 8023466:	2b00      	cmp	r3, #0
 8023468:	d001      	beq.n	802346e <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 802346a:	2301      	movs	r3, #1
 802346c:	e012      	b.n	8023494 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 802346e:	7bfb      	ldrb	r3, [r7, #15]
 8023470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023474:	2b00      	cmp	r3, #0
 8023476:	d102      	bne.n	802347e <QSPI_QuadMode+0x13a>
 8023478:	78fb      	ldrb	r3, [r7, #3]
 802347a:	2b01      	cmp	r3, #1
 802347c:	d007      	beq.n	802348e <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 802347e:	7bfb      	ldrb	r3, [r7, #15]
 8023480:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8023484:	2b00      	cmp	r3, #0
 8023486:	d004      	beq.n	8023492 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8023488:	78fb      	ldrb	r3, [r7, #3]
 802348a:	2b00      	cmp	r3, #0
 802348c:	d101      	bne.n	8023492 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 802348e:	2301      	movs	r3, #1
 8023490:	e000      	b.n	8023494 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8023492:	2300      	movs	r3, #0
}
 8023494:	4618      	mov	r0, r3
 8023496:	3760      	adds	r7, #96	; 0x60
 8023498:	46bd      	mov	sp, r7
 802349a:	bd80      	pop	{r7, pc}

0802349c <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 802349c:	b580      	push	{r7, lr}
 802349e:	b098      	sub	sp, #96	; 0x60
 80234a0:	af00      	add	r7, sp, #0
 80234a2:	6078      	str	r0, [r7, #4]
 80234a4:	460b      	mov	r3, r1
 80234a6:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80234a8:	2300      	movs	r3, #0
 80234aa:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80234ac:	2300      	movs	r3, #0
 80234ae:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80234b0:	2305      	movs	r3, #5
 80234b2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80234b4:	2301      	movs	r3, #1
 80234b6:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80234b8:	2300      	movs	r3, #0
 80234ba:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80234bc:	2300      	movs	r3, #0
 80234be:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80234c0:	2300      	movs	r3, #0
 80234c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80234c4:	2300      	movs	r3, #0
 80234c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80234c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80234cc:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80234ce:	2300      	movs	r3, #0
 80234d0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 80234d2:	2300      	movs	r3, #0
 80234d4:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 80234d6:	2301      	movs	r3, #1
 80234d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80234da:	2300      	movs	r3, #0
 80234dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80234de:	2300      	movs	r3, #0
 80234e0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80234e2:	f107 0310 	add.w	r3, r7, #16
 80234e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80234ea:	4619      	mov	r1, r3
 80234ec:	6878      	ldr	r0, [r7, #4]
 80234ee:	f003 f832 	bl	8026556 <HAL_OSPI_Command>
 80234f2:	4603      	mov	r3, r0
 80234f4:	2b00      	cmp	r3, #0
 80234f6:	d001      	beq.n	80234fc <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 80234f8:	2301      	movs	r3, #1
 80234fa:	e09a      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80234fc:	f107 030c 	add.w	r3, r7, #12
 8023500:	f241 3288 	movw	r2, #5000	; 0x1388
 8023504:	4619      	mov	r1, r3
 8023506:	6878      	ldr	r0, [r7, #4]
 8023508:	f003 f919 	bl	802673e <HAL_OSPI_Receive>
 802350c:	4603      	mov	r3, r0
 802350e:	2b00      	cmp	r3, #0
 8023510:	d001      	beq.n	8023516 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8023512:	2301      	movs	r3, #1
 8023514:	e08d      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8023516:	2315      	movs	r3, #21
 8023518:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 802351a:	2302      	movs	r3, #2
 802351c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802351e:	f107 0310 	add.w	r3, r7, #16
 8023522:	f241 3288 	movw	r2, #5000	; 0x1388
 8023526:	4619      	mov	r1, r3
 8023528:	6878      	ldr	r0, [r7, #4]
 802352a:	f003 f814 	bl	8026556 <HAL_OSPI_Command>
 802352e:	4603      	mov	r3, r0
 8023530:	2b00      	cmp	r3, #0
 8023532:	d001      	beq.n	8023538 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8023534:	2301      	movs	r3, #1
 8023536:	e07c      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023538:	f107 030c 	add.w	r3, r7, #12
 802353c:	3301      	adds	r3, #1
 802353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8023542:	4619      	mov	r1, r3
 8023544:	6878      	ldr	r0, [r7, #4]
 8023546:	f003 f8fa 	bl	802673e <HAL_OSPI_Receive>
 802354a:	4603      	mov	r3, r0
 802354c:	2b00      	cmp	r3, #0
 802354e:	d001      	beq.n	8023554 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8023550:	2301      	movs	r3, #1
 8023552:	e06e      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8023554:	6878      	ldr	r0, [r7, #4]
 8023556:	f7ff fe4e 	bl	80231f6 <QSPI_WriteEnable>
 802355a:	4603      	mov	r3, r0
 802355c:	2b00      	cmp	r3, #0
 802355e:	d001      	beq.n	8023564 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8023560:	2301      	movs	r3, #1
 8023562:	e066      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8023564:	78fb      	ldrb	r3, [r7, #3]
 8023566:	2b01      	cmp	r3, #1
 8023568:	d105      	bne.n	8023576 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 802356a:	7bbb      	ldrb	r3, [r7, #14]
 802356c:	f043 0302 	orr.w	r3, r3, #2
 8023570:	b2db      	uxtb	r3, r3
 8023572:	73bb      	strb	r3, [r7, #14]
 8023574:	e004      	b.n	8023580 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8023576:	7bbb      	ldrb	r3, [r7, #14]
 8023578:	f023 0302 	bic.w	r3, r3, #2
 802357c:	b2db      	uxtb	r3, r3
 802357e:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8023580:	2301      	movs	r3, #1
 8023582:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8023584:	2303      	movs	r3, #3
 8023586:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023588:	f107 0310 	add.w	r3, r7, #16
 802358c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023590:	4619      	mov	r1, r3
 8023592:	6878      	ldr	r0, [r7, #4]
 8023594:	f002 ffdf 	bl	8026556 <HAL_OSPI_Command>
 8023598:	4603      	mov	r3, r0
 802359a:	2b00      	cmp	r3, #0
 802359c:	d001      	beq.n	80235a2 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 802359e:	2301      	movs	r3, #1
 80235a0:	e047      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80235a2:	f107 030c 	add.w	r3, r7, #12
 80235a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80235aa:	4619      	mov	r1, r3
 80235ac:	6878      	ldr	r0, [r7, #4]
 80235ae:	f003 f853 	bl	8026658 <HAL_OSPI_Transmit>
 80235b2:	4603      	mov	r3, r0
 80235b4:	2b00      	cmp	r3, #0
 80235b6:	d001      	beq.n	80235bc <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 80235b8:	2301      	movs	r3, #1
 80235ba:	e03a      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80235bc:	f241 3188 	movw	r1, #5000	; 0x1388
 80235c0:	6878      	ldr	r0, [r7, #4]
 80235c2:	f7ff fe74 	bl	80232ae <QSPI_AutoPollingMemReady>
 80235c6:	4603      	mov	r3, r0
 80235c8:	2b00      	cmp	r3, #0
 80235ca:	d001      	beq.n	80235d0 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 80235cc:	2301      	movs	r3, #1
 80235ce:	e030      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80235d0:	2315      	movs	r3, #21
 80235d2:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 80235d4:	2302      	movs	r3, #2
 80235d6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80235d8:	f107 0310 	add.w	r3, r7, #16
 80235dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80235e0:	4619      	mov	r1, r3
 80235e2:	6878      	ldr	r0, [r7, #4]
 80235e4:	f002 ffb7 	bl	8026556 <HAL_OSPI_Command>
 80235e8:	4603      	mov	r3, r0
 80235ea:	2b00      	cmp	r3, #0
 80235ec:	d001      	beq.n	80235f2 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 80235ee:	2301      	movs	r3, #1
 80235f0:	e01f      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80235f2:	f107 030c 	add.w	r3, r7, #12
 80235f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80235fa:	4619      	mov	r1, r3
 80235fc:	6878      	ldr	r0, [r7, #4]
 80235fe:	f003 f89e 	bl	802673e <HAL_OSPI_Receive>
 8023602:	4603      	mov	r3, r0
 8023604:	2b00      	cmp	r3, #0
 8023606:	d001      	beq.n	802360c <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8023608:	2301      	movs	r3, #1
 802360a:	e012      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 802360c:	7b7b      	ldrb	r3, [r7, #13]
 802360e:	f003 0302 	and.w	r3, r3, #2
 8023612:	2b00      	cmp	r3, #0
 8023614:	d102      	bne.n	802361c <QSPI_HighPerfMode+0x180>
 8023616:	78fb      	ldrb	r3, [r7, #3]
 8023618:	2b01      	cmp	r3, #1
 802361a:	d007      	beq.n	802362c <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 802361c:	7b7b      	ldrb	r3, [r7, #13]
 802361e:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8023622:	2b00      	cmp	r3, #0
 8023624:	d004      	beq.n	8023630 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8023626:	78fb      	ldrb	r3, [r7, #3]
 8023628:	2b00      	cmp	r3, #0
 802362a:	d101      	bne.n	8023630 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 802362c:	2301      	movs	r3, #1
 802362e:	e000      	b.n	8023632 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8023630:	2300      	movs	r3, #0
}
 8023632:	4618      	mov	r0, r3
 8023634:	3760      	adds	r7, #96	; 0x60
 8023636:	46bd      	mov	sp, r7
 8023638:	bd80      	pop	{r7, pc}
	...

0802363c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802363c:	b480      	push	{r7}
 802363e:	b083      	sub	sp, #12
 8023640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8023642:	4b0f      	ldr	r3, [pc, #60]	; (8023680 <HAL_MspInit+0x44>)
 8023644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023646:	4a0e      	ldr	r2, [pc, #56]	; (8023680 <HAL_MspInit+0x44>)
 8023648:	f043 0301 	orr.w	r3, r3, #1
 802364c:	6613      	str	r3, [r2, #96]	; 0x60
 802364e:	4b0c      	ldr	r3, [pc, #48]	; (8023680 <HAL_MspInit+0x44>)
 8023650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023652:	f003 0301 	and.w	r3, r3, #1
 8023656:	607b      	str	r3, [r7, #4]
 8023658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802365a:	4b09      	ldr	r3, [pc, #36]	; (8023680 <HAL_MspInit+0x44>)
 802365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802365e:	4a08      	ldr	r2, [pc, #32]	; (8023680 <HAL_MspInit+0x44>)
 8023660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023664:	6593      	str	r3, [r2, #88]	; 0x58
 8023666:	4b06      	ldr	r3, [pc, #24]	; (8023680 <HAL_MspInit+0x44>)
 8023668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802366e:	603b      	str	r3, [r7, #0]
 8023670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8023672:	bf00      	nop
 8023674:	370c      	adds	r7, #12
 8023676:	46bd      	mov	sp, r7
 8023678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802367c:	4770      	bx	lr
 802367e:	bf00      	nop
 8023680:	40021000 	.word	0x40021000

08023684 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8023684:	b580      	push	{r7, lr}
 8023686:	b08a      	sub	sp, #40	; 0x28
 8023688:	af00      	add	r7, sp, #0
 802368a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802368c:	f107 0314 	add.w	r3, r7, #20
 8023690:	2200      	movs	r2, #0
 8023692:	601a      	str	r2, [r3, #0]
 8023694:	605a      	str	r2, [r3, #4]
 8023696:	609a      	str	r2, [r3, #8]
 8023698:	60da      	str	r2, [r3, #12]
 802369a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 802369c:	687b      	ldr	r3, [r7, #4]
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	4a2b      	ldr	r2, [pc, #172]	; (8023750 <HAL_DAC_MspInit+0xcc>)
 80236a2:	4293      	cmp	r3, r2
 80236a4:	d150      	bne.n	8023748 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80236a6:	4b2b      	ldr	r3, [pc, #172]	; (8023754 <HAL_DAC_MspInit+0xd0>)
 80236a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80236aa:	4a2a      	ldr	r2, [pc, #168]	; (8023754 <HAL_DAC_MspInit+0xd0>)
 80236ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80236b0:	6593      	str	r3, [r2, #88]	; 0x58
 80236b2:	4b28      	ldr	r3, [pc, #160]	; (8023754 <HAL_DAC_MspInit+0xd0>)
 80236b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80236b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80236ba:	613b      	str	r3, [r7, #16]
 80236bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80236be:	4b25      	ldr	r3, [pc, #148]	; (8023754 <HAL_DAC_MspInit+0xd0>)
 80236c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80236c2:	4a24      	ldr	r2, [pc, #144]	; (8023754 <HAL_DAC_MspInit+0xd0>)
 80236c4:	f043 0301 	orr.w	r3, r3, #1
 80236c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80236ca:	4b22      	ldr	r3, [pc, #136]	; (8023754 <HAL_DAC_MspInit+0xd0>)
 80236cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80236ce:	f003 0301 	and.w	r3, r3, #1
 80236d2:	60fb      	str	r3, [r7, #12]
 80236d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80236d6:	2310      	movs	r3, #16
 80236d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80236da:	2303      	movs	r3, #3
 80236dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80236de:	2300      	movs	r3, #0
 80236e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80236e2:	f107 0314 	add.w	r3, r7, #20
 80236e6:	4619      	mov	r1, r3
 80236e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80236ec:	f001 fd9c 	bl	8025228 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80236f0:	4b19      	ldr	r3, [pc, #100]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 80236f2:	4a1a      	ldr	r2, [pc, #104]	; (802375c <HAL_DAC_MspInit+0xd8>)
 80236f4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80236f6:	4b18      	ldr	r3, [pc, #96]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 80236f8:	2206      	movs	r2, #6
 80236fa:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80236fc:	4b16      	ldr	r3, [pc, #88]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 80236fe:	2210      	movs	r2, #16
 8023700:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8023702:	4b15      	ldr	r3, [pc, #84]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 8023704:	2200      	movs	r2, #0
 8023706:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8023708:	4b13      	ldr	r3, [pc, #76]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 802370a:	2280      	movs	r2, #128	; 0x80
 802370c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 802370e:	4b12      	ldr	r3, [pc, #72]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 8023710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023714:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8023716:	4b10      	ldr	r3, [pc, #64]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 8023718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802371c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 802371e:	4b0e      	ldr	r3, [pc, #56]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 8023720:	2200      	movs	r2, #0
 8023722:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8023724:	4b0c      	ldr	r3, [pc, #48]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 8023726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802372a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 802372c:	480a      	ldr	r0, [pc, #40]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 802372e:	f001 faad 	bl	8024c8c <HAL_DMA_Init>
 8023732:	4603      	mov	r3, r0
 8023734:	2b00      	cmp	r3, #0
 8023736:	d001      	beq.n	802373c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8023738:	f7fe fc1e 	bl	8021f78 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 802373c:	687b      	ldr	r3, [r7, #4]
 802373e:	4a06      	ldr	r2, [pc, #24]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 8023740:	609a      	str	r2, [r3, #8]
 8023742:	4a05      	ldr	r2, [pc, #20]	; (8023758 <HAL_DAC_MspInit+0xd4>)
 8023744:	687b      	ldr	r3, [r7, #4]
 8023746:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8023748:	bf00      	nop
 802374a:	3728      	adds	r7, #40	; 0x28
 802374c:	46bd      	mov	sp, r7
 802374e:	bd80      	pop	{r7, pc}
 8023750:	40007400 	.word	0x40007400
 8023754:	40021000 	.word	0x40021000
 8023758:	200004ec 	.word	0x200004ec
 802375c:	40020008 	.word	0x40020008

08023760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8023760:	b580      	push	{r7, lr}
 8023762:	b0b0      	sub	sp, #192	; 0xc0
 8023764:	af00      	add	r7, sp, #0
 8023766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023768:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802376c:	2200      	movs	r2, #0
 802376e:	601a      	str	r2, [r3, #0]
 8023770:	605a      	str	r2, [r3, #4]
 8023772:	609a      	str	r2, [r3, #8]
 8023774:	60da      	str	r2, [r3, #12]
 8023776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8023778:	f107 0318 	add.w	r3, r7, #24
 802377c:	2294      	movs	r2, #148	; 0x94
 802377e:	2100      	movs	r1, #0
 8023780:	4618      	mov	r0, r3
 8023782:	f007 f957 	bl	802aa34 <memset>
  if(hi2c->Instance==I2C1)
 8023786:	687b      	ldr	r3, [r7, #4]
 8023788:	681b      	ldr	r3, [r3, #0]
 802378a:	4a42      	ldr	r2, [pc, #264]	; (8023894 <HAL_I2C_MspInit+0x134>)
 802378c:	4293      	cmp	r3, r2
 802378e:	d13c      	bne.n	802380a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8023790:	2340      	movs	r3, #64	; 0x40
 8023792:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8023794:	2300      	movs	r3, #0
 8023796:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8023798:	f107 0318 	add.w	r3, r7, #24
 802379c:	4618      	mov	r0, r3
 802379e:	f004 fe21 	bl	80283e4 <HAL_RCCEx_PeriphCLKConfig>
 80237a2:	4603      	mov	r3, r0
 80237a4:	2b00      	cmp	r3, #0
 80237a6:	d001      	beq.n	80237ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80237a8:	f7fe fbe6 	bl	8021f78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80237ac:	4b3a      	ldr	r3, [pc, #232]	; (8023898 <HAL_I2C_MspInit+0x138>)
 80237ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80237b0:	4a39      	ldr	r2, [pc, #228]	; (8023898 <HAL_I2C_MspInit+0x138>)
 80237b2:	f043 0302 	orr.w	r3, r3, #2
 80237b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80237b8:	4b37      	ldr	r3, [pc, #220]	; (8023898 <HAL_I2C_MspInit+0x138>)
 80237ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80237bc:	f003 0302 	and.w	r3, r3, #2
 80237c0:	617b      	str	r3, [r7, #20]
 80237c2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80237c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80237c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80237cc:	2312      	movs	r3, #18
 80237ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80237d2:	2300      	movs	r3, #0
 80237d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80237d8:	2303      	movs	r3, #3
 80237da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80237de:	2304      	movs	r3, #4
 80237e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80237e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80237e8:	4619      	mov	r1, r3
 80237ea:	482c      	ldr	r0, [pc, #176]	; (802389c <HAL_I2C_MspInit+0x13c>)
 80237ec:	f001 fd1c 	bl	8025228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80237f0:	4b29      	ldr	r3, [pc, #164]	; (8023898 <HAL_I2C_MspInit+0x138>)
 80237f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80237f4:	4a28      	ldr	r2, [pc, #160]	; (8023898 <HAL_I2C_MspInit+0x138>)
 80237f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80237fa:	6593      	str	r3, [r2, #88]	; 0x58
 80237fc:	4b26      	ldr	r3, [pc, #152]	; (8023898 <HAL_I2C_MspInit+0x138>)
 80237fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8023804:	613b      	str	r3, [r7, #16]
 8023806:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8023808:	e040      	b.n	802388c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 802380a:	687b      	ldr	r3, [r7, #4]
 802380c:	681b      	ldr	r3, [r3, #0]
 802380e:	4a24      	ldr	r2, [pc, #144]	; (80238a0 <HAL_I2C_MspInit+0x140>)
 8023810:	4293      	cmp	r3, r2
 8023812:	d13b      	bne.n	802388c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8023814:	2380      	movs	r3, #128	; 0x80
 8023816:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8023818:	2300      	movs	r3, #0
 802381a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 802381c:	f107 0318 	add.w	r3, r7, #24
 8023820:	4618      	mov	r0, r3
 8023822:	f004 fddf 	bl	80283e4 <HAL_RCCEx_PeriphCLKConfig>
 8023826:	4603      	mov	r3, r0
 8023828:	2b00      	cmp	r3, #0
 802382a:	d001      	beq.n	8023830 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 802382c:	f7fe fba4 	bl	8021f78 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023830:	4b19      	ldr	r3, [pc, #100]	; (8023898 <HAL_I2C_MspInit+0x138>)
 8023832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023834:	4a18      	ldr	r2, [pc, #96]	; (8023898 <HAL_I2C_MspInit+0x138>)
 8023836:	f043 0302 	orr.w	r3, r3, #2
 802383a:	64d3      	str	r3, [r2, #76]	; 0x4c
 802383c:	4b16      	ldr	r3, [pc, #88]	; (8023898 <HAL_I2C_MspInit+0x138>)
 802383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023840:	f003 0302 	and.w	r3, r3, #2
 8023844:	60fb      	str	r3, [r7, #12]
 8023846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8023848:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802384c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8023850:	2312      	movs	r3, #18
 8023852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023856:	2300      	movs	r3, #0
 8023858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802385c:	2303      	movs	r3, #3
 802385e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8023862:	2304      	movs	r3, #4
 8023864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023868:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802386c:	4619      	mov	r1, r3
 802386e:	480b      	ldr	r0, [pc, #44]	; (802389c <HAL_I2C_MspInit+0x13c>)
 8023870:	f001 fcda 	bl	8025228 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8023874:	4b08      	ldr	r3, [pc, #32]	; (8023898 <HAL_I2C_MspInit+0x138>)
 8023876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023878:	4a07      	ldr	r2, [pc, #28]	; (8023898 <HAL_I2C_MspInit+0x138>)
 802387a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802387e:	6593      	str	r3, [r2, #88]	; 0x58
 8023880:	4b05      	ldr	r3, [pc, #20]	; (8023898 <HAL_I2C_MspInit+0x138>)
 8023882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023888:	60bb      	str	r3, [r7, #8]
 802388a:	68bb      	ldr	r3, [r7, #8]
}
 802388c:	bf00      	nop
 802388e:	37c0      	adds	r7, #192	; 0xc0
 8023890:	46bd      	mov	sp, r7
 8023892:	bd80      	pop	{r7, pc}
 8023894:	40005400 	.word	0x40005400
 8023898:	40021000 	.word	0x40021000
 802389c:	48000400 	.word	0x48000400
 80238a0:	40005800 	.word	0x40005800

080238a4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80238a4:	b580      	push	{r7, lr}
 80238a6:	b082      	sub	sp, #8
 80238a8:	af00      	add	r7, sp, #0
 80238aa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80238ac:	687b      	ldr	r3, [r7, #4]
 80238ae:	681b      	ldr	r3, [r3, #0]
 80238b0:	4a16      	ldr	r2, [pc, #88]	; (802390c <HAL_I2C_MspDeInit+0x68>)
 80238b2:	4293      	cmp	r3, r2
 80238b4:	d110      	bne.n	80238d8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80238b6:	4b16      	ldr	r3, [pc, #88]	; (8023910 <HAL_I2C_MspDeInit+0x6c>)
 80238b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80238ba:	4a15      	ldr	r2, [pc, #84]	; (8023910 <HAL_I2C_MspDeInit+0x6c>)
 80238bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80238c0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80238c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80238c6:	4813      	ldr	r0, [pc, #76]	; (8023914 <HAL_I2C_MspDeInit+0x70>)
 80238c8:	f001 fe40 	bl	802554c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 80238cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80238d0:	4810      	ldr	r0, [pc, #64]	; (8023914 <HAL_I2C_MspDeInit+0x70>)
 80238d2:	f001 fe3b 	bl	802554c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80238d6:	e014      	b.n	8023902 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 80238d8:	687b      	ldr	r3, [r7, #4]
 80238da:	681b      	ldr	r3, [r3, #0]
 80238dc:	4a0e      	ldr	r2, [pc, #56]	; (8023918 <HAL_I2C_MspDeInit+0x74>)
 80238de:	4293      	cmp	r3, r2
 80238e0:	d10f      	bne.n	8023902 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80238e2:	4b0b      	ldr	r3, [pc, #44]	; (8023910 <HAL_I2C_MspDeInit+0x6c>)
 80238e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80238e6:	4a0a      	ldr	r2, [pc, #40]	; (8023910 <HAL_I2C_MspDeInit+0x6c>)
 80238e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80238ec:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80238ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80238f2:	4808      	ldr	r0, [pc, #32]	; (8023914 <HAL_I2C_MspDeInit+0x70>)
 80238f4:	f001 fe2a 	bl	802554c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80238f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80238fc:	4805      	ldr	r0, [pc, #20]	; (8023914 <HAL_I2C_MspDeInit+0x70>)
 80238fe:	f001 fe25 	bl	802554c <HAL_GPIO_DeInit>
}
 8023902:	bf00      	nop
 8023904:	3708      	adds	r7, #8
 8023906:	46bd      	mov	sp, r7
 8023908:	bd80      	pop	{r7, pc}
 802390a:	bf00      	nop
 802390c:	40005400 	.word	0x40005400
 8023910:	40021000 	.word	0x40021000
 8023914:	48000400 	.word	0x48000400
 8023918:	40005800 	.word	0x40005800

0802391c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 802391c:	b580      	push	{r7, lr}
 802391e:	b0b0      	sub	sp, #192	; 0xc0
 8023920:	af00      	add	r7, sp, #0
 8023922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023924:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8023928:	2200      	movs	r2, #0
 802392a:	601a      	str	r2, [r3, #0]
 802392c:	605a      	str	r2, [r3, #4]
 802392e:	609a      	str	r2, [r3, #8]
 8023930:	60da      	str	r2, [r3, #12]
 8023932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8023934:	f107 0318 	add.w	r3, r7, #24
 8023938:	2294      	movs	r2, #148	; 0x94
 802393a:	2100      	movs	r1, #0
 802393c:	4618      	mov	r0, r3
 802393e:	f007 f879 	bl	802aa34 <memset>
  if(hospi->Instance==OCTOSPI1)
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	681b      	ldr	r3, [r3, #0]
 8023946:	4a28      	ldr	r2, [pc, #160]	; (80239e8 <HAL_OSPI_MspInit+0xcc>)
 8023948:	4293      	cmp	r3, r2
 802394a:	d149      	bne.n	80239e0 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 802394c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023950:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8023952:	2300      	movs	r3, #0
 8023954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8023958:	f107 0318 	add.w	r3, r7, #24
 802395c:	4618      	mov	r0, r3
 802395e:	f004 fd41 	bl	80283e4 <HAL_RCCEx_PeriphCLKConfig>
 8023962:	4603      	mov	r3, r0
 8023964:	2b00      	cmp	r3, #0
 8023966:	d001      	beq.n	802396c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8023968:	f7fe fb06 	bl	8021f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 802396c:	4b1f      	ldr	r3, [pc, #124]	; (80239ec <HAL_OSPI_MspInit+0xd0>)
 802396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023970:	4a1e      	ldr	r2, [pc, #120]	; (80239ec <HAL_OSPI_MspInit+0xd0>)
 8023972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8023978:	4b1c      	ldr	r3, [pc, #112]	; (80239ec <HAL_OSPI_MspInit+0xd0>)
 802397a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802397c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023980:	617b      	str	r3, [r7, #20]
 8023982:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8023984:	4b19      	ldr	r3, [pc, #100]	; (80239ec <HAL_OSPI_MspInit+0xd0>)
 8023986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023988:	4a18      	ldr	r2, [pc, #96]	; (80239ec <HAL_OSPI_MspInit+0xd0>)
 802398a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802398e:	6513      	str	r3, [r2, #80]	; 0x50
 8023990:	4b16      	ldr	r3, [pc, #88]	; (80239ec <HAL_OSPI_MspInit+0xd0>)
 8023992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023998:	613b      	str	r3, [r7, #16]
 802399a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 802399c:	4b13      	ldr	r3, [pc, #76]	; (80239ec <HAL_OSPI_MspInit+0xd0>)
 802399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80239a0:	4a12      	ldr	r2, [pc, #72]	; (80239ec <HAL_OSPI_MspInit+0xd0>)
 80239a2:	f043 0310 	orr.w	r3, r3, #16
 80239a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80239a8:	4b10      	ldr	r3, [pc, #64]	; (80239ec <HAL_OSPI_MspInit+0xd0>)
 80239aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80239ac:	f003 0310 	and.w	r3, r3, #16
 80239b0:	60fb      	str	r3, [r7, #12]
 80239b2:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80239b4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80239b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80239bc:	2302      	movs	r3, #2
 80239be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80239c2:	2300      	movs	r3, #0
 80239c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80239c8:	2303      	movs	r3, #3
 80239ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80239ce:	230a      	movs	r3, #10
 80239d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80239d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80239d8:	4619      	mov	r1, r3
 80239da:	4805      	ldr	r0, [pc, #20]	; (80239f0 <HAL_OSPI_MspInit+0xd4>)
 80239dc:	f001 fc24 	bl	8025228 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80239e0:	bf00      	nop
 80239e2:	37c0      	adds	r7, #192	; 0xc0
 80239e4:	46bd      	mov	sp, r7
 80239e6:	bd80      	pop	{r7, pc}
 80239e8:	a0001000 	.word	0xa0001000
 80239ec:	40021000 	.word	0x40021000
 80239f0:	48001000 	.word	0x48001000

080239f4 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80239f4:	b580      	push	{r7, lr}
 80239f6:	b082      	sub	sp, #8
 80239f8:	af00      	add	r7, sp, #0
 80239fa:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80239fc:	687b      	ldr	r3, [r7, #4]
 80239fe:	681b      	ldr	r3, [r3, #0]
 8023a00:	4a0b      	ldr	r2, [pc, #44]	; (8023a30 <HAL_OSPI_MspDeInit+0x3c>)
 8023a02:	4293      	cmp	r3, r2
 8023a04:	d110      	bne.n	8023a28 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8023a06:	4b0b      	ldr	r3, [pc, #44]	; (8023a34 <HAL_OSPI_MspDeInit+0x40>)
 8023a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023a0a:	4a0a      	ldr	r2, [pc, #40]	; (8023a34 <HAL_OSPI_MspDeInit+0x40>)
 8023a0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8023a10:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8023a12:	4b08      	ldr	r3, [pc, #32]	; (8023a34 <HAL_OSPI_MspDeInit+0x40>)
 8023a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023a16:	4a07      	ldr	r2, [pc, #28]	; (8023a34 <HAL_OSPI_MspDeInit+0x40>)
 8023a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023a1c:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8023a1e:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8023a22:	4805      	ldr	r0, [pc, #20]	; (8023a38 <HAL_OSPI_MspDeInit+0x44>)
 8023a24:	f001 fd92 	bl	802554c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8023a28:	bf00      	nop
 8023a2a:	3708      	adds	r7, #8
 8023a2c:	46bd      	mov	sp, r7
 8023a2e:	bd80      	pop	{r7, pc}
 8023a30:	a0001000 	.word	0xa0001000
 8023a34:	40021000 	.word	0x40021000
 8023a38:	48001000 	.word	0x48001000

08023a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8023a3c:	b580      	push	{r7, lr}
 8023a3e:	b084      	sub	sp, #16
 8023a40:	af00      	add	r7, sp, #0
 8023a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	681b      	ldr	r3, [r3, #0]
 8023a48:	4a1e      	ldr	r2, [pc, #120]	; (8023ac4 <HAL_TIM_Base_MspInit+0x88>)
 8023a4a:	4293      	cmp	r3, r2
 8023a4c:	d11c      	bne.n	8023a88 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8023a4e:	4b1e      	ldr	r3, [pc, #120]	; (8023ac8 <HAL_TIM_Base_MspInit+0x8c>)
 8023a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023a52:	4a1d      	ldr	r2, [pc, #116]	; (8023ac8 <HAL_TIM_Base_MspInit+0x8c>)
 8023a54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8023a58:	6613      	str	r3, [r2, #96]	; 0x60
 8023a5a:	4b1b      	ldr	r3, [pc, #108]	; (8023ac8 <HAL_TIM_Base_MspInit+0x8c>)
 8023a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8023a62:	60fb      	str	r3, [r7, #12]
 8023a64:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8023a66:	2200      	movs	r2, #0
 8023a68:	2100      	movs	r1, #0
 8023a6a:	2019      	movs	r0, #25
 8023a6c:	f000 fd69 	bl	8024542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8023a70:	2019      	movs	r0, #25
 8023a72:	f000 fd82 	bl	802457a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8023a76:	2200      	movs	r2, #0
 8023a78:	2100      	movs	r1, #0
 8023a7a:	201a      	movs	r0, #26
 8023a7c:	f000 fd61 	bl	8024542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8023a80:	201a      	movs	r0, #26
 8023a82:	f000 fd7a 	bl	802457a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8023a86:	e018      	b.n	8023aba <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023a90:	d113      	bne.n	8023aba <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8023a92:	4b0d      	ldr	r3, [pc, #52]	; (8023ac8 <HAL_TIM_Base_MspInit+0x8c>)
 8023a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023a96:	4a0c      	ldr	r2, [pc, #48]	; (8023ac8 <HAL_TIM_Base_MspInit+0x8c>)
 8023a98:	f043 0301 	orr.w	r3, r3, #1
 8023a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8023a9e:	4b0a      	ldr	r3, [pc, #40]	; (8023ac8 <HAL_TIM_Base_MspInit+0x8c>)
 8023aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023aa2:	f003 0301 	and.w	r3, r3, #1
 8023aa6:	60bb      	str	r3, [r7, #8]
 8023aa8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8023aaa:	2200      	movs	r2, #0
 8023aac:	2100      	movs	r1, #0
 8023aae:	201c      	movs	r0, #28
 8023ab0:	f000 fd47 	bl	8024542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8023ab4:	201c      	movs	r0, #28
 8023ab6:	f000 fd60 	bl	802457a <HAL_NVIC_EnableIRQ>
}
 8023aba:	bf00      	nop
 8023abc:	3710      	adds	r7, #16
 8023abe:	46bd      	mov	sp, r7
 8023ac0:	bd80      	pop	{r7, pc}
 8023ac2:	bf00      	nop
 8023ac4:	40012c00 	.word	0x40012c00
 8023ac8:	40021000 	.word	0x40021000

08023acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8023acc:	b580      	push	{r7, lr}
 8023ace:	b0ae      	sub	sp, #184	; 0xb8
 8023ad0:	af00      	add	r7, sp, #0
 8023ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023ad4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8023ad8:	2200      	movs	r2, #0
 8023ada:	601a      	str	r2, [r3, #0]
 8023adc:	605a      	str	r2, [r3, #4]
 8023ade:	609a      	str	r2, [r3, #8]
 8023ae0:	60da      	str	r2, [r3, #12]
 8023ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8023ae4:	f107 0310 	add.w	r3, r7, #16
 8023ae8:	2294      	movs	r2, #148	; 0x94
 8023aea:	2100      	movs	r1, #0
 8023aec:	4618      	mov	r0, r3
 8023aee:	f006 ffa1 	bl	802aa34 <memset>
  if(huart->Instance==USART1)
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	4a21      	ldr	r2, [pc, #132]	; (8023b7c <HAL_UART_MspInit+0xb0>)
 8023af8:	4293      	cmp	r3, r2
 8023afa:	d13a      	bne.n	8023b72 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8023afc:	2301      	movs	r3, #1
 8023afe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8023b00:	2300      	movs	r3, #0
 8023b02:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8023b04:	f107 0310 	add.w	r3, r7, #16
 8023b08:	4618      	mov	r0, r3
 8023b0a:	f004 fc6b 	bl	80283e4 <HAL_RCCEx_PeriphCLKConfig>
 8023b0e:	4603      	mov	r3, r0
 8023b10:	2b00      	cmp	r3, #0
 8023b12:	d001      	beq.n	8023b18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8023b14:	f7fe fa30 	bl	8021f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8023b18:	4b19      	ldr	r3, [pc, #100]	; (8023b80 <HAL_UART_MspInit+0xb4>)
 8023b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023b1c:	4a18      	ldr	r2, [pc, #96]	; (8023b80 <HAL_UART_MspInit+0xb4>)
 8023b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023b22:	6613      	str	r3, [r2, #96]	; 0x60
 8023b24:	4b16      	ldr	r3, [pc, #88]	; (8023b80 <HAL_UART_MspInit+0xb4>)
 8023b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023b2c:	60fb      	str	r3, [r7, #12]
 8023b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023b30:	4b13      	ldr	r3, [pc, #76]	; (8023b80 <HAL_UART_MspInit+0xb4>)
 8023b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023b34:	4a12      	ldr	r2, [pc, #72]	; (8023b80 <HAL_UART_MspInit+0xb4>)
 8023b36:	f043 0302 	orr.w	r3, r3, #2
 8023b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8023b3c:	4b10      	ldr	r3, [pc, #64]	; (8023b80 <HAL_UART_MspInit+0xb4>)
 8023b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023b40:	f003 0302 	and.w	r3, r3, #2
 8023b44:	60bb      	str	r3, [r7, #8]
 8023b46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8023b48:	23c0      	movs	r3, #192	; 0xc0
 8023b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023b4e:	2302      	movs	r3, #2
 8023b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023b54:	2300      	movs	r3, #0
 8023b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023b5a:	2303      	movs	r3, #3
 8023b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8023b60:	2307      	movs	r3, #7
 8023b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023b66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8023b6a:	4619      	mov	r1, r3
 8023b6c:	4805      	ldr	r0, [pc, #20]	; (8023b84 <HAL_UART_MspInit+0xb8>)
 8023b6e:	f001 fb5b 	bl	8025228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8023b72:	bf00      	nop
 8023b74:	37b8      	adds	r7, #184	; 0xb8
 8023b76:	46bd      	mov	sp, r7
 8023b78:	bd80      	pop	{r7, pc}
 8023b7a:	bf00      	nop
 8023b7c:	40013800 	.word	0x40013800
 8023b80:	40021000 	.word	0x40021000
 8023b84:	48000400 	.word	0x48000400

08023b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8023b88:	b480      	push	{r7}
 8023b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8023b8c:	e7fe      	b.n	8023b8c <NMI_Handler+0x4>

08023b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8023b8e:	b480      	push	{r7}
 8023b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8023b92:	e7fe      	b.n	8023b92 <HardFault_Handler+0x4>

08023b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8023b94:	b480      	push	{r7}
 8023b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8023b98:	e7fe      	b.n	8023b98 <MemManage_Handler+0x4>

08023b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8023b9a:	b480      	push	{r7}
 8023b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8023b9e:	e7fe      	b.n	8023b9e <BusFault_Handler+0x4>

08023ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8023ba0:	b480      	push	{r7}
 8023ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8023ba4:	e7fe      	b.n	8023ba4 <UsageFault_Handler+0x4>

08023ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8023ba6:	b480      	push	{r7}
 8023ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8023baa:	bf00      	nop
 8023bac:	46bd      	mov	sp, r7
 8023bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bb2:	4770      	bx	lr

08023bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8023bb4:	b480      	push	{r7}
 8023bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8023bb8:	bf00      	nop
 8023bba:	46bd      	mov	sp, r7
 8023bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bc0:	4770      	bx	lr

08023bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8023bc2:	b480      	push	{r7}
 8023bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8023bc6:	bf00      	nop
 8023bc8:	46bd      	mov	sp, r7
 8023bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bce:	4770      	bx	lr

08023bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8023bd0:	b580      	push	{r7, lr}
 8023bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8023bd4:	f000 fb96 	bl	8024304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8023bd8:	bf00      	nop
 8023bda:	bd80      	pop	{r7, pc}

08023bdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8023bdc:	b580      	push	{r7, lr}
 8023bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8023be0:	4802      	ldr	r0, [pc, #8]	; (8023bec <DMA1_Channel1_IRQHandler+0x10>)
 8023be2:	f001 f9d2 	bl	8024f8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8023be6:	bf00      	nop
 8023be8:	bd80      	pop	{r7, pc}
 8023bea:	bf00      	nop
 8023bec:	200004ec 	.word	0x200004ec

08023bf0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8023bf0:	b580      	push	{r7, lr}
 8023bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8023bf4:	4802      	ldr	r0, [pc, #8]	; (8023c00 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8023bf6:	f005 f9d5 	bl	8028fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8023bfa:	bf00      	nop
 8023bfc:	bd80      	pop	{r7, pc}
 8023bfe:	bf00      	nop
 8023c00:	20000644 	.word	0x20000644

08023c04 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8023c04:	b580      	push	{r7, lr}
 8023c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8023c08:	4802      	ldr	r0, [pc, #8]	; (8023c14 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8023c0a:	f005 f9cb 	bl	8028fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8023c0e:	bf00      	nop
 8023c10:	bd80      	pop	{r7, pc}
 8023c12:	bf00      	nop
 8023c14:	20000644 	.word	0x20000644

08023c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8023c18:	b580      	push	{r7, lr}
 8023c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8023c1c:	4802      	ldr	r0, [pc, #8]	; (8023c28 <TIM2_IRQHandler+0x10>)
 8023c1e:	f005 f9c1 	bl	8028fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8023c22:	bf00      	nop
 8023c24:	bd80      	pop	{r7, pc}
 8023c26:	bf00      	nop
 8023c28:	20000690 	.word	0x20000690

08023c2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8023c2c:	b580      	push	{r7, lr}
 8023c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8023c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8023c34:	f001 fd7c 	bl	8025730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8023c38:	bf00      	nop
 8023c3a:	bd80      	pop	{r7, pc}

08023c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8023c3c:	b480      	push	{r7}
 8023c3e:	af00      	add	r7, sp, #0
	return 1;
 8023c40:	2301      	movs	r3, #1
}
 8023c42:	4618      	mov	r0, r3
 8023c44:	46bd      	mov	sp, r7
 8023c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c4a:	4770      	bx	lr

08023c4c <_kill>:

int _kill(int pid, int sig)
{
 8023c4c:	b580      	push	{r7, lr}
 8023c4e:	b082      	sub	sp, #8
 8023c50:	af00      	add	r7, sp, #0
 8023c52:	6078      	str	r0, [r7, #4]
 8023c54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8023c56:	f006 fe9b 	bl	802a990 <__errno>
 8023c5a:	4603      	mov	r3, r0
 8023c5c:	2216      	movs	r2, #22
 8023c5e:	601a      	str	r2, [r3, #0]
	return -1;
 8023c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023c64:	4618      	mov	r0, r3
 8023c66:	3708      	adds	r7, #8
 8023c68:	46bd      	mov	sp, r7
 8023c6a:	bd80      	pop	{r7, pc}

08023c6c <_exit>:

void _exit (int status)
{
 8023c6c:	b580      	push	{r7, lr}
 8023c6e:	b082      	sub	sp, #8
 8023c70:	af00      	add	r7, sp, #0
 8023c72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8023c74:	f04f 31ff 	mov.w	r1, #4294967295
 8023c78:	6878      	ldr	r0, [r7, #4]
 8023c7a:	f7ff ffe7 	bl	8023c4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8023c7e:	e7fe      	b.n	8023c7e <_exit+0x12>

08023c80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8023c80:	b580      	push	{r7, lr}
 8023c82:	b086      	sub	sp, #24
 8023c84:	af00      	add	r7, sp, #0
 8023c86:	60f8      	str	r0, [r7, #12]
 8023c88:	60b9      	str	r1, [r7, #8]
 8023c8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023c8c:	2300      	movs	r3, #0
 8023c8e:	617b      	str	r3, [r7, #20]
 8023c90:	e00a      	b.n	8023ca8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8023c92:	f3af 8000 	nop.w
 8023c96:	4601      	mov	r1, r0
 8023c98:	68bb      	ldr	r3, [r7, #8]
 8023c9a:	1c5a      	adds	r2, r3, #1
 8023c9c:	60ba      	str	r2, [r7, #8]
 8023c9e:	b2ca      	uxtb	r2, r1
 8023ca0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023ca2:	697b      	ldr	r3, [r7, #20]
 8023ca4:	3301      	adds	r3, #1
 8023ca6:	617b      	str	r3, [r7, #20]
 8023ca8:	697a      	ldr	r2, [r7, #20]
 8023caa:	687b      	ldr	r3, [r7, #4]
 8023cac:	429a      	cmp	r2, r3
 8023cae:	dbf0      	blt.n	8023c92 <_read+0x12>
	}

return len;
 8023cb0:	687b      	ldr	r3, [r7, #4]
}
 8023cb2:	4618      	mov	r0, r3
 8023cb4:	3718      	adds	r7, #24
 8023cb6:	46bd      	mov	sp, r7
 8023cb8:	bd80      	pop	{r7, pc}

08023cba <_close>:
	}
	return len;
}

int _close(int file)
{
 8023cba:	b480      	push	{r7}
 8023cbc:	b083      	sub	sp, #12
 8023cbe:	af00      	add	r7, sp, #0
 8023cc0:	6078      	str	r0, [r7, #4]
	return -1;
 8023cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023cc6:	4618      	mov	r0, r3
 8023cc8:	370c      	adds	r7, #12
 8023cca:	46bd      	mov	sp, r7
 8023ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cd0:	4770      	bx	lr

08023cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8023cd2:	b480      	push	{r7}
 8023cd4:	b083      	sub	sp, #12
 8023cd6:	af00      	add	r7, sp, #0
 8023cd8:	6078      	str	r0, [r7, #4]
 8023cda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8023cdc:	683b      	ldr	r3, [r7, #0]
 8023cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8023ce2:	605a      	str	r2, [r3, #4]
	return 0;
 8023ce4:	2300      	movs	r3, #0
}
 8023ce6:	4618      	mov	r0, r3
 8023ce8:	370c      	adds	r7, #12
 8023cea:	46bd      	mov	sp, r7
 8023cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cf0:	4770      	bx	lr

08023cf2 <_isatty>:

int _isatty(int file)
{
 8023cf2:	b480      	push	{r7}
 8023cf4:	b083      	sub	sp, #12
 8023cf6:	af00      	add	r7, sp, #0
 8023cf8:	6078      	str	r0, [r7, #4]
	return 1;
 8023cfa:	2301      	movs	r3, #1
}
 8023cfc:	4618      	mov	r0, r3
 8023cfe:	370c      	adds	r7, #12
 8023d00:	46bd      	mov	sp, r7
 8023d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d06:	4770      	bx	lr

08023d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8023d08:	b480      	push	{r7}
 8023d0a:	b085      	sub	sp, #20
 8023d0c:	af00      	add	r7, sp, #0
 8023d0e:	60f8      	str	r0, [r7, #12]
 8023d10:	60b9      	str	r1, [r7, #8]
 8023d12:	607a      	str	r2, [r7, #4]
	return 0;
 8023d14:	2300      	movs	r3, #0
}
 8023d16:	4618      	mov	r0, r3
 8023d18:	3714      	adds	r7, #20
 8023d1a:	46bd      	mov	sp, r7
 8023d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d20:	4770      	bx	lr
	...

08023d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8023d24:	b580      	push	{r7, lr}
 8023d26:	b086      	sub	sp, #24
 8023d28:	af00      	add	r7, sp, #0
 8023d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8023d2c:	4a14      	ldr	r2, [pc, #80]	; (8023d80 <_sbrk+0x5c>)
 8023d2e:	4b15      	ldr	r3, [pc, #84]	; (8023d84 <_sbrk+0x60>)
 8023d30:	1ad3      	subs	r3, r2, r3
 8023d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8023d34:	697b      	ldr	r3, [r7, #20]
 8023d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8023d38:	4b13      	ldr	r3, [pc, #76]	; (8023d88 <_sbrk+0x64>)
 8023d3a:	681b      	ldr	r3, [r3, #0]
 8023d3c:	2b00      	cmp	r3, #0
 8023d3e:	d102      	bne.n	8023d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8023d40:	4b11      	ldr	r3, [pc, #68]	; (8023d88 <_sbrk+0x64>)
 8023d42:	4a12      	ldr	r2, [pc, #72]	; (8023d8c <_sbrk+0x68>)
 8023d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8023d46:	4b10      	ldr	r3, [pc, #64]	; (8023d88 <_sbrk+0x64>)
 8023d48:	681a      	ldr	r2, [r3, #0]
 8023d4a:	687b      	ldr	r3, [r7, #4]
 8023d4c:	4413      	add	r3, r2
 8023d4e:	693a      	ldr	r2, [r7, #16]
 8023d50:	429a      	cmp	r2, r3
 8023d52:	d207      	bcs.n	8023d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8023d54:	f006 fe1c 	bl	802a990 <__errno>
 8023d58:	4603      	mov	r3, r0
 8023d5a:	220c      	movs	r2, #12
 8023d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8023d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8023d62:	e009      	b.n	8023d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8023d64:	4b08      	ldr	r3, [pc, #32]	; (8023d88 <_sbrk+0x64>)
 8023d66:	681b      	ldr	r3, [r3, #0]
 8023d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8023d6a:	4b07      	ldr	r3, [pc, #28]	; (8023d88 <_sbrk+0x64>)
 8023d6c:	681a      	ldr	r2, [r3, #0]
 8023d6e:	687b      	ldr	r3, [r7, #4]
 8023d70:	4413      	add	r3, r2
 8023d72:	4a05      	ldr	r2, [pc, #20]	; (8023d88 <_sbrk+0x64>)
 8023d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8023d76:	68fb      	ldr	r3, [r7, #12]
}
 8023d78:	4618      	mov	r0, r3
 8023d7a:	3718      	adds	r7, #24
 8023d7c:	46bd      	mov	sp, r7
 8023d7e:	bd80      	pop	{r7, pc}
 8023d80:	200a0000 	.word	0x200a0000
 8023d84:	00000400 	.word	0x00000400
 8023d88:	20002904 	.word	0x20002904
 8023d8c:	20002d28 	.word	0x20002d28

08023d90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8023d90:	b480      	push	{r7}
 8023d92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8023d94:	4b06      	ldr	r3, [pc, #24]	; (8023db0 <SystemInit+0x20>)
 8023d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023d9a:	4a05      	ldr	r2, [pc, #20]	; (8023db0 <SystemInit+0x20>)
 8023d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8023da4:	bf00      	nop
 8023da6:	46bd      	mov	sp, r7
 8023da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dac:	4770      	bx	lr
 8023dae:	bf00      	nop
 8023db0:	e000ed00 	.word	0xe000ed00

08023db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8023db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8023dec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8023db8:	f7ff ffea 	bl	8023d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8023dbc:	480c      	ldr	r0, [pc, #48]	; (8023df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8023dbe:	490d      	ldr	r1, [pc, #52]	; (8023df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8023dc0:	4a0d      	ldr	r2, [pc, #52]	; (8023df8 <LoopForever+0xe>)
  movs r3, #0
 8023dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8023dc4:	e002      	b.n	8023dcc <LoopCopyDataInit>

08023dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8023dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8023dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8023dca:	3304      	adds	r3, #4

08023dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8023dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8023dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8023dd0:	d3f9      	bcc.n	8023dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8023dd2:	4a0a      	ldr	r2, [pc, #40]	; (8023dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8023dd4:	4c0a      	ldr	r4, [pc, #40]	; (8023e00 <LoopForever+0x16>)
  movs r3, #0
 8023dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8023dd8:	e001      	b.n	8023dde <LoopFillZerobss>

08023dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8023dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8023ddc:	3204      	adds	r2, #4

08023dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8023dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8023de0:	d3fb      	bcc.n	8023dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8023de2:	f006 fddb 	bl	802a99c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8023de6:	f7fd fc95 	bl	8021714 <main>

08023dea <LoopForever>:

LoopForever:
    b LoopForever
 8023dea:	e7fe      	b.n	8023dea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8023dec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8023df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8023df4:	2000047c 	.word	0x2000047c
  ldr r2, =_sidata
 8023df8:	0807a060 	.word	0x0807a060
  ldr r2, =_sbss
 8023dfc:	2000047c 	.word	0x2000047c
  ldr r4, =_ebss
 8023e00:	20002d24 	.word	0x20002d24

08023e04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8023e04:	e7fe      	b.n	8023e04 <ADC1_IRQHandler>

08023e06 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8023e06:	b580      	push	{r7, lr}
 8023e08:	b084      	sub	sp, #16
 8023e0a:	af00      	add	r7, sp, #0
 8023e0c:	4603      	mov	r3, r0
 8023e0e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8023e10:	2300      	movs	r3, #0
 8023e12:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8023e14:	2110      	movs	r1, #16
 8023e16:	20d4      	movs	r0, #212	; 0xd4
 8023e18:	f7fe fe52 	bl	8022ac0 <SENSOR_IO_Read>
 8023e1c:	4603      	mov	r3, r0
 8023e1e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8023e20:	88fb      	ldrh	r3, [r7, #6]
 8023e22:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8023e24:	7bbb      	ldrb	r3, [r7, #14]
 8023e26:	f003 0303 	and.w	r3, r3, #3
 8023e2a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8023e2c:	7bba      	ldrb	r2, [r7, #14]
 8023e2e:	7bfb      	ldrb	r3, [r7, #15]
 8023e30:	4313      	orrs	r3, r2
 8023e32:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8023e34:	7bbb      	ldrb	r3, [r7, #14]
 8023e36:	461a      	mov	r2, r3
 8023e38:	2110      	movs	r1, #16
 8023e3a:	20d4      	movs	r0, #212	; 0xd4
 8023e3c:	f7fe fe26 	bl	8022a8c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8023e40:	2112      	movs	r1, #18
 8023e42:	20d4      	movs	r0, #212	; 0xd4
 8023e44:	f7fe fe3c 	bl	8022ac0 <SENSOR_IO_Read>
 8023e48:	4603      	mov	r3, r0
 8023e4a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8023e4c:	88fb      	ldrh	r3, [r7, #6]
 8023e4e:	0a1b      	lsrs	r3, r3, #8
 8023e50:	b29b      	uxth	r3, r3
 8023e52:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8023e54:	7bbb      	ldrb	r3, [r7, #14]
 8023e56:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8023e5a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8023e5c:	7bba      	ldrb	r2, [r7, #14]
 8023e5e:	7bfb      	ldrb	r3, [r7, #15]
 8023e60:	4313      	orrs	r3, r2
 8023e62:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8023e64:	7bbb      	ldrb	r3, [r7, #14]
 8023e66:	461a      	mov	r2, r3
 8023e68:	2112      	movs	r1, #18
 8023e6a:	20d4      	movs	r0, #212	; 0xd4
 8023e6c:	f7fe fe0e 	bl	8022a8c <SENSOR_IO_Write>
}
 8023e70:	bf00      	nop
 8023e72:	3710      	adds	r7, #16
 8023e74:	46bd      	mov	sp, r7
 8023e76:	bd80      	pop	{r7, pc}

08023e78 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8023e78:	b580      	push	{r7, lr}
 8023e7a:	b082      	sub	sp, #8
 8023e7c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8023e7e:	2300      	movs	r3, #0
 8023e80:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8023e82:	2110      	movs	r1, #16
 8023e84:	20d4      	movs	r0, #212	; 0xd4
 8023e86:	f7fe fe1b 	bl	8022ac0 <SENSOR_IO_Read>
 8023e8a:	4603      	mov	r3, r0
 8023e8c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8023e8e:	79fb      	ldrb	r3, [r7, #7]
 8023e90:	f003 030f 	and.w	r3, r3, #15
 8023e94:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8023e96:	79fb      	ldrb	r3, [r7, #7]
 8023e98:	461a      	mov	r2, r3
 8023e9a:	2110      	movs	r1, #16
 8023e9c:	20d4      	movs	r0, #212	; 0xd4
 8023e9e:	f7fe fdf5 	bl	8022a8c <SENSOR_IO_Write>
}
 8023ea2:	bf00      	nop
 8023ea4:	3708      	adds	r7, #8
 8023ea6:	46bd      	mov	sp, r7
 8023ea8:	bd80      	pop	{r7, pc}

08023eaa <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8023eaa:	b580      	push	{r7, lr}
 8023eac:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8023eae:	f7fe fde3 	bl	8022a78 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8023eb2:	210f      	movs	r1, #15
 8023eb4:	20d4      	movs	r0, #212	; 0xd4
 8023eb6:	f7fe fe03 	bl	8022ac0 <SENSOR_IO_Read>
 8023eba:	4603      	mov	r3, r0
}
 8023ebc:	4618      	mov	r0, r3
 8023ebe:	bd80      	pop	{r7, pc}

08023ec0 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8023ec0:	b580      	push	{r7, lr}
 8023ec2:	b084      	sub	sp, #16
 8023ec4:	af00      	add	r7, sp, #0
 8023ec6:	4603      	mov	r3, r0
 8023ec8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8023eca:	2300      	movs	r3, #0
 8023ecc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8023ece:	2115      	movs	r1, #21
 8023ed0:	20d4      	movs	r0, #212	; 0xd4
 8023ed2:	f7fe fdf5 	bl	8022ac0 <SENSOR_IO_Read>
 8023ed6:	4603      	mov	r3, r0
 8023ed8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8023eda:	7bfb      	ldrb	r3, [r7, #15]
 8023edc:	f023 0310 	bic.w	r3, r3, #16
 8023ee0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8023ee2:	88fb      	ldrh	r3, [r7, #6]
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	d003      	beq.n	8023ef0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8023ee8:	7bfb      	ldrb	r3, [r7, #15]
 8023eea:	f043 0310 	orr.w	r3, r3, #16
 8023eee:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8023ef0:	7bfb      	ldrb	r3, [r7, #15]
 8023ef2:	461a      	mov	r2, r3
 8023ef4:	2115      	movs	r1, #21
 8023ef6:	20d4      	movs	r0, #212	; 0xd4
 8023ef8:	f7fe fdc8 	bl	8022a8c <SENSOR_IO_Write>
}
 8023efc:	bf00      	nop
 8023efe:	3710      	adds	r7, #16
 8023f00:	46bd      	mov	sp, r7
 8023f02:	bd80      	pop	{r7, pc}

08023f04 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8023f04:	b580      	push	{r7, lr}
 8023f06:	b088      	sub	sp, #32
 8023f08:	af00      	add	r7, sp, #0
 8023f0a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8023f0c:	2300      	movs	r3, #0
 8023f0e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8023f10:	2300      	movs	r3, #0
 8023f12:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8023f14:	f04f 0300 	mov.w	r3, #0
 8023f18:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8023f1a:	2110      	movs	r1, #16
 8023f1c:	20d4      	movs	r0, #212	; 0xd4
 8023f1e:	f7fe fdcf 	bl	8022ac0 <SENSOR_IO_Read>
 8023f22:	4603      	mov	r3, r0
 8023f24:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8023f26:	f107 0208 	add.w	r2, r7, #8
 8023f2a:	2306      	movs	r3, #6
 8023f2c:	2128      	movs	r1, #40	; 0x28
 8023f2e:	20d4      	movs	r0, #212	; 0xd4
 8023f30:	f7fe fde4 	bl	8022afc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8023f34:	2300      	movs	r3, #0
 8023f36:	77fb      	strb	r3, [r7, #31]
 8023f38:	e01c      	b.n	8023f74 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8023f3a:	7ffb      	ldrb	r3, [r7, #31]
 8023f3c:	005b      	lsls	r3, r3, #1
 8023f3e:	3301      	adds	r3, #1
 8023f40:	3320      	adds	r3, #32
 8023f42:	443b      	add	r3, r7
 8023f44:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8023f48:	b29b      	uxth	r3, r3
 8023f4a:	021b      	lsls	r3, r3, #8
 8023f4c:	b29a      	uxth	r2, r3
 8023f4e:	7ffb      	ldrb	r3, [r7, #31]
 8023f50:	005b      	lsls	r3, r3, #1
 8023f52:	3320      	adds	r3, #32
 8023f54:	443b      	add	r3, r7
 8023f56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8023f5a:	b29b      	uxth	r3, r3
 8023f5c:	4413      	add	r3, r2
 8023f5e:	b29a      	uxth	r2, r3
 8023f60:	7ffb      	ldrb	r3, [r7, #31]
 8023f62:	b212      	sxth	r2, r2
 8023f64:	005b      	lsls	r3, r3, #1
 8023f66:	3320      	adds	r3, #32
 8023f68:	443b      	add	r3, r7
 8023f6a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8023f6e:	7ffb      	ldrb	r3, [r7, #31]
 8023f70:	3301      	adds	r3, #1
 8023f72:	77fb      	strb	r3, [r7, #31]
 8023f74:	7ffb      	ldrb	r3, [r7, #31]
 8023f76:	2b02      	cmp	r3, #2
 8023f78:	d9df      	bls.n	8023f3a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8023f7a:	7dfb      	ldrb	r3, [r7, #23]
 8023f7c:	f003 030c 	and.w	r3, r3, #12
 8023f80:	2b0c      	cmp	r3, #12
 8023f82:	d829      	bhi.n	8023fd8 <LSM6DSL_AccReadXYZ+0xd4>
 8023f84:	a201      	add	r2, pc, #4	; (adr r2, 8023f8c <LSM6DSL_AccReadXYZ+0x88>)
 8023f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023f8a:	bf00      	nop
 8023f8c:	08023fc1 	.word	0x08023fc1
 8023f90:	08023fd9 	.word	0x08023fd9
 8023f94:	08023fd9 	.word	0x08023fd9
 8023f98:	08023fd9 	.word	0x08023fd9
 8023f9c:	08023fd3 	.word	0x08023fd3
 8023fa0:	08023fd9 	.word	0x08023fd9
 8023fa4:	08023fd9 	.word	0x08023fd9
 8023fa8:	08023fd9 	.word	0x08023fd9
 8023fac:	08023fc7 	.word	0x08023fc7
 8023fb0:	08023fd9 	.word	0x08023fd9
 8023fb4:	08023fd9 	.word	0x08023fd9
 8023fb8:	08023fd9 	.word	0x08023fd9
 8023fbc:	08023fcd 	.word	0x08023fcd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8023fc0:	4b18      	ldr	r3, [pc, #96]	; (8024024 <LSM6DSL_AccReadXYZ+0x120>)
 8023fc2:	61bb      	str	r3, [r7, #24]
    break;
 8023fc4:	e008      	b.n	8023fd8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8023fc6:	4b18      	ldr	r3, [pc, #96]	; (8024028 <LSM6DSL_AccReadXYZ+0x124>)
 8023fc8:	61bb      	str	r3, [r7, #24]
    break;
 8023fca:	e005      	b.n	8023fd8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8023fcc:	4b17      	ldr	r3, [pc, #92]	; (802402c <LSM6DSL_AccReadXYZ+0x128>)
 8023fce:	61bb      	str	r3, [r7, #24]
    break;
 8023fd0:	e002      	b.n	8023fd8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8023fd2:	4b17      	ldr	r3, [pc, #92]	; (8024030 <LSM6DSL_AccReadXYZ+0x12c>)
 8023fd4:	61bb      	str	r3, [r7, #24]
    break;    
 8023fd6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8023fd8:	2300      	movs	r3, #0
 8023fda:	77fb      	strb	r3, [r7, #31]
 8023fdc:	e01a      	b.n	8024014 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8023fde:	7ffb      	ldrb	r3, [r7, #31]
 8023fe0:	005b      	lsls	r3, r3, #1
 8023fe2:	3320      	adds	r3, #32
 8023fe4:	443b      	add	r3, r7
 8023fe6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8023fea:	ee07 3a90 	vmov	s15, r3
 8023fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023ff2:	edd7 7a06 	vldr	s15, [r7, #24]
 8023ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023ffa:	7ffb      	ldrb	r3, [r7, #31]
 8023ffc:	005b      	lsls	r3, r3, #1
 8023ffe:	687a      	ldr	r2, [r7, #4]
 8024000:	4413      	add	r3, r2
 8024002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024006:	ee17 2a90 	vmov	r2, s15
 802400a:	b212      	sxth	r2, r2
 802400c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 802400e:	7ffb      	ldrb	r3, [r7, #31]
 8024010:	3301      	adds	r3, #1
 8024012:	77fb      	strb	r3, [r7, #31]
 8024014:	7ffb      	ldrb	r3, [r7, #31]
 8024016:	2b02      	cmp	r3, #2
 8024018:	d9e1      	bls.n	8023fde <LSM6DSL_AccReadXYZ+0xda>
  }
}
 802401a:	bf00      	nop
 802401c:	bf00      	nop
 802401e:	3720      	adds	r7, #32
 8024020:	46bd      	mov	sp, r7
 8024022:	bd80      	pop	{r7, pc}
 8024024:	3d79db23 	.word	0x3d79db23
 8024028:	3df9db23 	.word	0x3df9db23
 802402c:	3e79db23 	.word	0x3e79db23
 8024030:	3ef9db23 	.word	0x3ef9db23

08024034 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8024034:	b580      	push	{r7, lr}
 8024036:	b084      	sub	sp, #16
 8024038:	af00      	add	r7, sp, #0
 802403a:	4603      	mov	r3, r0
 802403c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 802403e:	2300      	movs	r3, #0
 8024040:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8024042:	2111      	movs	r1, #17
 8024044:	20d4      	movs	r0, #212	; 0xd4
 8024046:	f7fe fd3b 	bl	8022ac0 <SENSOR_IO_Read>
 802404a:	4603      	mov	r3, r0
 802404c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 802404e:	88fb      	ldrh	r3, [r7, #6]
 8024050:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8024052:	7bbb      	ldrb	r3, [r7, #14]
 8024054:	f003 0303 	and.w	r3, r3, #3
 8024058:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 802405a:	7bba      	ldrb	r2, [r7, #14]
 802405c:	7bfb      	ldrb	r3, [r7, #15]
 802405e:	4313      	orrs	r3, r2
 8024060:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8024062:	7bbb      	ldrb	r3, [r7, #14]
 8024064:	461a      	mov	r2, r3
 8024066:	2111      	movs	r1, #17
 8024068:	20d4      	movs	r0, #212	; 0xd4
 802406a:	f7fe fd0f 	bl	8022a8c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 802406e:	2112      	movs	r1, #18
 8024070:	20d4      	movs	r0, #212	; 0xd4
 8024072:	f7fe fd25 	bl	8022ac0 <SENSOR_IO_Read>
 8024076:	4603      	mov	r3, r0
 8024078:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 802407a:	88fb      	ldrh	r3, [r7, #6]
 802407c:	0a1b      	lsrs	r3, r3, #8
 802407e:	b29b      	uxth	r3, r3
 8024080:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8024082:	7bbb      	ldrb	r3, [r7, #14]
 8024084:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8024088:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 802408a:	7bba      	ldrb	r2, [r7, #14]
 802408c:	7bfb      	ldrb	r3, [r7, #15]
 802408e:	4313      	orrs	r3, r2
 8024090:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8024092:	7bbb      	ldrb	r3, [r7, #14]
 8024094:	461a      	mov	r2, r3
 8024096:	2112      	movs	r1, #18
 8024098:	20d4      	movs	r0, #212	; 0xd4
 802409a:	f7fe fcf7 	bl	8022a8c <SENSOR_IO_Write>
}
 802409e:	bf00      	nop
 80240a0:	3710      	adds	r7, #16
 80240a2:	46bd      	mov	sp, r7
 80240a4:	bd80      	pop	{r7, pc}

080240a6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80240a6:	b580      	push	{r7, lr}
 80240a8:	b082      	sub	sp, #8
 80240aa:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80240ac:	2300      	movs	r3, #0
 80240ae:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80240b0:	2111      	movs	r1, #17
 80240b2:	20d4      	movs	r0, #212	; 0xd4
 80240b4:	f7fe fd04 	bl	8022ac0 <SENSOR_IO_Read>
 80240b8:	4603      	mov	r3, r0
 80240ba:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80240bc:	79fb      	ldrb	r3, [r7, #7]
 80240be:	f003 030f 	and.w	r3, r3, #15
 80240c2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80240c4:	79fb      	ldrb	r3, [r7, #7]
 80240c6:	461a      	mov	r2, r3
 80240c8:	2111      	movs	r1, #17
 80240ca:	20d4      	movs	r0, #212	; 0xd4
 80240cc:	f7fe fcde 	bl	8022a8c <SENSOR_IO_Write>
}
 80240d0:	bf00      	nop
 80240d2:	3708      	adds	r7, #8
 80240d4:	46bd      	mov	sp, r7
 80240d6:	bd80      	pop	{r7, pc}

080240d8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80240d8:	b580      	push	{r7, lr}
 80240da:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80240dc:	f7fe fccc 	bl	8022a78 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80240e0:	210f      	movs	r1, #15
 80240e2:	20d4      	movs	r0, #212	; 0xd4
 80240e4:	f7fe fcec 	bl	8022ac0 <SENSOR_IO_Read>
 80240e8:	4603      	mov	r3, r0
}
 80240ea:	4618      	mov	r0, r3
 80240ec:	bd80      	pop	{r7, pc}

080240ee <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80240ee:	b580      	push	{r7, lr}
 80240f0:	b084      	sub	sp, #16
 80240f2:	af00      	add	r7, sp, #0
 80240f4:	4603      	mov	r3, r0
 80240f6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80240f8:	2300      	movs	r3, #0
 80240fa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80240fc:	2116      	movs	r1, #22
 80240fe:	20d4      	movs	r0, #212	; 0xd4
 8024100:	f7fe fcde 	bl	8022ac0 <SENSOR_IO_Read>
 8024104:	4603      	mov	r3, r0
 8024106:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8024108:	7bfb      	ldrb	r3, [r7, #15]
 802410a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802410e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8024110:	88fb      	ldrh	r3, [r7, #6]
 8024112:	2b00      	cmp	r3, #0
 8024114:	d003      	beq.n	802411e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8024116:	7bfb      	ldrb	r3, [r7, #15]
 8024118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802411c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 802411e:	7bfb      	ldrb	r3, [r7, #15]
 8024120:	461a      	mov	r2, r3
 8024122:	2116      	movs	r1, #22
 8024124:	20d4      	movs	r0, #212	; 0xd4
 8024126:	f7fe fcb1 	bl	8022a8c <SENSOR_IO_Write>
}
 802412a:	bf00      	nop
 802412c:	3710      	adds	r7, #16
 802412e:	46bd      	mov	sp, r7
 8024130:	bd80      	pop	{r7, pc}
	...

08024134 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8024134:	b580      	push	{r7, lr}
 8024136:	b088      	sub	sp, #32
 8024138:	af00      	add	r7, sp, #0
 802413a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 802413c:	2300      	movs	r3, #0
 802413e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8024140:	2300      	movs	r3, #0
 8024142:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8024144:	f04f 0300 	mov.w	r3, #0
 8024148:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 802414a:	2111      	movs	r1, #17
 802414c:	20d4      	movs	r0, #212	; 0xd4
 802414e:	f7fe fcb7 	bl	8022ac0 <SENSOR_IO_Read>
 8024152:	4603      	mov	r3, r0
 8024154:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8024156:	f107 0208 	add.w	r2, r7, #8
 802415a:	2306      	movs	r3, #6
 802415c:	2122      	movs	r1, #34	; 0x22
 802415e:	20d4      	movs	r0, #212	; 0xd4
 8024160:	f7fe fccc 	bl	8022afc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8024164:	2300      	movs	r3, #0
 8024166:	77fb      	strb	r3, [r7, #31]
 8024168:	e01c      	b.n	80241a4 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 802416a:	7ffb      	ldrb	r3, [r7, #31]
 802416c:	005b      	lsls	r3, r3, #1
 802416e:	3301      	adds	r3, #1
 8024170:	3320      	adds	r3, #32
 8024172:	443b      	add	r3, r7
 8024174:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8024178:	b29b      	uxth	r3, r3
 802417a:	021b      	lsls	r3, r3, #8
 802417c:	b29a      	uxth	r2, r3
 802417e:	7ffb      	ldrb	r3, [r7, #31]
 8024180:	005b      	lsls	r3, r3, #1
 8024182:	3320      	adds	r3, #32
 8024184:	443b      	add	r3, r7
 8024186:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 802418a:	b29b      	uxth	r3, r3
 802418c:	4413      	add	r3, r2
 802418e:	b29a      	uxth	r2, r3
 8024190:	7ffb      	ldrb	r3, [r7, #31]
 8024192:	b212      	sxth	r2, r2
 8024194:	005b      	lsls	r3, r3, #1
 8024196:	3320      	adds	r3, #32
 8024198:	443b      	add	r3, r7
 802419a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 802419e:	7ffb      	ldrb	r3, [r7, #31]
 80241a0:	3301      	adds	r3, #1
 80241a2:	77fb      	strb	r3, [r7, #31]
 80241a4:	7ffb      	ldrb	r3, [r7, #31]
 80241a6:	2b02      	cmp	r3, #2
 80241a8:	d9df      	bls.n	802416a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80241aa:	7dfb      	ldrb	r3, [r7, #23]
 80241ac:	f003 030c 	and.w	r3, r3, #12
 80241b0:	2b0c      	cmp	r3, #12
 80241b2:	d829      	bhi.n	8024208 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80241b4:	a201      	add	r2, pc, #4	; (adr r2, 80241bc <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80241b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80241ba:	bf00      	nop
 80241bc:	080241f1 	.word	0x080241f1
 80241c0:	08024209 	.word	0x08024209
 80241c4:	08024209 	.word	0x08024209
 80241c8:	08024209 	.word	0x08024209
 80241cc:	080241f7 	.word	0x080241f7
 80241d0:	08024209 	.word	0x08024209
 80241d4:	08024209 	.word	0x08024209
 80241d8:	08024209 	.word	0x08024209
 80241dc:	080241fd 	.word	0x080241fd
 80241e0:	08024209 	.word	0x08024209
 80241e4:	08024209 	.word	0x08024209
 80241e8:	08024209 	.word	0x08024209
 80241ec:	08024203 	.word	0x08024203
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80241f0:	4b16      	ldr	r3, [pc, #88]	; (802424c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80241f2:	61bb      	str	r3, [r7, #24]
    break;
 80241f4:	e008      	b.n	8024208 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80241f6:	4b16      	ldr	r3, [pc, #88]	; (8024250 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80241f8:	61bb      	str	r3, [r7, #24]
    break;
 80241fa:	e005      	b.n	8024208 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80241fc:	4b15      	ldr	r3, [pc, #84]	; (8024254 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80241fe:	61bb      	str	r3, [r7, #24]
    break;
 8024200:	e002      	b.n	8024208 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8024202:	4b15      	ldr	r3, [pc, #84]	; (8024258 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8024204:	61bb      	str	r3, [r7, #24]
    break;    
 8024206:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8024208:	2300      	movs	r3, #0
 802420a:	77fb      	strb	r3, [r7, #31]
 802420c:	e016      	b.n	802423c <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 802420e:	7ffb      	ldrb	r3, [r7, #31]
 8024210:	005b      	lsls	r3, r3, #1
 8024212:	3320      	adds	r3, #32
 8024214:	443b      	add	r3, r7
 8024216:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 802421a:	ee07 3a90 	vmov	s15, r3
 802421e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024222:	7ffb      	ldrb	r3, [r7, #31]
 8024224:	009b      	lsls	r3, r3, #2
 8024226:	687a      	ldr	r2, [r7, #4]
 8024228:	4413      	add	r3, r2
 802422a:	edd7 7a06 	vldr	s15, [r7, #24]
 802422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024232:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8024236:	7ffb      	ldrb	r3, [r7, #31]
 8024238:	3301      	adds	r3, #1
 802423a:	77fb      	strb	r3, [r7, #31]
 802423c:	7ffb      	ldrb	r3, [r7, #31]
 802423e:	2b02      	cmp	r3, #2
 8024240:	d9e5      	bls.n	802420e <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8024242:	bf00      	nop
 8024244:	bf00      	nop
 8024246:	3720      	adds	r7, #32
 8024248:	46bd      	mov	sp, r7
 802424a:	bd80      	pop	{r7, pc}
 802424c:	410c0000 	.word	0x410c0000
 8024250:	418c0000 	.word	0x418c0000
 8024254:	420c0000 	.word	0x420c0000
 8024258:	428c0000 	.word	0x428c0000

0802425c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802425c:	b580      	push	{r7, lr}
 802425e:	b082      	sub	sp, #8
 8024260:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8024262:	2300      	movs	r3, #0
 8024264:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8024266:	2003      	movs	r0, #3
 8024268:	f000 f960 	bl	802452c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802426c:	200f      	movs	r0, #15
 802426e:	f000 f80d 	bl	802428c <HAL_InitTick>
 8024272:	4603      	mov	r3, r0
 8024274:	2b00      	cmp	r3, #0
 8024276:	d002      	beq.n	802427e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8024278:	2301      	movs	r3, #1
 802427a:	71fb      	strb	r3, [r7, #7]
 802427c:	e001      	b.n	8024282 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 802427e:	f7ff f9dd 	bl	802363c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8024282:	79fb      	ldrb	r3, [r7, #7]
}
 8024284:	4618      	mov	r0, r3
 8024286:	3708      	adds	r7, #8
 8024288:	46bd      	mov	sp, r7
 802428a:	bd80      	pop	{r7, pc}

0802428c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802428c:	b580      	push	{r7, lr}
 802428e:	b084      	sub	sp, #16
 8024290:	af00      	add	r7, sp, #0
 8024292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8024294:	2300      	movs	r3, #0
 8024296:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8024298:	4b17      	ldr	r3, [pc, #92]	; (80242f8 <HAL_InitTick+0x6c>)
 802429a:	781b      	ldrb	r3, [r3, #0]
 802429c:	2b00      	cmp	r3, #0
 802429e:	d023      	beq.n	80242e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80242a0:	4b16      	ldr	r3, [pc, #88]	; (80242fc <HAL_InitTick+0x70>)
 80242a2:	681a      	ldr	r2, [r3, #0]
 80242a4:	4b14      	ldr	r3, [pc, #80]	; (80242f8 <HAL_InitTick+0x6c>)
 80242a6:	781b      	ldrb	r3, [r3, #0]
 80242a8:	4619      	mov	r1, r3
 80242aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80242ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80242b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80242b6:	4618      	mov	r0, r3
 80242b8:	f000 f96d 	bl	8024596 <HAL_SYSTICK_Config>
 80242bc:	4603      	mov	r3, r0
 80242be:	2b00      	cmp	r3, #0
 80242c0:	d10f      	bne.n	80242e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80242c2:	687b      	ldr	r3, [r7, #4]
 80242c4:	2b0f      	cmp	r3, #15
 80242c6:	d809      	bhi.n	80242dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80242c8:	2200      	movs	r2, #0
 80242ca:	6879      	ldr	r1, [r7, #4]
 80242cc:	f04f 30ff 	mov.w	r0, #4294967295
 80242d0:	f000 f937 	bl	8024542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80242d4:	4a0a      	ldr	r2, [pc, #40]	; (8024300 <HAL_InitTick+0x74>)
 80242d6:	687b      	ldr	r3, [r7, #4]
 80242d8:	6013      	str	r3, [r2, #0]
 80242da:	e007      	b.n	80242ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80242dc:	2301      	movs	r3, #1
 80242de:	73fb      	strb	r3, [r7, #15]
 80242e0:	e004      	b.n	80242ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80242e2:	2301      	movs	r3, #1
 80242e4:	73fb      	strb	r3, [r7, #15]
 80242e6:	e001      	b.n	80242ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80242e8:	2301      	movs	r3, #1
 80242ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80242ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80242ee:	4618      	mov	r0, r3
 80242f0:	3710      	adds	r7, #16
 80242f2:	46bd      	mov	sp, r7
 80242f4:	bd80      	pop	{r7, pc}
 80242f6:	bf00      	nop
 80242f8:	20000298 	.word	0x20000298
 80242fc:	20000228 	.word	0x20000228
 8024300:	20000294 	.word	0x20000294

08024304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8024304:	b480      	push	{r7}
 8024306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8024308:	4b06      	ldr	r3, [pc, #24]	; (8024324 <HAL_IncTick+0x20>)
 802430a:	781b      	ldrb	r3, [r3, #0]
 802430c:	461a      	mov	r2, r3
 802430e:	4b06      	ldr	r3, [pc, #24]	; (8024328 <HAL_IncTick+0x24>)
 8024310:	681b      	ldr	r3, [r3, #0]
 8024312:	4413      	add	r3, r2
 8024314:	4a04      	ldr	r2, [pc, #16]	; (8024328 <HAL_IncTick+0x24>)
 8024316:	6013      	str	r3, [r2, #0]
}
 8024318:	bf00      	nop
 802431a:	46bd      	mov	sp, r7
 802431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024320:	4770      	bx	lr
 8024322:	bf00      	nop
 8024324:	20000298 	.word	0x20000298
 8024328:	20002908 	.word	0x20002908

0802432c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802432c:	b480      	push	{r7}
 802432e:	af00      	add	r7, sp, #0
  return uwTick;
 8024330:	4b03      	ldr	r3, [pc, #12]	; (8024340 <HAL_GetTick+0x14>)
 8024332:	681b      	ldr	r3, [r3, #0]
}
 8024334:	4618      	mov	r0, r3
 8024336:	46bd      	mov	sp, r7
 8024338:	f85d 7b04 	ldr.w	r7, [sp], #4
 802433c:	4770      	bx	lr
 802433e:	bf00      	nop
 8024340:	20002908 	.word	0x20002908

08024344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8024344:	b580      	push	{r7, lr}
 8024346:	b084      	sub	sp, #16
 8024348:	af00      	add	r7, sp, #0
 802434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802434c:	f7ff ffee 	bl	802432c <HAL_GetTick>
 8024350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8024356:	68fb      	ldr	r3, [r7, #12]
 8024358:	f1b3 3fff 	cmp.w	r3, #4294967295
 802435c:	d005      	beq.n	802436a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 802435e:	4b0a      	ldr	r3, [pc, #40]	; (8024388 <HAL_Delay+0x44>)
 8024360:	781b      	ldrb	r3, [r3, #0]
 8024362:	461a      	mov	r2, r3
 8024364:	68fb      	ldr	r3, [r7, #12]
 8024366:	4413      	add	r3, r2
 8024368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802436a:	bf00      	nop
 802436c:	f7ff ffde 	bl	802432c <HAL_GetTick>
 8024370:	4602      	mov	r2, r0
 8024372:	68bb      	ldr	r3, [r7, #8]
 8024374:	1ad3      	subs	r3, r2, r3
 8024376:	68fa      	ldr	r2, [r7, #12]
 8024378:	429a      	cmp	r2, r3
 802437a:	d8f7      	bhi.n	802436c <HAL_Delay+0x28>
  {
  }
}
 802437c:	bf00      	nop
 802437e:	bf00      	nop
 8024380:	3710      	adds	r7, #16
 8024382:	46bd      	mov	sp, r7
 8024384:	bd80      	pop	{r7, pc}
 8024386:	bf00      	nop
 8024388:	20000298 	.word	0x20000298

0802438c <__NVIC_SetPriorityGrouping>:
{
 802438c:	b480      	push	{r7}
 802438e:	b085      	sub	sp, #20
 8024390:	af00      	add	r7, sp, #0
 8024392:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8024394:	687b      	ldr	r3, [r7, #4]
 8024396:	f003 0307 	and.w	r3, r3, #7
 802439a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802439c:	4b0c      	ldr	r3, [pc, #48]	; (80243d0 <__NVIC_SetPriorityGrouping+0x44>)
 802439e:	68db      	ldr	r3, [r3, #12]
 80243a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80243a2:	68ba      	ldr	r2, [r7, #8]
 80243a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80243a8:	4013      	ands	r3, r2
 80243aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80243ac:	68fb      	ldr	r3, [r7, #12]
 80243ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80243b0:	68bb      	ldr	r3, [r7, #8]
 80243b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80243b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80243b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80243bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80243be:	4a04      	ldr	r2, [pc, #16]	; (80243d0 <__NVIC_SetPriorityGrouping+0x44>)
 80243c0:	68bb      	ldr	r3, [r7, #8]
 80243c2:	60d3      	str	r3, [r2, #12]
}
 80243c4:	bf00      	nop
 80243c6:	3714      	adds	r7, #20
 80243c8:	46bd      	mov	sp, r7
 80243ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243ce:	4770      	bx	lr
 80243d0:	e000ed00 	.word	0xe000ed00

080243d4 <__NVIC_GetPriorityGrouping>:
{
 80243d4:	b480      	push	{r7}
 80243d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80243d8:	4b04      	ldr	r3, [pc, #16]	; (80243ec <__NVIC_GetPriorityGrouping+0x18>)
 80243da:	68db      	ldr	r3, [r3, #12]
 80243dc:	0a1b      	lsrs	r3, r3, #8
 80243de:	f003 0307 	and.w	r3, r3, #7
}
 80243e2:	4618      	mov	r0, r3
 80243e4:	46bd      	mov	sp, r7
 80243e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243ea:	4770      	bx	lr
 80243ec:	e000ed00 	.word	0xe000ed00

080243f0 <__NVIC_EnableIRQ>:
{
 80243f0:	b480      	push	{r7}
 80243f2:	b083      	sub	sp, #12
 80243f4:	af00      	add	r7, sp, #0
 80243f6:	4603      	mov	r3, r0
 80243f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80243fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80243fe:	2b00      	cmp	r3, #0
 8024400:	db0b      	blt.n	802441a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024402:	79fb      	ldrb	r3, [r7, #7]
 8024404:	f003 021f 	and.w	r2, r3, #31
 8024408:	4907      	ldr	r1, [pc, #28]	; (8024428 <__NVIC_EnableIRQ+0x38>)
 802440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802440e:	095b      	lsrs	r3, r3, #5
 8024410:	2001      	movs	r0, #1
 8024412:	fa00 f202 	lsl.w	r2, r0, r2
 8024416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802441a:	bf00      	nop
 802441c:	370c      	adds	r7, #12
 802441e:	46bd      	mov	sp, r7
 8024420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024424:	4770      	bx	lr
 8024426:	bf00      	nop
 8024428:	e000e100 	.word	0xe000e100

0802442c <__NVIC_SetPriority>:
{
 802442c:	b480      	push	{r7}
 802442e:	b083      	sub	sp, #12
 8024430:	af00      	add	r7, sp, #0
 8024432:	4603      	mov	r3, r0
 8024434:	6039      	str	r1, [r7, #0]
 8024436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802443c:	2b00      	cmp	r3, #0
 802443e:	db0a      	blt.n	8024456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024440:	683b      	ldr	r3, [r7, #0]
 8024442:	b2da      	uxtb	r2, r3
 8024444:	490c      	ldr	r1, [pc, #48]	; (8024478 <__NVIC_SetPriority+0x4c>)
 8024446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802444a:	0112      	lsls	r2, r2, #4
 802444c:	b2d2      	uxtb	r2, r2
 802444e:	440b      	add	r3, r1
 8024450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8024454:	e00a      	b.n	802446c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024456:	683b      	ldr	r3, [r7, #0]
 8024458:	b2da      	uxtb	r2, r3
 802445a:	4908      	ldr	r1, [pc, #32]	; (802447c <__NVIC_SetPriority+0x50>)
 802445c:	79fb      	ldrb	r3, [r7, #7]
 802445e:	f003 030f 	and.w	r3, r3, #15
 8024462:	3b04      	subs	r3, #4
 8024464:	0112      	lsls	r2, r2, #4
 8024466:	b2d2      	uxtb	r2, r2
 8024468:	440b      	add	r3, r1
 802446a:	761a      	strb	r2, [r3, #24]
}
 802446c:	bf00      	nop
 802446e:	370c      	adds	r7, #12
 8024470:	46bd      	mov	sp, r7
 8024472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024476:	4770      	bx	lr
 8024478:	e000e100 	.word	0xe000e100
 802447c:	e000ed00 	.word	0xe000ed00

08024480 <NVIC_EncodePriority>:
{
 8024480:	b480      	push	{r7}
 8024482:	b089      	sub	sp, #36	; 0x24
 8024484:	af00      	add	r7, sp, #0
 8024486:	60f8      	str	r0, [r7, #12]
 8024488:	60b9      	str	r1, [r7, #8]
 802448a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802448c:	68fb      	ldr	r3, [r7, #12]
 802448e:	f003 0307 	and.w	r3, r3, #7
 8024492:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8024494:	69fb      	ldr	r3, [r7, #28]
 8024496:	f1c3 0307 	rsb	r3, r3, #7
 802449a:	2b04      	cmp	r3, #4
 802449c:	bf28      	it	cs
 802449e:	2304      	movcs	r3, #4
 80244a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80244a2:	69fb      	ldr	r3, [r7, #28]
 80244a4:	3304      	adds	r3, #4
 80244a6:	2b06      	cmp	r3, #6
 80244a8:	d902      	bls.n	80244b0 <NVIC_EncodePriority+0x30>
 80244aa:	69fb      	ldr	r3, [r7, #28]
 80244ac:	3b03      	subs	r3, #3
 80244ae:	e000      	b.n	80244b2 <NVIC_EncodePriority+0x32>
 80244b0:	2300      	movs	r3, #0
 80244b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80244b4:	f04f 32ff 	mov.w	r2, #4294967295
 80244b8:	69bb      	ldr	r3, [r7, #24]
 80244ba:	fa02 f303 	lsl.w	r3, r2, r3
 80244be:	43da      	mvns	r2, r3
 80244c0:	68bb      	ldr	r3, [r7, #8]
 80244c2:	401a      	ands	r2, r3
 80244c4:	697b      	ldr	r3, [r7, #20]
 80244c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80244c8:	f04f 31ff 	mov.w	r1, #4294967295
 80244cc:	697b      	ldr	r3, [r7, #20]
 80244ce:	fa01 f303 	lsl.w	r3, r1, r3
 80244d2:	43d9      	mvns	r1, r3
 80244d4:	687b      	ldr	r3, [r7, #4]
 80244d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80244d8:	4313      	orrs	r3, r2
}
 80244da:	4618      	mov	r0, r3
 80244dc:	3724      	adds	r7, #36	; 0x24
 80244de:	46bd      	mov	sp, r7
 80244e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244e4:	4770      	bx	lr
	...

080244e8 <SysTick_Config>:
{
 80244e8:	b580      	push	{r7, lr}
 80244ea:	b082      	sub	sp, #8
 80244ec:	af00      	add	r7, sp, #0
 80244ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80244f0:	687b      	ldr	r3, [r7, #4]
 80244f2:	3b01      	subs	r3, #1
 80244f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80244f8:	d301      	bcc.n	80244fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80244fa:	2301      	movs	r3, #1
 80244fc:	e00f      	b.n	802451e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80244fe:	4a0a      	ldr	r2, [pc, #40]	; (8024528 <SysTick_Config+0x40>)
 8024500:	687b      	ldr	r3, [r7, #4]
 8024502:	3b01      	subs	r3, #1
 8024504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8024506:	210f      	movs	r1, #15
 8024508:	f04f 30ff 	mov.w	r0, #4294967295
 802450c:	f7ff ff8e 	bl	802442c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8024510:	4b05      	ldr	r3, [pc, #20]	; (8024528 <SysTick_Config+0x40>)
 8024512:	2200      	movs	r2, #0
 8024514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8024516:	4b04      	ldr	r3, [pc, #16]	; (8024528 <SysTick_Config+0x40>)
 8024518:	2207      	movs	r2, #7
 802451a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 802451c:	2300      	movs	r3, #0
}
 802451e:	4618      	mov	r0, r3
 8024520:	3708      	adds	r7, #8
 8024522:	46bd      	mov	sp, r7
 8024524:	bd80      	pop	{r7, pc}
 8024526:	bf00      	nop
 8024528:	e000e010 	.word	0xe000e010

0802452c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802452c:	b580      	push	{r7, lr}
 802452e:	b082      	sub	sp, #8
 8024530:	af00      	add	r7, sp, #0
 8024532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8024534:	6878      	ldr	r0, [r7, #4]
 8024536:	f7ff ff29 	bl	802438c <__NVIC_SetPriorityGrouping>
}
 802453a:	bf00      	nop
 802453c:	3708      	adds	r7, #8
 802453e:	46bd      	mov	sp, r7
 8024540:	bd80      	pop	{r7, pc}

08024542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8024542:	b580      	push	{r7, lr}
 8024544:	b086      	sub	sp, #24
 8024546:	af00      	add	r7, sp, #0
 8024548:	4603      	mov	r3, r0
 802454a:	60b9      	str	r1, [r7, #8]
 802454c:	607a      	str	r2, [r7, #4]
 802454e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8024550:	2300      	movs	r3, #0
 8024552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8024554:	f7ff ff3e 	bl	80243d4 <__NVIC_GetPriorityGrouping>
 8024558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802455a:	687a      	ldr	r2, [r7, #4]
 802455c:	68b9      	ldr	r1, [r7, #8]
 802455e:	6978      	ldr	r0, [r7, #20]
 8024560:	f7ff ff8e 	bl	8024480 <NVIC_EncodePriority>
 8024564:	4602      	mov	r2, r0
 8024566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802456a:	4611      	mov	r1, r2
 802456c:	4618      	mov	r0, r3
 802456e:	f7ff ff5d 	bl	802442c <__NVIC_SetPriority>
}
 8024572:	bf00      	nop
 8024574:	3718      	adds	r7, #24
 8024576:	46bd      	mov	sp, r7
 8024578:	bd80      	pop	{r7, pc}

0802457a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802457a:	b580      	push	{r7, lr}
 802457c:	b082      	sub	sp, #8
 802457e:	af00      	add	r7, sp, #0
 8024580:	4603      	mov	r3, r0
 8024582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8024584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024588:	4618      	mov	r0, r3
 802458a:	f7ff ff31 	bl	80243f0 <__NVIC_EnableIRQ>
}
 802458e:	bf00      	nop
 8024590:	3708      	adds	r7, #8
 8024592:	46bd      	mov	sp, r7
 8024594:	bd80      	pop	{r7, pc}

08024596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8024596:	b580      	push	{r7, lr}
 8024598:	b082      	sub	sp, #8
 802459a:	af00      	add	r7, sp, #0
 802459c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802459e:	6878      	ldr	r0, [r7, #4]
 80245a0:	f7ff ffa2 	bl	80244e8 <SysTick_Config>
 80245a4:	4603      	mov	r3, r0
}
 80245a6:	4618      	mov	r0, r3
 80245a8:	3708      	adds	r7, #8
 80245aa:	46bd      	mov	sp, r7
 80245ac:	bd80      	pop	{r7, pc}

080245ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80245ae:	b580      	push	{r7, lr}
 80245b0:	b082      	sub	sp, #8
 80245b2:	af00      	add	r7, sp, #0
 80245b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80245b6:	687b      	ldr	r3, [r7, #4]
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	d101      	bne.n	80245c0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80245bc:	2301      	movs	r3, #1
 80245be:	e014      	b.n	80245ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80245c0:	687b      	ldr	r3, [r7, #4]
 80245c2:	791b      	ldrb	r3, [r3, #4]
 80245c4:	b2db      	uxtb	r3, r3
 80245c6:	2b00      	cmp	r3, #0
 80245c8:	d105      	bne.n	80245d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80245ca:	687b      	ldr	r3, [r7, #4]
 80245cc:	2200      	movs	r2, #0
 80245ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80245d0:	6878      	ldr	r0, [r7, #4]
 80245d2:	f7ff f857 	bl	8023684 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80245d6:	687b      	ldr	r3, [r7, #4]
 80245d8:	2202      	movs	r2, #2
 80245da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80245dc:	687b      	ldr	r3, [r7, #4]
 80245de:	2200      	movs	r2, #0
 80245e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80245e2:	687b      	ldr	r3, [r7, #4]
 80245e4:	2201      	movs	r2, #1
 80245e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80245e8:	2300      	movs	r3, #0
}
 80245ea:	4618      	mov	r0, r3
 80245ec:	3708      	adds	r7, #8
 80245ee:	46bd      	mov	sp, r7
 80245f0:	bd80      	pop	{r7, pc}

080245f2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80245f2:	b480      	push	{r7}
 80245f4:	b083      	sub	sp, #12
 80245f6:	af00      	add	r7, sp, #0
 80245f8:	6078      	str	r0, [r7, #4]
 80245fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80245fc:	687b      	ldr	r3, [r7, #4]
 80245fe:	795b      	ldrb	r3, [r3, #5]
 8024600:	2b01      	cmp	r3, #1
 8024602:	d101      	bne.n	8024608 <HAL_DAC_Start+0x16>
 8024604:	2302      	movs	r3, #2
 8024606:	e040      	b.n	802468a <HAL_DAC_Start+0x98>
 8024608:	687b      	ldr	r3, [r7, #4]
 802460a:	2201      	movs	r2, #1
 802460c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802460e:	687b      	ldr	r3, [r7, #4]
 8024610:	2202      	movs	r2, #2
 8024612:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8024614:	687b      	ldr	r3, [r7, #4]
 8024616:	681b      	ldr	r3, [r3, #0]
 8024618:	6819      	ldr	r1, [r3, #0]
 802461a:	683b      	ldr	r3, [r7, #0]
 802461c:	f003 0310 	and.w	r3, r3, #16
 8024620:	2201      	movs	r2, #1
 8024622:	409a      	lsls	r2, r3
 8024624:	687b      	ldr	r3, [r7, #4]
 8024626:	681b      	ldr	r3, [r3, #0]
 8024628:	430a      	orrs	r2, r1
 802462a:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 802462c:	683b      	ldr	r3, [r7, #0]
 802462e:	2b00      	cmp	r3, #0
 8024630:	d10f      	bne.n	8024652 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8024632:	687b      	ldr	r3, [r7, #4]
 8024634:	681b      	ldr	r3, [r3, #0]
 8024636:	681b      	ldr	r3, [r3, #0]
 8024638:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802463c:	2b02      	cmp	r3, #2
 802463e:	d11d      	bne.n	802467c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8024640:	687b      	ldr	r3, [r7, #4]
 8024642:	681b      	ldr	r3, [r3, #0]
 8024644:	685a      	ldr	r2, [r3, #4]
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	681b      	ldr	r3, [r3, #0]
 802464a:	f042 0201 	orr.w	r2, r2, #1
 802464e:	605a      	str	r2, [r3, #4]
 8024650:	e014      	b.n	802467c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8024652:	687b      	ldr	r3, [r7, #4]
 8024654:	681b      	ldr	r3, [r3, #0]
 8024656:	681b      	ldr	r3, [r3, #0]
 8024658:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802465c:	683b      	ldr	r3, [r7, #0]
 802465e:	f003 0310 	and.w	r3, r3, #16
 8024662:	2102      	movs	r1, #2
 8024664:	fa01 f303 	lsl.w	r3, r1, r3
 8024668:	429a      	cmp	r2, r3
 802466a:	d107      	bne.n	802467c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802466c:	687b      	ldr	r3, [r7, #4]
 802466e:	681b      	ldr	r3, [r3, #0]
 8024670:	685a      	ldr	r2, [r3, #4]
 8024672:	687b      	ldr	r3, [r7, #4]
 8024674:	681b      	ldr	r3, [r3, #0]
 8024676:	f042 0202 	orr.w	r2, r2, #2
 802467a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802467c:	687b      	ldr	r3, [r7, #4]
 802467e:	2201      	movs	r2, #1
 8024680:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8024682:	687b      	ldr	r3, [r7, #4]
 8024684:	2200      	movs	r2, #0
 8024686:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8024688:	2300      	movs	r3, #0
}
 802468a:	4618      	mov	r0, r3
 802468c:	370c      	adds	r7, #12
 802468e:	46bd      	mov	sp, r7
 8024690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024694:	4770      	bx	lr
	...

08024698 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8024698:	b580      	push	{r7, lr}
 802469a:	b086      	sub	sp, #24
 802469c:	af00      	add	r7, sp, #0
 802469e:	60f8      	str	r0, [r7, #12]
 80246a0:	60b9      	str	r1, [r7, #8]
 80246a2:	607a      	str	r2, [r7, #4]
 80246a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80246a6:	2300      	movs	r3, #0
 80246a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80246aa:	68fb      	ldr	r3, [r7, #12]
 80246ac:	795b      	ldrb	r3, [r3, #5]
 80246ae:	2b01      	cmp	r3, #1
 80246b0:	d101      	bne.n	80246b6 <HAL_DAC_Start_DMA+0x1e>
 80246b2:	2302      	movs	r3, #2
 80246b4:	e0ab      	b.n	802480e <HAL_DAC_Start_DMA+0x176>
 80246b6:	68fb      	ldr	r3, [r7, #12]
 80246b8:	2201      	movs	r2, #1
 80246ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80246bc:	68fb      	ldr	r3, [r7, #12]
 80246be:	2202      	movs	r2, #2
 80246c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80246c2:	68bb      	ldr	r3, [r7, #8]
 80246c4:	2b00      	cmp	r3, #0
 80246c6:	d12f      	bne.n	8024728 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80246c8:	68fb      	ldr	r3, [r7, #12]
 80246ca:	689b      	ldr	r3, [r3, #8]
 80246cc:	4a52      	ldr	r2, [pc, #328]	; (8024818 <HAL_DAC_Start_DMA+0x180>)
 80246ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80246d0:	68fb      	ldr	r3, [r7, #12]
 80246d2:	689b      	ldr	r3, [r3, #8]
 80246d4:	4a51      	ldr	r2, [pc, #324]	; (802481c <HAL_DAC_Start_DMA+0x184>)
 80246d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80246d8:	68fb      	ldr	r3, [r7, #12]
 80246da:	689b      	ldr	r3, [r3, #8]
 80246dc:	4a50      	ldr	r2, [pc, #320]	; (8024820 <HAL_DAC_Start_DMA+0x188>)
 80246de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80246e0:	68fb      	ldr	r3, [r7, #12]
 80246e2:	681b      	ldr	r3, [r3, #0]
 80246e4:	681a      	ldr	r2, [r3, #0]
 80246e6:	68fb      	ldr	r3, [r7, #12]
 80246e8:	681b      	ldr	r3, [r3, #0]
 80246ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80246ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80246f0:	6a3b      	ldr	r3, [r7, #32]
 80246f2:	2b08      	cmp	r3, #8
 80246f4:	d013      	beq.n	802471e <HAL_DAC_Start_DMA+0x86>
 80246f6:	6a3b      	ldr	r3, [r7, #32]
 80246f8:	2b08      	cmp	r3, #8
 80246fa:	d845      	bhi.n	8024788 <HAL_DAC_Start_DMA+0xf0>
 80246fc:	6a3b      	ldr	r3, [r7, #32]
 80246fe:	2b00      	cmp	r3, #0
 8024700:	d003      	beq.n	802470a <HAL_DAC_Start_DMA+0x72>
 8024702:	6a3b      	ldr	r3, [r7, #32]
 8024704:	2b04      	cmp	r3, #4
 8024706:	d005      	beq.n	8024714 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8024708:	e03e      	b.n	8024788 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 802470a:	68fb      	ldr	r3, [r7, #12]
 802470c:	681b      	ldr	r3, [r3, #0]
 802470e:	3308      	adds	r3, #8
 8024710:	613b      	str	r3, [r7, #16]
        break;
 8024712:	e03c      	b.n	802478e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8024714:	68fb      	ldr	r3, [r7, #12]
 8024716:	681b      	ldr	r3, [r3, #0]
 8024718:	330c      	adds	r3, #12
 802471a:	613b      	str	r3, [r7, #16]
        break;
 802471c:	e037      	b.n	802478e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 802471e:	68fb      	ldr	r3, [r7, #12]
 8024720:	681b      	ldr	r3, [r3, #0]
 8024722:	3310      	adds	r3, #16
 8024724:	613b      	str	r3, [r7, #16]
        break;
 8024726:	e032      	b.n	802478e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8024728:	68fb      	ldr	r3, [r7, #12]
 802472a:	68db      	ldr	r3, [r3, #12]
 802472c:	4a3d      	ldr	r2, [pc, #244]	; (8024824 <HAL_DAC_Start_DMA+0x18c>)
 802472e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8024730:	68fb      	ldr	r3, [r7, #12]
 8024732:	68db      	ldr	r3, [r3, #12]
 8024734:	4a3c      	ldr	r2, [pc, #240]	; (8024828 <HAL_DAC_Start_DMA+0x190>)
 8024736:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8024738:	68fb      	ldr	r3, [r7, #12]
 802473a:	68db      	ldr	r3, [r3, #12]
 802473c:	4a3b      	ldr	r2, [pc, #236]	; (802482c <HAL_DAC_Start_DMA+0x194>)
 802473e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8024740:	68fb      	ldr	r3, [r7, #12]
 8024742:	681b      	ldr	r3, [r3, #0]
 8024744:	681a      	ldr	r2, [r3, #0]
 8024746:	68fb      	ldr	r3, [r7, #12]
 8024748:	681b      	ldr	r3, [r3, #0]
 802474a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802474e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8024750:	6a3b      	ldr	r3, [r7, #32]
 8024752:	2b08      	cmp	r3, #8
 8024754:	d013      	beq.n	802477e <HAL_DAC_Start_DMA+0xe6>
 8024756:	6a3b      	ldr	r3, [r7, #32]
 8024758:	2b08      	cmp	r3, #8
 802475a:	d817      	bhi.n	802478c <HAL_DAC_Start_DMA+0xf4>
 802475c:	6a3b      	ldr	r3, [r7, #32]
 802475e:	2b00      	cmp	r3, #0
 8024760:	d003      	beq.n	802476a <HAL_DAC_Start_DMA+0xd2>
 8024762:	6a3b      	ldr	r3, [r7, #32]
 8024764:	2b04      	cmp	r3, #4
 8024766:	d005      	beq.n	8024774 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8024768:	e010      	b.n	802478c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 802476a:	68fb      	ldr	r3, [r7, #12]
 802476c:	681b      	ldr	r3, [r3, #0]
 802476e:	3314      	adds	r3, #20
 8024770:	613b      	str	r3, [r7, #16]
        break;
 8024772:	e00c      	b.n	802478e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8024774:	68fb      	ldr	r3, [r7, #12]
 8024776:	681b      	ldr	r3, [r3, #0]
 8024778:	3318      	adds	r3, #24
 802477a:	613b      	str	r3, [r7, #16]
        break;
 802477c:	e007      	b.n	802478e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 802477e:	68fb      	ldr	r3, [r7, #12]
 8024780:	681b      	ldr	r3, [r3, #0]
 8024782:	331c      	adds	r3, #28
 8024784:	613b      	str	r3, [r7, #16]
        break;
 8024786:	e002      	b.n	802478e <HAL_DAC_Start_DMA+0xf6>
        break;
 8024788:	bf00      	nop
 802478a:	e000      	b.n	802478e <HAL_DAC_Start_DMA+0xf6>
        break;
 802478c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 802478e:	68bb      	ldr	r3, [r7, #8]
 8024790:	2b00      	cmp	r3, #0
 8024792:	d111      	bne.n	80247b8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8024794:	68fb      	ldr	r3, [r7, #12]
 8024796:	681b      	ldr	r3, [r3, #0]
 8024798:	681a      	ldr	r2, [r3, #0]
 802479a:	68fb      	ldr	r3, [r7, #12]
 802479c:	681b      	ldr	r3, [r3, #0]
 802479e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80247a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80247a4:	68fb      	ldr	r3, [r7, #12]
 80247a6:	6898      	ldr	r0, [r3, #8]
 80247a8:	6879      	ldr	r1, [r7, #4]
 80247aa:	683b      	ldr	r3, [r7, #0]
 80247ac:	693a      	ldr	r2, [r7, #16]
 80247ae:	f000 fb15 	bl	8024ddc <HAL_DMA_Start_IT>
 80247b2:	4603      	mov	r3, r0
 80247b4:	75fb      	strb	r3, [r7, #23]
 80247b6:	e010      	b.n	80247da <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80247b8:	68fb      	ldr	r3, [r7, #12]
 80247ba:	681b      	ldr	r3, [r3, #0]
 80247bc:	681a      	ldr	r2, [r3, #0]
 80247be:	68fb      	ldr	r3, [r7, #12]
 80247c0:	681b      	ldr	r3, [r3, #0]
 80247c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80247c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80247c8:	68fb      	ldr	r3, [r7, #12]
 80247ca:	68d8      	ldr	r0, [r3, #12]
 80247cc:	6879      	ldr	r1, [r7, #4]
 80247ce:	683b      	ldr	r3, [r7, #0]
 80247d0:	693a      	ldr	r2, [r7, #16]
 80247d2:	f000 fb03 	bl	8024ddc <HAL_DMA_Start_IT>
 80247d6:	4603      	mov	r3, r0
 80247d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80247da:	68fb      	ldr	r3, [r7, #12]
 80247dc:	2200      	movs	r2, #0
 80247de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80247e0:	7dfb      	ldrb	r3, [r7, #23]
 80247e2:	2b00      	cmp	r3, #0
 80247e4:	d10c      	bne.n	8024800 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80247e6:	68fb      	ldr	r3, [r7, #12]
 80247e8:	681b      	ldr	r3, [r3, #0]
 80247ea:	6819      	ldr	r1, [r3, #0]
 80247ec:	68bb      	ldr	r3, [r7, #8]
 80247ee:	f003 0310 	and.w	r3, r3, #16
 80247f2:	2201      	movs	r2, #1
 80247f4:	409a      	lsls	r2, r3
 80247f6:	68fb      	ldr	r3, [r7, #12]
 80247f8:	681b      	ldr	r3, [r3, #0]
 80247fa:	430a      	orrs	r2, r1
 80247fc:	601a      	str	r2, [r3, #0]
 80247fe:	e005      	b.n	802480c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8024800:	68fb      	ldr	r3, [r7, #12]
 8024802:	691b      	ldr	r3, [r3, #16]
 8024804:	f043 0204 	orr.w	r2, r3, #4
 8024808:	68fb      	ldr	r3, [r7, #12]
 802480a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 802480c:	7dfb      	ldrb	r3, [r7, #23]
}
 802480e:	4618      	mov	r0, r3
 8024810:	3718      	adds	r7, #24
 8024812:	46bd      	mov	sp, r7
 8024814:	bd80      	pop	{r7, pc}
 8024816:	bf00      	nop
 8024818:	08024b79 	.word	0x08024b79
 802481c:	08024b9b 	.word	0x08024b9b
 8024820:	08024bb7 	.word	0x08024bb7
 8024824:	08024c21 	.word	0x08024c21
 8024828:	08024c43 	.word	0x08024c43
 802482c:	08024c5f 	.word	0x08024c5f

08024830 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8024830:	b580      	push	{r7, lr}
 8024832:	b082      	sub	sp, #8
 8024834:	af00      	add	r7, sp, #0
 8024836:	6078      	str	r0, [r7, #4]
 8024838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 802483a:	687b      	ldr	r3, [r7, #4]
 802483c:	681b      	ldr	r3, [r3, #0]
 802483e:	6819      	ldr	r1, [r3, #0]
 8024840:	683b      	ldr	r3, [r7, #0]
 8024842:	f003 0310 	and.w	r3, r3, #16
 8024846:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802484a:	fa02 f303 	lsl.w	r3, r2, r3
 802484e:	43da      	mvns	r2, r3
 8024850:	687b      	ldr	r3, [r7, #4]
 8024852:	681b      	ldr	r3, [r3, #0]
 8024854:	400a      	ands	r2, r1
 8024856:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8024858:	687b      	ldr	r3, [r7, #4]
 802485a:	681b      	ldr	r3, [r3, #0]
 802485c:	6819      	ldr	r1, [r3, #0]
 802485e:	683b      	ldr	r3, [r7, #0]
 8024860:	f003 0310 	and.w	r3, r3, #16
 8024864:	2201      	movs	r2, #1
 8024866:	fa02 f303 	lsl.w	r3, r2, r3
 802486a:	43da      	mvns	r2, r3
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	681b      	ldr	r3, [r3, #0]
 8024870:	400a      	ands	r2, r1
 8024872:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8024874:	683b      	ldr	r3, [r7, #0]
 8024876:	2b00      	cmp	r3, #0
 8024878:	d10d      	bne.n	8024896 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	689b      	ldr	r3, [r3, #8]
 802487e:	4618      	mov	r0, r3
 8024880:	f000 fb27 	bl	8024ed2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	681b      	ldr	r3, [r3, #0]
 8024888:	681a      	ldr	r2, [r3, #0]
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	681b      	ldr	r3, [r3, #0]
 802488e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8024892:	601a      	str	r2, [r3, #0]
 8024894:	e00c      	b.n	80248b0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8024896:	687b      	ldr	r3, [r7, #4]
 8024898:	68db      	ldr	r3, [r3, #12]
 802489a:	4618      	mov	r0, r3
 802489c:	f000 fb19 	bl	8024ed2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80248a0:	687b      	ldr	r3, [r7, #4]
 80248a2:	681b      	ldr	r3, [r3, #0]
 80248a4:	681a      	ldr	r2, [r3, #0]
 80248a6:	687b      	ldr	r3, [r7, #4]
 80248a8:	681b      	ldr	r3, [r3, #0]
 80248aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80248ae:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80248b0:	2300      	movs	r3, #0
}
 80248b2:	4618      	mov	r0, r3
 80248b4:	3708      	adds	r7, #8
 80248b6:	46bd      	mov	sp, r7
 80248b8:	bd80      	pop	{r7, pc}

080248ba <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80248ba:	b480      	push	{r7}
 80248bc:	b083      	sub	sp, #12
 80248be:	af00      	add	r7, sp, #0
 80248c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80248c2:	bf00      	nop
 80248c4:	370c      	adds	r7, #12
 80248c6:	46bd      	mov	sp, r7
 80248c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248cc:	4770      	bx	lr

080248ce <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80248ce:	b480      	push	{r7}
 80248d0:	b083      	sub	sp, #12
 80248d2:	af00      	add	r7, sp, #0
 80248d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80248d6:	bf00      	nop
 80248d8:	370c      	adds	r7, #12
 80248da:	46bd      	mov	sp, r7
 80248dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248e0:	4770      	bx	lr

080248e2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80248e2:	b480      	push	{r7}
 80248e4:	b083      	sub	sp, #12
 80248e6:	af00      	add	r7, sp, #0
 80248e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80248ea:	bf00      	nop
 80248ec:	370c      	adds	r7, #12
 80248ee:	46bd      	mov	sp, r7
 80248f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248f4:	4770      	bx	lr
	...

080248f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80248f8:	b580      	push	{r7, lr}
 80248fa:	b088      	sub	sp, #32
 80248fc:	af00      	add	r7, sp, #0
 80248fe:	60f8      	str	r0, [r7, #12]
 8024900:	60b9      	str	r1, [r7, #8]
 8024902:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8024904:	2300      	movs	r3, #0
 8024906:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8024908:	68fb      	ldr	r3, [r7, #12]
 802490a:	795b      	ldrb	r3, [r3, #5]
 802490c:	2b01      	cmp	r3, #1
 802490e:	d101      	bne.n	8024914 <HAL_DAC_ConfigChannel+0x1c>
 8024910:	2302      	movs	r3, #2
 8024912:	e12a      	b.n	8024b6a <HAL_DAC_ConfigChannel+0x272>
 8024914:	68fb      	ldr	r3, [r7, #12]
 8024916:	2201      	movs	r2, #1
 8024918:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802491a:	68fb      	ldr	r3, [r7, #12]
 802491c:	2202      	movs	r2, #2
 802491e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8024920:	68bb      	ldr	r3, [r7, #8]
 8024922:	685b      	ldr	r3, [r3, #4]
 8024924:	2b04      	cmp	r3, #4
 8024926:	d174      	bne.n	8024a12 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8024928:	f7ff fd00 	bl	802432c <HAL_GetTick>
 802492c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802492e:	687b      	ldr	r3, [r7, #4]
 8024930:	2b00      	cmp	r3, #0
 8024932:	d134      	bne.n	802499e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8024934:	e011      	b.n	802495a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8024936:	f7ff fcf9 	bl	802432c <HAL_GetTick>
 802493a:	4602      	mov	r2, r0
 802493c:	69bb      	ldr	r3, [r7, #24]
 802493e:	1ad3      	subs	r3, r2, r3
 8024940:	2b01      	cmp	r3, #1
 8024942:	d90a      	bls.n	802495a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8024944:	68fb      	ldr	r3, [r7, #12]
 8024946:	691b      	ldr	r3, [r3, #16]
 8024948:	f043 0208 	orr.w	r2, r3, #8
 802494c:	68fb      	ldr	r3, [r7, #12]
 802494e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8024950:	68fb      	ldr	r3, [r7, #12]
 8024952:	2203      	movs	r2, #3
 8024954:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8024956:	2303      	movs	r3, #3
 8024958:	e107      	b.n	8024b6a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802495a:	68fb      	ldr	r3, [r7, #12]
 802495c:	681b      	ldr	r3, [r3, #0]
 802495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024964:	2b00      	cmp	r3, #0
 8024966:	d1e6      	bne.n	8024936 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8024968:	2001      	movs	r0, #1
 802496a:	f7ff fceb 	bl	8024344 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802496e:	68fb      	ldr	r3, [r7, #12]
 8024970:	681b      	ldr	r3, [r3, #0]
 8024972:	68ba      	ldr	r2, [r7, #8]
 8024974:	69d2      	ldr	r2, [r2, #28]
 8024976:	641a      	str	r2, [r3, #64]	; 0x40
 8024978:	e01e      	b.n	80249b8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802497a:	f7ff fcd7 	bl	802432c <HAL_GetTick>
 802497e:	4602      	mov	r2, r0
 8024980:	69bb      	ldr	r3, [r7, #24]
 8024982:	1ad3      	subs	r3, r2, r3
 8024984:	2b01      	cmp	r3, #1
 8024986:	d90a      	bls.n	802499e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8024988:	68fb      	ldr	r3, [r7, #12]
 802498a:	691b      	ldr	r3, [r3, #16]
 802498c:	f043 0208 	orr.w	r2, r3, #8
 8024990:	68fb      	ldr	r3, [r7, #12]
 8024992:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8024994:	68fb      	ldr	r3, [r7, #12]
 8024996:	2203      	movs	r2, #3
 8024998:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802499a:	2303      	movs	r3, #3
 802499c:	e0e5      	b.n	8024b6a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802499e:	68fb      	ldr	r3, [r7, #12]
 80249a0:	681b      	ldr	r3, [r3, #0]
 80249a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80249a4:	2b00      	cmp	r3, #0
 80249a6:	dbe8      	blt.n	802497a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80249a8:	2001      	movs	r0, #1
 80249aa:	f7ff fccb 	bl	8024344 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80249ae:	68fb      	ldr	r3, [r7, #12]
 80249b0:	681b      	ldr	r3, [r3, #0]
 80249b2:	68ba      	ldr	r2, [r7, #8]
 80249b4:	69d2      	ldr	r2, [r2, #28]
 80249b6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80249b8:	68fb      	ldr	r3, [r7, #12]
 80249ba:	681b      	ldr	r3, [r3, #0]
 80249bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80249be:	687b      	ldr	r3, [r7, #4]
 80249c0:	f003 0310 	and.w	r3, r3, #16
 80249c4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80249c8:	fa01 f303 	lsl.w	r3, r1, r3
 80249cc:	43db      	mvns	r3, r3
 80249ce:	ea02 0103 	and.w	r1, r2, r3
 80249d2:	68bb      	ldr	r3, [r7, #8]
 80249d4:	6a1a      	ldr	r2, [r3, #32]
 80249d6:	687b      	ldr	r3, [r7, #4]
 80249d8:	f003 0310 	and.w	r3, r3, #16
 80249dc:	409a      	lsls	r2, r3
 80249de:	68fb      	ldr	r3, [r7, #12]
 80249e0:	681b      	ldr	r3, [r3, #0]
 80249e2:	430a      	orrs	r2, r1
 80249e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80249e6:	68fb      	ldr	r3, [r7, #12]
 80249e8:	681b      	ldr	r3, [r3, #0]
 80249ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80249ec:	687b      	ldr	r3, [r7, #4]
 80249ee:	f003 0310 	and.w	r3, r3, #16
 80249f2:	21ff      	movs	r1, #255	; 0xff
 80249f4:	fa01 f303 	lsl.w	r3, r1, r3
 80249f8:	43db      	mvns	r3, r3
 80249fa:	ea02 0103 	and.w	r1, r2, r3
 80249fe:	68bb      	ldr	r3, [r7, #8]
 8024a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024a02:	687b      	ldr	r3, [r7, #4]
 8024a04:	f003 0310 	and.w	r3, r3, #16
 8024a08:	409a      	lsls	r2, r3
 8024a0a:	68fb      	ldr	r3, [r7, #12]
 8024a0c:	681b      	ldr	r3, [r3, #0]
 8024a0e:	430a      	orrs	r2, r1
 8024a10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8024a12:	68bb      	ldr	r3, [r7, #8]
 8024a14:	695b      	ldr	r3, [r3, #20]
 8024a16:	2b01      	cmp	r3, #1
 8024a18:	d11d      	bne.n	8024a56 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8024a1a:	68fb      	ldr	r3, [r7, #12]
 8024a1c:	681b      	ldr	r3, [r3, #0]
 8024a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024a20:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8024a22:	687b      	ldr	r3, [r7, #4]
 8024a24:	f003 0310 	and.w	r3, r3, #16
 8024a28:	221f      	movs	r2, #31
 8024a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8024a2e:	43db      	mvns	r3, r3
 8024a30:	69fa      	ldr	r2, [r7, #28]
 8024a32:	4013      	ands	r3, r2
 8024a34:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8024a36:	68bb      	ldr	r3, [r7, #8]
 8024a38:	699b      	ldr	r3, [r3, #24]
 8024a3a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8024a3c:	687b      	ldr	r3, [r7, #4]
 8024a3e:	f003 0310 	and.w	r3, r3, #16
 8024a42:	697a      	ldr	r2, [r7, #20]
 8024a44:	fa02 f303 	lsl.w	r3, r2, r3
 8024a48:	69fa      	ldr	r2, [r7, #28]
 8024a4a:	4313      	orrs	r3, r2
 8024a4c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8024a4e:	68fb      	ldr	r3, [r7, #12]
 8024a50:	681b      	ldr	r3, [r3, #0]
 8024a52:	69fa      	ldr	r2, [r7, #28]
 8024a54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8024a56:	68fb      	ldr	r3, [r7, #12]
 8024a58:	681b      	ldr	r3, [r3, #0]
 8024a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024a5c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8024a5e:	687b      	ldr	r3, [r7, #4]
 8024a60:	f003 0310 	and.w	r3, r3, #16
 8024a64:	2207      	movs	r2, #7
 8024a66:	fa02 f303 	lsl.w	r3, r2, r3
 8024a6a:	43db      	mvns	r3, r3
 8024a6c:	69fa      	ldr	r2, [r7, #28]
 8024a6e:	4013      	ands	r3, r2
 8024a70:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8024a72:	68bb      	ldr	r3, [r7, #8]
 8024a74:	685a      	ldr	r2, [r3, #4]
 8024a76:	68bb      	ldr	r3, [r7, #8]
 8024a78:	68db      	ldr	r3, [r3, #12]
 8024a7a:	431a      	orrs	r2, r3
 8024a7c:	68bb      	ldr	r3, [r7, #8]
 8024a7e:	691b      	ldr	r3, [r3, #16]
 8024a80:	4313      	orrs	r3, r2
 8024a82:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	f003 0310 	and.w	r3, r3, #16
 8024a8a:	697a      	ldr	r2, [r7, #20]
 8024a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8024a90:	69fa      	ldr	r2, [r7, #28]
 8024a92:	4313      	orrs	r3, r2
 8024a94:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8024a96:	68fb      	ldr	r3, [r7, #12]
 8024a98:	681b      	ldr	r3, [r3, #0]
 8024a9a:	69fa      	ldr	r2, [r7, #28]
 8024a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8024a9e:	68fb      	ldr	r3, [r7, #12]
 8024aa0:	681b      	ldr	r3, [r3, #0]
 8024aa2:	6819      	ldr	r1, [r3, #0]
 8024aa4:	687b      	ldr	r3, [r7, #4]
 8024aa6:	f003 0310 	and.w	r3, r3, #16
 8024aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8024aae:	fa02 f303 	lsl.w	r3, r2, r3
 8024ab2:	43da      	mvns	r2, r3
 8024ab4:	68fb      	ldr	r3, [r7, #12]
 8024ab6:	681b      	ldr	r3, [r3, #0]
 8024ab8:	400a      	ands	r2, r1
 8024aba:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8024abc:	68fb      	ldr	r3, [r7, #12]
 8024abe:	681b      	ldr	r3, [r3, #0]
 8024ac0:	681b      	ldr	r3, [r3, #0]
 8024ac2:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8024ac4:	687b      	ldr	r3, [r7, #4]
 8024ac6:	f003 0310 	and.w	r3, r3, #16
 8024aca:	f640 72fe 	movw	r2, #4094	; 0xffe
 8024ace:	fa02 f303 	lsl.w	r3, r2, r3
 8024ad2:	43db      	mvns	r3, r3
 8024ad4:	69fa      	ldr	r2, [r7, #28]
 8024ad6:	4013      	ands	r3, r2
 8024ad8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8024ada:	68bb      	ldr	r3, [r7, #8]
 8024adc:	689b      	ldr	r3, [r3, #8]
 8024ade:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8024ae0:	687b      	ldr	r3, [r7, #4]
 8024ae2:	f003 0310 	and.w	r3, r3, #16
 8024ae6:	697a      	ldr	r2, [r7, #20]
 8024ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8024aec:	69fa      	ldr	r2, [r7, #28]
 8024aee:	4313      	orrs	r3, r2
 8024af0:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8024af2:	68bb      	ldr	r3, [r7, #8]
 8024af4:	681b      	ldr	r3, [r3, #0]
 8024af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024afa:	d104      	bne.n	8024b06 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8024afc:	69fb      	ldr	r3, [r7, #28]
 8024afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024b02:	61fb      	str	r3, [r7, #28]
 8024b04:	e018      	b.n	8024b38 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8024b06:	68bb      	ldr	r3, [r7, #8]
 8024b08:	681b      	ldr	r3, [r3, #0]
 8024b0a:	2b00      	cmp	r3, #0
 8024b0c:	d104      	bne.n	8024b18 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8024b0e:	69fb      	ldr	r3, [r7, #28]
 8024b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8024b14:	61fb      	str	r3, [r7, #28]
 8024b16:	e00f      	b.n	8024b38 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8024b18:	f003 fb6c 	bl	80281f4 <HAL_RCC_GetHCLKFreq>
 8024b1c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8024b1e:	693b      	ldr	r3, [r7, #16]
 8024b20:	4a14      	ldr	r2, [pc, #80]	; (8024b74 <HAL_DAC_ConfigChannel+0x27c>)
 8024b22:	4293      	cmp	r3, r2
 8024b24:	d904      	bls.n	8024b30 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8024b26:	69fb      	ldr	r3, [r7, #28]
 8024b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024b2c:	61fb      	str	r3, [r7, #28]
 8024b2e:	e003      	b.n	8024b38 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8024b30:	69fb      	ldr	r3, [r7, #28]
 8024b32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8024b36:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8024b38:	68fb      	ldr	r3, [r7, #12]
 8024b3a:	681b      	ldr	r3, [r3, #0]
 8024b3c:	69fa      	ldr	r2, [r7, #28]
 8024b3e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8024b40:	68fb      	ldr	r3, [r7, #12]
 8024b42:	681b      	ldr	r3, [r3, #0]
 8024b44:	6819      	ldr	r1, [r3, #0]
 8024b46:	687b      	ldr	r3, [r7, #4]
 8024b48:	f003 0310 	and.w	r3, r3, #16
 8024b4c:	22c0      	movs	r2, #192	; 0xc0
 8024b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8024b52:	43da      	mvns	r2, r3
 8024b54:	68fb      	ldr	r3, [r7, #12]
 8024b56:	681b      	ldr	r3, [r3, #0]
 8024b58:	400a      	ands	r2, r1
 8024b5a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8024b5c:	68fb      	ldr	r3, [r7, #12]
 8024b5e:	2201      	movs	r2, #1
 8024b60:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8024b62:	68fb      	ldr	r3, [r7, #12]
 8024b64:	2200      	movs	r2, #0
 8024b66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8024b68:	2300      	movs	r3, #0
}
 8024b6a:	4618      	mov	r0, r3
 8024b6c:	3720      	adds	r7, #32
 8024b6e:	46bd      	mov	sp, r7
 8024b70:	bd80      	pop	{r7, pc}
 8024b72:	bf00      	nop
 8024b74:	04c4b400 	.word	0x04c4b400

08024b78 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8024b78:	b580      	push	{r7, lr}
 8024b7a:	b084      	sub	sp, #16
 8024b7c:	af00      	add	r7, sp, #0
 8024b7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024b84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8024b86:	68f8      	ldr	r0, [r7, #12]
 8024b88:	f7ff fe97 	bl	80248ba <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8024b8c:	68fb      	ldr	r3, [r7, #12]
 8024b8e:	2201      	movs	r2, #1
 8024b90:	711a      	strb	r2, [r3, #4]
}
 8024b92:	bf00      	nop
 8024b94:	3710      	adds	r7, #16
 8024b96:	46bd      	mov	sp, r7
 8024b98:	bd80      	pop	{r7, pc}

08024b9a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8024b9a:	b580      	push	{r7, lr}
 8024b9c:	b084      	sub	sp, #16
 8024b9e:	af00      	add	r7, sp, #0
 8024ba0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024ba2:	687b      	ldr	r3, [r7, #4]
 8024ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024ba6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8024ba8:	68f8      	ldr	r0, [r7, #12]
 8024baa:	f7ff fe90 	bl	80248ce <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8024bae:	bf00      	nop
 8024bb0:	3710      	adds	r7, #16
 8024bb2:	46bd      	mov	sp, r7
 8024bb4:	bd80      	pop	{r7, pc}

08024bb6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8024bb6:	b580      	push	{r7, lr}
 8024bb8:	b084      	sub	sp, #16
 8024bba:	af00      	add	r7, sp, #0
 8024bbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024bbe:	687b      	ldr	r3, [r7, #4]
 8024bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024bc2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8024bc4:	68fb      	ldr	r3, [r7, #12]
 8024bc6:	691b      	ldr	r3, [r3, #16]
 8024bc8:	f043 0204 	orr.w	r2, r3, #4
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8024bd0:	68f8      	ldr	r0, [r7, #12]
 8024bd2:	f7ff fe86 	bl	80248e2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8024bd6:	68fb      	ldr	r3, [r7, #12]
 8024bd8:	2201      	movs	r2, #1
 8024bda:	711a      	strb	r2, [r3, #4]
}
 8024bdc:	bf00      	nop
 8024bde:	3710      	adds	r7, #16
 8024be0:	46bd      	mov	sp, r7
 8024be2:	bd80      	pop	{r7, pc}

08024be4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8024be4:	b480      	push	{r7}
 8024be6:	b083      	sub	sp, #12
 8024be8:	af00      	add	r7, sp, #0
 8024bea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8024bec:	bf00      	nop
 8024bee:	370c      	adds	r7, #12
 8024bf0:	46bd      	mov	sp, r7
 8024bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bf6:	4770      	bx	lr

08024bf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8024bf8:	b480      	push	{r7}
 8024bfa:	b083      	sub	sp, #12
 8024bfc:	af00      	add	r7, sp, #0
 8024bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8024c00:	bf00      	nop
 8024c02:	370c      	adds	r7, #12
 8024c04:	46bd      	mov	sp, r7
 8024c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c0a:	4770      	bx	lr

08024c0c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8024c0c:	b480      	push	{r7}
 8024c0e:	b083      	sub	sp, #12
 8024c10:	af00      	add	r7, sp, #0
 8024c12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8024c14:	bf00      	nop
 8024c16:	370c      	adds	r7, #12
 8024c18:	46bd      	mov	sp, r7
 8024c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c1e:	4770      	bx	lr

08024c20 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8024c20:	b580      	push	{r7, lr}
 8024c22:	b084      	sub	sp, #16
 8024c24:	af00      	add	r7, sp, #0
 8024c26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024c28:	687b      	ldr	r3, [r7, #4]
 8024c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8024c2e:	68f8      	ldr	r0, [r7, #12]
 8024c30:	f7ff ffd8 	bl	8024be4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8024c34:	68fb      	ldr	r3, [r7, #12]
 8024c36:	2201      	movs	r2, #1
 8024c38:	711a      	strb	r2, [r3, #4]
}
 8024c3a:	bf00      	nop
 8024c3c:	3710      	adds	r7, #16
 8024c3e:	46bd      	mov	sp, r7
 8024c40:	bd80      	pop	{r7, pc}

08024c42 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8024c42:	b580      	push	{r7, lr}
 8024c44:	b084      	sub	sp, #16
 8024c46:	af00      	add	r7, sp, #0
 8024c48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024c4a:	687b      	ldr	r3, [r7, #4]
 8024c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c4e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8024c50:	68f8      	ldr	r0, [r7, #12]
 8024c52:	f7ff ffd1 	bl	8024bf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8024c56:	bf00      	nop
 8024c58:	3710      	adds	r7, #16
 8024c5a:	46bd      	mov	sp, r7
 8024c5c:	bd80      	pop	{r7, pc}

08024c5e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8024c5e:	b580      	push	{r7, lr}
 8024c60:	b084      	sub	sp, #16
 8024c62:	af00      	add	r7, sp, #0
 8024c64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c6a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8024c6c:	68fb      	ldr	r3, [r7, #12]
 8024c6e:	691b      	ldr	r3, [r3, #16]
 8024c70:	f043 0204 	orr.w	r2, r3, #4
 8024c74:	68fb      	ldr	r3, [r7, #12]
 8024c76:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8024c78:	68f8      	ldr	r0, [r7, #12]
 8024c7a:	f7ff ffc7 	bl	8024c0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8024c7e:	68fb      	ldr	r3, [r7, #12]
 8024c80:	2201      	movs	r2, #1
 8024c82:	711a      	strb	r2, [r3, #4]
}
 8024c84:	bf00      	nop
 8024c86:	3710      	adds	r7, #16
 8024c88:	46bd      	mov	sp, r7
 8024c8a:	bd80      	pop	{r7, pc}

08024c8c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8024c8c:	b580      	push	{r7, lr}
 8024c8e:	b084      	sub	sp, #16
 8024c90:	af00      	add	r7, sp, #0
 8024c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8024c94:	687b      	ldr	r3, [r7, #4]
 8024c96:	2b00      	cmp	r3, #0
 8024c98:	d101      	bne.n	8024c9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8024c9a:	2301      	movs	r3, #1
 8024c9c:	e08d      	b.n	8024dba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8024c9e:	687b      	ldr	r3, [r7, #4]
 8024ca0:	681b      	ldr	r3, [r3, #0]
 8024ca2:	461a      	mov	r2, r3
 8024ca4:	4b47      	ldr	r3, [pc, #284]	; (8024dc4 <HAL_DMA_Init+0x138>)
 8024ca6:	429a      	cmp	r2, r3
 8024ca8:	d80f      	bhi.n	8024cca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8024caa:	687b      	ldr	r3, [r7, #4]
 8024cac:	681b      	ldr	r3, [r3, #0]
 8024cae:	461a      	mov	r2, r3
 8024cb0:	4b45      	ldr	r3, [pc, #276]	; (8024dc8 <HAL_DMA_Init+0x13c>)
 8024cb2:	4413      	add	r3, r2
 8024cb4:	4a45      	ldr	r2, [pc, #276]	; (8024dcc <HAL_DMA_Init+0x140>)
 8024cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8024cba:	091b      	lsrs	r3, r3, #4
 8024cbc:	009a      	lsls	r2, r3, #2
 8024cbe:	687b      	ldr	r3, [r7, #4]
 8024cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8024cc2:	687b      	ldr	r3, [r7, #4]
 8024cc4:	4a42      	ldr	r2, [pc, #264]	; (8024dd0 <HAL_DMA_Init+0x144>)
 8024cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8024cc8:	e00e      	b.n	8024ce8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	681b      	ldr	r3, [r3, #0]
 8024cce:	461a      	mov	r2, r3
 8024cd0:	4b40      	ldr	r3, [pc, #256]	; (8024dd4 <HAL_DMA_Init+0x148>)
 8024cd2:	4413      	add	r3, r2
 8024cd4:	4a3d      	ldr	r2, [pc, #244]	; (8024dcc <HAL_DMA_Init+0x140>)
 8024cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8024cda:	091b      	lsrs	r3, r3, #4
 8024cdc:	009a      	lsls	r2, r3, #2
 8024cde:	687b      	ldr	r3, [r7, #4]
 8024ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8024ce2:	687b      	ldr	r3, [r7, #4]
 8024ce4:	4a3c      	ldr	r2, [pc, #240]	; (8024dd8 <HAL_DMA_Init+0x14c>)
 8024ce6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8024ce8:	687b      	ldr	r3, [r7, #4]
 8024cea:	2202      	movs	r2, #2
 8024cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8024cf0:	687b      	ldr	r3, [r7, #4]
 8024cf2:	681b      	ldr	r3, [r3, #0]
 8024cf4:	681b      	ldr	r3, [r3, #0]
 8024cf6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8024cf8:	68fb      	ldr	r3, [r7, #12]
 8024cfa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8024cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024d02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8024d04:	687b      	ldr	r3, [r7, #4]
 8024d06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8024d08:	687b      	ldr	r3, [r7, #4]
 8024d0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8024d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8024d0e:	687b      	ldr	r3, [r7, #4]
 8024d10:	691b      	ldr	r3, [r3, #16]
 8024d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8024d14:	687b      	ldr	r3, [r7, #4]
 8024d16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8024d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8024d1a:	687b      	ldr	r3, [r7, #4]
 8024d1c:	699b      	ldr	r3, [r3, #24]
 8024d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8024d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	6a1b      	ldr	r3, [r3, #32]
 8024d2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8024d2c:	68fa      	ldr	r2, [r7, #12]
 8024d2e:	4313      	orrs	r3, r2
 8024d30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8024d32:	687b      	ldr	r3, [r7, #4]
 8024d34:	681b      	ldr	r3, [r3, #0]
 8024d36:	68fa      	ldr	r2, [r7, #12]
 8024d38:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8024d3a:	6878      	ldr	r0, [r7, #4]
 8024d3c:	f000 fa12 	bl	8025164 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	689b      	ldr	r3, [r3, #8]
 8024d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8024d48:	d102      	bne.n	8024d50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8024d4a:	687b      	ldr	r3, [r7, #4]
 8024d4c:	2200      	movs	r2, #0
 8024d4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8024d50:	687b      	ldr	r3, [r7, #4]
 8024d52:	685a      	ldr	r2, [r3, #4]
 8024d54:	687b      	ldr	r3, [r7, #4]
 8024d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024d58:	b2d2      	uxtb	r2, r2
 8024d5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024d60:	687a      	ldr	r2, [r7, #4]
 8024d62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8024d64:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8024d66:	687b      	ldr	r3, [r7, #4]
 8024d68:	685b      	ldr	r3, [r3, #4]
 8024d6a:	2b00      	cmp	r3, #0
 8024d6c:	d010      	beq.n	8024d90 <HAL_DMA_Init+0x104>
 8024d6e:	687b      	ldr	r3, [r7, #4]
 8024d70:	685b      	ldr	r3, [r3, #4]
 8024d72:	2b04      	cmp	r3, #4
 8024d74:	d80c      	bhi.n	8024d90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8024d76:	6878      	ldr	r0, [r7, #4]
 8024d78:	f000 fa32 	bl	80251e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8024d7c:	687b      	ldr	r3, [r7, #4]
 8024d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024d80:	2200      	movs	r2, #0
 8024d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8024d84:	687b      	ldr	r3, [r7, #4]
 8024d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024d88:	687a      	ldr	r2, [r7, #4]
 8024d8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8024d8c:	605a      	str	r2, [r3, #4]
 8024d8e:	e008      	b.n	8024da2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8024d90:	687b      	ldr	r3, [r7, #4]
 8024d92:	2200      	movs	r2, #0
 8024d94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	2200      	movs	r2, #0
 8024d9a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8024d9c:	687b      	ldr	r3, [r7, #4]
 8024d9e:	2200      	movs	r2, #0
 8024da0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	2200      	movs	r2, #0
 8024da6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8024da8:	687b      	ldr	r3, [r7, #4]
 8024daa:	2201      	movs	r2, #1
 8024dac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	2200      	movs	r2, #0
 8024db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8024db8:	2300      	movs	r3, #0
}
 8024dba:	4618      	mov	r0, r3
 8024dbc:	3710      	adds	r7, #16
 8024dbe:	46bd      	mov	sp, r7
 8024dc0:	bd80      	pop	{r7, pc}
 8024dc2:	bf00      	nop
 8024dc4:	40020407 	.word	0x40020407
 8024dc8:	bffdfff8 	.word	0xbffdfff8
 8024dcc:	cccccccd 	.word	0xcccccccd
 8024dd0:	40020000 	.word	0x40020000
 8024dd4:	bffdfbf8 	.word	0xbffdfbf8
 8024dd8:	40020400 	.word	0x40020400

08024ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8024ddc:	b580      	push	{r7, lr}
 8024dde:	b086      	sub	sp, #24
 8024de0:	af00      	add	r7, sp, #0
 8024de2:	60f8      	str	r0, [r7, #12]
 8024de4:	60b9      	str	r1, [r7, #8]
 8024de6:	607a      	str	r2, [r7, #4]
 8024de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8024dea:	2300      	movs	r3, #0
 8024dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8024dee:	68fb      	ldr	r3, [r7, #12]
 8024df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8024df4:	2b01      	cmp	r3, #1
 8024df6:	d101      	bne.n	8024dfc <HAL_DMA_Start_IT+0x20>
 8024df8:	2302      	movs	r3, #2
 8024dfa:	e066      	b.n	8024eca <HAL_DMA_Start_IT+0xee>
 8024dfc:	68fb      	ldr	r3, [r7, #12]
 8024dfe:	2201      	movs	r2, #1
 8024e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8024e04:	68fb      	ldr	r3, [r7, #12]
 8024e06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8024e0a:	b2db      	uxtb	r3, r3
 8024e0c:	2b01      	cmp	r3, #1
 8024e0e:	d155      	bne.n	8024ebc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8024e10:	68fb      	ldr	r3, [r7, #12]
 8024e12:	2202      	movs	r2, #2
 8024e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8024e18:	68fb      	ldr	r3, [r7, #12]
 8024e1a:	2200      	movs	r2, #0
 8024e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8024e1e:	68fb      	ldr	r3, [r7, #12]
 8024e20:	681b      	ldr	r3, [r3, #0]
 8024e22:	681a      	ldr	r2, [r3, #0]
 8024e24:	68fb      	ldr	r3, [r7, #12]
 8024e26:	681b      	ldr	r3, [r3, #0]
 8024e28:	f022 0201 	bic.w	r2, r2, #1
 8024e2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8024e2e:	683b      	ldr	r3, [r7, #0]
 8024e30:	687a      	ldr	r2, [r7, #4]
 8024e32:	68b9      	ldr	r1, [r7, #8]
 8024e34:	68f8      	ldr	r0, [r7, #12]
 8024e36:	f000 f957 	bl	80250e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8024e3a:	68fb      	ldr	r3, [r7, #12]
 8024e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024e3e:	2b00      	cmp	r3, #0
 8024e40:	d008      	beq.n	8024e54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8024e42:	68fb      	ldr	r3, [r7, #12]
 8024e44:	681b      	ldr	r3, [r3, #0]
 8024e46:	681a      	ldr	r2, [r3, #0]
 8024e48:	68fb      	ldr	r3, [r7, #12]
 8024e4a:	681b      	ldr	r3, [r3, #0]
 8024e4c:	f042 020e 	orr.w	r2, r2, #14
 8024e50:	601a      	str	r2, [r3, #0]
 8024e52:	e00f      	b.n	8024e74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8024e54:	68fb      	ldr	r3, [r7, #12]
 8024e56:	681b      	ldr	r3, [r3, #0]
 8024e58:	681a      	ldr	r2, [r3, #0]
 8024e5a:	68fb      	ldr	r3, [r7, #12]
 8024e5c:	681b      	ldr	r3, [r3, #0]
 8024e5e:	f022 0204 	bic.w	r2, r2, #4
 8024e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8024e64:	68fb      	ldr	r3, [r7, #12]
 8024e66:	681b      	ldr	r3, [r3, #0]
 8024e68:	681a      	ldr	r2, [r3, #0]
 8024e6a:	68fb      	ldr	r3, [r7, #12]
 8024e6c:	681b      	ldr	r3, [r3, #0]
 8024e6e:	f042 020a 	orr.w	r2, r2, #10
 8024e72:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8024e74:	68fb      	ldr	r3, [r7, #12]
 8024e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024e78:	681b      	ldr	r3, [r3, #0]
 8024e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024e7e:	2b00      	cmp	r3, #0
 8024e80:	d007      	beq.n	8024e92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8024e82:	68fb      	ldr	r3, [r7, #12]
 8024e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024e86:	681a      	ldr	r2, [r3, #0]
 8024e88:	68fb      	ldr	r3, [r7, #12]
 8024e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024e90:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8024e92:	68fb      	ldr	r3, [r7, #12]
 8024e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024e96:	2b00      	cmp	r3, #0
 8024e98:	d007      	beq.n	8024eaa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8024e9a:	68fb      	ldr	r3, [r7, #12]
 8024e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024e9e:	681a      	ldr	r2, [r3, #0]
 8024ea0:	68fb      	ldr	r3, [r7, #12]
 8024ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024ea8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8024eaa:	68fb      	ldr	r3, [r7, #12]
 8024eac:	681b      	ldr	r3, [r3, #0]
 8024eae:	681a      	ldr	r2, [r3, #0]
 8024eb0:	68fb      	ldr	r3, [r7, #12]
 8024eb2:	681b      	ldr	r3, [r3, #0]
 8024eb4:	f042 0201 	orr.w	r2, r2, #1
 8024eb8:	601a      	str	r2, [r3, #0]
 8024eba:	e005      	b.n	8024ec8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8024ebc:	68fb      	ldr	r3, [r7, #12]
 8024ebe:	2200      	movs	r2, #0
 8024ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8024ec4:	2302      	movs	r3, #2
 8024ec6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8024ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8024eca:	4618      	mov	r0, r3
 8024ecc:	3718      	adds	r7, #24
 8024ece:	46bd      	mov	sp, r7
 8024ed0:	bd80      	pop	{r7, pc}

08024ed2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8024ed2:	b480      	push	{r7}
 8024ed4:	b085      	sub	sp, #20
 8024ed6:	af00      	add	r7, sp, #0
 8024ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8024eda:	2300      	movs	r3, #0
 8024edc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8024ede:	687b      	ldr	r3, [r7, #4]
 8024ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8024ee4:	b2db      	uxtb	r3, r3
 8024ee6:	2b02      	cmp	r3, #2
 8024ee8:	d008      	beq.n	8024efc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8024eea:	687b      	ldr	r3, [r7, #4]
 8024eec:	2204      	movs	r2, #4
 8024eee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8024ef0:	687b      	ldr	r3, [r7, #4]
 8024ef2:	2200      	movs	r2, #0
 8024ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8024ef8:	2301      	movs	r3, #1
 8024efa:	e040      	b.n	8024f7e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8024efc:	687b      	ldr	r3, [r7, #4]
 8024efe:	681b      	ldr	r3, [r3, #0]
 8024f00:	681a      	ldr	r2, [r3, #0]
 8024f02:	687b      	ldr	r3, [r7, #4]
 8024f04:	681b      	ldr	r3, [r3, #0]
 8024f06:	f022 020e 	bic.w	r2, r2, #14
 8024f0a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8024f0c:	687b      	ldr	r3, [r7, #4]
 8024f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024f10:	681a      	ldr	r2, [r3, #0]
 8024f12:	687b      	ldr	r3, [r7, #4]
 8024f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024f1a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8024f1c:	687b      	ldr	r3, [r7, #4]
 8024f1e:	681b      	ldr	r3, [r3, #0]
 8024f20:	681a      	ldr	r2, [r3, #0]
 8024f22:	687b      	ldr	r3, [r7, #4]
 8024f24:	681b      	ldr	r3, [r3, #0]
 8024f26:	f022 0201 	bic.w	r2, r2, #1
 8024f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8024f2c:	687b      	ldr	r3, [r7, #4]
 8024f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f30:	f003 021c 	and.w	r2, r3, #28
 8024f34:	687b      	ldr	r3, [r7, #4]
 8024f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024f38:	2101      	movs	r1, #1
 8024f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8024f3e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024f44:	687a      	ldr	r2, [r7, #4]
 8024f46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8024f48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8024f4a:	687b      	ldr	r3, [r7, #4]
 8024f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f4e:	2b00      	cmp	r3, #0
 8024f50:	d00c      	beq.n	8024f6c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8024f52:	687b      	ldr	r3, [r7, #4]
 8024f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f56:	681a      	ldr	r2, [r3, #0]
 8024f58:	687b      	ldr	r3, [r7, #4]
 8024f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024f60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8024f62:	687b      	ldr	r3, [r7, #4]
 8024f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024f66:	687a      	ldr	r2, [r7, #4]
 8024f68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8024f6a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8024f6c:	687b      	ldr	r3, [r7, #4]
 8024f6e:	2201      	movs	r2, #1
 8024f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8024f74:	687b      	ldr	r3, [r7, #4]
 8024f76:	2200      	movs	r2, #0
 8024f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8024f7c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8024f7e:	4618      	mov	r0, r3
 8024f80:	3714      	adds	r7, #20
 8024f82:	46bd      	mov	sp, r7
 8024f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f88:	4770      	bx	lr

08024f8a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8024f8a:	b580      	push	{r7, lr}
 8024f8c:	b084      	sub	sp, #16
 8024f8e:	af00      	add	r7, sp, #0
 8024f90:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8024f92:	687b      	ldr	r3, [r7, #4]
 8024f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024f96:	681b      	ldr	r3, [r3, #0]
 8024f98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8024f9a:	687b      	ldr	r3, [r7, #4]
 8024f9c:	681b      	ldr	r3, [r3, #0]
 8024f9e:	681b      	ldr	r3, [r3, #0]
 8024fa0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8024fa2:	687b      	ldr	r3, [r7, #4]
 8024fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024fa6:	f003 031c 	and.w	r3, r3, #28
 8024faa:	2204      	movs	r2, #4
 8024fac:	409a      	lsls	r2, r3
 8024fae:	68fb      	ldr	r3, [r7, #12]
 8024fb0:	4013      	ands	r3, r2
 8024fb2:	2b00      	cmp	r3, #0
 8024fb4:	d026      	beq.n	8025004 <HAL_DMA_IRQHandler+0x7a>
 8024fb6:	68bb      	ldr	r3, [r7, #8]
 8024fb8:	f003 0304 	and.w	r3, r3, #4
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	d021      	beq.n	8025004 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8024fc0:	687b      	ldr	r3, [r7, #4]
 8024fc2:	681b      	ldr	r3, [r3, #0]
 8024fc4:	681b      	ldr	r3, [r3, #0]
 8024fc6:	f003 0320 	and.w	r3, r3, #32
 8024fca:	2b00      	cmp	r3, #0
 8024fcc:	d107      	bne.n	8024fde <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8024fce:	687b      	ldr	r3, [r7, #4]
 8024fd0:	681b      	ldr	r3, [r3, #0]
 8024fd2:	681a      	ldr	r2, [r3, #0]
 8024fd4:	687b      	ldr	r3, [r7, #4]
 8024fd6:	681b      	ldr	r3, [r3, #0]
 8024fd8:	f022 0204 	bic.w	r2, r2, #4
 8024fdc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8024fde:	687b      	ldr	r3, [r7, #4]
 8024fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024fe2:	f003 021c 	and.w	r2, r3, #28
 8024fe6:	687b      	ldr	r3, [r7, #4]
 8024fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024fea:	2104      	movs	r1, #4
 8024fec:	fa01 f202 	lsl.w	r2, r1, r2
 8024ff0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8024ff2:	687b      	ldr	r3, [r7, #4]
 8024ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ff6:	2b00      	cmp	r3, #0
 8024ff8:	d071      	beq.n	80250de <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8024ffa:	687b      	ldr	r3, [r7, #4]
 8024ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ffe:	6878      	ldr	r0, [r7, #4]
 8025000:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8025002:	e06c      	b.n	80250de <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8025004:	687b      	ldr	r3, [r7, #4]
 8025006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025008:	f003 031c 	and.w	r3, r3, #28
 802500c:	2202      	movs	r2, #2
 802500e:	409a      	lsls	r2, r3
 8025010:	68fb      	ldr	r3, [r7, #12]
 8025012:	4013      	ands	r3, r2
 8025014:	2b00      	cmp	r3, #0
 8025016:	d02e      	beq.n	8025076 <HAL_DMA_IRQHandler+0xec>
 8025018:	68bb      	ldr	r3, [r7, #8]
 802501a:	f003 0302 	and.w	r3, r3, #2
 802501e:	2b00      	cmp	r3, #0
 8025020:	d029      	beq.n	8025076 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	681b      	ldr	r3, [r3, #0]
 8025026:	681b      	ldr	r3, [r3, #0]
 8025028:	f003 0320 	and.w	r3, r3, #32
 802502c:	2b00      	cmp	r3, #0
 802502e:	d10b      	bne.n	8025048 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8025030:	687b      	ldr	r3, [r7, #4]
 8025032:	681b      	ldr	r3, [r3, #0]
 8025034:	681a      	ldr	r2, [r3, #0]
 8025036:	687b      	ldr	r3, [r7, #4]
 8025038:	681b      	ldr	r3, [r3, #0]
 802503a:	f022 020a 	bic.w	r2, r2, #10
 802503e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8025040:	687b      	ldr	r3, [r7, #4]
 8025042:	2201      	movs	r2, #1
 8025044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8025048:	687b      	ldr	r3, [r7, #4]
 802504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802504c:	f003 021c 	and.w	r2, r3, #28
 8025050:	687b      	ldr	r3, [r7, #4]
 8025052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025054:	2102      	movs	r1, #2
 8025056:	fa01 f202 	lsl.w	r2, r1, r2
 802505a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802505c:	687b      	ldr	r3, [r7, #4]
 802505e:	2200      	movs	r2, #0
 8025060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8025064:	687b      	ldr	r3, [r7, #4]
 8025066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025068:	2b00      	cmp	r3, #0
 802506a:	d038      	beq.n	80250de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 802506c:	687b      	ldr	r3, [r7, #4]
 802506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025070:	6878      	ldr	r0, [r7, #4]
 8025072:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8025074:	e033      	b.n	80250de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8025076:	687b      	ldr	r3, [r7, #4]
 8025078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802507a:	f003 031c 	and.w	r3, r3, #28
 802507e:	2208      	movs	r2, #8
 8025080:	409a      	lsls	r2, r3
 8025082:	68fb      	ldr	r3, [r7, #12]
 8025084:	4013      	ands	r3, r2
 8025086:	2b00      	cmp	r3, #0
 8025088:	d02a      	beq.n	80250e0 <HAL_DMA_IRQHandler+0x156>
 802508a:	68bb      	ldr	r3, [r7, #8]
 802508c:	f003 0308 	and.w	r3, r3, #8
 8025090:	2b00      	cmp	r3, #0
 8025092:	d025      	beq.n	80250e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	681a      	ldr	r2, [r3, #0]
 802509a:	687b      	ldr	r3, [r7, #4]
 802509c:	681b      	ldr	r3, [r3, #0]
 802509e:	f022 020e 	bic.w	r2, r2, #14
 80250a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80250a4:	687b      	ldr	r3, [r7, #4]
 80250a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80250a8:	f003 021c 	and.w	r2, r3, #28
 80250ac:	687b      	ldr	r3, [r7, #4]
 80250ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80250b0:	2101      	movs	r1, #1
 80250b2:	fa01 f202 	lsl.w	r2, r1, r2
 80250b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80250b8:	687b      	ldr	r3, [r7, #4]
 80250ba:	2201      	movs	r2, #1
 80250bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80250be:	687b      	ldr	r3, [r7, #4]
 80250c0:	2201      	movs	r2, #1
 80250c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	2200      	movs	r2, #0
 80250ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80250ce:	687b      	ldr	r3, [r7, #4]
 80250d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80250d2:	2b00      	cmp	r3, #0
 80250d4:	d004      	beq.n	80250e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80250d6:	687b      	ldr	r3, [r7, #4]
 80250d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80250da:	6878      	ldr	r0, [r7, #4]
 80250dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80250de:	bf00      	nop
 80250e0:	bf00      	nop
}
 80250e2:	3710      	adds	r7, #16
 80250e4:	46bd      	mov	sp, r7
 80250e6:	bd80      	pop	{r7, pc}

080250e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80250e8:	b480      	push	{r7}
 80250ea:	b085      	sub	sp, #20
 80250ec:	af00      	add	r7, sp, #0
 80250ee:	60f8      	str	r0, [r7, #12]
 80250f0:	60b9      	str	r1, [r7, #8]
 80250f2:	607a      	str	r2, [r7, #4]
 80250f4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80250f6:	68fb      	ldr	r3, [r7, #12]
 80250f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80250fa:	68fa      	ldr	r2, [r7, #12]
 80250fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80250fe:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8025100:	68fb      	ldr	r3, [r7, #12]
 8025102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025104:	2b00      	cmp	r3, #0
 8025106:	d004      	beq.n	8025112 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8025108:	68fb      	ldr	r3, [r7, #12]
 802510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802510c:	68fa      	ldr	r2, [r7, #12]
 802510e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8025110:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8025112:	68fb      	ldr	r3, [r7, #12]
 8025114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025116:	f003 021c 	and.w	r2, r3, #28
 802511a:	68fb      	ldr	r3, [r7, #12]
 802511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802511e:	2101      	movs	r1, #1
 8025120:	fa01 f202 	lsl.w	r2, r1, r2
 8025124:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8025126:	68fb      	ldr	r3, [r7, #12]
 8025128:	681b      	ldr	r3, [r3, #0]
 802512a:	683a      	ldr	r2, [r7, #0]
 802512c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802512e:	68fb      	ldr	r3, [r7, #12]
 8025130:	689b      	ldr	r3, [r3, #8]
 8025132:	2b10      	cmp	r3, #16
 8025134:	d108      	bne.n	8025148 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8025136:	68fb      	ldr	r3, [r7, #12]
 8025138:	681b      	ldr	r3, [r3, #0]
 802513a:	687a      	ldr	r2, [r7, #4]
 802513c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 802513e:	68fb      	ldr	r3, [r7, #12]
 8025140:	681b      	ldr	r3, [r3, #0]
 8025142:	68ba      	ldr	r2, [r7, #8]
 8025144:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8025146:	e007      	b.n	8025158 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8025148:	68fb      	ldr	r3, [r7, #12]
 802514a:	681b      	ldr	r3, [r3, #0]
 802514c:	68ba      	ldr	r2, [r7, #8]
 802514e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8025150:	68fb      	ldr	r3, [r7, #12]
 8025152:	681b      	ldr	r3, [r3, #0]
 8025154:	687a      	ldr	r2, [r7, #4]
 8025156:	60da      	str	r2, [r3, #12]
}
 8025158:	bf00      	nop
 802515a:	3714      	adds	r7, #20
 802515c:	46bd      	mov	sp, r7
 802515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025162:	4770      	bx	lr

08025164 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8025164:	b480      	push	{r7}
 8025166:	b085      	sub	sp, #20
 8025168:	af00      	add	r7, sp, #0
 802516a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 802516c:	687b      	ldr	r3, [r7, #4]
 802516e:	681b      	ldr	r3, [r3, #0]
 8025170:	461a      	mov	r2, r3
 8025172:	4b17      	ldr	r3, [pc, #92]	; (80251d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8025174:	429a      	cmp	r2, r3
 8025176:	d80a      	bhi.n	802518e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8025178:	687b      	ldr	r3, [r7, #4]
 802517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802517c:	089b      	lsrs	r3, r3, #2
 802517e:	009b      	lsls	r3, r3, #2
 8025180:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025184:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8025188:	687a      	ldr	r2, [r7, #4]
 802518a:	6493      	str	r3, [r2, #72]	; 0x48
 802518c:	e007      	b.n	802519e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 802518e:	687b      	ldr	r3, [r7, #4]
 8025190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025192:	089b      	lsrs	r3, r3, #2
 8025194:	009a      	lsls	r2, r3, #2
 8025196:	4b0f      	ldr	r3, [pc, #60]	; (80251d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8025198:	4413      	add	r3, r2
 802519a:	687a      	ldr	r2, [r7, #4]
 802519c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 802519e:	687b      	ldr	r3, [r7, #4]
 80251a0:	681b      	ldr	r3, [r3, #0]
 80251a2:	b2db      	uxtb	r3, r3
 80251a4:	3b08      	subs	r3, #8
 80251a6:	4a0c      	ldr	r2, [pc, #48]	; (80251d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80251a8:	fba2 2303 	umull	r2, r3, r2, r3
 80251ac:	091b      	lsrs	r3, r3, #4
 80251ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80251b0:	687b      	ldr	r3, [r7, #4]
 80251b2:	4a0a      	ldr	r2, [pc, #40]	; (80251dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80251b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80251b6:	68fb      	ldr	r3, [r7, #12]
 80251b8:	f003 031f 	and.w	r3, r3, #31
 80251bc:	2201      	movs	r2, #1
 80251be:	409a      	lsls	r2, r3
 80251c0:	687b      	ldr	r3, [r7, #4]
 80251c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80251c4:	bf00      	nop
 80251c6:	3714      	adds	r7, #20
 80251c8:	46bd      	mov	sp, r7
 80251ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251ce:	4770      	bx	lr
 80251d0:	40020407 	.word	0x40020407
 80251d4:	4002081c 	.word	0x4002081c
 80251d8:	cccccccd 	.word	0xcccccccd
 80251dc:	40020880 	.word	0x40020880

080251e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80251e0:	b480      	push	{r7}
 80251e2:	b085      	sub	sp, #20
 80251e4:	af00      	add	r7, sp, #0
 80251e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80251e8:	687b      	ldr	r3, [r7, #4]
 80251ea:	685b      	ldr	r3, [r3, #4]
 80251ec:	b2db      	uxtb	r3, r3
 80251ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80251f0:	68fa      	ldr	r2, [r7, #12]
 80251f2:	4b0b      	ldr	r3, [pc, #44]	; (8025220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80251f4:	4413      	add	r3, r2
 80251f6:	009b      	lsls	r3, r3, #2
 80251f8:	461a      	mov	r2, r3
 80251fa:	687b      	ldr	r3, [r7, #4]
 80251fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80251fe:	687b      	ldr	r3, [r7, #4]
 8025200:	4a08      	ldr	r2, [pc, #32]	; (8025224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8025202:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8025204:	68fb      	ldr	r3, [r7, #12]
 8025206:	3b01      	subs	r3, #1
 8025208:	f003 0303 	and.w	r3, r3, #3
 802520c:	2201      	movs	r2, #1
 802520e:	409a      	lsls	r2, r3
 8025210:	687b      	ldr	r3, [r7, #4]
 8025212:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8025214:	bf00      	nop
 8025216:	3714      	adds	r7, #20
 8025218:	46bd      	mov	sp, r7
 802521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802521e:	4770      	bx	lr
 8025220:	1000823f 	.word	0x1000823f
 8025224:	40020940 	.word	0x40020940

08025228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8025228:	b480      	push	{r7}
 802522a:	b087      	sub	sp, #28
 802522c:	af00      	add	r7, sp, #0
 802522e:	6078      	str	r0, [r7, #4]
 8025230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8025232:	2300      	movs	r3, #0
 8025234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8025236:	e166      	b.n	8025506 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8025238:	683b      	ldr	r3, [r7, #0]
 802523a:	681a      	ldr	r2, [r3, #0]
 802523c:	2101      	movs	r1, #1
 802523e:	697b      	ldr	r3, [r7, #20]
 8025240:	fa01 f303 	lsl.w	r3, r1, r3
 8025244:	4013      	ands	r3, r2
 8025246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8025248:	68fb      	ldr	r3, [r7, #12]
 802524a:	2b00      	cmp	r3, #0
 802524c:	f000 8158 	beq.w	8025500 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8025250:	683b      	ldr	r3, [r7, #0]
 8025252:	685b      	ldr	r3, [r3, #4]
 8025254:	f003 0303 	and.w	r3, r3, #3
 8025258:	2b01      	cmp	r3, #1
 802525a:	d005      	beq.n	8025268 <HAL_GPIO_Init+0x40>
 802525c:	683b      	ldr	r3, [r7, #0]
 802525e:	685b      	ldr	r3, [r3, #4]
 8025260:	f003 0303 	and.w	r3, r3, #3
 8025264:	2b02      	cmp	r3, #2
 8025266:	d130      	bne.n	80252ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8025268:	687b      	ldr	r3, [r7, #4]
 802526a:	689b      	ldr	r3, [r3, #8]
 802526c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 802526e:	697b      	ldr	r3, [r7, #20]
 8025270:	005b      	lsls	r3, r3, #1
 8025272:	2203      	movs	r2, #3
 8025274:	fa02 f303 	lsl.w	r3, r2, r3
 8025278:	43db      	mvns	r3, r3
 802527a:	693a      	ldr	r2, [r7, #16]
 802527c:	4013      	ands	r3, r2
 802527e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8025280:	683b      	ldr	r3, [r7, #0]
 8025282:	68da      	ldr	r2, [r3, #12]
 8025284:	697b      	ldr	r3, [r7, #20]
 8025286:	005b      	lsls	r3, r3, #1
 8025288:	fa02 f303 	lsl.w	r3, r2, r3
 802528c:	693a      	ldr	r2, [r7, #16]
 802528e:	4313      	orrs	r3, r2
 8025290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8025292:	687b      	ldr	r3, [r7, #4]
 8025294:	693a      	ldr	r2, [r7, #16]
 8025296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8025298:	687b      	ldr	r3, [r7, #4]
 802529a:	685b      	ldr	r3, [r3, #4]
 802529c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802529e:	2201      	movs	r2, #1
 80252a0:	697b      	ldr	r3, [r7, #20]
 80252a2:	fa02 f303 	lsl.w	r3, r2, r3
 80252a6:	43db      	mvns	r3, r3
 80252a8:	693a      	ldr	r2, [r7, #16]
 80252aa:	4013      	ands	r3, r2
 80252ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80252ae:	683b      	ldr	r3, [r7, #0]
 80252b0:	685b      	ldr	r3, [r3, #4]
 80252b2:	091b      	lsrs	r3, r3, #4
 80252b4:	f003 0201 	and.w	r2, r3, #1
 80252b8:	697b      	ldr	r3, [r7, #20]
 80252ba:	fa02 f303 	lsl.w	r3, r2, r3
 80252be:	693a      	ldr	r2, [r7, #16]
 80252c0:	4313      	orrs	r3, r2
 80252c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80252c4:	687b      	ldr	r3, [r7, #4]
 80252c6:	693a      	ldr	r2, [r7, #16]
 80252c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80252ca:	683b      	ldr	r3, [r7, #0]
 80252cc:	685b      	ldr	r3, [r3, #4]
 80252ce:	f003 0303 	and.w	r3, r3, #3
 80252d2:	2b03      	cmp	r3, #3
 80252d4:	d017      	beq.n	8025306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80252d6:	687b      	ldr	r3, [r7, #4]
 80252d8:	68db      	ldr	r3, [r3, #12]
 80252da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80252dc:	697b      	ldr	r3, [r7, #20]
 80252de:	005b      	lsls	r3, r3, #1
 80252e0:	2203      	movs	r2, #3
 80252e2:	fa02 f303 	lsl.w	r3, r2, r3
 80252e6:	43db      	mvns	r3, r3
 80252e8:	693a      	ldr	r2, [r7, #16]
 80252ea:	4013      	ands	r3, r2
 80252ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80252ee:	683b      	ldr	r3, [r7, #0]
 80252f0:	689a      	ldr	r2, [r3, #8]
 80252f2:	697b      	ldr	r3, [r7, #20]
 80252f4:	005b      	lsls	r3, r3, #1
 80252f6:	fa02 f303 	lsl.w	r3, r2, r3
 80252fa:	693a      	ldr	r2, [r7, #16]
 80252fc:	4313      	orrs	r3, r2
 80252fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8025300:	687b      	ldr	r3, [r7, #4]
 8025302:	693a      	ldr	r2, [r7, #16]
 8025304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8025306:	683b      	ldr	r3, [r7, #0]
 8025308:	685b      	ldr	r3, [r3, #4]
 802530a:	f003 0303 	and.w	r3, r3, #3
 802530e:	2b02      	cmp	r3, #2
 8025310:	d123      	bne.n	802535a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8025312:	697b      	ldr	r3, [r7, #20]
 8025314:	08da      	lsrs	r2, r3, #3
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	3208      	adds	r2, #8
 802531a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802531e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8025320:	697b      	ldr	r3, [r7, #20]
 8025322:	f003 0307 	and.w	r3, r3, #7
 8025326:	009b      	lsls	r3, r3, #2
 8025328:	220f      	movs	r2, #15
 802532a:	fa02 f303 	lsl.w	r3, r2, r3
 802532e:	43db      	mvns	r3, r3
 8025330:	693a      	ldr	r2, [r7, #16]
 8025332:	4013      	ands	r3, r2
 8025334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8025336:	683b      	ldr	r3, [r7, #0]
 8025338:	691a      	ldr	r2, [r3, #16]
 802533a:	697b      	ldr	r3, [r7, #20]
 802533c:	f003 0307 	and.w	r3, r3, #7
 8025340:	009b      	lsls	r3, r3, #2
 8025342:	fa02 f303 	lsl.w	r3, r2, r3
 8025346:	693a      	ldr	r2, [r7, #16]
 8025348:	4313      	orrs	r3, r2
 802534a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 802534c:	697b      	ldr	r3, [r7, #20]
 802534e:	08da      	lsrs	r2, r3, #3
 8025350:	687b      	ldr	r3, [r7, #4]
 8025352:	3208      	adds	r2, #8
 8025354:	6939      	ldr	r1, [r7, #16]
 8025356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802535a:	687b      	ldr	r3, [r7, #4]
 802535c:	681b      	ldr	r3, [r3, #0]
 802535e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8025360:	697b      	ldr	r3, [r7, #20]
 8025362:	005b      	lsls	r3, r3, #1
 8025364:	2203      	movs	r2, #3
 8025366:	fa02 f303 	lsl.w	r3, r2, r3
 802536a:	43db      	mvns	r3, r3
 802536c:	693a      	ldr	r2, [r7, #16]
 802536e:	4013      	ands	r3, r2
 8025370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8025372:	683b      	ldr	r3, [r7, #0]
 8025374:	685b      	ldr	r3, [r3, #4]
 8025376:	f003 0203 	and.w	r2, r3, #3
 802537a:	697b      	ldr	r3, [r7, #20]
 802537c:	005b      	lsls	r3, r3, #1
 802537e:	fa02 f303 	lsl.w	r3, r2, r3
 8025382:	693a      	ldr	r2, [r7, #16]
 8025384:	4313      	orrs	r3, r2
 8025386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8025388:	687b      	ldr	r3, [r7, #4]
 802538a:	693a      	ldr	r2, [r7, #16]
 802538c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 802538e:	683b      	ldr	r3, [r7, #0]
 8025390:	685b      	ldr	r3, [r3, #4]
 8025392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8025396:	2b00      	cmp	r3, #0
 8025398:	f000 80b2 	beq.w	8025500 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802539c:	4b61      	ldr	r3, [pc, #388]	; (8025524 <HAL_GPIO_Init+0x2fc>)
 802539e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80253a0:	4a60      	ldr	r2, [pc, #384]	; (8025524 <HAL_GPIO_Init+0x2fc>)
 80253a2:	f043 0301 	orr.w	r3, r3, #1
 80253a6:	6613      	str	r3, [r2, #96]	; 0x60
 80253a8:	4b5e      	ldr	r3, [pc, #376]	; (8025524 <HAL_GPIO_Init+0x2fc>)
 80253aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80253ac:	f003 0301 	and.w	r3, r3, #1
 80253b0:	60bb      	str	r3, [r7, #8]
 80253b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80253b4:	4a5c      	ldr	r2, [pc, #368]	; (8025528 <HAL_GPIO_Init+0x300>)
 80253b6:	697b      	ldr	r3, [r7, #20]
 80253b8:	089b      	lsrs	r3, r3, #2
 80253ba:	3302      	adds	r3, #2
 80253bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80253c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80253c2:	697b      	ldr	r3, [r7, #20]
 80253c4:	f003 0303 	and.w	r3, r3, #3
 80253c8:	009b      	lsls	r3, r3, #2
 80253ca:	220f      	movs	r2, #15
 80253cc:	fa02 f303 	lsl.w	r3, r2, r3
 80253d0:	43db      	mvns	r3, r3
 80253d2:	693a      	ldr	r2, [r7, #16]
 80253d4:	4013      	ands	r3, r2
 80253d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80253de:	d02b      	beq.n	8025438 <HAL_GPIO_Init+0x210>
 80253e0:	687b      	ldr	r3, [r7, #4]
 80253e2:	4a52      	ldr	r2, [pc, #328]	; (802552c <HAL_GPIO_Init+0x304>)
 80253e4:	4293      	cmp	r3, r2
 80253e6:	d025      	beq.n	8025434 <HAL_GPIO_Init+0x20c>
 80253e8:	687b      	ldr	r3, [r7, #4]
 80253ea:	4a51      	ldr	r2, [pc, #324]	; (8025530 <HAL_GPIO_Init+0x308>)
 80253ec:	4293      	cmp	r3, r2
 80253ee:	d01f      	beq.n	8025430 <HAL_GPIO_Init+0x208>
 80253f0:	687b      	ldr	r3, [r7, #4]
 80253f2:	4a50      	ldr	r2, [pc, #320]	; (8025534 <HAL_GPIO_Init+0x30c>)
 80253f4:	4293      	cmp	r3, r2
 80253f6:	d019      	beq.n	802542c <HAL_GPIO_Init+0x204>
 80253f8:	687b      	ldr	r3, [r7, #4]
 80253fa:	4a4f      	ldr	r2, [pc, #316]	; (8025538 <HAL_GPIO_Init+0x310>)
 80253fc:	4293      	cmp	r3, r2
 80253fe:	d013      	beq.n	8025428 <HAL_GPIO_Init+0x200>
 8025400:	687b      	ldr	r3, [r7, #4]
 8025402:	4a4e      	ldr	r2, [pc, #312]	; (802553c <HAL_GPIO_Init+0x314>)
 8025404:	4293      	cmp	r3, r2
 8025406:	d00d      	beq.n	8025424 <HAL_GPIO_Init+0x1fc>
 8025408:	687b      	ldr	r3, [r7, #4]
 802540a:	4a4d      	ldr	r2, [pc, #308]	; (8025540 <HAL_GPIO_Init+0x318>)
 802540c:	4293      	cmp	r3, r2
 802540e:	d007      	beq.n	8025420 <HAL_GPIO_Init+0x1f8>
 8025410:	687b      	ldr	r3, [r7, #4]
 8025412:	4a4c      	ldr	r2, [pc, #304]	; (8025544 <HAL_GPIO_Init+0x31c>)
 8025414:	4293      	cmp	r3, r2
 8025416:	d101      	bne.n	802541c <HAL_GPIO_Init+0x1f4>
 8025418:	2307      	movs	r3, #7
 802541a:	e00e      	b.n	802543a <HAL_GPIO_Init+0x212>
 802541c:	2308      	movs	r3, #8
 802541e:	e00c      	b.n	802543a <HAL_GPIO_Init+0x212>
 8025420:	2306      	movs	r3, #6
 8025422:	e00a      	b.n	802543a <HAL_GPIO_Init+0x212>
 8025424:	2305      	movs	r3, #5
 8025426:	e008      	b.n	802543a <HAL_GPIO_Init+0x212>
 8025428:	2304      	movs	r3, #4
 802542a:	e006      	b.n	802543a <HAL_GPIO_Init+0x212>
 802542c:	2303      	movs	r3, #3
 802542e:	e004      	b.n	802543a <HAL_GPIO_Init+0x212>
 8025430:	2302      	movs	r3, #2
 8025432:	e002      	b.n	802543a <HAL_GPIO_Init+0x212>
 8025434:	2301      	movs	r3, #1
 8025436:	e000      	b.n	802543a <HAL_GPIO_Init+0x212>
 8025438:	2300      	movs	r3, #0
 802543a:	697a      	ldr	r2, [r7, #20]
 802543c:	f002 0203 	and.w	r2, r2, #3
 8025440:	0092      	lsls	r2, r2, #2
 8025442:	4093      	lsls	r3, r2
 8025444:	693a      	ldr	r2, [r7, #16]
 8025446:	4313      	orrs	r3, r2
 8025448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 802544a:	4937      	ldr	r1, [pc, #220]	; (8025528 <HAL_GPIO_Init+0x300>)
 802544c:	697b      	ldr	r3, [r7, #20]
 802544e:	089b      	lsrs	r3, r3, #2
 8025450:	3302      	adds	r3, #2
 8025452:	693a      	ldr	r2, [r7, #16]
 8025454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8025458:	4b3b      	ldr	r3, [pc, #236]	; (8025548 <HAL_GPIO_Init+0x320>)
 802545a:	689b      	ldr	r3, [r3, #8]
 802545c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 802545e:	68fb      	ldr	r3, [r7, #12]
 8025460:	43db      	mvns	r3, r3
 8025462:	693a      	ldr	r2, [r7, #16]
 8025464:	4013      	ands	r3, r2
 8025466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8025468:	683b      	ldr	r3, [r7, #0]
 802546a:	685b      	ldr	r3, [r3, #4]
 802546c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025470:	2b00      	cmp	r3, #0
 8025472:	d003      	beq.n	802547c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8025474:	693a      	ldr	r2, [r7, #16]
 8025476:	68fb      	ldr	r3, [r7, #12]
 8025478:	4313      	orrs	r3, r2
 802547a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 802547c:	4a32      	ldr	r2, [pc, #200]	; (8025548 <HAL_GPIO_Init+0x320>)
 802547e:	693b      	ldr	r3, [r7, #16]
 8025480:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8025482:	4b31      	ldr	r3, [pc, #196]	; (8025548 <HAL_GPIO_Init+0x320>)
 8025484:	68db      	ldr	r3, [r3, #12]
 8025486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8025488:	68fb      	ldr	r3, [r7, #12]
 802548a:	43db      	mvns	r3, r3
 802548c:	693a      	ldr	r2, [r7, #16]
 802548e:	4013      	ands	r3, r2
 8025490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8025492:	683b      	ldr	r3, [r7, #0]
 8025494:	685b      	ldr	r3, [r3, #4]
 8025496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802549a:	2b00      	cmp	r3, #0
 802549c:	d003      	beq.n	80254a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 802549e:	693a      	ldr	r2, [r7, #16]
 80254a0:	68fb      	ldr	r3, [r7, #12]
 80254a2:	4313      	orrs	r3, r2
 80254a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80254a6:	4a28      	ldr	r2, [pc, #160]	; (8025548 <HAL_GPIO_Init+0x320>)
 80254a8:	693b      	ldr	r3, [r7, #16]
 80254aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80254ac:	4b26      	ldr	r3, [pc, #152]	; (8025548 <HAL_GPIO_Init+0x320>)
 80254ae:	685b      	ldr	r3, [r3, #4]
 80254b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80254b2:	68fb      	ldr	r3, [r7, #12]
 80254b4:	43db      	mvns	r3, r3
 80254b6:	693a      	ldr	r2, [r7, #16]
 80254b8:	4013      	ands	r3, r2
 80254ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80254bc:	683b      	ldr	r3, [r7, #0]
 80254be:	685b      	ldr	r3, [r3, #4]
 80254c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80254c4:	2b00      	cmp	r3, #0
 80254c6:	d003      	beq.n	80254d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80254c8:	693a      	ldr	r2, [r7, #16]
 80254ca:	68fb      	ldr	r3, [r7, #12]
 80254cc:	4313      	orrs	r3, r2
 80254ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80254d0:	4a1d      	ldr	r2, [pc, #116]	; (8025548 <HAL_GPIO_Init+0x320>)
 80254d2:	693b      	ldr	r3, [r7, #16]
 80254d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80254d6:	4b1c      	ldr	r3, [pc, #112]	; (8025548 <HAL_GPIO_Init+0x320>)
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80254dc:	68fb      	ldr	r3, [r7, #12]
 80254de:	43db      	mvns	r3, r3
 80254e0:	693a      	ldr	r2, [r7, #16]
 80254e2:	4013      	ands	r3, r2
 80254e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80254e6:	683b      	ldr	r3, [r7, #0]
 80254e8:	685b      	ldr	r3, [r3, #4]
 80254ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80254ee:	2b00      	cmp	r3, #0
 80254f0:	d003      	beq.n	80254fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80254f2:	693a      	ldr	r2, [r7, #16]
 80254f4:	68fb      	ldr	r3, [r7, #12]
 80254f6:	4313      	orrs	r3, r2
 80254f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80254fa:	4a13      	ldr	r2, [pc, #76]	; (8025548 <HAL_GPIO_Init+0x320>)
 80254fc:	693b      	ldr	r3, [r7, #16]
 80254fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8025500:	697b      	ldr	r3, [r7, #20]
 8025502:	3301      	adds	r3, #1
 8025504:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8025506:	683b      	ldr	r3, [r7, #0]
 8025508:	681a      	ldr	r2, [r3, #0]
 802550a:	697b      	ldr	r3, [r7, #20]
 802550c:	fa22 f303 	lsr.w	r3, r2, r3
 8025510:	2b00      	cmp	r3, #0
 8025512:	f47f ae91 	bne.w	8025238 <HAL_GPIO_Init+0x10>
  }
}
 8025516:	bf00      	nop
 8025518:	bf00      	nop
 802551a:	371c      	adds	r7, #28
 802551c:	46bd      	mov	sp, r7
 802551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025522:	4770      	bx	lr
 8025524:	40021000 	.word	0x40021000
 8025528:	40010000 	.word	0x40010000
 802552c:	48000400 	.word	0x48000400
 8025530:	48000800 	.word	0x48000800
 8025534:	48000c00 	.word	0x48000c00
 8025538:	48001000 	.word	0x48001000
 802553c:	48001400 	.word	0x48001400
 8025540:	48001800 	.word	0x48001800
 8025544:	48001c00 	.word	0x48001c00
 8025548:	40010400 	.word	0x40010400

0802554c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 802554c:	b480      	push	{r7}
 802554e:	b087      	sub	sp, #28
 8025550:	af00      	add	r7, sp, #0
 8025552:	6078      	str	r0, [r7, #4]
 8025554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8025556:	2300      	movs	r3, #0
 8025558:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 802555a:	e0c9      	b.n	80256f0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 802555c:	2201      	movs	r2, #1
 802555e:	697b      	ldr	r3, [r7, #20]
 8025560:	fa02 f303 	lsl.w	r3, r2, r3
 8025564:	683a      	ldr	r2, [r7, #0]
 8025566:	4013      	ands	r3, r2
 8025568:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 802556a:	693b      	ldr	r3, [r7, #16]
 802556c:	2b00      	cmp	r3, #0
 802556e:	f000 80bc 	beq.w	80256ea <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8025572:	4a66      	ldr	r2, [pc, #408]	; (802570c <HAL_GPIO_DeInit+0x1c0>)
 8025574:	697b      	ldr	r3, [r7, #20]
 8025576:	089b      	lsrs	r3, r3, #2
 8025578:	3302      	adds	r3, #2
 802557a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802557e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8025580:	697b      	ldr	r3, [r7, #20]
 8025582:	f003 0303 	and.w	r3, r3, #3
 8025586:	009b      	lsls	r3, r3, #2
 8025588:	220f      	movs	r2, #15
 802558a:	fa02 f303 	lsl.w	r3, r2, r3
 802558e:	68fa      	ldr	r2, [r7, #12]
 8025590:	4013      	ands	r3, r2
 8025592:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8025594:	687b      	ldr	r3, [r7, #4]
 8025596:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 802559a:	d02b      	beq.n	80255f4 <HAL_GPIO_DeInit+0xa8>
 802559c:	687b      	ldr	r3, [r7, #4]
 802559e:	4a5c      	ldr	r2, [pc, #368]	; (8025710 <HAL_GPIO_DeInit+0x1c4>)
 80255a0:	4293      	cmp	r3, r2
 80255a2:	d025      	beq.n	80255f0 <HAL_GPIO_DeInit+0xa4>
 80255a4:	687b      	ldr	r3, [r7, #4]
 80255a6:	4a5b      	ldr	r2, [pc, #364]	; (8025714 <HAL_GPIO_DeInit+0x1c8>)
 80255a8:	4293      	cmp	r3, r2
 80255aa:	d01f      	beq.n	80255ec <HAL_GPIO_DeInit+0xa0>
 80255ac:	687b      	ldr	r3, [r7, #4]
 80255ae:	4a5a      	ldr	r2, [pc, #360]	; (8025718 <HAL_GPIO_DeInit+0x1cc>)
 80255b0:	4293      	cmp	r3, r2
 80255b2:	d019      	beq.n	80255e8 <HAL_GPIO_DeInit+0x9c>
 80255b4:	687b      	ldr	r3, [r7, #4]
 80255b6:	4a59      	ldr	r2, [pc, #356]	; (802571c <HAL_GPIO_DeInit+0x1d0>)
 80255b8:	4293      	cmp	r3, r2
 80255ba:	d013      	beq.n	80255e4 <HAL_GPIO_DeInit+0x98>
 80255bc:	687b      	ldr	r3, [r7, #4]
 80255be:	4a58      	ldr	r2, [pc, #352]	; (8025720 <HAL_GPIO_DeInit+0x1d4>)
 80255c0:	4293      	cmp	r3, r2
 80255c2:	d00d      	beq.n	80255e0 <HAL_GPIO_DeInit+0x94>
 80255c4:	687b      	ldr	r3, [r7, #4]
 80255c6:	4a57      	ldr	r2, [pc, #348]	; (8025724 <HAL_GPIO_DeInit+0x1d8>)
 80255c8:	4293      	cmp	r3, r2
 80255ca:	d007      	beq.n	80255dc <HAL_GPIO_DeInit+0x90>
 80255cc:	687b      	ldr	r3, [r7, #4]
 80255ce:	4a56      	ldr	r2, [pc, #344]	; (8025728 <HAL_GPIO_DeInit+0x1dc>)
 80255d0:	4293      	cmp	r3, r2
 80255d2:	d101      	bne.n	80255d8 <HAL_GPIO_DeInit+0x8c>
 80255d4:	2307      	movs	r3, #7
 80255d6:	e00e      	b.n	80255f6 <HAL_GPIO_DeInit+0xaa>
 80255d8:	2308      	movs	r3, #8
 80255da:	e00c      	b.n	80255f6 <HAL_GPIO_DeInit+0xaa>
 80255dc:	2306      	movs	r3, #6
 80255de:	e00a      	b.n	80255f6 <HAL_GPIO_DeInit+0xaa>
 80255e0:	2305      	movs	r3, #5
 80255e2:	e008      	b.n	80255f6 <HAL_GPIO_DeInit+0xaa>
 80255e4:	2304      	movs	r3, #4
 80255e6:	e006      	b.n	80255f6 <HAL_GPIO_DeInit+0xaa>
 80255e8:	2303      	movs	r3, #3
 80255ea:	e004      	b.n	80255f6 <HAL_GPIO_DeInit+0xaa>
 80255ec:	2302      	movs	r3, #2
 80255ee:	e002      	b.n	80255f6 <HAL_GPIO_DeInit+0xaa>
 80255f0:	2301      	movs	r3, #1
 80255f2:	e000      	b.n	80255f6 <HAL_GPIO_DeInit+0xaa>
 80255f4:	2300      	movs	r3, #0
 80255f6:	697a      	ldr	r2, [r7, #20]
 80255f8:	f002 0203 	and.w	r2, r2, #3
 80255fc:	0092      	lsls	r2, r2, #2
 80255fe:	4093      	lsls	r3, r2
 8025600:	68fa      	ldr	r2, [r7, #12]
 8025602:	429a      	cmp	r2, r3
 8025604:	d132      	bne.n	802566c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8025606:	4b49      	ldr	r3, [pc, #292]	; (802572c <HAL_GPIO_DeInit+0x1e0>)
 8025608:	681a      	ldr	r2, [r3, #0]
 802560a:	693b      	ldr	r3, [r7, #16]
 802560c:	43db      	mvns	r3, r3
 802560e:	4947      	ldr	r1, [pc, #284]	; (802572c <HAL_GPIO_DeInit+0x1e0>)
 8025610:	4013      	ands	r3, r2
 8025612:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8025614:	4b45      	ldr	r3, [pc, #276]	; (802572c <HAL_GPIO_DeInit+0x1e0>)
 8025616:	685a      	ldr	r2, [r3, #4]
 8025618:	693b      	ldr	r3, [r7, #16]
 802561a:	43db      	mvns	r3, r3
 802561c:	4943      	ldr	r1, [pc, #268]	; (802572c <HAL_GPIO_DeInit+0x1e0>)
 802561e:	4013      	ands	r3, r2
 8025620:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8025622:	4b42      	ldr	r3, [pc, #264]	; (802572c <HAL_GPIO_DeInit+0x1e0>)
 8025624:	68da      	ldr	r2, [r3, #12]
 8025626:	693b      	ldr	r3, [r7, #16]
 8025628:	43db      	mvns	r3, r3
 802562a:	4940      	ldr	r1, [pc, #256]	; (802572c <HAL_GPIO_DeInit+0x1e0>)
 802562c:	4013      	ands	r3, r2
 802562e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8025630:	4b3e      	ldr	r3, [pc, #248]	; (802572c <HAL_GPIO_DeInit+0x1e0>)
 8025632:	689a      	ldr	r2, [r3, #8]
 8025634:	693b      	ldr	r3, [r7, #16]
 8025636:	43db      	mvns	r3, r3
 8025638:	493c      	ldr	r1, [pc, #240]	; (802572c <HAL_GPIO_DeInit+0x1e0>)
 802563a:	4013      	ands	r3, r2
 802563c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 802563e:	697b      	ldr	r3, [r7, #20]
 8025640:	f003 0303 	and.w	r3, r3, #3
 8025644:	009b      	lsls	r3, r3, #2
 8025646:	220f      	movs	r2, #15
 8025648:	fa02 f303 	lsl.w	r3, r2, r3
 802564c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 802564e:	4a2f      	ldr	r2, [pc, #188]	; (802570c <HAL_GPIO_DeInit+0x1c0>)
 8025650:	697b      	ldr	r3, [r7, #20]
 8025652:	089b      	lsrs	r3, r3, #2
 8025654:	3302      	adds	r3, #2
 8025656:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802565a:	68fb      	ldr	r3, [r7, #12]
 802565c:	43da      	mvns	r2, r3
 802565e:	482b      	ldr	r0, [pc, #172]	; (802570c <HAL_GPIO_DeInit+0x1c0>)
 8025660:	697b      	ldr	r3, [r7, #20]
 8025662:	089b      	lsrs	r3, r3, #2
 8025664:	400a      	ands	r2, r1
 8025666:	3302      	adds	r3, #2
 8025668:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 802566c:	687b      	ldr	r3, [r7, #4]
 802566e:	681a      	ldr	r2, [r3, #0]
 8025670:	697b      	ldr	r3, [r7, #20]
 8025672:	005b      	lsls	r3, r3, #1
 8025674:	2103      	movs	r1, #3
 8025676:	fa01 f303 	lsl.w	r3, r1, r3
 802567a:	431a      	orrs	r2, r3
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8025680:	697b      	ldr	r3, [r7, #20]
 8025682:	08da      	lsrs	r2, r3, #3
 8025684:	687b      	ldr	r3, [r7, #4]
 8025686:	3208      	adds	r2, #8
 8025688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802568c:	697b      	ldr	r3, [r7, #20]
 802568e:	f003 0307 	and.w	r3, r3, #7
 8025692:	009b      	lsls	r3, r3, #2
 8025694:	220f      	movs	r2, #15
 8025696:	fa02 f303 	lsl.w	r3, r2, r3
 802569a:	43db      	mvns	r3, r3
 802569c:	697a      	ldr	r2, [r7, #20]
 802569e:	08d2      	lsrs	r2, r2, #3
 80256a0:	4019      	ands	r1, r3
 80256a2:	687b      	ldr	r3, [r7, #4]
 80256a4:	3208      	adds	r2, #8
 80256a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80256aa:	687b      	ldr	r3, [r7, #4]
 80256ac:	689a      	ldr	r2, [r3, #8]
 80256ae:	697b      	ldr	r3, [r7, #20]
 80256b0:	005b      	lsls	r3, r3, #1
 80256b2:	2103      	movs	r1, #3
 80256b4:	fa01 f303 	lsl.w	r3, r1, r3
 80256b8:	43db      	mvns	r3, r3
 80256ba:	401a      	ands	r2, r3
 80256bc:	687b      	ldr	r3, [r7, #4]
 80256be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80256c0:	687b      	ldr	r3, [r7, #4]
 80256c2:	685a      	ldr	r2, [r3, #4]
 80256c4:	2101      	movs	r1, #1
 80256c6:	697b      	ldr	r3, [r7, #20]
 80256c8:	fa01 f303 	lsl.w	r3, r1, r3
 80256cc:	43db      	mvns	r3, r3
 80256ce:	401a      	ands	r2, r3
 80256d0:	687b      	ldr	r3, [r7, #4]
 80256d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80256d4:	687b      	ldr	r3, [r7, #4]
 80256d6:	68da      	ldr	r2, [r3, #12]
 80256d8:	697b      	ldr	r3, [r7, #20]
 80256da:	005b      	lsls	r3, r3, #1
 80256dc:	2103      	movs	r1, #3
 80256de:	fa01 f303 	lsl.w	r3, r1, r3
 80256e2:	43db      	mvns	r3, r3
 80256e4:	401a      	ands	r2, r3
 80256e6:	687b      	ldr	r3, [r7, #4]
 80256e8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80256ea:	697b      	ldr	r3, [r7, #20]
 80256ec:	3301      	adds	r3, #1
 80256ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80256f0:	683a      	ldr	r2, [r7, #0]
 80256f2:	697b      	ldr	r3, [r7, #20]
 80256f4:	fa22 f303 	lsr.w	r3, r2, r3
 80256f8:	2b00      	cmp	r3, #0
 80256fa:	f47f af2f 	bne.w	802555c <HAL_GPIO_DeInit+0x10>
  }
}
 80256fe:	bf00      	nop
 8025700:	bf00      	nop
 8025702:	371c      	adds	r7, #28
 8025704:	46bd      	mov	sp, r7
 8025706:	f85d 7b04 	ldr.w	r7, [sp], #4
 802570a:	4770      	bx	lr
 802570c:	40010000 	.word	0x40010000
 8025710:	48000400 	.word	0x48000400
 8025714:	48000800 	.word	0x48000800
 8025718:	48000c00 	.word	0x48000c00
 802571c:	48001000 	.word	0x48001000
 8025720:	48001400 	.word	0x48001400
 8025724:	48001800 	.word	0x48001800
 8025728:	48001c00 	.word	0x48001c00
 802572c:	40010400 	.word	0x40010400

08025730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8025730:	b580      	push	{r7, lr}
 8025732:	b082      	sub	sp, #8
 8025734:	af00      	add	r7, sp, #0
 8025736:	4603      	mov	r3, r0
 8025738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 802573a:	4b08      	ldr	r3, [pc, #32]	; (802575c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 802573c:	695a      	ldr	r2, [r3, #20]
 802573e:	88fb      	ldrh	r3, [r7, #6]
 8025740:	4013      	ands	r3, r2
 8025742:	2b00      	cmp	r3, #0
 8025744:	d006      	beq.n	8025754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8025746:	4a05      	ldr	r2, [pc, #20]	; (802575c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8025748:	88fb      	ldrh	r3, [r7, #6]
 802574a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 802574c:	88fb      	ldrh	r3, [r7, #6]
 802574e:	4618      	mov	r0, r3
 8025750:	f7fc fbbe 	bl	8021ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 8025754:	bf00      	nop
 8025756:	3708      	adds	r7, #8
 8025758:	46bd      	mov	sp, r7
 802575a:	bd80      	pop	{r7, pc}
 802575c:	40010400 	.word	0x40010400

08025760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025760:	b580      	push	{r7, lr}
 8025762:	b082      	sub	sp, #8
 8025764:	af00      	add	r7, sp, #0
 8025766:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025768:	687b      	ldr	r3, [r7, #4]
 802576a:	2b00      	cmp	r3, #0
 802576c:	d101      	bne.n	8025772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802576e:	2301      	movs	r3, #1
 8025770:	e081      	b.n	8025876 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8025772:	687b      	ldr	r3, [r7, #4]
 8025774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025778:	b2db      	uxtb	r3, r3
 802577a:	2b00      	cmp	r3, #0
 802577c:	d106      	bne.n	802578c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802577e:	687b      	ldr	r3, [r7, #4]
 8025780:	2200      	movs	r2, #0
 8025782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8025786:	6878      	ldr	r0, [r7, #4]
 8025788:	f7fd ffea 	bl	8023760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802578c:	687b      	ldr	r3, [r7, #4]
 802578e:	2224      	movs	r2, #36	; 0x24
 8025790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8025794:	687b      	ldr	r3, [r7, #4]
 8025796:	681b      	ldr	r3, [r3, #0]
 8025798:	681a      	ldr	r2, [r3, #0]
 802579a:	687b      	ldr	r3, [r7, #4]
 802579c:	681b      	ldr	r3, [r3, #0]
 802579e:	f022 0201 	bic.w	r2, r2, #1
 80257a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80257a4:	687b      	ldr	r3, [r7, #4]
 80257a6:	685a      	ldr	r2, [r3, #4]
 80257a8:	687b      	ldr	r3, [r7, #4]
 80257aa:	681b      	ldr	r3, [r3, #0]
 80257ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80257b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80257b2:	687b      	ldr	r3, [r7, #4]
 80257b4:	681b      	ldr	r3, [r3, #0]
 80257b6:	689a      	ldr	r2, [r3, #8]
 80257b8:	687b      	ldr	r3, [r7, #4]
 80257ba:	681b      	ldr	r3, [r3, #0]
 80257bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80257c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80257c2:	687b      	ldr	r3, [r7, #4]
 80257c4:	68db      	ldr	r3, [r3, #12]
 80257c6:	2b01      	cmp	r3, #1
 80257c8:	d107      	bne.n	80257da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80257ca:	687b      	ldr	r3, [r7, #4]
 80257cc:	689a      	ldr	r2, [r3, #8]
 80257ce:	687b      	ldr	r3, [r7, #4]
 80257d0:	681b      	ldr	r3, [r3, #0]
 80257d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80257d6:	609a      	str	r2, [r3, #8]
 80257d8:	e006      	b.n	80257e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	689a      	ldr	r2, [r3, #8]
 80257de:	687b      	ldr	r3, [r7, #4]
 80257e0:	681b      	ldr	r3, [r3, #0]
 80257e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80257e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80257e8:	687b      	ldr	r3, [r7, #4]
 80257ea:	68db      	ldr	r3, [r3, #12]
 80257ec:	2b02      	cmp	r3, #2
 80257ee:	d104      	bne.n	80257fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80257f0:	687b      	ldr	r3, [r7, #4]
 80257f2:	681b      	ldr	r3, [r3, #0]
 80257f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80257f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80257fa:	687b      	ldr	r3, [r7, #4]
 80257fc:	681b      	ldr	r3, [r3, #0]
 80257fe:	685b      	ldr	r3, [r3, #4]
 8025800:	687a      	ldr	r2, [r7, #4]
 8025802:	6812      	ldr	r2, [r2, #0]
 8025804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8025808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802580c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802580e:	687b      	ldr	r3, [r7, #4]
 8025810:	681b      	ldr	r3, [r3, #0]
 8025812:	68da      	ldr	r2, [r3, #12]
 8025814:	687b      	ldr	r3, [r7, #4]
 8025816:	681b      	ldr	r3, [r3, #0]
 8025818:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802581c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802581e:	687b      	ldr	r3, [r7, #4]
 8025820:	691a      	ldr	r2, [r3, #16]
 8025822:	687b      	ldr	r3, [r7, #4]
 8025824:	695b      	ldr	r3, [r3, #20]
 8025826:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 802582a:	687b      	ldr	r3, [r7, #4]
 802582c:	699b      	ldr	r3, [r3, #24]
 802582e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8025830:	687b      	ldr	r3, [r7, #4]
 8025832:	681b      	ldr	r3, [r3, #0]
 8025834:	430a      	orrs	r2, r1
 8025836:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8025838:	687b      	ldr	r3, [r7, #4]
 802583a:	69d9      	ldr	r1, [r3, #28]
 802583c:	687b      	ldr	r3, [r7, #4]
 802583e:	6a1a      	ldr	r2, [r3, #32]
 8025840:	687b      	ldr	r3, [r7, #4]
 8025842:	681b      	ldr	r3, [r3, #0]
 8025844:	430a      	orrs	r2, r1
 8025846:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8025848:	687b      	ldr	r3, [r7, #4]
 802584a:	681b      	ldr	r3, [r3, #0]
 802584c:	681a      	ldr	r2, [r3, #0]
 802584e:	687b      	ldr	r3, [r7, #4]
 8025850:	681b      	ldr	r3, [r3, #0]
 8025852:	f042 0201 	orr.w	r2, r2, #1
 8025856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025858:	687b      	ldr	r3, [r7, #4]
 802585a:	2200      	movs	r2, #0
 802585c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 802585e:	687b      	ldr	r3, [r7, #4]
 8025860:	2220      	movs	r2, #32
 8025862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8025866:	687b      	ldr	r3, [r7, #4]
 8025868:	2200      	movs	r2, #0
 802586a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802586c:	687b      	ldr	r3, [r7, #4]
 802586e:	2200      	movs	r2, #0
 8025870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8025874:	2300      	movs	r3, #0
}
 8025876:	4618      	mov	r0, r3
 8025878:	3708      	adds	r7, #8
 802587a:	46bd      	mov	sp, r7
 802587c:	bd80      	pop	{r7, pc}

0802587e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 802587e:	b580      	push	{r7, lr}
 8025880:	b082      	sub	sp, #8
 8025882:	af00      	add	r7, sp, #0
 8025884:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025886:	687b      	ldr	r3, [r7, #4]
 8025888:	2b00      	cmp	r3, #0
 802588a:	d101      	bne.n	8025890 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 802588c:	2301      	movs	r3, #1
 802588e:	e021      	b.n	80258d4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025890:	687b      	ldr	r3, [r7, #4]
 8025892:	2224      	movs	r2, #36	; 0x24
 8025894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8025898:	687b      	ldr	r3, [r7, #4]
 802589a:	681b      	ldr	r3, [r3, #0]
 802589c:	681a      	ldr	r2, [r3, #0]
 802589e:	687b      	ldr	r3, [r7, #4]
 80258a0:	681b      	ldr	r3, [r3, #0]
 80258a2:	f022 0201 	bic.w	r2, r2, #1
 80258a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80258a8:	6878      	ldr	r0, [r7, #4]
 80258aa:	f7fd fffb 	bl	80238a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80258ae:	687b      	ldr	r3, [r7, #4]
 80258b0:	2200      	movs	r2, #0
 80258b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80258b4:	687b      	ldr	r3, [r7, #4]
 80258b6:	2200      	movs	r2, #0
 80258b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80258bc:	687b      	ldr	r3, [r7, #4]
 80258be:	2200      	movs	r2, #0
 80258c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80258c2:	687b      	ldr	r3, [r7, #4]
 80258c4:	2200      	movs	r2, #0
 80258c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80258ca:	687b      	ldr	r3, [r7, #4]
 80258cc:	2200      	movs	r2, #0
 80258ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80258d2:	2300      	movs	r3, #0
}
 80258d4:	4618      	mov	r0, r3
 80258d6:	3708      	adds	r7, #8
 80258d8:	46bd      	mov	sp, r7
 80258da:	bd80      	pop	{r7, pc}

080258dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80258dc:	b580      	push	{r7, lr}
 80258de:	b088      	sub	sp, #32
 80258e0:	af02      	add	r7, sp, #8
 80258e2:	60f8      	str	r0, [r7, #12]
 80258e4:	4608      	mov	r0, r1
 80258e6:	4611      	mov	r1, r2
 80258e8:	461a      	mov	r2, r3
 80258ea:	4603      	mov	r3, r0
 80258ec:	817b      	strh	r3, [r7, #10]
 80258ee:	460b      	mov	r3, r1
 80258f0:	813b      	strh	r3, [r7, #8]
 80258f2:	4613      	mov	r3, r2
 80258f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80258f6:	68fb      	ldr	r3, [r7, #12]
 80258f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80258fc:	b2db      	uxtb	r3, r3
 80258fe:	2b20      	cmp	r3, #32
 8025900:	f040 80f9 	bne.w	8025af6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8025904:	6a3b      	ldr	r3, [r7, #32]
 8025906:	2b00      	cmp	r3, #0
 8025908:	d002      	beq.n	8025910 <HAL_I2C_Mem_Write+0x34>
 802590a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802590c:	2b00      	cmp	r3, #0
 802590e:	d105      	bne.n	802591c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8025910:	68fb      	ldr	r3, [r7, #12]
 8025912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8025916:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8025918:	2301      	movs	r3, #1
 802591a:	e0ed      	b.n	8025af8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 802591c:	68fb      	ldr	r3, [r7, #12]
 802591e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8025922:	2b01      	cmp	r3, #1
 8025924:	d101      	bne.n	802592a <HAL_I2C_Mem_Write+0x4e>
 8025926:	2302      	movs	r3, #2
 8025928:	e0e6      	b.n	8025af8 <HAL_I2C_Mem_Write+0x21c>
 802592a:	68fb      	ldr	r3, [r7, #12]
 802592c:	2201      	movs	r2, #1
 802592e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8025932:	f7fe fcfb 	bl	802432c <HAL_GetTick>
 8025936:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8025938:	697b      	ldr	r3, [r7, #20]
 802593a:	9300      	str	r3, [sp, #0]
 802593c:	2319      	movs	r3, #25
 802593e:	2201      	movs	r2, #1
 8025940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025944:	68f8      	ldr	r0, [r7, #12]
 8025946:	f000 fac3 	bl	8025ed0 <I2C_WaitOnFlagUntilTimeout>
 802594a:	4603      	mov	r3, r0
 802594c:	2b00      	cmp	r3, #0
 802594e:	d001      	beq.n	8025954 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8025950:	2301      	movs	r3, #1
 8025952:	e0d1      	b.n	8025af8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8025954:	68fb      	ldr	r3, [r7, #12]
 8025956:	2221      	movs	r2, #33	; 0x21
 8025958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 802595c:	68fb      	ldr	r3, [r7, #12]
 802595e:	2240      	movs	r2, #64	; 0x40
 8025960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025964:	68fb      	ldr	r3, [r7, #12]
 8025966:	2200      	movs	r2, #0
 8025968:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 802596a:	68fb      	ldr	r3, [r7, #12]
 802596c:	6a3a      	ldr	r2, [r7, #32]
 802596e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8025970:	68fb      	ldr	r3, [r7, #12]
 8025972:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025974:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8025976:	68fb      	ldr	r3, [r7, #12]
 8025978:	2200      	movs	r2, #0
 802597a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 802597c:	88f8      	ldrh	r0, [r7, #6]
 802597e:	893a      	ldrh	r2, [r7, #8]
 8025980:	8979      	ldrh	r1, [r7, #10]
 8025982:	697b      	ldr	r3, [r7, #20]
 8025984:	9301      	str	r3, [sp, #4]
 8025986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025988:	9300      	str	r3, [sp, #0]
 802598a:	4603      	mov	r3, r0
 802598c:	68f8      	ldr	r0, [r7, #12]
 802598e:	f000 f9d3 	bl	8025d38 <I2C_RequestMemoryWrite>
 8025992:	4603      	mov	r3, r0
 8025994:	2b00      	cmp	r3, #0
 8025996:	d005      	beq.n	80259a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8025998:	68fb      	ldr	r3, [r7, #12]
 802599a:	2200      	movs	r2, #0
 802599c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80259a0:	2301      	movs	r3, #1
 80259a2:	e0a9      	b.n	8025af8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80259a4:	68fb      	ldr	r3, [r7, #12]
 80259a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80259a8:	b29b      	uxth	r3, r3
 80259aa:	2bff      	cmp	r3, #255	; 0xff
 80259ac:	d90e      	bls.n	80259cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80259ae:	68fb      	ldr	r3, [r7, #12]
 80259b0:	22ff      	movs	r2, #255	; 0xff
 80259b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80259b4:	68fb      	ldr	r3, [r7, #12]
 80259b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80259b8:	b2da      	uxtb	r2, r3
 80259ba:	8979      	ldrh	r1, [r7, #10]
 80259bc:	2300      	movs	r3, #0
 80259be:	9300      	str	r3, [sp, #0]
 80259c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80259c4:	68f8      	ldr	r0, [r7, #12]
 80259c6:	f000 fc2b 	bl	8026220 <I2C_TransferConfig>
 80259ca:	e00f      	b.n	80259ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80259cc:	68fb      	ldr	r3, [r7, #12]
 80259ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80259d0:	b29a      	uxth	r2, r3
 80259d2:	68fb      	ldr	r3, [r7, #12]
 80259d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80259d6:	68fb      	ldr	r3, [r7, #12]
 80259d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80259da:	b2da      	uxtb	r2, r3
 80259dc:	8979      	ldrh	r1, [r7, #10]
 80259de:	2300      	movs	r3, #0
 80259e0:	9300      	str	r3, [sp, #0]
 80259e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80259e6:	68f8      	ldr	r0, [r7, #12]
 80259e8:	f000 fc1a 	bl	8026220 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80259ec:	697a      	ldr	r2, [r7, #20]
 80259ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80259f0:	68f8      	ldr	r0, [r7, #12]
 80259f2:	f000 faad 	bl	8025f50 <I2C_WaitOnTXISFlagUntilTimeout>
 80259f6:	4603      	mov	r3, r0
 80259f8:	2b00      	cmp	r3, #0
 80259fa:	d001      	beq.n	8025a00 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80259fc:	2301      	movs	r3, #1
 80259fe:	e07b      	b.n	8025af8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8025a00:	68fb      	ldr	r3, [r7, #12]
 8025a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025a04:	781a      	ldrb	r2, [r3, #0]
 8025a06:	68fb      	ldr	r3, [r7, #12]
 8025a08:	681b      	ldr	r3, [r3, #0]
 8025a0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8025a0c:	68fb      	ldr	r3, [r7, #12]
 8025a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025a10:	1c5a      	adds	r2, r3, #1
 8025a12:	68fb      	ldr	r3, [r7, #12]
 8025a14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8025a16:	68fb      	ldr	r3, [r7, #12]
 8025a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025a1a:	b29b      	uxth	r3, r3
 8025a1c:	3b01      	subs	r3, #1
 8025a1e:	b29a      	uxth	r2, r3
 8025a20:	68fb      	ldr	r3, [r7, #12]
 8025a22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8025a24:	68fb      	ldr	r3, [r7, #12]
 8025a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025a28:	3b01      	subs	r3, #1
 8025a2a:	b29a      	uxth	r2, r3
 8025a2c:	68fb      	ldr	r3, [r7, #12]
 8025a2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8025a30:	68fb      	ldr	r3, [r7, #12]
 8025a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025a34:	b29b      	uxth	r3, r3
 8025a36:	2b00      	cmp	r3, #0
 8025a38:	d034      	beq.n	8025aa4 <HAL_I2C_Mem_Write+0x1c8>
 8025a3a:	68fb      	ldr	r3, [r7, #12]
 8025a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025a3e:	2b00      	cmp	r3, #0
 8025a40:	d130      	bne.n	8025aa4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8025a42:	697b      	ldr	r3, [r7, #20]
 8025a44:	9300      	str	r3, [sp, #0]
 8025a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a48:	2200      	movs	r2, #0
 8025a4a:	2180      	movs	r1, #128	; 0x80
 8025a4c:	68f8      	ldr	r0, [r7, #12]
 8025a4e:	f000 fa3f 	bl	8025ed0 <I2C_WaitOnFlagUntilTimeout>
 8025a52:	4603      	mov	r3, r0
 8025a54:	2b00      	cmp	r3, #0
 8025a56:	d001      	beq.n	8025a5c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8025a58:	2301      	movs	r3, #1
 8025a5a:	e04d      	b.n	8025af8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8025a5c:	68fb      	ldr	r3, [r7, #12]
 8025a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025a60:	b29b      	uxth	r3, r3
 8025a62:	2bff      	cmp	r3, #255	; 0xff
 8025a64:	d90e      	bls.n	8025a84 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8025a66:	68fb      	ldr	r3, [r7, #12]
 8025a68:	22ff      	movs	r2, #255	; 0xff
 8025a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8025a6c:	68fb      	ldr	r3, [r7, #12]
 8025a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025a70:	b2da      	uxtb	r2, r3
 8025a72:	8979      	ldrh	r1, [r7, #10]
 8025a74:	2300      	movs	r3, #0
 8025a76:	9300      	str	r3, [sp, #0]
 8025a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025a7c:	68f8      	ldr	r0, [r7, #12]
 8025a7e:	f000 fbcf 	bl	8026220 <I2C_TransferConfig>
 8025a82:	e00f      	b.n	8025aa4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8025a84:	68fb      	ldr	r3, [r7, #12]
 8025a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025a88:	b29a      	uxth	r2, r3
 8025a8a:	68fb      	ldr	r3, [r7, #12]
 8025a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8025a8e:	68fb      	ldr	r3, [r7, #12]
 8025a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025a92:	b2da      	uxtb	r2, r3
 8025a94:	8979      	ldrh	r1, [r7, #10]
 8025a96:	2300      	movs	r3, #0
 8025a98:	9300      	str	r3, [sp, #0]
 8025a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8025a9e:	68f8      	ldr	r0, [r7, #12]
 8025aa0:	f000 fbbe 	bl	8026220 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8025aa4:	68fb      	ldr	r3, [r7, #12]
 8025aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025aa8:	b29b      	uxth	r3, r3
 8025aaa:	2b00      	cmp	r3, #0
 8025aac:	d19e      	bne.n	80259ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8025aae:	697a      	ldr	r2, [r7, #20]
 8025ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025ab2:	68f8      	ldr	r0, [r7, #12]
 8025ab4:	f000 fa8c 	bl	8025fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8025ab8:	4603      	mov	r3, r0
 8025aba:	2b00      	cmp	r3, #0
 8025abc:	d001      	beq.n	8025ac2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8025abe:	2301      	movs	r3, #1
 8025ac0:	e01a      	b.n	8025af8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8025ac2:	68fb      	ldr	r3, [r7, #12]
 8025ac4:	681b      	ldr	r3, [r3, #0]
 8025ac6:	2220      	movs	r2, #32
 8025ac8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8025aca:	68fb      	ldr	r3, [r7, #12]
 8025acc:	681b      	ldr	r3, [r3, #0]
 8025ace:	6859      	ldr	r1, [r3, #4]
 8025ad0:	68fb      	ldr	r3, [r7, #12]
 8025ad2:	681a      	ldr	r2, [r3, #0]
 8025ad4:	4b0a      	ldr	r3, [pc, #40]	; (8025b00 <HAL_I2C_Mem_Write+0x224>)
 8025ad6:	400b      	ands	r3, r1
 8025ad8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8025ada:	68fb      	ldr	r3, [r7, #12]
 8025adc:	2220      	movs	r2, #32
 8025ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8025ae2:	68fb      	ldr	r3, [r7, #12]
 8025ae4:	2200      	movs	r2, #0
 8025ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8025aea:	68fb      	ldr	r3, [r7, #12]
 8025aec:	2200      	movs	r2, #0
 8025aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8025af2:	2300      	movs	r3, #0
 8025af4:	e000      	b.n	8025af8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8025af6:	2302      	movs	r3, #2
  }
}
 8025af8:	4618      	mov	r0, r3
 8025afa:	3718      	adds	r7, #24
 8025afc:	46bd      	mov	sp, r7
 8025afe:	bd80      	pop	{r7, pc}
 8025b00:	fe00e800 	.word	0xfe00e800

08025b04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8025b04:	b580      	push	{r7, lr}
 8025b06:	b088      	sub	sp, #32
 8025b08:	af02      	add	r7, sp, #8
 8025b0a:	60f8      	str	r0, [r7, #12]
 8025b0c:	4608      	mov	r0, r1
 8025b0e:	4611      	mov	r1, r2
 8025b10:	461a      	mov	r2, r3
 8025b12:	4603      	mov	r3, r0
 8025b14:	817b      	strh	r3, [r7, #10]
 8025b16:	460b      	mov	r3, r1
 8025b18:	813b      	strh	r3, [r7, #8]
 8025b1a:	4613      	mov	r3, r2
 8025b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8025b1e:	68fb      	ldr	r3, [r7, #12]
 8025b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025b24:	b2db      	uxtb	r3, r3
 8025b26:	2b20      	cmp	r3, #32
 8025b28:	f040 80fd 	bne.w	8025d26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8025b2c:	6a3b      	ldr	r3, [r7, #32]
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	d002      	beq.n	8025b38 <HAL_I2C_Mem_Read+0x34>
 8025b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025b34:	2b00      	cmp	r3, #0
 8025b36:	d105      	bne.n	8025b44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8025b38:	68fb      	ldr	r3, [r7, #12]
 8025b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8025b3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8025b40:	2301      	movs	r3, #1
 8025b42:	e0f1      	b.n	8025d28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8025b44:	68fb      	ldr	r3, [r7, #12]
 8025b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8025b4a:	2b01      	cmp	r3, #1
 8025b4c:	d101      	bne.n	8025b52 <HAL_I2C_Mem_Read+0x4e>
 8025b4e:	2302      	movs	r3, #2
 8025b50:	e0ea      	b.n	8025d28 <HAL_I2C_Mem_Read+0x224>
 8025b52:	68fb      	ldr	r3, [r7, #12]
 8025b54:	2201      	movs	r2, #1
 8025b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8025b5a:	f7fe fbe7 	bl	802432c <HAL_GetTick>
 8025b5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8025b60:	697b      	ldr	r3, [r7, #20]
 8025b62:	9300      	str	r3, [sp, #0]
 8025b64:	2319      	movs	r3, #25
 8025b66:	2201      	movs	r2, #1
 8025b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025b6c:	68f8      	ldr	r0, [r7, #12]
 8025b6e:	f000 f9af 	bl	8025ed0 <I2C_WaitOnFlagUntilTimeout>
 8025b72:	4603      	mov	r3, r0
 8025b74:	2b00      	cmp	r3, #0
 8025b76:	d001      	beq.n	8025b7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8025b78:	2301      	movs	r3, #1
 8025b7a:	e0d5      	b.n	8025d28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8025b7c:	68fb      	ldr	r3, [r7, #12]
 8025b7e:	2222      	movs	r2, #34	; 0x22
 8025b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8025b84:	68fb      	ldr	r3, [r7, #12]
 8025b86:	2240      	movs	r2, #64	; 0x40
 8025b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025b8c:	68fb      	ldr	r3, [r7, #12]
 8025b8e:	2200      	movs	r2, #0
 8025b90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8025b92:	68fb      	ldr	r3, [r7, #12]
 8025b94:	6a3a      	ldr	r2, [r7, #32]
 8025b96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8025b98:	68fb      	ldr	r3, [r7, #12]
 8025b9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8025b9e:	68fb      	ldr	r3, [r7, #12]
 8025ba0:	2200      	movs	r2, #0
 8025ba2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8025ba4:	88f8      	ldrh	r0, [r7, #6]
 8025ba6:	893a      	ldrh	r2, [r7, #8]
 8025ba8:	8979      	ldrh	r1, [r7, #10]
 8025baa:	697b      	ldr	r3, [r7, #20]
 8025bac:	9301      	str	r3, [sp, #4]
 8025bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bb0:	9300      	str	r3, [sp, #0]
 8025bb2:	4603      	mov	r3, r0
 8025bb4:	68f8      	ldr	r0, [r7, #12]
 8025bb6:	f000 f913 	bl	8025de0 <I2C_RequestMemoryRead>
 8025bba:	4603      	mov	r3, r0
 8025bbc:	2b00      	cmp	r3, #0
 8025bbe:	d005      	beq.n	8025bcc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8025bc0:	68fb      	ldr	r3, [r7, #12]
 8025bc2:	2200      	movs	r2, #0
 8025bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8025bc8:	2301      	movs	r3, #1
 8025bca:	e0ad      	b.n	8025d28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8025bcc:	68fb      	ldr	r3, [r7, #12]
 8025bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025bd0:	b29b      	uxth	r3, r3
 8025bd2:	2bff      	cmp	r3, #255	; 0xff
 8025bd4:	d90e      	bls.n	8025bf4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8025bd6:	68fb      	ldr	r3, [r7, #12]
 8025bd8:	22ff      	movs	r2, #255	; 0xff
 8025bda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8025bdc:	68fb      	ldr	r3, [r7, #12]
 8025bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025be0:	b2da      	uxtb	r2, r3
 8025be2:	8979      	ldrh	r1, [r7, #10]
 8025be4:	4b52      	ldr	r3, [pc, #328]	; (8025d30 <HAL_I2C_Mem_Read+0x22c>)
 8025be6:	9300      	str	r3, [sp, #0]
 8025be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025bec:	68f8      	ldr	r0, [r7, #12]
 8025bee:	f000 fb17 	bl	8026220 <I2C_TransferConfig>
 8025bf2:	e00f      	b.n	8025c14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8025bf4:	68fb      	ldr	r3, [r7, #12]
 8025bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025bf8:	b29a      	uxth	r2, r3
 8025bfa:	68fb      	ldr	r3, [r7, #12]
 8025bfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8025bfe:	68fb      	ldr	r3, [r7, #12]
 8025c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025c02:	b2da      	uxtb	r2, r3
 8025c04:	8979      	ldrh	r1, [r7, #10]
 8025c06:	4b4a      	ldr	r3, [pc, #296]	; (8025d30 <HAL_I2C_Mem_Read+0x22c>)
 8025c08:	9300      	str	r3, [sp, #0]
 8025c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8025c0e:	68f8      	ldr	r0, [r7, #12]
 8025c10:	f000 fb06 	bl	8026220 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8025c14:	697b      	ldr	r3, [r7, #20]
 8025c16:	9300      	str	r3, [sp, #0]
 8025c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c1a:	2200      	movs	r2, #0
 8025c1c:	2104      	movs	r1, #4
 8025c1e:	68f8      	ldr	r0, [r7, #12]
 8025c20:	f000 f956 	bl	8025ed0 <I2C_WaitOnFlagUntilTimeout>
 8025c24:	4603      	mov	r3, r0
 8025c26:	2b00      	cmp	r3, #0
 8025c28:	d001      	beq.n	8025c2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8025c2a:	2301      	movs	r3, #1
 8025c2c:	e07c      	b.n	8025d28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8025c2e:	68fb      	ldr	r3, [r7, #12]
 8025c30:	681b      	ldr	r3, [r3, #0]
 8025c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025c34:	68fb      	ldr	r3, [r7, #12]
 8025c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c38:	b2d2      	uxtb	r2, r2
 8025c3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8025c3c:	68fb      	ldr	r3, [r7, #12]
 8025c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c40:	1c5a      	adds	r2, r3, #1
 8025c42:	68fb      	ldr	r3, [r7, #12]
 8025c44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8025c46:	68fb      	ldr	r3, [r7, #12]
 8025c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025c4a:	3b01      	subs	r3, #1
 8025c4c:	b29a      	uxth	r2, r3
 8025c4e:	68fb      	ldr	r3, [r7, #12]
 8025c50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8025c52:	68fb      	ldr	r3, [r7, #12]
 8025c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c56:	b29b      	uxth	r3, r3
 8025c58:	3b01      	subs	r3, #1
 8025c5a:	b29a      	uxth	r2, r3
 8025c5c:	68fb      	ldr	r3, [r7, #12]
 8025c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8025c60:	68fb      	ldr	r3, [r7, #12]
 8025c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c64:	b29b      	uxth	r3, r3
 8025c66:	2b00      	cmp	r3, #0
 8025c68:	d034      	beq.n	8025cd4 <HAL_I2C_Mem_Read+0x1d0>
 8025c6a:	68fb      	ldr	r3, [r7, #12]
 8025c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025c6e:	2b00      	cmp	r3, #0
 8025c70:	d130      	bne.n	8025cd4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8025c72:	697b      	ldr	r3, [r7, #20]
 8025c74:	9300      	str	r3, [sp, #0]
 8025c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c78:	2200      	movs	r2, #0
 8025c7a:	2180      	movs	r1, #128	; 0x80
 8025c7c:	68f8      	ldr	r0, [r7, #12]
 8025c7e:	f000 f927 	bl	8025ed0 <I2C_WaitOnFlagUntilTimeout>
 8025c82:	4603      	mov	r3, r0
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	d001      	beq.n	8025c8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8025c88:	2301      	movs	r3, #1
 8025c8a:	e04d      	b.n	8025d28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8025c8c:	68fb      	ldr	r3, [r7, #12]
 8025c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c90:	b29b      	uxth	r3, r3
 8025c92:	2bff      	cmp	r3, #255	; 0xff
 8025c94:	d90e      	bls.n	8025cb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8025c96:	68fb      	ldr	r3, [r7, #12]
 8025c98:	22ff      	movs	r2, #255	; 0xff
 8025c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8025c9c:	68fb      	ldr	r3, [r7, #12]
 8025c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025ca0:	b2da      	uxtb	r2, r3
 8025ca2:	8979      	ldrh	r1, [r7, #10]
 8025ca4:	2300      	movs	r3, #0
 8025ca6:	9300      	str	r3, [sp, #0]
 8025ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025cac:	68f8      	ldr	r0, [r7, #12]
 8025cae:	f000 fab7 	bl	8026220 <I2C_TransferConfig>
 8025cb2:	e00f      	b.n	8025cd4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8025cb4:	68fb      	ldr	r3, [r7, #12]
 8025cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025cb8:	b29a      	uxth	r2, r3
 8025cba:	68fb      	ldr	r3, [r7, #12]
 8025cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8025cbe:	68fb      	ldr	r3, [r7, #12]
 8025cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025cc2:	b2da      	uxtb	r2, r3
 8025cc4:	8979      	ldrh	r1, [r7, #10]
 8025cc6:	2300      	movs	r3, #0
 8025cc8:	9300      	str	r3, [sp, #0]
 8025cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8025cce:	68f8      	ldr	r0, [r7, #12]
 8025cd0:	f000 faa6 	bl	8026220 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8025cd4:	68fb      	ldr	r3, [r7, #12]
 8025cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025cd8:	b29b      	uxth	r3, r3
 8025cda:	2b00      	cmp	r3, #0
 8025cdc:	d19a      	bne.n	8025c14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8025cde:	697a      	ldr	r2, [r7, #20]
 8025ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025ce2:	68f8      	ldr	r0, [r7, #12]
 8025ce4:	f000 f974 	bl	8025fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8025ce8:	4603      	mov	r3, r0
 8025cea:	2b00      	cmp	r3, #0
 8025cec:	d001      	beq.n	8025cf2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8025cee:	2301      	movs	r3, #1
 8025cf0:	e01a      	b.n	8025d28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8025cf2:	68fb      	ldr	r3, [r7, #12]
 8025cf4:	681b      	ldr	r3, [r3, #0]
 8025cf6:	2220      	movs	r2, #32
 8025cf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8025cfa:	68fb      	ldr	r3, [r7, #12]
 8025cfc:	681b      	ldr	r3, [r3, #0]
 8025cfe:	6859      	ldr	r1, [r3, #4]
 8025d00:	68fb      	ldr	r3, [r7, #12]
 8025d02:	681a      	ldr	r2, [r3, #0]
 8025d04:	4b0b      	ldr	r3, [pc, #44]	; (8025d34 <HAL_I2C_Mem_Read+0x230>)
 8025d06:	400b      	ands	r3, r1
 8025d08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8025d0a:	68fb      	ldr	r3, [r7, #12]
 8025d0c:	2220      	movs	r2, #32
 8025d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8025d12:	68fb      	ldr	r3, [r7, #12]
 8025d14:	2200      	movs	r2, #0
 8025d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8025d1a:	68fb      	ldr	r3, [r7, #12]
 8025d1c:	2200      	movs	r2, #0
 8025d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8025d22:	2300      	movs	r3, #0
 8025d24:	e000      	b.n	8025d28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8025d26:	2302      	movs	r3, #2
  }
}
 8025d28:	4618      	mov	r0, r3
 8025d2a:	3718      	adds	r7, #24
 8025d2c:	46bd      	mov	sp, r7
 8025d2e:	bd80      	pop	{r7, pc}
 8025d30:	80002400 	.word	0x80002400
 8025d34:	fe00e800 	.word	0xfe00e800

08025d38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8025d38:	b580      	push	{r7, lr}
 8025d3a:	b086      	sub	sp, #24
 8025d3c:	af02      	add	r7, sp, #8
 8025d3e:	60f8      	str	r0, [r7, #12]
 8025d40:	4608      	mov	r0, r1
 8025d42:	4611      	mov	r1, r2
 8025d44:	461a      	mov	r2, r3
 8025d46:	4603      	mov	r3, r0
 8025d48:	817b      	strh	r3, [r7, #10]
 8025d4a:	460b      	mov	r3, r1
 8025d4c:	813b      	strh	r3, [r7, #8]
 8025d4e:	4613      	mov	r3, r2
 8025d50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8025d52:	88fb      	ldrh	r3, [r7, #6]
 8025d54:	b2da      	uxtb	r2, r3
 8025d56:	8979      	ldrh	r1, [r7, #10]
 8025d58:	4b20      	ldr	r3, [pc, #128]	; (8025ddc <I2C_RequestMemoryWrite+0xa4>)
 8025d5a:	9300      	str	r3, [sp, #0]
 8025d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025d60:	68f8      	ldr	r0, [r7, #12]
 8025d62:	f000 fa5d 	bl	8026220 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025d66:	69fa      	ldr	r2, [r7, #28]
 8025d68:	69b9      	ldr	r1, [r7, #24]
 8025d6a:	68f8      	ldr	r0, [r7, #12]
 8025d6c:	f000 f8f0 	bl	8025f50 <I2C_WaitOnTXISFlagUntilTimeout>
 8025d70:	4603      	mov	r3, r0
 8025d72:	2b00      	cmp	r3, #0
 8025d74:	d001      	beq.n	8025d7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8025d76:	2301      	movs	r3, #1
 8025d78:	e02c      	b.n	8025dd4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8025d7a:	88fb      	ldrh	r3, [r7, #6]
 8025d7c:	2b01      	cmp	r3, #1
 8025d7e:	d105      	bne.n	8025d8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025d80:	893b      	ldrh	r3, [r7, #8]
 8025d82:	b2da      	uxtb	r2, r3
 8025d84:	68fb      	ldr	r3, [r7, #12]
 8025d86:	681b      	ldr	r3, [r3, #0]
 8025d88:	629a      	str	r2, [r3, #40]	; 0x28
 8025d8a:	e015      	b.n	8025db8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8025d8c:	893b      	ldrh	r3, [r7, #8]
 8025d8e:	0a1b      	lsrs	r3, r3, #8
 8025d90:	b29b      	uxth	r3, r3
 8025d92:	b2da      	uxtb	r2, r3
 8025d94:	68fb      	ldr	r3, [r7, #12]
 8025d96:	681b      	ldr	r3, [r3, #0]
 8025d98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025d9a:	69fa      	ldr	r2, [r7, #28]
 8025d9c:	69b9      	ldr	r1, [r7, #24]
 8025d9e:	68f8      	ldr	r0, [r7, #12]
 8025da0:	f000 f8d6 	bl	8025f50 <I2C_WaitOnTXISFlagUntilTimeout>
 8025da4:	4603      	mov	r3, r0
 8025da6:	2b00      	cmp	r3, #0
 8025da8:	d001      	beq.n	8025dae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8025daa:	2301      	movs	r3, #1
 8025dac:	e012      	b.n	8025dd4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025dae:	893b      	ldrh	r3, [r7, #8]
 8025db0:	b2da      	uxtb	r2, r3
 8025db2:	68fb      	ldr	r3, [r7, #12]
 8025db4:	681b      	ldr	r3, [r3, #0]
 8025db6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8025db8:	69fb      	ldr	r3, [r7, #28]
 8025dba:	9300      	str	r3, [sp, #0]
 8025dbc:	69bb      	ldr	r3, [r7, #24]
 8025dbe:	2200      	movs	r2, #0
 8025dc0:	2180      	movs	r1, #128	; 0x80
 8025dc2:	68f8      	ldr	r0, [r7, #12]
 8025dc4:	f000 f884 	bl	8025ed0 <I2C_WaitOnFlagUntilTimeout>
 8025dc8:	4603      	mov	r3, r0
 8025dca:	2b00      	cmp	r3, #0
 8025dcc:	d001      	beq.n	8025dd2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8025dce:	2301      	movs	r3, #1
 8025dd0:	e000      	b.n	8025dd4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8025dd2:	2300      	movs	r3, #0
}
 8025dd4:	4618      	mov	r0, r3
 8025dd6:	3710      	adds	r7, #16
 8025dd8:	46bd      	mov	sp, r7
 8025dda:	bd80      	pop	{r7, pc}
 8025ddc:	80002000 	.word	0x80002000

08025de0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8025de0:	b580      	push	{r7, lr}
 8025de2:	b086      	sub	sp, #24
 8025de4:	af02      	add	r7, sp, #8
 8025de6:	60f8      	str	r0, [r7, #12]
 8025de8:	4608      	mov	r0, r1
 8025dea:	4611      	mov	r1, r2
 8025dec:	461a      	mov	r2, r3
 8025dee:	4603      	mov	r3, r0
 8025df0:	817b      	strh	r3, [r7, #10]
 8025df2:	460b      	mov	r3, r1
 8025df4:	813b      	strh	r3, [r7, #8]
 8025df6:	4613      	mov	r3, r2
 8025df8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8025dfa:	88fb      	ldrh	r3, [r7, #6]
 8025dfc:	b2da      	uxtb	r2, r3
 8025dfe:	8979      	ldrh	r1, [r7, #10]
 8025e00:	4b20      	ldr	r3, [pc, #128]	; (8025e84 <I2C_RequestMemoryRead+0xa4>)
 8025e02:	9300      	str	r3, [sp, #0]
 8025e04:	2300      	movs	r3, #0
 8025e06:	68f8      	ldr	r0, [r7, #12]
 8025e08:	f000 fa0a 	bl	8026220 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025e0c:	69fa      	ldr	r2, [r7, #28]
 8025e0e:	69b9      	ldr	r1, [r7, #24]
 8025e10:	68f8      	ldr	r0, [r7, #12]
 8025e12:	f000 f89d 	bl	8025f50 <I2C_WaitOnTXISFlagUntilTimeout>
 8025e16:	4603      	mov	r3, r0
 8025e18:	2b00      	cmp	r3, #0
 8025e1a:	d001      	beq.n	8025e20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8025e1c:	2301      	movs	r3, #1
 8025e1e:	e02c      	b.n	8025e7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8025e20:	88fb      	ldrh	r3, [r7, #6]
 8025e22:	2b01      	cmp	r3, #1
 8025e24:	d105      	bne.n	8025e32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025e26:	893b      	ldrh	r3, [r7, #8]
 8025e28:	b2da      	uxtb	r2, r3
 8025e2a:	68fb      	ldr	r3, [r7, #12]
 8025e2c:	681b      	ldr	r3, [r3, #0]
 8025e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8025e30:	e015      	b.n	8025e5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8025e32:	893b      	ldrh	r3, [r7, #8]
 8025e34:	0a1b      	lsrs	r3, r3, #8
 8025e36:	b29b      	uxth	r3, r3
 8025e38:	b2da      	uxtb	r2, r3
 8025e3a:	68fb      	ldr	r3, [r7, #12]
 8025e3c:	681b      	ldr	r3, [r3, #0]
 8025e3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025e40:	69fa      	ldr	r2, [r7, #28]
 8025e42:	69b9      	ldr	r1, [r7, #24]
 8025e44:	68f8      	ldr	r0, [r7, #12]
 8025e46:	f000 f883 	bl	8025f50 <I2C_WaitOnTXISFlagUntilTimeout>
 8025e4a:	4603      	mov	r3, r0
 8025e4c:	2b00      	cmp	r3, #0
 8025e4e:	d001      	beq.n	8025e54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8025e50:	2301      	movs	r3, #1
 8025e52:	e012      	b.n	8025e7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025e54:	893b      	ldrh	r3, [r7, #8]
 8025e56:	b2da      	uxtb	r2, r3
 8025e58:	68fb      	ldr	r3, [r7, #12]
 8025e5a:	681b      	ldr	r3, [r3, #0]
 8025e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8025e5e:	69fb      	ldr	r3, [r7, #28]
 8025e60:	9300      	str	r3, [sp, #0]
 8025e62:	69bb      	ldr	r3, [r7, #24]
 8025e64:	2200      	movs	r2, #0
 8025e66:	2140      	movs	r1, #64	; 0x40
 8025e68:	68f8      	ldr	r0, [r7, #12]
 8025e6a:	f000 f831 	bl	8025ed0 <I2C_WaitOnFlagUntilTimeout>
 8025e6e:	4603      	mov	r3, r0
 8025e70:	2b00      	cmp	r3, #0
 8025e72:	d001      	beq.n	8025e78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8025e74:	2301      	movs	r3, #1
 8025e76:	e000      	b.n	8025e7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8025e78:	2300      	movs	r3, #0
}
 8025e7a:	4618      	mov	r0, r3
 8025e7c:	3710      	adds	r7, #16
 8025e7e:	46bd      	mov	sp, r7
 8025e80:	bd80      	pop	{r7, pc}
 8025e82:	bf00      	nop
 8025e84:	80002000 	.word	0x80002000

08025e88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8025e88:	b480      	push	{r7}
 8025e8a:	b083      	sub	sp, #12
 8025e8c:	af00      	add	r7, sp, #0
 8025e8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8025e90:	687b      	ldr	r3, [r7, #4]
 8025e92:	681b      	ldr	r3, [r3, #0]
 8025e94:	699b      	ldr	r3, [r3, #24]
 8025e96:	f003 0302 	and.w	r3, r3, #2
 8025e9a:	2b02      	cmp	r3, #2
 8025e9c:	d103      	bne.n	8025ea6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	681b      	ldr	r3, [r3, #0]
 8025ea2:	2200      	movs	r2, #0
 8025ea4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8025ea6:	687b      	ldr	r3, [r7, #4]
 8025ea8:	681b      	ldr	r3, [r3, #0]
 8025eaa:	699b      	ldr	r3, [r3, #24]
 8025eac:	f003 0301 	and.w	r3, r3, #1
 8025eb0:	2b01      	cmp	r3, #1
 8025eb2:	d007      	beq.n	8025ec4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8025eb4:	687b      	ldr	r3, [r7, #4]
 8025eb6:	681b      	ldr	r3, [r3, #0]
 8025eb8:	699a      	ldr	r2, [r3, #24]
 8025eba:	687b      	ldr	r3, [r7, #4]
 8025ebc:	681b      	ldr	r3, [r3, #0]
 8025ebe:	f042 0201 	orr.w	r2, r2, #1
 8025ec2:	619a      	str	r2, [r3, #24]
  }
}
 8025ec4:	bf00      	nop
 8025ec6:	370c      	adds	r7, #12
 8025ec8:	46bd      	mov	sp, r7
 8025eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ece:	4770      	bx	lr

08025ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8025ed0:	b580      	push	{r7, lr}
 8025ed2:	b084      	sub	sp, #16
 8025ed4:	af00      	add	r7, sp, #0
 8025ed6:	60f8      	str	r0, [r7, #12]
 8025ed8:	60b9      	str	r1, [r7, #8]
 8025eda:	603b      	str	r3, [r7, #0]
 8025edc:	4613      	mov	r3, r2
 8025ede:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8025ee0:	e022      	b.n	8025f28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8025ee2:	683b      	ldr	r3, [r7, #0]
 8025ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025ee8:	d01e      	beq.n	8025f28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025eea:	f7fe fa1f 	bl	802432c <HAL_GetTick>
 8025eee:	4602      	mov	r2, r0
 8025ef0:	69bb      	ldr	r3, [r7, #24]
 8025ef2:	1ad3      	subs	r3, r2, r3
 8025ef4:	683a      	ldr	r2, [r7, #0]
 8025ef6:	429a      	cmp	r2, r3
 8025ef8:	d302      	bcc.n	8025f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8025efa:	683b      	ldr	r3, [r7, #0]
 8025efc:	2b00      	cmp	r3, #0
 8025efe:	d113      	bne.n	8025f28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8025f00:	68fb      	ldr	r3, [r7, #12]
 8025f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025f04:	f043 0220 	orr.w	r2, r3, #32
 8025f08:	68fb      	ldr	r3, [r7, #12]
 8025f0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8025f0c:	68fb      	ldr	r3, [r7, #12]
 8025f0e:	2220      	movs	r2, #32
 8025f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8025f14:	68fb      	ldr	r3, [r7, #12]
 8025f16:	2200      	movs	r2, #0
 8025f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8025f1c:	68fb      	ldr	r3, [r7, #12]
 8025f1e:	2200      	movs	r2, #0
 8025f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8025f24:	2301      	movs	r3, #1
 8025f26:	e00f      	b.n	8025f48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8025f28:	68fb      	ldr	r3, [r7, #12]
 8025f2a:	681b      	ldr	r3, [r3, #0]
 8025f2c:	699a      	ldr	r2, [r3, #24]
 8025f2e:	68bb      	ldr	r3, [r7, #8]
 8025f30:	4013      	ands	r3, r2
 8025f32:	68ba      	ldr	r2, [r7, #8]
 8025f34:	429a      	cmp	r2, r3
 8025f36:	bf0c      	ite	eq
 8025f38:	2301      	moveq	r3, #1
 8025f3a:	2300      	movne	r3, #0
 8025f3c:	b2db      	uxtb	r3, r3
 8025f3e:	461a      	mov	r2, r3
 8025f40:	79fb      	ldrb	r3, [r7, #7]
 8025f42:	429a      	cmp	r2, r3
 8025f44:	d0cd      	beq.n	8025ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8025f46:	2300      	movs	r3, #0
}
 8025f48:	4618      	mov	r0, r3
 8025f4a:	3710      	adds	r7, #16
 8025f4c:	46bd      	mov	sp, r7
 8025f4e:	bd80      	pop	{r7, pc}

08025f50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8025f50:	b580      	push	{r7, lr}
 8025f52:	b084      	sub	sp, #16
 8025f54:	af00      	add	r7, sp, #0
 8025f56:	60f8      	str	r0, [r7, #12]
 8025f58:	60b9      	str	r1, [r7, #8]
 8025f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8025f5c:	e02c      	b.n	8025fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8025f5e:	687a      	ldr	r2, [r7, #4]
 8025f60:	68b9      	ldr	r1, [r7, #8]
 8025f62:	68f8      	ldr	r0, [r7, #12]
 8025f64:	f000 f870 	bl	8026048 <I2C_IsErrorOccurred>
 8025f68:	4603      	mov	r3, r0
 8025f6a:	2b00      	cmp	r3, #0
 8025f6c:	d001      	beq.n	8025f72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8025f6e:	2301      	movs	r3, #1
 8025f70:	e02a      	b.n	8025fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8025f72:	68bb      	ldr	r3, [r7, #8]
 8025f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025f78:	d01e      	beq.n	8025fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025f7a:	f7fe f9d7 	bl	802432c <HAL_GetTick>
 8025f7e:	4602      	mov	r2, r0
 8025f80:	687b      	ldr	r3, [r7, #4]
 8025f82:	1ad3      	subs	r3, r2, r3
 8025f84:	68ba      	ldr	r2, [r7, #8]
 8025f86:	429a      	cmp	r2, r3
 8025f88:	d302      	bcc.n	8025f90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8025f8a:	68bb      	ldr	r3, [r7, #8]
 8025f8c:	2b00      	cmp	r3, #0
 8025f8e:	d113      	bne.n	8025fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8025f90:	68fb      	ldr	r3, [r7, #12]
 8025f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025f94:	f043 0220 	orr.w	r2, r3, #32
 8025f98:	68fb      	ldr	r3, [r7, #12]
 8025f9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8025f9c:	68fb      	ldr	r3, [r7, #12]
 8025f9e:	2220      	movs	r2, #32
 8025fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8025fa4:	68fb      	ldr	r3, [r7, #12]
 8025fa6:	2200      	movs	r2, #0
 8025fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8025fac:	68fb      	ldr	r3, [r7, #12]
 8025fae:	2200      	movs	r2, #0
 8025fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8025fb4:	2301      	movs	r3, #1
 8025fb6:	e007      	b.n	8025fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8025fb8:	68fb      	ldr	r3, [r7, #12]
 8025fba:	681b      	ldr	r3, [r3, #0]
 8025fbc:	699b      	ldr	r3, [r3, #24]
 8025fbe:	f003 0302 	and.w	r3, r3, #2
 8025fc2:	2b02      	cmp	r3, #2
 8025fc4:	d1cb      	bne.n	8025f5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8025fc6:	2300      	movs	r3, #0
}
 8025fc8:	4618      	mov	r0, r3
 8025fca:	3710      	adds	r7, #16
 8025fcc:	46bd      	mov	sp, r7
 8025fce:	bd80      	pop	{r7, pc}

08025fd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8025fd0:	b580      	push	{r7, lr}
 8025fd2:	b084      	sub	sp, #16
 8025fd4:	af00      	add	r7, sp, #0
 8025fd6:	60f8      	str	r0, [r7, #12]
 8025fd8:	60b9      	str	r1, [r7, #8]
 8025fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8025fdc:	e028      	b.n	8026030 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8025fde:	687a      	ldr	r2, [r7, #4]
 8025fe0:	68b9      	ldr	r1, [r7, #8]
 8025fe2:	68f8      	ldr	r0, [r7, #12]
 8025fe4:	f000 f830 	bl	8026048 <I2C_IsErrorOccurred>
 8025fe8:	4603      	mov	r3, r0
 8025fea:	2b00      	cmp	r3, #0
 8025fec:	d001      	beq.n	8025ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8025fee:	2301      	movs	r3, #1
 8025ff0:	e026      	b.n	8026040 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025ff2:	f7fe f99b 	bl	802432c <HAL_GetTick>
 8025ff6:	4602      	mov	r2, r0
 8025ff8:	687b      	ldr	r3, [r7, #4]
 8025ffa:	1ad3      	subs	r3, r2, r3
 8025ffc:	68ba      	ldr	r2, [r7, #8]
 8025ffe:	429a      	cmp	r2, r3
 8026000:	d302      	bcc.n	8026008 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8026002:	68bb      	ldr	r3, [r7, #8]
 8026004:	2b00      	cmp	r3, #0
 8026006:	d113      	bne.n	8026030 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8026008:	68fb      	ldr	r3, [r7, #12]
 802600a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802600c:	f043 0220 	orr.w	r2, r3, #32
 8026010:	68fb      	ldr	r3, [r7, #12]
 8026012:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8026014:	68fb      	ldr	r3, [r7, #12]
 8026016:	2220      	movs	r2, #32
 8026018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802601c:	68fb      	ldr	r3, [r7, #12]
 802601e:	2200      	movs	r2, #0
 8026020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8026024:	68fb      	ldr	r3, [r7, #12]
 8026026:	2200      	movs	r2, #0
 8026028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 802602c:	2301      	movs	r3, #1
 802602e:	e007      	b.n	8026040 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8026030:	68fb      	ldr	r3, [r7, #12]
 8026032:	681b      	ldr	r3, [r3, #0]
 8026034:	699b      	ldr	r3, [r3, #24]
 8026036:	f003 0320 	and.w	r3, r3, #32
 802603a:	2b20      	cmp	r3, #32
 802603c:	d1cf      	bne.n	8025fde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 802603e:	2300      	movs	r3, #0
}
 8026040:	4618      	mov	r0, r3
 8026042:	3710      	adds	r7, #16
 8026044:	46bd      	mov	sp, r7
 8026046:	bd80      	pop	{r7, pc}

08026048 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8026048:	b580      	push	{r7, lr}
 802604a:	b08a      	sub	sp, #40	; 0x28
 802604c:	af00      	add	r7, sp, #0
 802604e:	60f8      	str	r0, [r7, #12]
 8026050:	60b9      	str	r1, [r7, #8]
 8026052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8026054:	2300      	movs	r3, #0
 8026056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 802605a:	68fb      	ldr	r3, [r7, #12]
 802605c:	681b      	ldr	r3, [r3, #0]
 802605e:	699b      	ldr	r3, [r3, #24]
 8026060:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8026062:	2300      	movs	r3, #0
 8026064:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8026066:	687b      	ldr	r3, [r7, #4]
 8026068:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 802606a:	69bb      	ldr	r3, [r7, #24]
 802606c:	f003 0310 	and.w	r3, r3, #16
 8026070:	2b00      	cmp	r3, #0
 8026072:	d075      	beq.n	8026160 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8026074:	68fb      	ldr	r3, [r7, #12]
 8026076:	681b      	ldr	r3, [r3, #0]
 8026078:	2210      	movs	r2, #16
 802607a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 802607c:	e056      	b.n	802612c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 802607e:	68bb      	ldr	r3, [r7, #8]
 8026080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026084:	d052      	beq.n	802612c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8026086:	f7fe f951 	bl	802432c <HAL_GetTick>
 802608a:	4602      	mov	r2, r0
 802608c:	69fb      	ldr	r3, [r7, #28]
 802608e:	1ad3      	subs	r3, r2, r3
 8026090:	68ba      	ldr	r2, [r7, #8]
 8026092:	429a      	cmp	r2, r3
 8026094:	d302      	bcc.n	802609c <I2C_IsErrorOccurred+0x54>
 8026096:	68bb      	ldr	r3, [r7, #8]
 8026098:	2b00      	cmp	r3, #0
 802609a:	d147      	bne.n	802612c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 802609c:	68fb      	ldr	r3, [r7, #12]
 802609e:	681b      	ldr	r3, [r3, #0]
 80260a0:	685b      	ldr	r3, [r3, #4]
 80260a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80260a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80260a8:	68fb      	ldr	r3, [r7, #12]
 80260aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80260ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80260b0:	68fb      	ldr	r3, [r7, #12]
 80260b2:	681b      	ldr	r3, [r3, #0]
 80260b4:	699b      	ldr	r3, [r3, #24]
 80260b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80260ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80260be:	d12e      	bne.n	802611e <I2C_IsErrorOccurred+0xd6>
 80260c0:	697b      	ldr	r3, [r7, #20]
 80260c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80260c6:	d02a      	beq.n	802611e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80260c8:	7cfb      	ldrb	r3, [r7, #19]
 80260ca:	2b20      	cmp	r3, #32
 80260cc:	d027      	beq.n	802611e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80260ce:	68fb      	ldr	r3, [r7, #12]
 80260d0:	681b      	ldr	r3, [r3, #0]
 80260d2:	685a      	ldr	r2, [r3, #4]
 80260d4:	68fb      	ldr	r3, [r7, #12]
 80260d6:	681b      	ldr	r3, [r3, #0]
 80260d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80260dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80260de:	f7fe f925 	bl	802432c <HAL_GetTick>
 80260e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80260e4:	e01b      	b.n	802611e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80260e6:	f7fe f921 	bl	802432c <HAL_GetTick>
 80260ea:	4602      	mov	r2, r0
 80260ec:	69fb      	ldr	r3, [r7, #28]
 80260ee:	1ad3      	subs	r3, r2, r3
 80260f0:	2b19      	cmp	r3, #25
 80260f2:	d914      	bls.n	802611e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80260f4:	68fb      	ldr	r3, [r7, #12]
 80260f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80260f8:	f043 0220 	orr.w	r2, r3, #32
 80260fc:	68fb      	ldr	r3, [r7, #12]
 80260fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8026100:	68fb      	ldr	r3, [r7, #12]
 8026102:	2220      	movs	r2, #32
 8026104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8026108:	68fb      	ldr	r3, [r7, #12]
 802610a:	2200      	movs	r2, #0
 802610c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8026110:	68fb      	ldr	r3, [r7, #12]
 8026112:	2200      	movs	r2, #0
 8026114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8026118:	2301      	movs	r3, #1
 802611a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 802611e:	68fb      	ldr	r3, [r7, #12]
 8026120:	681b      	ldr	r3, [r3, #0]
 8026122:	699b      	ldr	r3, [r3, #24]
 8026124:	f003 0320 	and.w	r3, r3, #32
 8026128:	2b20      	cmp	r3, #32
 802612a:	d1dc      	bne.n	80260e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 802612c:	68fb      	ldr	r3, [r7, #12]
 802612e:	681b      	ldr	r3, [r3, #0]
 8026130:	699b      	ldr	r3, [r3, #24]
 8026132:	f003 0320 	and.w	r3, r3, #32
 8026136:	2b20      	cmp	r3, #32
 8026138:	d003      	beq.n	8026142 <I2C_IsErrorOccurred+0xfa>
 802613a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802613e:	2b00      	cmp	r3, #0
 8026140:	d09d      	beq.n	802607e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8026142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8026146:	2b00      	cmp	r3, #0
 8026148:	d103      	bne.n	8026152 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802614a:	68fb      	ldr	r3, [r7, #12]
 802614c:	681b      	ldr	r3, [r3, #0]
 802614e:	2220      	movs	r2, #32
 8026150:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8026152:	6a3b      	ldr	r3, [r7, #32]
 8026154:	f043 0304 	orr.w	r3, r3, #4
 8026158:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 802615a:	2301      	movs	r3, #1
 802615c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8026160:	68fb      	ldr	r3, [r7, #12]
 8026162:	681b      	ldr	r3, [r3, #0]
 8026164:	699b      	ldr	r3, [r3, #24]
 8026166:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8026168:	69bb      	ldr	r3, [r7, #24]
 802616a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802616e:	2b00      	cmp	r3, #0
 8026170:	d00b      	beq.n	802618a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8026172:	6a3b      	ldr	r3, [r7, #32]
 8026174:	f043 0301 	orr.w	r3, r3, #1
 8026178:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 802617a:	68fb      	ldr	r3, [r7, #12]
 802617c:	681b      	ldr	r3, [r3, #0]
 802617e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8026182:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8026184:	2301      	movs	r3, #1
 8026186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 802618a:	69bb      	ldr	r3, [r7, #24]
 802618c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8026190:	2b00      	cmp	r3, #0
 8026192:	d00b      	beq.n	80261ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8026194:	6a3b      	ldr	r3, [r7, #32]
 8026196:	f043 0308 	orr.w	r3, r3, #8
 802619a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802619c:	68fb      	ldr	r3, [r7, #12]
 802619e:	681b      	ldr	r3, [r3, #0]
 80261a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80261a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80261a6:	2301      	movs	r3, #1
 80261a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80261ac:	69bb      	ldr	r3, [r7, #24]
 80261ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80261b2:	2b00      	cmp	r3, #0
 80261b4:	d00b      	beq.n	80261ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80261b6:	6a3b      	ldr	r3, [r7, #32]
 80261b8:	f043 0302 	orr.w	r3, r3, #2
 80261bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80261be:	68fb      	ldr	r3, [r7, #12]
 80261c0:	681b      	ldr	r3, [r3, #0]
 80261c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80261c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80261c8:	2301      	movs	r3, #1
 80261ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80261ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80261d2:	2b00      	cmp	r3, #0
 80261d4:	d01c      	beq.n	8026210 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80261d6:	68f8      	ldr	r0, [r7, #12]
 80261d8:	f7ff fe56 	bl	8025e88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80261dc:	68fb      	ldr	r3, [r7, #12]
 80261de:	681b      	ldr	r3, [r3, #0]
 80261e0:	6859      	ldr	r1, [r3, #4]
 80261e2:	68fb      	ldr	r3, [r7, #12]
 80261e4:	681a      	ldr	r2, [r3, #0]
 80261e6:	4b0d      	ldr	r3, [pc, #52]	; (802621c <I2C_IsErrorOccurred+0x1d4>)
 80261e8:	400b      	ands	r3, r1
 80261ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80261ec:	68fb      	ldr	r3, [r7, #12]
 80261ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80261f0:	6a3b      	ldr	r3, [r7, #32]
 80261f2:	431a      	orrs	r2, r3
 80261f4:	68fb      	ldr	r3, [r7, #12]
 80261f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80261f8:	68fb      	ldr	r3, [r7, #12]
 80261fa:	2220      	movs	r2, #32
 80261fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8026200:	68fb      	ldr	r3, [r7, #12]
 8026202:	2200      	movs	r2, #0
 8026204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026208:	68fb      	ldr	r3, [r7, #12]
 802620a:	2200      	movs	r2, #0
 802620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8026210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8026214:	4618      	mov	r0, r3
 8026216:	3728      	adds	r7, #40	; 0x28
 8026218:	46bd      	mov	sp, r7
 802621a:	bd80      	pop	{r7, pc}
 802621c:	fe00e800 	.word	0xfe00e800

08026220 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8026220:	b480      	push	{r7}
 8026222:	b087      	sub	sp, #28
 8026224:	af00      	add	r7, sp, #0
 8026226:	60f8      	str	r0, [r7, #12]
 8026228:	607b      	str	r3, [r7, #4]
 802622a:	460b      	mov	r3, r1
 802622c:	817b      	strh	r3, [r7, #10]
 802622e:	4613      	mov	r3, r2
 8026230:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8026232:	897b      	ldrh	r3, [r7, #10]
 8026234:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8026238:	7a7b      	ldrb	r3, [r7, #9]
 802623a:	041b      	lsls	r3, r3, #16
 802623c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8026240:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8026242:	687b      	ldr	r3, [r7, #4]
 8026244:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8026246:	6a3b      	ldr	r3, [r7, #32]
 8026248:	4313      	orrs	r3, r2
 802624a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802624e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8026250:	68fb      	ldr	r3, [r7, #12]
 8026252:	681b      	ldr	r3, [r3, #0]
 8026254:	685a      	ldr	r2, [r3, #4]
 8026256:	6a3b      	ldr	r3, [r7, #32]
 8026258:	0d5b      	lsrs	r3, r3, #21
 802625a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 802625e:	4b08      	ldr	r3, [pc, #32]	; (8026280 <I2C_TransferConfig+0x60>)
 8026260:	430b      	orrs	r3, r1
 8026262:	43db      	mvns	r3, r3
 8026264:	ea02 0103 	and.w	r1, r2, r3
 8026268:	68fb      	ldr	r3, [r7, #12]
 802626a:	681b      	ldr	r3, [r3, #0]
 802626c:	697a      	ldr	r2, [r7, #20]
 802626e:	430a      	orrs	r2, r1
 8026270:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8026272:	bf00      	nop
 8026274:	371c      	adds	r7, #28
 8026276:	46bd      	mov	sp, r7
 8026278:	f85d 7b04 	ldr.w	r7, [sp], #4
 802627c:	4770      	bx	lr
 802627e:	bf00      	nop
 8026280:	03ff63ff 	.word	0x03ff63ff

08026284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8026284:	b480      	push	{r7}
 8026286:	b083      	sub	sp, #12
 8026288:	af00      	add	r7, sp, #0
 802628a:	6078      	str	r0, [r7, #4]
 802628c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026294:	b2db      	uxtb	r3, r3
 8026296:	2b20      	cmp	r3, #32
 8026298:	d138      	bne.n	802630c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802629a:	687b      	ldr	r3, [r7, #4]
 802629c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80262a0:	2b01      	cmp	r3, #1
 80262a2:	d101      	bne.n	80262a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80262a4:	2302      	movs	r3, #2
 80262a6:	e032      	b.n	802630e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80262a8:	687b      	ldr	r3, [r7, #4]
 80262aa:	2201      	movs	r2, #1
 80262ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80262b0:	687b      	ldr	r3, [r7, #4]
 80262b2:	2224      	movs	r2, #36	; 0x24
 80262b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80262b8:	687b      	ldr	r3, [r7, #4]
 80262ba:	681b      	ldr	r3, [r3, #0]
 80262bc:	681a      	ldr	r2, [r3, #0]
 80262be:	687b      	ldr	r3, [r7, #4]
 80262c0:	681b      	ldr	r3, [r3, #0]
 80262c2:	f022 0201 	bic.w	r2, r2, #1
 80262c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80262c8:	687b      	ldr	r3, [r7, #4]
 80262ca:	681b      	ldr	r3, [r3, #0]
 80262cc:	681a      	ldr	r2, [r3, #0]
 80262ce:	687b      	ldr	r3, [r7, #4]
 80262d0:	681b      	ldr	r3, [r3, #0]
 80262d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80262d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80262d8:	687b      	ldr	r3, [r7, #4]
 80262da:	681b      	ldr	r3, [r3, #0]
 80262dc:	6819      	ldr	r1, [r3, #0]
 80262de:	687b      	ldr	r3, [r7, #4]
 80262e0:	681b      	ldr	r3, [r3, #0]
 80262e2:	683a      	ldr	r2, [r7, #0]
 80262e4:	430a      	orrs	r2, r1
 80262e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80262e8:	687b      	ldr	r3, [r7, #4]
 80262ea:	681b      	ldr	r3, [r3, #0]
 80262ec:	681a      	ldr	r2, [r3, #0]
 80262ee:	687b      	ldr	r3, [r7, #4]
 80262f0:	681b      	ldr	r3, [r3, #0]
 80262f2:	f042 0201 	orr.w	r2, r2, #1
 80262f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80262f8:	687b      	ldr	r3, [r7, #4]
 80262fa:	2220      	movs	r2, #32
 80262fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026300:	687b      	ldr	r3, [r7, #4]
 8026302:	2200      	movs	r2, #0
 8026304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8026308:	2300      	movs	r3, #0
 802630a:	e000      	b.n	802630e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 802630c:	2302      	movs	r3, #2
  }
}
 802630e:	4618      	mov	r0, r3
 8026310:	370c      	adds	r7, #12
 8026312:	46bd      	mov	sp, r7
 8026314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026318:	4770      	bx	lr

0802631a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802631a:	b480      	push	{r7}
 802631c:	b085      	sub	sp, #20
 802631e:	af00      	add	r7, sp, #0
 8026320:	6078      	str	r0, [r7, #4]
 8026322:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802632a:	b2db      	uxtb	r3, r3
 802632c:	2b20      	cmp	r3, #32
 802632e:	d139      	bne.n	80263a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8026330:	687b      	ldr	r3, [r7, #4]
 8026332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8026336:	2b01      	cmp	r3, #1
 8026338:	d101      	bne.n	802633e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 802633a:	2302      	movs	r3, #2
 802633c:	e033      	b.n	80263a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 802633e:	687b      	ldr	r3, [r7, #4]
 8026340:	2201      	movs	r2, #1
 8026342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8026346:	687b      	ldr	r3, [r7, #4]
 8026348:	2224      	movs	r2, #36	; 0x24
 802634a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802634e:	687b      	ldr	r3, [r7, #4]
 8026350:	681b      	ldr	r3, [r3, #0]
 8026352:	681a      	ldr	r2, [r3, #0]
 8026354:	687b      	ldr	r3, [r7, #4]
 8026356:	681b      	ldr	r3, [r3, #0]
 8026358:	f022 0201 	bic.w	r2, r2, #1
 802635c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 802635e:	687b      	ldr	r3, [r7, #4]
 8026360:	681b      	ldr	r3, [r3, #0]
 8026362:	681b      	ldr	r3, [r3, #0]
 8026364:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8026366:	68fb      	ldr	r3, [r7, #12]
 8026368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 802636c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 802636e:	683b      	ldr	r3, [r7, #0]
 8026370:	021b      	lsls	r3, r3, #8
 8026372:	68fa      	ldr	r2, [r7, #12]
 8026374:	4313      	orrs	r3, r2
 8026376:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8026378:	687b      	ldr	r3, [r7, #4]
 802637a:	681b      	ldr	r3, [r3, #0]
 802637c:	68fa      	ldr	r2, [r7, #12]
 802637e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8026380:	687b      	ldr	r3, [r7, #4]
 8026382:	681b      	ldr	r3, [r3, #0]
 8026384:	681a      	ldr	r2, [r3, #0]
 8026386:	687b      	ldr	r3, [r7, #4]
 8026388:	681b      	ldr	r3, [r3, #0]
 802638a:	f042 0201 	orr.w	r2, r2, #1
 802638e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026390:	687b      	ldr	r3, [r7, #4]
 8026392:	2220      	movs	r2, #32
 8026394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026398:	687b      	ldr	r3, [r7, #4]
 802639a:	2200      	movs	r2, #0
 802639c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80263a0:	2300      	movs	r3, #0
 80263a2:	e000      	b.n	80263a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80263a4:	2302      	movs	r3, #2
  }
}
 80263a6:	4618      	mov	r0, r3
 80263a8:	3714      	adds	r7, #20
 80263aa:	46bd      	mov	sp, r7
 80263ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263b0:	4770      	bx	lr
	...

080263b4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80263b4:	b580      	push	{r7, lr}
 80263b6:	b086      	sub	sp, #24
 80263b8:	af02      	add	r7, sp, #8
 80263ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80263bc:	2300      	movs	r3, #0
 80263be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80263c0:	f7fd ffb4 	bl	802432c <HAL_GetTick>
 80263c4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	2b00      	cmp	r3, #0
 80263ca:	d102      	bne.n	80263d2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80263cc:	2301      	movs	r3, #1
 80263ce:	73fb      	strb	r3, [r7, #15]
 80263d0:	e092      	b.n	80264f8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80263d2:	687b      	ldr	r3, [r7, #4]
 80263d4:	2200      	movs	r2, #0
 80263d6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80263d8:	687b      	ldr	r3, [r7, #4]
 80263da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80263dc:	2b00      	cmp	r3, #0
 80263de:	f040 808b 	bne.w	80264f8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80263e2:	6878      	ldr	r0, [r7, #4]
 80263e4:	f7fd fa9a 	bl	802391c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80263e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80263ec:	6878      	ldr	r0, [r7, #4]
 80263ee:	f000 fad0 	bl	8026992 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80263f2:	687b      	ldr	r3, [r7, #4]
 80263f4:	681b      	ldr	r3, [r3, #0]
 80263f6:	689a      	ldr	r2, [r3, #8]
 80263f8:	4b42      	ldr	r3, [pc, #264]	; (8026504 <HAL_OSPI_Init+0x150>)
 80263fa:	4013      	ands	r3, r2
 80263fc:	687a      	ldr	r2, [r7, #4]
 80263fe:	68d1      	ldr	r1, [r2, #12]
 8026400:	687a      	ldr	r2, [r7, #4]
 8026402:	6912      	ldr	r2, [r2, #16]
 8026404:	3a01      	subs	r2, #1
 8026406:	0412      	lsls	r2, r2, #16
 8026408:	4311      	orrs	r1, r2
 802640a:	687a      	ldr	r2, [r7, #4]
 802640c:	6952      	ldr	r2, [r2, #20]
 802640e:	3a01      	subs	r2, #1
 8026410:	0212      	lsls	r2, r2, #8
 8026412:	4311      	orrs	r1, r2
 8026414:	687a      	ldr	r2, [r7, #4]
 8026416:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8026418:	4311      	orrs	r1, r2
 802641a:	687a      	ldr	r2, [r7, #4]
 802641c:	69d2      	ldr	r2, [r2, #28]
 802641e:	4311      	orrs	r1, r2
 8026420:	687a      	ldr	r2, [r7, #4]
 8026422:	6812      	ldr	r2, [r2, #0]
 8026424:	430b      	orrs	r3, r1
 8026426:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8026428:	687b      	ldr	r3, [r7, #4]
 802642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802642c:	687b      	ldr	r3, [r7, #4]
 802642e:	681b      	ldr	r3, [r3, #0]
 8026430:	0412      	lsls	r2, r2, #16
 8026432:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8026434:	687b      	ldr	r3, [r7, #4]
 8026436:	681b      	ldr	r3, [r3, #0]
 8026438:	681b      	ldr	r3, [r3, #0]
 802643a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 802643e:	687b      	ldr	r3, [r7, #4]
 8026440:	685b      	ldr	r3, [r3, #4]
 8026442:	3b01      	subs	r3, #1
 8026444:	021a      	lsls	r2, r3, #8
 8026446:	687b      	ldr	r3, [r7, #4]
 8026448:	681b      	ldr	r3, [r3, #0]
 802644a:	430a      	orrs	r2, r1
 802644c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 802644e:	687b      	ldr	r3, [r7, #4]
 8026450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026452:	9300      	str	r3, [sp, #0]
 8026454:	68bb      	ldr	r3, [r7, #8]
 8026456:	2200      	movs	r2, #0
 8026458:	2120      	movs	r1, #32
 802645a:	6878      	ldr	r0, [r7, #4]
 802645c:	f000 fddc 	bl	8027018 <OSPI_WaitFlagStateUntilTimeout>
 8026460:	4603      	mov	r3, r0
 8026462:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8026464:	7bfb      	ldrb	r3, [r7, #15]
 8026466:	2b00      	cmp	r3, #0
 8026468:	d146      	bne.n	80264f8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 802646a:	687b      	ldr	r3, [r7, #4]
 802646c:	681b      	ldr	r3, [r3, #0]
 802646e:	68db      	ldr	r3, [r3, #12]
 8026470:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8026474:	687b      	ldr	r3, [r7, #4]
 8026476:	6a1b      	ldr	r3, [r3, #32]
 8026478:	1e5a      	subs	r2, r3, #1
 802647a:	687b      	ldr	r3, [r7, #4]
 802647c:	681b      	ldr	r3, [r3, #0]
 802647e:	430a      	orrs	r2, r1
 8026480:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8026482:	687b      	ldr	r3, [r7, #4]
 8026484:	681b      	ldr	r3, [r3, #0]
 8026486:	681b      	ldr	r3, [r3, #0]
 8026488:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 802648c:	687b      	ldr	r3, [r7, #4]
 802648e:	689a      	ldr	r2, [r3, #8]
 8026490:	687b      	ldr	r3, [r7, #4]
 8026492:	681b      	ldr	r3, [r3, #0]
 8026494:	430a      	orrs	r2, r1
 8026496:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8026498:	687b      	ldr	r3, [r7, #4]
 802649a:	681b      	ldr	r3, [r3, #0]
 802649c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80264a0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80264a4:	687b      	ldr	r3, [r7, #4]
 80264a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80264a8:	687b      	ldr	r3, [r7, #4]
 80264aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80264ac:	431a      	orrs	r2, r3
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	681b      	ldr	r3, [r3, #0]
 80264b2:	430a      	orrs	r2, r1
 80264b4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80264b8:	687b      	ldr	r3, [r7, #4]
 80264ba:	681b      	ldr	r3, [r3, #0]
 80264bc:	681a      	ldr	r2, [r3, #0]
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	681b      	ldr	r3, [r3, #0]
 80264c2:	f042 0201 	orr.w	r2, r2, #1
 80264c6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80264c8:	687b      	ldr	r3, [r7, #4]
 80264ca:	699b      	ldr	r3, [r3, #24]
 80264cc:	2b02      	cmp	r3, #2
 80264ce:	d107      	bne.n	80264e0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80264d0:	687b      	ldr	r3, [r7, #4]
 80264d2:	681b      	ldr	r3, [r3, #0]
 80264d4:	689a      	ldr	r2, [r3, #8]
 80264d6:	687b      	ldr	r3, [r7, #4]
 80264d8:	681b      	ldr	r3, [r3, #0]
 80264da:	f042 0202 	orr.w	r2, r2, #2
 80264de:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80264e0:	687b      	ldr	r3, [r7, #4]
 80264e2:	68db      	ldr	r3, [r3, #12]
 80264e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80264e8:	d103      	bne.n	80264f2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80264ea:	687b      	ldr	r3, [r7, #4]
 80264ec:	2201      	movs	r2, #1
 80264ee:	645a      	str	r2, [r3, #68]	; 0x44
 80264f0:	e002      	b.n	80264f8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80264f2:	687b      	ldr	r3, [r7, #4]
 80264f4:	2202      	movs	r2, #2
 80264f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80264f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80264fa:	4618      	mov	r0, r3
 80264fc:	3710      	adds	r7, #16
 80264fe:	46bd      	mov	sp, r7
 8026500:	bd80      	pop	{r7, pc}
 8026502:	bf00      	nop
 8026504:	f8e0f8f4 	.word	0xf8e0f8f4

08026508 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8026508:	b580      	push	{r7, lr}
 802650a:	b084      	sub	sp, #16
 802650c:	af00      	add	r7, sp, #0
 802650e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8026510:	2300      	movs	r3, #0
 8026512:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8026514:	687b      	ldr	r3, [r7, #4]
 8026516:	2b00      	cmp	r3, #0
 8026518:	d102      	bne.n	8026520 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 802651a:	2301      	movs	r3, #1
 802651c:	73fb      	strb	r3, [r7, #15]
 802651e:	e015      	b.n	802654c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8026520:	687b      	ldr	r3, [r7, #4]
 8026522:	681b      	ldr	r3, [r3, #0]
 8026524:	681a      	ldr	r2, [r3, #0]
 8026526:	687b      	ldr	r3, [r7, #4]
 8026528:	681b      	ldr	r3, [r3, #0]
 802652a:	f022 0201 	bic.w	r2, r2, #1
 802652e:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8026530:	687b      	ldr	r3, [r7, #4]
 8026532:	681b      	ldr	r3, [r3, #0]
 8026534:	689a      	ldr	r2, [r3, #8]
 8026536:	687b      	ldr	r3, [r7, #4]
 8026538:	681b      	ldr	r3, [r3, #0]
 802653a:	f022 0202 	bic.w	r2, r2, #2
 802653e:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8026540:	6878      	ldr	r0, [r7, #4]
 8026542:	f7fd fa57 	bl	80239f4 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8026546:	687b      	ldr	r3, [r7, #4]
 8026548:	2200      	movs	r2, #0
 802654a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 802654c:	7bfb      	ldrb	r3, [r7, #15]
}
 802654e:	4618      	mov	r0, r3
 8026550:	3710      	adds	r7, #16
 8026552:	46bd      	mov	sp, r7
 8026554:	bd80      	pop	{r7, pc}

08026556 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8026556:	b580      	push	{r7, lr}
 8026558:	b08a      	sub	sp, #40	; 0x28
 802655a:	af02      	add	r7, sp, #8
 802655c:	60f8      	str	r0, [r7, #12]
 802655e:	60b9      	str	r1, [r7, #8]
 8026560:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8026562:	f7fd fee3 	bl	802432c <HAL_GetTick>
 8026566:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8026568:	68bb      	ldr	r3, [r7, #8]
 802656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802656c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 802656e:	68fb      	ldr	r3, [r7, #12]
 8026570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026572:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8026574:	697b      	ldr	r3, [r7, #20]
 8026576:	2b02      	cmp	r3, #2
 8026578:	d104      	bne.n	8026584 <HAL_OSPI_Command+0x2e>
 802657a:	68fb      	ldr	r3, [r7, #12]
 802657c:	68db      	ldr	r3, [r3, #12]
 802657e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8026582:	d10d      	bne.n	80265a0 <HAL_OSPI_Command+0x4a>
 8026584:	697b      	ldr	r3, [r7, #20]
 8026586:	2b14      	cmp	r3, #20
 8026588:	d103      	bne.n	8026592 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 802658a:	68bb      	ldr	r3, [r7, #8]
 802658c:	681b      	ldr	r3, [r3, #0]
 802658e:	2b02      	cmp	r3, #2
 8026590:	d006      	beq.n	80265a0 <HAL_OSPI_Command+0x4a>
 8026592:	697b      	ldr	r3, [r7, #20]
 8026594:	2b24      	cmp	r3, #36	; 0x24
 8026596:	d153      	bne.n	8026640 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8026598:	68bb      	ldr	r3, [r7, #8]
 802659a:	681b      	ldr	r3, [r3, #0]
 802659c:	2b01      	cmp	r3, #1
 802659e:	d14f      	bne.n	8026640 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80265a0:	687b      	ldr	r3, [r7, #4]
 80265a2:	9300      	str	r3, [sp, #0]
 80265a4:	69bb      	ldr	r3, [r7, #24]
 80265a6:	2200      	movs	r2, #0
 80265a8:	2120      	movs	r1, #32
 80265aa:	68f8      	ldr	r0, [r7, #12]
 80265ac:	f000 fd34 	bl	8027018 <OSPI_WaitFlagStateUntilTimeout>
 80265b0:	4603      	mov	r3, r0
 80265b2:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80265b4:	7ffb      	ldrb	r3, [r7, #31]
 80265b6:	2b00      	cmp	r3, #0
 80265b8:	d148      	bne.n	802664c <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80265ba:	68fb      	ldr	r3, [r7, #12]
 80265bc:	2200      	movs	r2, #0
 80265be:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80265c0:	68b9      	ldr	r1, [r7, #8]
 80265c2:	68f8      	ldr	r0, [r7, #12]
 80265c4:	f000 fd60 	bl	8027088 <OSPI_ConfigCmd>
 80265c8:	4603      	mov	r3, r0
 80265ca:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80265cc:	7ffb      	ldrb	r3, [r7, #31]
 80265ce:	2b00      	cmp	r3, #0
 80265d0:	d13c      	bne.n	802664c <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80265d2:	68bb      	ldr	r3, [r7, #8]
 80265d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80265d6:	2b00      	cmp	r3, #0
 80265d8:	d10e      	bne.n	80265f8 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80265da:	687b      	ldr	r3, [r7, #4]
 80265dc:	9300      	str	r3, [sp, #0]
 80265de:	69bb      	ldr	r3, [r7, #24]
 80265e0:	2201      	movs	r2, #1
 80265e2:	2102      	movs	r1, #2
 80265e4:	68f8      	ldr	r0, [r7, #12]
 80265e6:	f000 fd17 	bl	8027018 <OSPI_WaitFlagStateUntilTimeout>
 80265ea:	4603      	mov	r3, r0
 80265ec:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80265ee:	68fb      	ldr	r3, [r7, #12]
 80265f0:	681b      	ldr	r3, [r3, #0]
 80265f2:	2202      	movs	r2, #2
 80265f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80265f6:	e029      	b.n	802664c <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80265f8:	68bb      	ldr	r3, [r7, #8]
 80265fa:	681b      	ldr	r3, [r3, #0]
 80265fc:	2b00      	cmp	r3, #0
 80265fe:	d103      	bne.n	8026608 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8026600:	68fb      	ldr	r3, [r7, #12]
 8026602:	2204      	movs	r2, #4
 8026604:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8026606:	e021      	b.n	802664c <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8026608:	68bb      	ldr	r3, [r7, #8]
 802660a:	681b      	ldr	r3, [r3, #0]
 802660c:	2b01      	cmp	r3, #1
 802660e:	d10b      	bne.n	8026628 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8026610:	68fb      	ldr	r3, [r7, #12]
 8026612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026614:	2b24      	cmp	r3, #36	; 0x24
 8026616:	d103      	bne.n	8026620 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8026618:	68fb      	ldr	r3, [r7, #12]
 802661a:	2204      	movs	r2, #4
 802661c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 802661e:	e015      	b.n	802664c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8026620:	68fb      	ldr	r3, [r7, #12]
 8026622:	2214      	movs	r2, #20
 8026624:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8026626:	e011      	b.n	802664c <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8026628:	68fb      	ldr	r3, [r7, #12]
 802662a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802662c:	2b14      	cmp	r3, #20
 802662e:	d103      	bne.n	8026638 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8026630:	68fb      	ldr	r3, [r7, #12]
 8026632:	2204      	movs	r2, #4
 8026634:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8026636:	e009      	b.n	802664c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8026638:	68fb      	ldr	r3, [r7, #12]
 802663a:	2224      	movs	r2, #36	; 0x24
 802663c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 802663e:	e005      	b.n	802664c <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8026640:	2301      	movs	r3, #1
 8026642:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8026644:	68fb      	ldr	r3, [r7, #12]
 8026646:	2210      	movs	r2, #16
 8026648:	649a      	str	r2, [r3, #72]	; 0x48
 802664a:	e000      	b.n	802664e <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 802664c:	bf00      	nop
  }

  /* Return function status */
  return status;
 802664e:	7ffb      	ldrb	r3, [r7, #31]
}
 8026650:	4618      	mov	r0, r3
 8026652:	3720      	adds	r7, #32
 8026654:	46bd      	mov	sp, r7
 8026656:	bd80      	pop	{r7, pc}

08026658 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8026658:	b580      	push	{r7, lr}
 802665a:	b08a      	sub	sp, #40	; 0x28
 802665c:	af02      	add	r7, sp, #8
 802665e:	60f8      	str	r0, [r7, #12]
 8026660:	60b9      	str	r1, [r7, #8]
 8026662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8026664:	f7fd fe62 	bl	802432c <HAL_GetTick>
 8026668:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 802666a:	68fb      	ldr	r3, [r7, #12]
 802666c:	681b      	ldr	r3, [r3, #0]
 802666e:	3350      	adds	r3, #80	; 0x50
 8026670:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8026672:	68bb      	ldr	r3, [r7, #8]
 8026674:	2b00      	cmp	r3, #0
 8026676:	d105      	bne.n	8026684 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8026678:	2301      	movs	r3, #1
 802667a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 802667c:	68fb      	ldr	r3, [r7, #12]
 802667e:	2208      	movs	r2, #8
 8026680:	649a      	str	r2, [r3, #72]	; 0x48
 8026682:	e057      	b.n	8026734 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8026684:	68fb      	ldr	r3, [r7, #12]
 8026686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026688:	2b04      	cmp	r3, #4
 802668a:	d14e      	bne.n	802672a <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 802668c:	68fb      	ldr	r3, [r7, #12]
 802668e:	681b      	ldr	r3, [r3, #0]
 8026690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026692:	1c5a      	adds	r2, r3, #1
 8026694:	68fb      	ldr	r3, [r7, #12]
 8026696:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8026698:	68fb      	ldr	r3, [r7, #12]
 802669a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802669c:	68fb      	ldr	r3, [r7, #12]
 802669e:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 80266a0:	68fb      	ldr	r3, [r7, #12]
 80266a2:	68ba      	ldr	r2, [r7, #8]
 80266a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80266a6:	68fb      	ldr	r3, [r7, #12]
 80266a8:	681b      	ldr	r3, [r3, #0]
 80266aa:	681a      	ldr	r2, [r3, #0]
 80266ac:	68fb      	ldr	r3, [r7, #12]
 80266ae:	681b      	ldr	r3, [r3, #0]
 80266b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80266b4:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80266b6:	687b      	ldr	r3, [r7, #4]
 80266b8:	9300      	str	r3, [sp, #0]
 80266ba:	69bb      	ldr	r3, [r7, #24]
 80266bc:	2201      	movs	r2, #1
 80266be:	2104      	movs	r1, #4
 80266c0:	68f8      	ldr	r0, [r7, #12]
 80266c2:	f000 fca9 	bl	8027018 <OSPI_WaitFlagStateUntilTimeout>
 80266c6:	4603      	mov	r3, r0
 80266c8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80266ca:	7ffb      	ldrb	r3, [r7, #31]
 80266cc:	2b00      	cmp	r3, #0
 80266ce:	d113      	bne.n	80266f8 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80266d0:	68fb      	ldr	r3, [r7, #12]
 80266d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80266d4:	781a      	ldrb	r2, [r3, #0]
 80266d6:	697b      	ldr	r3, [r7, #20]
 80266d8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80266da:	68fb      	ldr	r3, [r7, #12]
 80266dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80266de:	1c5a      	adds	r2, r3, #1
 80266e0:	68fb      	ldr	r3, [r7, #12]
 80266e2:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80266e4:	68fb      	ldr	r3, [r7, #12]
 80266e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266e8:	1e5a      	subs	r2, r3, #1
 80266ea:	68fb      	ldr	r3, [r7, #12]
 80266ec:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80266ee:	68fb      	ldr	r3, [r7, #12]
 80266f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266f2:	2b00      	cmp	r3, #0
 80266f4:	d1df      	bne.n	80266b6 <HAL_OSPI_Transmit+0x5e>
 80266f6:	e000      	b.n	80266fa <HAL_OSPI_Transmit+0xa2>
          break;
 80266f8:	bf00      	nop

      if (status == HAL_OK)
 80266fa:	7ffb      	ldrb	r3, [r7, #31]
 80266fc:	2b00      	cmp	r3, #0
 80266fe:	d119      	bne.n	8026734 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8026700:	687b      	ldr	r3, [r7, #4]
 8026702:	9300      	str	r3, [sp, #0]
 8026704:	69bb      	ldr	r3, [r7, #24]
 8026706:	2201      	movs	r2, #1
 8026708:	2102      	movs	r1, #2
 802670a:	68f8      	ldr	r0, [r7, #12]
 802670c:	f000 fc84 	bl	8027018 <OSPI_WaitFlagStateUntilTimeout>
 8026710:	4603      	mov	r3, r0
 8026712:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8026714:	7ffb      	ldrb	r3, [r7, #31]
 8026716:	2b00      	cmp	r3, #0
 8026718:	d10c      	bne.n	8026734 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 802671a:	68fb      	ldr	r3, [r7, #12]
 802671c:	681b      	ldr	r3, [r3, #0]
 802671e:	2202      	movs	r2, #2
 8026720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8026722:	68fb      	ldr	r3, [r7, #12]
 8026724:	2202      	movs	r2, #2
 8026726:	645a      	str	r2, [r3, #68]	; 0x44
 8026728:	e004      	b.n	8026734 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 802672a:	2301      	movs	r3, #1
 802672c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 802672e:	68fb      	ldr	r3, [r7, #12]
 8026730:	2210      	movs	r2, #16
 8026732:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8026734:	7ffb      	ldrb	r3, [r7, #31]
}
 8026736:	4618      	mov	r0, r3
 8026738:	3720      	adds	r7, #32
 802673a:	46bd      	mov	sp, r7
 802673c:	bd80      	pop	{r7, pc}

0802673e <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 802673e:	b580      	push	{r7, lr}
 8026740:	b08c      	sub	sp, #48	; 0x30
 8026742:	af02      	add	r7, sp, #8
 8026744:	60f8      	str	r0, [r7, #12]
 8026746:	60b9      	str	r1, [r7, #8]
 8026748:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 802674a:	f7fd fdef 	bl	802432c <HAL_GetTick>
 802674e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8026750:	68fb      	ldr	r3, [r7, #12]
 8026752:	681b      	ldr	r3, [r3, #0]
 8026754:	3350      	adds	r3, #80	; 0x50
 8026756:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8026758:	68fb      	ldr	r3, [r7, #12]
 802675a:	681b      	ldr	r3, [r3, #0]
 802675c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802675e:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8026760:	68fb      	ldr	r3, [r7, #12]
 8026762:	681b      	ldr	r3, [r3, #0]
 8026764:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8026768:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 802676a:	68bb      	ldr	r3, [r7, #8]
 802676c:	2b00      	cmp	r3, #0
 802676e:	d106      	bne.n	802677e <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8026770:	2301      	movs	r3, #1
 8026772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8026776:	68fb      	ldr	r3, [r7, #12]
 8026778:	2208      	movs	r2, #8
 802677a:	649a      	str	r2, [r3, #72]	; 0x48
 802677c:	e07c      	b.n	8026878 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 802677e:	68fb      	ldr	r3, [r7, #12]
 8026780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026782:	2b04      	cmp	r3, #4
 8026784:	d172      	bne.n	802686c <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8026786:	68fb      	ldr	r3, [r7, #12]
 8026788:	681b      	ldr	r3, [r3, #0]
 802678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802678c:	1c5a      	adds	r2, r3, #1
 802678e:	68fb      	ldr	r3, [r7, #12]
 8026790:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8026792:	68fb      	ldr	r3, [r7, #12]
 8026794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8026796:	68fb      	ldr	r3, [r7, #12]
 8026798:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 802679a:	68fb      	ldr	r3, [r7, #12]
 802679c:	68ba      	ldr	r2, [r7, #8]
 802679e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80267a0:	68fb      	ldr	r3, [r7, #12]
 80267a2:	681b      	ldr	r3, [r3, #0]
 80267a4:	681b      	ldr	r3, [r3, #0]
 80267a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80267aa:	68fb      	ldr	r3, [r7, #12]
 80267ac:	681b      	ldr	r3, [r3, #0]
 80267ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80267b2:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80267b4:	68fb      	ldr	r3, [r7, #12]
 80267b6:	68db      	ldr	r3, [r3, #12]
 80267b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80267bc:	d104      	bne.n	80267c8 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80267be:	68fb      	ldr	r3, [r7, #12]
 80267c0:	681b      	ldr	r3, [r3, #0]
 80267c2:	69ba      	ldr	r2, [r7, #24]
 80267c4:	649a      	str	r2, [r3, #72]	; 0x48
 80267c6:	e011      	b.n	80267ec <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80267c8:	68fb      	ldr	r3, [r7, #12]
 80267ca:	681b      	ldr	r3, [r3, #0]
 80267cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80267d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80267d4:	2b00      	cmp	r3, #0
 80267d6:	d004      	beq.n	80267e2 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80267d8:	68fb      	ldr	r3, [r7, #12]
 80267da:	681b      	ldr	r3, [r3, #0]
 80267dc:	69ba      	ldr	r2, [r7, #24]
 80267de:	649a      	str	r2, [r3, #72]	; 0x48
 80267e0:	e004      	b.n	80267ec <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80267e2:	68fb      	ldr	r3, [r7, #12]
 80267e4:	681b      	ldr	r3, [r3, #0]
 80267e6:	697a      	ldr	r2, [r7, #20]
 80267e8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80267ec:	687b      	ldr	r3, [r7, #4]
 80267ee:	9300      	str	r3, [sp, #0]
 80267f0:	6a3b      	ldr	r3, [r7, #32]
 80267f2:	2201      	movs	r2, #1
 80267f4:	2106      	movs	r1, #6
 80267f6:	68f8      	ldr	r0, [r7, #12]
 80267f8:	f000 fc0e 	bl	8027018 <OSPI_WaitFlagStateUntilTimeout>
 80267fc:	4603      	mov	r3, r0
 80267fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8026802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8026806:	2b00      	cmp	r3, #0
 8026808:	d114      	bne.n	8026834 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 802680a:	68fb      	ldr	r3, [r7, #12]
 802680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802680e:	69fa      	ldr	r2, [r7, #28]
 8026810:	7812      	ldrb	r2, [r2, #0]
 8026812:	b2d2      	uxtb	r2, r2
 8026814:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8026816:	68fb      	ldr	r3, [r7, #12]
 8026818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802681a:	1c5a      	adds	r2, r3, #1
 802681c:	68fb      	ldr	r3, [r7, #12]
 802681e:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8026820:	68fb      	ldr	r3, [r7, #12]
 8026822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026824:	1e5a      	subs	r2, r3, #1
 8026826:	68fb      	ldr	r3, [r7, #12]
 8026828:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 802682a:	68fb      	ldr	r3, [r7, #12]
 802682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802682e:	2b00      	cmp	r3, #0
 8026830:	d1dc      	bne.n	80267ec <HAL_OSPI_Receive+0xae>
 8026832:	e000      	b.n	8026836 <HAL_OSPI_Receive+0xf8>
          break;
 8026834:	bf00      	nop

      if (status == HAL_OK)
 8026836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802683a:	2b00      	cmp	r3, #0
 802683c:	d11c      	bne.n	8026878 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 802683e:	687b      	ldr	r3, [r7, #4]
 8026840:	9300      	str	r3, [sp, #0]
 8026842:	6a3b      	ldr	r3, [r7, #32]
 8026844:	2201      	movs	r2, #1
 8026846:	2102      	movs	r1, #2
 8026848:	68f8      	ldr	r0, [r7, #12]
 802684a:	f000 fbe5 	bl	8027018 <OSPI_WaitFlagStateUntilTimeout>
 802684e:	4603      	mov	r3, r0
 8026850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8026854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8026858:	2b00      	cmp	r3, #0
 802685a:	d10d      	bne.n	8026878 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 802685c:	68fb      	ldr	r3, [r7, #12]
 802685e:	681b      	ldr	r3, [r3, #0]
 8026860:	2202      	movs	r2, #2
 8026862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8026864:	68fb      	ldr	r3, [r7, #12]
 8026866:	2202      	movs	r2, #2
 8026868:	645a      	str	r2, [r3, #68]	; 0x44
 802686a:	e005      	b.n	8026878 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 802686c:	2301      	movs	r3, #1
 802686e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8026872:	68fb      	ldr	r3, [r7, #12]
 8026874:	2210      	movs	r2, #16
 8026876:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8026878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 802687c:	4618      	mov	r0, r3
 802687e:	3728      	adds	r7, #40	; 0x28
 8026880:	46bd      	mov	sp, r7
 8026882:	bd80      	pop	{r7, pc}

08026884 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8026884:	b580      	push	{r7, lr}
 8026886:	b08a      	sub	sp, #40	; 0x28
 8026888:	af02      	add	r7, sp, #8
 802688a:	60f8      	str	r0, [r7, #12]
 802688c:	60b9      	str	r1, [r7, #8]
 802688e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8026890:	f7fd fd4c 	bl	802432c <HAL_GetTick>
 8026894:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8026896:	68fb      	ldr	r3, [r7, #12]
 8026898:	681b      	ldr	r3, [r3, #0]
 802689a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802689c:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 802689e:	68fb      	ldr	r3, [r7, #12]
 80268a0:	681b      	ldr	r3, [r3, #0]
 80268a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80268a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80268a8:	68fb      	ldr	r3, [r7, #12]
 80268aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80268ac:	2b04      	cmp	r3, #4
 80268ae:	d164      	bne.n	802697a <HAL_OSPI_AutoPolling+0xf6>
 80268b0:	68bb      	ldr	r3, [r7, #8]
 80268b2:	68db      	ldr	r3, [r3, #12]
 80268b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80268b8:	d15f      	bne.n	802697a <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80268ba:	687b      	ldr	r3, [r7, #4]
 80268bc:	9300      	str	r3, [sp, #0]
 80268be:	69bb      	ldr	r3, [r7, #24]
 80268c0:	2200      	movs	r2, #0
 80268c2:	2120      	movs	r1, #32
 80268c4:	68f8      	ldr	r0, [r7, #12]
 80268c6:	f000 fba7 	bl	8027018 <OSPI_WaitFlagStateUntilTimeout>
 80268ca:	4603      	mov	r3, r0
 80268cc:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80268ce:	7ffb      	ldrb	r3, [r7, #31]
 80268d0:	2b00      	cmp	r3, #0
 80268d2:	d158      	bne.n	8026986 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80268d4:	68fb      	ldr	r3, [r7, #12]
 80268d6:	681b      	ldr	r3, [r3, #0]
 80268d8:	68ba      	ldr	r2, [r7, #8]
 80268da:	6812      	ldr	r2, [r2, #0]
 80268dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80268e0:	68fb      	ldr	r3, [r7, #12]
 80268e2:	681b      	ldr	r3, [r3, #0]
 80268e4:	68ba      	ldr	r2, [r7, #8]
 80268e6:	6852      	ldr	r2, [r2, #4]
 80268e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80268ec:	68fb      	ldr	r3, [r7, #12]
 80268ee:	681b      	ldr	r3, [r3, #0]
 80268f0:	68ba      	ldr	r2, [r7, #8]
 80268f2:	6912      	ldr	r2, [r2, #16]
 80268f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80268f8:	68fb      	ldr	r3, [r7, #12]
 80268fa:	681b      	ldr	r3, [r3, #0]
 80268fc:	681b      	ldr	r3, [r3, #0]
 80268fe:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8026902:	68bb      	ldr	r3, [r7, #8]
 8026904:	6899      	ldr	r1, [r3, #8]
 8026906:	68bb      	ldr	r3, [r7, #8]
 8026908:	68db      	ldr	r3, [r3, #12]
 802690a:	430b      	orrs	r3, r1
 802690c:	431a      	orrs	r2, r3
 802690e:	68fb      	ldr	r3, [r7, #12]
 8026910:	681b      	ldr	r3, [r3, #0]
 8026912:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8026916:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8026918:	68fb      	ldr	r3, [r7, #12]
 802691a:	68db      	ldr	r3, [r3, #12]
 802691c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8026920:	d104      	bne.n	802692c <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8026922:	68fb      	ldr	r3, [r7, #12]
 8026924:	681b      	ldr	r3, [r3, #0]
 8026926:	697a      	ldr	r2, [r7, #20]
 8026928:	649a      	str	r2, [r3, #72]	; 0x48
 802692a:	e011      	b.n	8026950 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 802692c:	68fb      	ldr	r3, [r7, #12]
 802692e:	681b      	ldr	r3, [r3, #0]
 8026930:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8026934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8026938:	2b00      	cmp	r3, #0
 802693a:	d004      	beq.n	8026946 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 802693c:	68fb      	ldr	r3, [r7, #12]
 802693e:	681b      	ldr	r3, [r3, #0]
 8026940:	697a      	ldr	r2, [r7, #20]
 8026942:	649a      	str	r2, [r3, #72]	; 0x48
 8026944:	e004      	b.n	8026950 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8026946:	68fb      	ldr	r3, [r7, #12]
 8026948:	681b      	ldr	r3, [r3, #0]
 802694a:	693a      	ldr	r2, [r7, #16]
 802694c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8026950:	687b      	ldr	r3, [r7, #4]
 8026952:	9300      	str	r3, [sp, #0]
 8026954:	69bb      	ldr	r3, [r7, #24]
 8026956:	2201      	movs	r2, #1
 8026958:	2108      	movs	r1, #8
 802695a:	68f8      	ldr	r0, [r7, #12]
 802695c:	f000 fb5c 	bl	8027018 <OSPI_WaitFlagStateUntilTimeout>
 8026960:	4603      	mov	r3, r0
 8026962:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8026964:	7ffb      	ldrb	r3, [r7, #31]
 8026966:	2b00      	cmp	r3, #0
 8026968:	d10d      	bne.n	8026986 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 802696a:	68fb      	ldr	r3, [r7, #12]
 802696c:	681b      	ldr	r3, [r3, #0]
 802696e:	2208      	movs	r2, #8
 8026970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8026972:	68fb      	ldr	r3, [r7, #12]
 8026974:	2202      	movs	r2, #2
 8026976:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8026978:	e005      	b.n	8026986 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 802697a:	2301      	movs	r3, #1
 802697c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 802697e:	68fb      	ldr	r3, [r7, #12]
 8026980:	2210      	movs	r2, #16
 8026982:	649a      	str	r2, [r3, #72]	; 0x48
 8026984:	e000      	b.n	8026988 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8026986:	bf00      	nop
  }

  /* Return function status */
  return status;
 8026988:	7ffb      	ldrb	r3, [r7, #31]
}
 802698a:	4618      	mov	r0, r3
 802698c:	3720      	adds	r7, #32
 802698e:	46bd      	mov	sp, r7
 8026990:	bd80      	pop	{r7, pc}

08026992 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8026992:	b480      	push	{r7}
 8026994:	b083      	sub	sp, #12
 8026996:	af00      	add	r7, sp, #0
 8026998:	6078      	str	r0, [r7, #4]
 802699a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	683a      	ldr	r2, [r7, #0]
 80269a0:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80269a2:	2300      	movs	r3, #0
}
 80269a4:	4618      	mov	r0, r3
 80269a6:	370c      	adds	r7, #12
 80269a8:	46bd      	mov	sp, r7
 80269aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269ae:	4770      	bx	lr

080269b0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80269b0:	b580      	push	{r7, lr}
 80269b2:	b092      	sub	sp, #72	; 0x48
 80269b4:	af00      	add	r7, sp, #0
 80269b6:	60f8      	str	r0, [r7, #12]
 80269b8:	60b9      	str	r1, [r7, #8]
 80269ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80269bc:	2300      	movs	r3, #0
 80269be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80269c2:	2300      	movs	r3, #0
 80269c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80269c8:	68fb      	ldr	r3, [r7, #12]
 80269ca:	681b      	ldr	r3, [r3, #0]
 80269cc:	4a08      	ldr	r2, [pc, #32]	; (80269f0 <HAL_OSPIM_Config+0x40>)
 80269ce:	4293      	cmp	r3, r2
 80269d0:	d105      	bne.n	80269de <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80269d2:	2300      	movs	r3, #0
 80269d4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80269d6:	2301      	movs	r3, #1
 80269d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80269dc:	e004      	b.n	80269e8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80269de:	2301      	movs	r3, #1
 80269e0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80269e2:	2300      	movs	r3, #0
 80269e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80269e8:	2300      	movs	r3, #0
 80269ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80269ee:	e01f      	b.n	8026a30 <HAL_OSPIM_Config+0x80>
 80269f0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80269f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80269f8:	3301      	adds	r3, #1
 80269fa:	b2d8      	uxtb	r0, r3
 80269fc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8026a00:	f107 0114 	add.w	r1, r7, #20
 8026a04:	4613      	mov	r3, r2
 8026a06:	009b      	lsls	r3, r3, #2
 8026a08:	4413      	add	r3, r2
 8026a0a:	009b      	lsls	r3, r3, #2
 8026a0c:	440b      	add	r3, r1
 8026a0e:	4619      	mov	r1, r3
 8026a10:	f000 fc9c 	bl	802734c <OSPIM_GetConfig>
 8026a14:	4603      	mov	r3, r0
 8026a16:	2b00      	cmp	r3, #0
 8026a18:	d005      	beq.n	8026a26 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8026a1a:	2301      	movs	r3, #1
 8026a1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8026a20:	68fb      	ldr	r3, [r7, #12]
 8026a22:	2208      	movs	r2, #8
 8026a24:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8026a26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8026a2a:	3301      	adds	r3, #1
 8026a2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8026a30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8026a34:	2b01      	cmp	r3, #1
 8026a36:	d9dd      	bls.n	80269f4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8026a38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8026a3c:	2b00      	cmp	r3, #0
 8026a3e:	f040 82de 	bne.w	8026ffe <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8026a42:	4bc6      	ldr	r3, [pc, #792]	; (8026d5c <HAL_OSPIM_Config+0x3ac>)
 8026a44:	681b      	ldr	r3, [r3, #0]
 8026a46:	f003 0301 	and.w	r3, r3, #1
 8026a4a:	2b00      	cmp	r3, #0
 8026a4c:	d00b      	beq.n	8026a66 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8026a4e:	4bc3      	ldr	r3, [pc, #780]	; (8026d5c <HAL_OSPIM_Config+0x3ac>)
 8026a50:	681b      	ldr	r3, [r3, #0]
 8026a52:	4ac2      	ldr	r2, [pc, #776]	; (8026d5c <HAL_OSPIM_Config+0x3ac>)
 8026a54:	f023 0301 	bic.w	r3, r3, #1
 8026a58:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8026a5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026a5e:	f043 0301 	orr.w	r3, r3, #1
 8026a62:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8026a66:	4bbe      	ldr	r3, [pc, #760]	; (8026d60 <HAL_OSPIM_Config+0x3b0>)
 8026a68:	681b      	ldr	r3, [r3, #0]
 8026a6a:	f003 0301 	and.w	r3, r3, #1
 8026a6e:	2b00      	cmp	r3, #0
 8026a70:	d00b      	beq.n	8026a8a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8026a72:	4bbb      	ldr	r3, [pc, #748]	; (8026d60 <HAL_OSPIM_Config+0x3b0>)
 8026a74:	681b      	ldr	r3, [r3, #0]
 8026a76:	4aba      	ldr	r2, [pc, #744]	; (8026d60 <HAL_OSPIM_Config+0x3b0>)
 8026a78:	f023 0301 	bic.w	r3, r3, #1
 8026a7c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8026a7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026a82:	f043 0302 	orr.w	r3, r3, #2
 8026a86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8026a8a:	49b6      	ldr	r1, [pc, #728]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026a8e:	4613      	mov	r3, r2
 8026a90:	009b      	lsls	r3, r3, #2
 8026a92:	4413      	add	r3, r2
 8026a94:	009b      	lsls	r3, r3, #2
 8026a96:	3348      	adds	r3, #72	; 0x48
 8026a98:	443b      	add	r3, r7
 8026a9a:	3b2c      	subs	r3, #44	; 0x2c
 8026a9c:	681b      	ldr	r3, [r3, #0]
 8026a9e:	3b01      	subs	r3, #1
 8026aa0:	009b      	lsls	r3, r3, #2
 8026aa2:	440b      	add	r3, r1
 8026aa4:	6859      	ldr	r1, [r3, #4]
 8026aa6:	48af      	ldr	r0, [pc, #700]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026aaa:	4613      	mov	r3, r2
 8026aac:	009b      	lsls	r3, r3, #2
 8026aae:	4413      	add	r3, r2
 8026ab0:	009b      	lsls	r3, r3, #2
 8026ab2:	3348      	adds	r3, #72	; 0x48
 8026ab4:	443b      	add	r3, r7
 8026ab6:	3b2c      	subs	r3, #44	; 0x2c
 8026ab8:	681b      	ldr	r3, [r3, #0]
 8026aba:	3b01      	subs	r3, #1
 8026abc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8026ac0:	009b      	lsls	r3, r3, #2
 8026ac2:	4403      	add	r3, r0
 8026ac4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8026ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026ac8:	4613      	mov	r3, r2
 8026aca:	009b      	lsls	r3, r3, #2
 8026acc:	4413      	add	r3, r2
 8026ace:	009b      	lsls	r3, r3, #2
 8026ad0:	3348      	adds	r3, #72	; 0x48
 8026ad2:	443b      	add	r3, r7
 8026ad4:	3b34      	subs	r3, #52	; 0x34
 8026ad6:	681b      	ldr	r3, [r3, #0]
 8026ad8:	2b00      	cmp	r3, #0
 8026ada:	f000 80a1 	beq.w	8026c20 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8026ade:	49a1      	ldr	r1, [pc, #644]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026ae0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026ae2:	4613      	mov	r3, r2
 8026ae4:	009b      	lsls	r3, r3, #2
 8026ae6:	4413      	add	r3, r2
 8026ae8:	009b      	lsls	r3, r3, #2
 8026aea:	3348      	adds	r3, #72	; 0x48
 8026aec:	443b      	add	r3, r7
 8026aee:	3b34      	subs	r3, #52	; 0x34
 8026af0:	681b      	ldr	r3, [r3, #0]
 8026af2:	3b01      	subs	r3, #1
 8026af4:	009b      	lsls	r3, r3, #2
 8026af6:	440b      	add	r3, r1
 8026af8:	6859      	ldr	r1, [r3, #4]
 8026afa:	489a      	ldr	r0, [pc, #616]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026afe:	4613      	mov	r3, r2
 8026b00:	009b      	lsls	r3, r3, #2
 8026b02:	4413      	add	r3, r2
 8026b04:	009b      	lsls	r3, r3, #2
 8026b06:	3348      	adds	r3, #72	; 0x48
 8026b08:	443b      	add	r3, r7
 8026b0a:	3b34      	subs	r3, #52	; 0x34
 8026b0c:	681b      	ldr	r3, [r3, #0]
 8026b0e:	3b01      	subs	r3, #1
 8026b10:	f021 0201 	bic.w	r2, r1, #1
 8026b14:	009b      	lsls	r3, r3, #2
 8026b16:	4403      	add	r3, r0
 8026b18:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8026b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b1c:	4613      	mov	r3, r2
 8026b1e:	009b      	lsls	r3, r3, #2
 8026b20:	4413      	add	r3, r2
 8026b22:	009b      	lsls	r3, r3, #2
 8026b24:	3348      	adds	r3, #72	; 0x48
 8026b26:	443b      	add	r3, r7
 8026b28:	3b30      	subs	r3, #48	; 0x30
 8026b2a:	681b      	ldr	r3, [r3, #0]
 8026b2c:	2b00      	cmp	r3, #0
 8026b2e:	d01d      	beq.n	8026b6c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8026b30:	498c      	ldr	r1, [pc, #560]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b34:	4613      	mov	r3, r2
 8026b36:	009b      	lsls	r3, r3, #2
 8026b38:	4413      	add	r3, r2
 8026b3a:	009b      	lsls	r3, r3, #2
 8026b3c:	3348      	adds	r3, #72	; 0x48
 8026b3e:	443b      	add	r3, r7
 8026b40:	3b30      	subs	r3, #48	; 0x30
 8026b42:	681b      	ldr	r3, [r3, #0]
 8026b44:	3b01      	subs	r3, #1
 8026b46:	009b      	lsls	r3, r3, #2
 8026b48:	440b      	add	r3, r1
 8026b4a:	6859      	ldr	r1, [r3, #4]
 8026b4c:	4885      	ldr	r0, [pc, #532]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b50:	4613      	mov	r3, r2
 8026b52:	009b      	lsls	r3, r3, #2
 8026b54:	4413      	add	r3, r2
 8026b56:	009b      	lsls	r3, r3, #2
 8026b58:	3348      	adds	r3, #72	; 0x48
 8026b5a:	443b      	add	r3, r7
 8026b5c:	3b30      	subs	r3, #48	; 0x30
 8026b5e:	681b      	ldr	r3, [r3, #0]
 8026b60:	3b01      	subs	r3, #1
 8026b62:	f021 0210 	bic.w	r2, r1, #16
 8026b66:	009b      	lsls	r3, r3, #2
 8026b68:	4403      	add	r3, r0
 8026b6a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8026b6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b6e:	4613      	mov	r3, r2
 8026b70:	009b      	lsls	r3, r3, #2
 8026b72:	4413      	add	r3, r2
 8026b74:	009b      	lsls	r3, r3, #2
 8026b76:	3348      	adds	r3, #72	; 0x48
 8026b78:	443b      	add	r3, r7
 8026b7a:	3b28      	subs	r3, #40	; 0x28
 8026b7c:	681b      	ldr	r3, [r3, #0]
 8026b7e:	2b00      	cmp	r3, #0
 8026b80:	d021      	beq.n	8026bc6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8026b82:	4978      	ldr	r1, [pc, #480]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b86:	4613      	mov	r3, r2
 8026b88:	009b      	lsls	r3, r3, #2
 8026b8a:	4413      	add	r3, r2
 8026b8c:	009b      	lsls	r3, r3, #2
 8026b8e:	3348      	adds	r3, #72	; 0x48
 8026b90:	443b      	add	r3, r7
 8026b92:	3b28      	subs	r3, #40	; 0x28
 8026b94:	681b      	ldr	r3, [r3, #0]
 8026b96:	3b01      	subs	r3, #1
 8026b98:	f003 0301 	and.w	r3, r3, #1
 8026b9c:	009b      	lsls	r3, r3, #2
 8026b9e:	440b      	add	r3, r1
 8026ba0:	6859      	ldr	r1, [r3, #4]
 8026ba2:	4870      	ldr	r0, [pc, #448]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026ba6:	4613      	mov	r3, r2
 8026ba8:	009b      	lsls	r3, r3, #2
 8026baa:	4413      	add	r3, r2
 8026bac:	009b      	lsls	r3, r3, #2
 8026bae:	3348      	adds	r3, #72	; 0x48
 8026bb0:	443b      	add	r3, r7
 8026bb2:	3b28      	subs	r3, #40	; 0x28
 8026bb4:	681b      	ldr	r3, [r3, #0]
 8026bb6:	3b01      	subs	r3, #1
 8026bb8:	f003 0301 	and.w	r3, r3, #1
 8026bbc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8026bc0:	009b      	lsls	r3, r3, #2
 8026bc2:	4403      	add	r3, r0
 8026bc4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8026bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026bc8:	4613      	mov	r3, r2
 8026bca:	009b      	lsls	r3, r3, #2
 8026bcc:	4413      	add	r3, r2
 8026bce:	009b      	lsls	r3, r3, #2
 8026bd0:	3348      	adds	r3, #72	; 0x48
 8026bd2:	443b      	add	r3, r7
 8026bd4:	3b24      	subs	r3, #36	; 0x24
 8026bd6:	681b      	ldr	r3, [r3, #0]
 8026bd8:	2b00      	cmp	r3, #0
 8026bda:	d021      	beq.n	8026c20 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8026bdc:	4961      	ldr	r1, [pc, #388]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026be0:	4613      	mov	r3, r2
 8026be2:	009b      	lsls	r3, r3, #2
 8026be4:	4413      	add	r3, r2
 8026be6:	009b      	lsls	r3, r3, #2
 8026be8:	3348      	adds	r3, #72	; 0x48
 8026bea:	443b      	add	r3, r7
 8026bec:	3b24      	subs	r3, #36	; 0x24
 8026bee:	681b      	ldr	r3, [r3, #0]
 8026bf0:	3b01      	subs	r3, #1
 8026bf2:	f003 0301 	and.w	r3, r3, #1
 8026bf6:	009b      	lsls	r3, r3, #2
 8026bf8:	440b      	add	r3, r1
 8026bfa:	6859      	ldr	r1, [r3, #4]
 8026bfc:	4859      	ldr	r0, [pc, #356]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026c00:	4613      	mov	r3, r2
 8026c02:	009b      	lsls	r3, r3, #2
 8026c04:	4413      	add	r3, r2
 8026c06:	009b      	lsls	r3, r3, #2
 8026c08:	3348      	adds	r3, #72	; 0x48
 8026c0a:	443b      	add	r3, r7
 8026c0c:	3b24      	subs	r3, #36	; 0x24
 8026c0e:	681b      	ldr	r3, [r3, #0]
 8026c10:	3b01      	subs	r3, #1
 8026c12:	f003 0301 	and.w	r3, r3, #1
 8026c16:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8026c1a:	009b      	lsls	r3, r3, #2
 8026c1c:	4403      	add	r3, r0
 8026c1e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8026c20:	68bb      	ldr	r3, [r7, #8]
 8026c22:	6819      	ldr	r1, [r3, #0]
 8026c24:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c28:	4613      	mov	r3, r2
 8026c2a:	009b      	lsls	r3, r3, #2
 8026c2c:	4413      	add	r3, r2
 8026c2e:	009b      	lsls	r3, r3, #2
 8026c30:	3348      	adds	r3, #72	; 0x48
 8026c32:	443b      	add	r3, r7
 8026c34:	3b34      	subs	r3, #52	; 0x34
 8026c36:	681b      	ldr	r3, [r3, #0]
 8026c38:	4299      	cmp	r1, r3
 8026c3a:	d038      	beq.n	8026cae <HAL_OSPIM_Config+0x2fe>
 8026c3c:	68bb      	ldr	r3, [r7, #8]
 8026c3e:	6859      	ldr	r1, [r3, #4]
 8026c40:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c44:	4613      	mov	r3, r2
 8026c46:	009b      	lsls	r3, r3, #2
 8026c48:	4413      	add	r3, r2
 8026c4a:	009b      	lsls	r3, r3, #2
 8026c4c:	3348      	adds	r3, #72	; 0x48
 8026c4e:	443b      	add	r3, r7
 8026c50:	3b30      	subs	r3, #48	; 0x30
 8026c52:	681b      	ldr	r3, [r3, #0]
 8026c54:	4299      	cmp	r1, r3
 8026c56:	d02a      	beq.n	8026cae <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8026c58:	68bb      	ldr	r3, [r7, #8]
 8026c5a:	6899      	ldr	r1, [r3, #8]
 8026c5c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c60:	4613      	mov	r3, r2
 8026c62:	009b      	lsls	r3, r3, #2
 8026c64:	4413      	add	r3, r2
 8026c66:	009b      	lsls	r3, r3, #2
 8026c68:	3348      	adds	r3, #72	; 0x48
 8026c6a:	443b      	add	r3, r7
 8026c6c:	3b2c      	subs	r3, #44	; 0x2c
 8026c6e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8026c70:	4299      	cmp	r1, r3
 8026c72:	d01c      	beq.n	8026cae <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8026c74:	68bb      	ldr	r3, [r7, #8]
 8026c76:	68d9      	ldr	r1, [r3, #12]
 8026c78:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c7c:	4613      	mov	r3, r2
 8026c7e:	009b      	lsls	r3, r3, #2
 8026c80:	4413      	add	r3, r2
 8026c82:	009b      	lsls	r3, r3, #2
 8026c84:	3348      	adds	r3, #72	; 0x48
 8026c86:	443b      	add	r3, r7
 8026c88:	3b28      	subs	r3, #40	; 0x28
 8026c8a:	681b      	ldr	r3, [r3, #0]
 8026c8c:	4299      	cmp	r1, r3
 8026c8e:	d00e      	beq.n	8026cae <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8026c90:	68bb      	ldr	r3, [r7, #8]
 8026c92:	6919      	ldr	r1, [r3, #16]
 8026c94:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c98:	4613      	mov	r3, r2
 8026c9a:	009b      	lsls	r3, r3, #2
 8026c9c:	4413      	add	r3, r2
 8026c9e:	009b      	lsls	r3, r3, #2
 8026ca0:	3348      	adds	r3, #72	; 0x48
 8026ca2:	443b      	add	r3, r7
 8026ca4:	3b24      	subs	r3, #36	; 0x24
 8026ca6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8026ca8:	4299      	cmp	r1, r3
 8026caa:	f040 80d3 	bne.w	8026e54 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8026cae:	492d      	ldr	r1, [pc, #180]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026cb0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026cb4:	4613      	mov	r3, r2
 8026cb6:	009b      	lsls	r3, r3, #2
 8026cb8:	4413      	add	r3, r2
 8026cba:	009b      	lsls	r3, r3, #2
 8026cbc:	3348      	adds	r3, #72	; 0x48
 8026cbe:	443b      	add	r3, r7
 8026cc0:	3b34      	subs	r3, #52	; 0x34
 8026cc2:	681b      	ldr	r3, [r3, #0]
 8026cc4:	3b01      	subs	r3, #1
 8026cc6:	009b      	lsls	r3, r3, #2
 8026cc8:	440b      	add	r3, r1
 8026cca:	6859      	ldr	r1, [r3, #4]
 8026ccc:	4825      	ldr	r0, [pc, #148]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026cce:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026cd2:	4613      	mov	r3, r2
 8026cd4:	009b      	lsls	r3, r3, #2
 8026cd6:	4413      	add	r3, r2
 8026cd8:	009b      	lsls	r3, r3, #2
 8026cda:	3348      	adds	r3, #72	; 0x48
 8026cdc:	443b      	add	r3, r7
 8026cde:	3b34      	subs	r3, #52	; 0x34
 8026ce0:	681b      	ldr	r3, [r3, #0]
 8026ce2:	3b01      	subs	r3, #1
 8026ce4:	f021 0201 	bic.w	r2, r1, #1
 8026ce8:	009b      	lsls	r3, r3, #2
 8026cea:	4403      	add	r3, r0
 8026cec:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8026cee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026cf2:	4613      	mov	r3, r2
 8026cf4:	009b      	lsls	r3, r3, #2
 8026cf6:	4413      	add	r3, r2
 8026cf8:	009b      	lsls	r3, r3, #2
 8026cfa:	3348      	adds	r3, #72	; 0x48
 8026cfc:	443b      	add	r3, r7
 8026cfe:	3b30      	subs	r3, #48	; 0x30
 8026d00:	681b      	ldr	r3, [r3, #0]
 8026d02:	2b00      	cmp	r3, #0
 8026d04:	d01f      	beq.n	8026d46 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8026d06:	4917      	ldr	r1, [pc, #92]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026d08:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d0c:	4613      	mov	r3, r2
 8026d0e:	009b      	lsls	r3, r3, #2
 8026d10:	4413      	add	r3, r2
 8026d12:	009b      	lsls	r3, r3, #2
 8026d14:	3348      	adds	r3, #72	; 0x48
 8026d16:	443b      	add	r3, r7
 8026d18:	3b30      	subs	r3, #48	; 0x30
 8026d1a:	681b      	ldr	r3, [r3, #0]
 8026d1c:	3b01      	subs	r3, #1
 8026d1e:	009b      	lsls	r3, r3, #2
 8026d20:	440b      	add	r3, r1
 8026d22:	6859      	ldr	r1, [r3, #4]
 8026d24:	480f      	ldr	r0, [pc, #60]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026d26:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d2a:	4613      	mov	r3, r2
 8026d2c:	009b      	lsls	r3, r3, #2
 8026d2e:	4413      	add	r3, r2
 8026d30:	009b      	lsls	r3, r3, #2
 8026d32:	3348      	adds	r3, #72	; 0x48
 8026d34:	443b      	add	r3, r7
 8026d36:	3b30      	subs	r3, #48	; 0x30
 8026d38:	681b      	ldr	r3, [r3, #0]
 8026d3a:	3b01      	subs	r3, #1
 8026d3c:	f021 0210 	bic.w	r2, r1, #16
 8026d40:	009b      	lsls	r3, r3, #2
 8026d42:	4403      	add	r3, r0
 8026d44:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8026d46:	4907      	ldr	r1, [pc, #28]	; (8026d64 <HAL_OSPIM_Config+0x3b4>)
 8026d48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d4c:	4613      	mov	r3, r2
 8026d4e:	009b      	lsls	r3, r3, #2
 8026d50:	4413      	add	r3, r2
 8026d52:	009b      	lsls	r3, r3, #2
 8026d54:	3348      	adds	r3, #72	; 0x48
 8026d56:	443b      	add	r3, r7
 8026d58:	3b2c      	subs	r3, #44	; 0x2c
 8026d5a:	e005      	b.n	8026d68 <HAL_OSPIM_Config+0x3b8>
 8026d5c:	a0001000 	.word	0xa0001000
 8026d60:	a0001400 	.word	0xa0001400
 8026d64:	50061c00 	.word	0x50061c00
 8026d68:	681b      	ldr	r3, [r3, #0]
 8026d6a:	3b01      	subs	r3, #1
 8026d6c:	009b      	lsls	r3, r3, #2
 8026d6e:	440b      	add	r3, r1
 8026d70:	6859      	ldr	r1, [r3, #4]
 8026d72:	48a6      	ldr	r0, [pc, #664]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026d74:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d78:	4613      	mov	r3, r2
 8026d7a:	009b      	lsls	r3, r3, #2
 8026d7c:	4413      	add	r3, r2
 8026d7e:	009b      	lsls	r3, r3, #2
 8026d80:	3348      	adds	r3, #72	; 0x48
 8026d82:	443b      	add	r3, r7
 8026d84:	3b2c      	subs	r3, #44	; 0x2c
 8026d86:	681b      	ldr	r3, [r3, #0]
 8026d88:	3b01      	subs	r3, #1
 8026d8a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8026d8e:	009b      	lsls	r3, r3, #2
 8026d90:	4403      	add	r3, r0
 8026d92:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8026d94:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d98:	4613      	mov	r3, r2
 8026d9a:	009b      	lsls	r3, r3, #2
 8026d9c:	4413      	add	r3, r2
 8026d9e:	009b      	lsls	r3, r3, #2
 8026da0:	3348      	adds	r3, #72	; 0x48
 8026da2:	443b      	add	r3, r7
 8026da4:	3b28      	subs	r3, #40	; 0x28
 8026da6:	681b      	ldr	r3, [r3, #0]
 8026da8:	2b00      	cmp	r3, #0
 8026daa:	d023      	beq.n	8026df4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8026dac:	4997      	ldr	r1, [pc, #604]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026dae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026db2:	4613      	mov	r3, r2
 8026db4:	009b      	lsls	r3, r3, #2
 8026db6:	4413      	add	r3, r2
 8026db8:	009b      	lsls	r3, r3, #2
 8026dba:	3348      	adds	r3, #72	; 0x48
 8026dbc:	443b      	add	r3, r7
 8026dbe:	3b28      	subs	r3, #40	; 0x28
 8026dc0:	681b      	ldr	r3, [r3, #0]
 8026dc2:	3b01      	subs	r3, #1
 8026dc4:	f003 0301 	and.w	r3, r3, #1
 8026dc8:	009b      	lsls	r3, r3, #2
 8026dca:	440b      	add	r3, r1
 8026dcc:	6859      	ldr	r1, [r3, #4]
 8026dce:	488f      	ldr	r0, [pc, #572]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026dd0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026dd4:	4613      	mov	r3, r2
 8026dd6:	009b      	lsls	r3, r3, #2
 8026dd8:	4413      	add	r3, r2
 8026dda:	009b      	lsls	r3, r3, #2
 8026ddc:	3348      	adds	r3, #72	; 0x48
 8026dde:	443b      	add	r3, r7
 8026de0:	3b28      	subs	r3, #40	; 0x28
 8026de2:	681b      	ldr	r3, [r3, #0]
 8026de4:	3b01      	subs	r3, #1
 8026de6:	f003 0301 	and.w	r3, r3, #1
 8026dea:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8026dee:	009b      	lsls	r3, r3, #2
 8026df0:	4403      	add	r3, r0
 8026df2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8026df4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026df8:	4613      	mov	r3, r2
 8026dfa:	009b      	lsls	r3, r3, #2
 8026dfc:	4413      	add	r3, r2
 8026dfe:	009b      	lsls	r3, r3, #2
 8026e00:	3348      	adds	r3, #72	; 0x48
 8026e02:	443b      	add	r3, r7
 8026e04:	3b24      	subs	r3, #36	; 0x24
 8026e06:	681b      	ldr	r3, [r3, #0]
 8026e08:	2b00      	cmp	r3, #0
 8026e0a:	d023      	beq.n	8026e54 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8026e0c:	497f      	ldr	r1, [pc, #508]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026e0e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026e12:	4613      	mov	r3, r2
 8026e14:	009b      	lsls	r3, r3, #2
 8026e16:	4413      	add	r3, r2
 8026e18:	009b      	lsls	r3, r3, #2
 8026e1a:	3348      	adds	r3, #72	; 0x48
 8026e1c:	443b      	add	r3, r7
 8026e1e:	3b24      	subs	r3, #36	; 0x24
 8026e20:	681b      	ldr	r3, [r3, #0]
 8026e22:	3b01      	subs	r3, #1
 8026e24:	f003 0301 	and.w	r3, r3, #1
 8026e28:	009b      	lsls	r3, r3, #2
 8026e2a:	440b      	add	r3, r1
 8026e2c:	6859      	ldr	r1, [r3, #4]
 8026e2e:	4877      	ldr	r0, [pc, #476]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026e30:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026e34:	4613      	mov	r3, r2
 8026e36:	009b      	lsls	r3, r3, #2
 8026e38:	4413      	add	r3, r2
 8026e3a:	009b      	lsls	r3, r3, #2
 8026e3c:	3348      	adds	r3, #72	; 0x48
 8026e3e:	443b      	add	r3, r7
 8026e40:	3b24      	subs	r3, #36	; 0x24
 8026e42:	681b      	ldr	r3, [r3, #0]
 8026e44:	3b01      	subs	r3, #1
 8026e46:	f003 0301 	and.w	r3, r3, #1
 8026e4a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8026e4e:	009b      	lsls	r3, r3, #2
 8026e50:	4403      	add	r3, r0
 8026e52:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8026e54:	4a6d      	ldr	r2, [pc, #436]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026e56:	68bb      	ldr	r3, [r7, #8]
 8026e58:	689b      	ldr	r3, [r3, #8]
 8026e5a:	3b01      	subs	r3, #1
 8026e5c:	009b      	lsls	r3, r3, #2
 8026e5e:	4413      	add	r3, r2
 8026e60:	685b      	ldr	r3, [r3, #4]
 8026e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8026e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026e68:	025b      	lsls	r3, r3, #9
 8026e6a:	431a      	orrs	r2, r3
 8026e6c:	4967      	ldr	r1, [pc, #412]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026e6e:	68bb      	ldr	r3, [r7, #8]
 8026e70:	689b      	ldr	r3, [r3, #8]
 8026e72:	3b01      	subs	r3, #1
 8026e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026e78:	009b      	lsls	r3, r3, #2
 8026e7a:	440b      	add	r3, r1
 8026e7c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8026e7e:	4a63      	ldr	r2, [pc, #396]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026e80:	68bb      	ldr	r3, [r7, #8]
 8026e82:	681b      	ldr	r3, [r3, #0]
 8026e84:	3b01      	subs	r3, #1
 8026e86:	009b      	lsls	r3, r3, #2
 8026e88:	4413      	add	r3, r2
 8026e8a:	685b      	ldr	r3, [r3, #4]
 8026e8c:	f023 0203 	bic.w	r2, r3, #3
 8026e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026e92:	005b      	lsls	r3, r3, #1
 8026e94:	431a      	orrs	r2, r3
 8026e96:	495d      	ldr	r1, [pc, #372]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026e98:	68bb      	ldr	r3, [r7, #8]
 8026e9a:	681b      	ldr	r3, [r3, #0]
 8026e9c:	3b01      	subs	r3, #1
 8026e9e:	f042 0201 	orr.w	r2, r2, #1
 8026ea2:	009b      	lsls	r3, r3, #2
 8026ea4:	440b      	add	r3, r1
 8026ea6:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8026ea8:	68bb      	ldr	r3, [r7, #8]
 8026eaa:	685b      	ldr	r3, [r3, #4]
 8026eac:	2b00      	cmp	r3, #0
 8026eae:	d014      	beq.n	8026eda <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8026eb0:	4a56      	ldr	r2, [pc, #344]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026eb2:	68bb      	ldr	r3, [r7, #8]
 8026eb4:	685b      	ldr	r3, [r3, #4]
 8026eb6:	3b01      	subs	r3, #1
 8026eb8:	009b      	lsls	r3, r3, #2
 8026eba:	4413      	add	r3, r2
 8026ebc:	685b      	ldr	r3, [r3, #4]
 8026ebe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8026ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026ec4:	015b      	lsls	r3, r3, #5
 8026ec6:	431a      	orrs	r2, r3
 8026ec8:	4950      	ldr	r1, [pc, #320]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026eca:	68bb      	ldr	r3, [r7, #8]
 8026ecc:	685b      	ldr	r3, [r3, #4]
 8026ece:	3b01      	subs	r3, #1
 8026ed0:	f042 0210 	orr.w	r2, r2, #16
 8026ed4:	009b      	lsls	r3, r3, #2
 8026ed6:	440b      	add	r3, r1
 8026ed8:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8026eda:	68bb      	ldr	r3, [r7, #8]
 8026edc:	68db      	ldr	r3, [r3, #12]
 8026ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	d019      	beq.n	8026f1a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8026ee6:	4a49      	ldr	r2, [pc, #292]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026ee8:	68bb      	ldr	r3, [r7, #8]
 8026eea:	68db      	ldr	r3, [r3, #12]
 8026eec:	3b01      	subs	r3, #1
 8026eee:	f003 0301 	and.w	r3, r3, #1
 8026ef2:	009b      	lsls	r3, r3, #2
 8026ef4:	4413      	add	r3, r2
 8026ef6:	685b      	ldr	r3, [r3, #4]
 8026ef8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8026efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026efe:	049b      	lsls	r3, r3, #18
 8026f00:	431a      	orrs	r2, r3
 8026f02:	4942      	ldr	r1, [pc, #264]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026f04:	68bb      	ldr	r3, [r7, #8]
 8026f06:	68db      	ldr	r3, [r3, #12]
 8026f08:	3b01      	subs	r3, #1
 8026f0a:	f003 0301 	and.w	r3, r3, #1
 8026f0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8026f12:	009b      	lsls	r3, r3, #2
 8026f14:	440b      	add	r3, r1
 8026f16:	605a      	str	r2, [r3, #4]
 8026f18:	e01c      	b.n	8026f54 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8026f1a:	68bb      	ldr	r3, [r7, #8]
 8026f1c:	68db      	ldr	r3, [r3, #12]
 8026f1e:	2b00      	cmp	r3, #0
 8026f20:	d018      	beq.n	8026f54 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8026f22:	4a3a      	ldr	r2, [pc, #232]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026f24:	68bb      	ldr	r3, [r7, #8]
 8026f26:	68db      	ldr	r3, [r3, #12]
 8026f28:	3b01      	subs	r3, #1
 8026f2a:	f003 0301 	and.w	r3, r3, #1
 8026f2e:	009b      	lsls	r3, r3, #2
 8026f30:	4413      	add	r3, r2
 8026f32:	685b      	ldr	r3, [r3, #4]
 8026f34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8026f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026f3a:	069b      	lsls	r3, r3, #26
 8026f3c:	431a      	orrs	r2, r3
 8026f3e:	4933      	ldr	r1, [pc, #204]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026f40:	68bb      	ldr	r3, [r7, #8]
 8026f42:	68db      	ldr	r3, [r3, #12]
 8026f44:	3b01      	subs	r3, #1
 8026f46:	f003 0301 	and.w	r3, r3, #1
 8026f4a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8026f4e:	009b      	lsls	r3, r3, #2
 8026f50:	440b      	add	r3, r1
 8026f52:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8026f54:	68bb      	ldr	r3, [r7, #8]
 8026f56:	691b      	ldr	r3, [r3, #16]
 8026f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026f5c:	2b00      	cmp	r3, #0
 8026f5e:	d019      	beq.n	8026f94 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8026f60:	4a2a      	ldr	r2, [pc, #168]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026f62:	68bb      	ldr	r3, [r7, #8]
 8026f64:	691b      	ldr	r3, [r3, #16]
 8026f66:	3b01      	subs	r3, #1
 8026f68:	f003 0301 	and.w	r3, r3, #1
 8026f6c:	009b      	lsls	r3, r3, #2
 8026f6e:	4413      	add	r3, r2
 8026f70:	685b      	ldr	r3, [r3, #4]
 8026f72:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8026f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026f78:	049b      	lsls	r3, r3, #18
 8026f7a:	431a      	orrs	r2, r3
 8026f7c:	4923      	ldr	r1, [pc, #140]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026f7e:	68bb      	ldr	r3, [r7, #8]
 8026f80:	691b      	ldr	r3, [r3, #16]
 8026f82:	3b01      	subs	r3, #1
 8026f84:	f003 0301 	and.w	r3, r3, #1
 8026f88:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8026f8c:	009b      	lsls	r3, r3, #2
 8026f8e:	440b      	add	r3, r1
 8026f90:	605a      	str	r2, [r3, #4]
 8026f92:	e01c      	b.n	8026fce <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8026f94:	68bb      	ldr	r3, [r7, #8]
 8026f96:	691b      	ldr	r3, [r3, #16]
 8026f98:	2b00      	cmp	r3, #0
 8026f9a:	d018      	beq.n	8026fce <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8026f9c:	4a1b      	ldr	r2, [pc, #108]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026f9e:	68bb      	ldr	r3, [r7, #8]
 8026fa0:	691b      	ldr	r3, [r3, #16]
 8026fa2:	3b01      	subs	r3, #1
 8026fa4:	f003 0301 	and.w	r3, r3, #1
 8026fa8:	009b      	lsls	r3, r3, #2
 8026faa:	4413      	add	r3, r2
 8026fac:	685b      	ldr	r3, [r3, #4]
 8026fae:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8026fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026fb4:	069b      	lsls	r3, r3, #26
 8026fb6:	431a      	orrs	r2, r3
 8026fb8:	4914      	ldr	r1, [pc, #80]	; (802700c <HAL_OSPIM_Config+0x65c>)
 8026fba:	68bb      	ldr	r3, [r7, #8]
 8026fbc:	691b      	ldr	r3, [r3, #16]
 8026fbe:	3b01      	subs	r3, #1
 8026fc0:	f003 0301 	and.w	r3, r3, #1
 8026fc4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8026fc8:	009b      	lsls	r3, r3, #2
 8026fca:	440b      	add	r3, r1
 8026fcc:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8026fce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026fd2:	f003 0301 	and.w	r3, r3, #1
 8026fd6:	2b00      	cmp	r3, #0
 8026fd8:	d005      	beq.n	8026fe6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8026fda:	4b0d      	ldr	r3, [pc, #52]	; (8027010 <HAL_OSPIM_Config+0x660>)
 8026fdc:	681b      	ldr	r3, [r3, #0]
 8026fde:	4a0c      	ldr	r2, [pc, #48]	; (8027010 <HAL_OSPIM_Config+0x660>)
 8026fe0:	f043 0301 	orr.w	r3, r3, #1
 8026fe4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8026fe6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026fea:	f003 0302 	and.w	r3, r3, #2
 8026fee:	2b00      	cmp	r3, #0
 8026ff0:	d005      	beq.n	8026ffe <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8026ff2:	4b08      	ldr	r3, [pc, #32]	; (8027014 <HAL_OSPIM_Config+0x664>)
 8026ff4:	681b      	ldr	r3, [r3, #0]
 8026ff6:	4a07      	ldr	r2, [pc, #28]	; (8027014 <HAL_OSPIM_Config+0x664>)
 8026ff8:	f043 0301 	orr.w	r3, r3, #1
 8026ffc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8026ffe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8027002:	4618      	mov	r0, r3
 8027004:	3748      	adds	r7, #72	; 0x48
 8027006:	46bd      	mov	sp, r7
 8027008:	bd80      	pop	{r7, pc}
 802700a:	bf00      	nop
 802700c:	50061c00 	.word	0x50061c00
 8027010:	a0001000 	.word	0xa0001000
 8027014:	a0001400 	.word	0xa0001400

08027018 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8027018:	b580      	push	{r7, lr}
 802701a:	b084      	sub	sp, #16
 802701c:	af00      	add	r7, sp, #0
 802701e:	60f8      	str	r0, [r7, #12]
 8027020:	60b9      	str	r1, [r7, #8]
 8027022:	603b      	str	r3, [r7, #0]
 8027024:	4613      	mov	r3, r2
 8027026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8027028:	e01a      	b.n	8027060 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802702a:	69bb      	ldr	r3, [r7, #24]
 802702c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027030:	d016      	beq.n	8027060 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8027032:	f7fd f97b 	bl	802432c <HAL_GetTick>
 8027036:	4602      	mov	r2, r0
 8027038:	683b      	ldr	r3, [r7, #0]
 802703a:	1ad3      	subs	r3, r2, r3
 802703c:	69ba      	ldr	r2, [r7, #24]
 802703e:	429a      	cmp	r2, r3
 8027040:	d302      	bcc.n	8027048 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8027042:	69bb      	ldr	r3, [r7, #24]
 8027044:	2b00      	cmp	r3, #0
 8027046:	d10b      	bne.n	8027060 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8027048:	68fb      	ldr	r3, [r7, #12]
 802704a:	f44f 7200 	mov.w	r2, #512	; 0x200
 802704e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8027050:	68fb      	ldr	r3, [r7, #12]
 8027052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027054:	f043 0201 	orr.w	r2, r3, #1
 8027058:	68fb      	ldr	r3, [r7, #12]
 802705a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 802705c:	2301      	movs	r3, #1
 802705e:	e00e      	b.n	802707e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8027060:	68fb      	ldr	r3, [r7, #12]
 8027062:	681b      	ldr	r3, [r3, #0]
 8027064:	6a1a      	ldr	r2, [r3, #32]
 8027066:	68bb      	ldr	r3, [r7, #8]
 8027068:	4013      	ands	r3, r2
 802706a:	2b00      	cmp	r3, #0
 802706c:	bf14      	ite	ne
 802706e:	2301      	movne	r3, #1
 8027070:	2300      	moveq	r3, #0
 8027072:	b2db      	uxtb	r3, r3
 8027074:	461a      	mov	r2, r3
 8027076:	79fb      	ldrb	r3, [r7, #7]
 8027078:	429a      	cmp	r2, r3
 802707a:	d1d6      	bne.n	802702a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802707c:	2300      	movs	r3, #0
}
 802707e:	4618      	mov	r0, r3
 8027080:	3710      	adds	r7, #16
 8027082:	46bd      	mov	sp, r7
 8027084:	bd80      	pop	{r7, pc}
	...

08027088 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8027088:	b480      	push	{r7}
 802708a:	b089      	sub	sp, #36	; 0x24
 802708c:	af00      	add	r7, sp, #0
 802708e:	6078      	str	r0, [r7, #4]
 8027090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8027092:	2300      	movs	r3, #0
 8027094:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8027096:	687b      	ldr	r3, [r7, #4]
 8027098:	681b      	ldr	r3, [r3, #0]
 802709a:	681a      	ldr	r2, [r3, #0]
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	681b      	ldr	r3, [r3, #0]
 80270a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80270a4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	689b      	ldr	r3, [r3, #8]
 80270aa:	2b00      	cmp	r3, #0
 80270ac:	d10a      	bne.n	80270c4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80270ae:	687b      	ldr	r3, [r7, #4]
 80270b0:	681b      	ldr	r3, [r3, #0]
 80270b2:	681b      	ldr	r3, [r3, #0]
 80270b4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80270b8:	683b      	ldr	r3, [r7, #0]
 80270ba:	685a      	ldr	r2, [r3, #4]
 80270bc:	687b      	ldr	r3, [r7, #4]
 80270be:	681b      	ldr	r3, [r3, #0]
 80270c0:	430a      	orrs	r2, r1
 80270c2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80270c4:	683b      	ldr	r3, [r7, #0]
 80270c6:	681b      	ldr	r3, [r3, #0]
 80270c8:	2b02      	cmp	r3, #2
 80270ca:	d114      	bne.n	80270f6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80270cc:	687b      	ldr	r3, [r7, #4]
 80270ce:	681b      	ldr	r3, [r3, #0]
 80270d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80270d4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80270d6:	687b      	ldr	r3, [r7, #4]
 80270d8:	681b      	ldr	r3, [r3, #0]
 80270da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80270de:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80270e0:	687b      	ldr	r3, [r7, #4]
 80270e2:	681b      	ldr	r3, [r3, #0]
 80270e4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80270e8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80270ea:	687b      	ldr	r3, [r7, #4]
 80270ec:	681b      	ldr	r3, [r3, #0]
 80270ee:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80270f2:	60fb      	str	r3, [r7, #12]
 80270f4:	e013      	b.n	802711e <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80270f6:	687b      	ldr	r3, [r7, #4]
 80270f8:	681b      	ldr	r3, [r3, #0]
 80270fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80270fe:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8027100:	687b      	ldr	r3, [r7, #4]
 8027102:	681b      	ldr	r3, [r3, #0]
 8027104:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8027108:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 802710a:	687b      	ldr	r3, [r7, #4]
 802710c:	681b      	ldr	r3, [r3, #0]
 802710e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8027112:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8027114:	687b      	ldr	r3, [r7, #4]
 8027116:	681b      	ldr	r3, [r3, #0]
 8027118:	f503 7390 	add.w	r3, r3, #288	; 0x120
 802711c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 802711e:	683b      	ldr	r3, [r7, #0]
 8027120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8027122:	683b      	ldr	r3, [r7, #0]
 8027124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027126:	431a      	orrs	r2, r3
 8027128:	69bb      	ldr	r3, [r7, #24]
 802712a:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 802712c:	683b      	ldr	r3, [r7, #0]
 802712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027130:	2b00      	cmp	r3, #0
 8027132:	d012      	beq.n	802715a <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8027134:	683b      	ldr	r3, [r7, #0]
 8027136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8027138:	68fb      	ldr	r3, [r7, #12]
 802713a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 802713c:	69bb      	ldr	r3, [r7, #24]
 802713e:	681b      	ldr	r3, [r3, #0]
 8027140:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8027144:	683b      	ldr	r3, [r7, #0]
 8027146:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8027148:	683b      	ldr	r3, [r7, #0]
 802714a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802714c:	4319      	orrs	r1, r3
 802714e:	683b      	ldr	r3, [r7, #0]
 8027150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027152:	430b      	orrs	r3, r1
 8027154:	431a      	orrs	r2, r3
 8027156:	69bb      	ldr	r3, [r7, #24]
 8027158:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 802715a:	697b      	ldr	r3, [r7, #20]
 802715c:	681b      	ldr	r3, [r3, #0]
 802715e:	f023 021f 	bic.w	r2, r3, #31
 8027162:	683b      	ldr	r3, [r7, #0]
 8027164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027166:	431a      	orrs	r2, r3
 8027168:	697b      	ldr	r3, [r7, #20]
 802716a:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 802716c:	683b      	ldr	r3, [r7, #0]
 802716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027170:	2b00      	cmp	r3, #0
 8027172:	d009      	beq.n	8027188 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8027174:	683b      	ldr	r3, [r7, #0]
 8027176:	681b      	ldr	r3, [r3, #0]
 8027178:	2b00      	cmp	r3, #0
 802717a:	d105      	bne.n	8027188 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 802717c:	683b      	ldr	r3, [r7, #0]
 802717e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8027180:	687b      	ldr	r3, [r7, #4]
 8027182:	681b      	ldr	r3, [r3, #0]
 8027184:	3a01      	subs	r2, #1
 8027186:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8027188:	683b      	ldr	r3, [r7, #0]
 802718a:	68db      	ldr	r3, [r3, #12]
 802718c:	2b00      	cmp	r3, #0
 802718e:	f000 8099 	beq.w	80272c4 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8027192:	683b      	ldr	r3, [r7, #0]
 8027194:	69db      	ldr	r3, [r3, #28]
 8027196:	2b00      	cmp	r3, #0
 8027198:	d055      	beq.n	8027246 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 802719a:	683b      	ldr	r3, [r7, #0]
 802719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802719e:	2b00      	cmp	r3, #0
 80271a0:	d01e      	beq.n	80271e0 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80271a2:	69bb      	ldr	r3, [r7, #24]
 80271a4:	681a      	ldr	r2, [r3, #0]
 80271a6:	4b68      	ldr	r3, [pc, #416]	; (8027348 <OSPI_ConfigCmd+0x2c0>)
 80271a8:	4013      	ands	r3, r2
 80271aa:	683a      	ldr	r2, [r7, #0]
 80271ac:	68d1      	ldr	r1, [r2, #12]
 80271ae:	683a      	ldr	r2, [r7, #0]
 80271b0:	6952      	ldr	r2, [r2, #20]
 80271b2:	4311      	orrs	r1, r2
 80271b4:	683a      	ldr	r2, [r7, #0]
 80271b6:	6912      	ldr	r2, [r2, #16]
 80271b8:	4311      	orrs	r1, r2
 80271ba:	683a      	ldr	r2, [r7, #0]
 80271bc:	69d2      	ldr	r2, [r2, #28]
 80271be:	4311      	orrs	r1, r2
 80271c0:	683a      	ldr	r2, [r7, #0]
 80271c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80271c4:	4311      	orrs	r1, r2
 80271c6:	683a      	ldr	r2, [r7, #0]
 80271c8:	6a12      	ldr	r2, [r2, #32]
 80271ca:	4311      	orrs	r1, r2
 80271cc:	683a      	ldr	r2, [r7, #0]
 80271ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80271d0:	4311      	orrs	r1, r2
 80271d2:	683a      	ldr	r2, [r7, #0]
 80271d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80271d6:	430a      	orrs	r2, r1
 80271d8:	431a      	orrs	r2, r3
 80271da:	69bb      	ldr	r3, [r7, #24]
 80271dc:	601a      	str	r2, [r3, #0]
 80271de:	e028      	b.n	8027232 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80271e0:	69bb      	ldr	r3, [r7, #24]
 80271e2:	681b      	ldr	r3, [r3, #0]
 80271e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80271e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80271ec:	683a      	ldr	r2, [r7, #0]
 80271ee:	68d1      	ldr	r1, [r2, #12]
 80271f0:	683a      	ldr	r2, [r7, #0]
 80271f2:	6952      	ldr	r2, [r2, #20]
 80271f4:	4311      	orrs	r1, r2
 80271f6:	683a      	ldr	r2, [r7, #0]
 80271f8:	6912      	ldr	r2, [r2, #16]
 80271fa:	4311      	orrs	r1, r2
 80271fc:	683a      	ldr	r2, [r7, #0]
 80271fe:	69d2      	ldr	r2, [r2, #28]
 8027200:	4311      	orrs	r1, r2
 8027202:	683a      	ldr	r2, [r7, #0]
 8027204:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8027206:	4311      	orrs	r1, r2
 8027208:	683a      	ldr	r2, [r7, #0]
 802720a:	6a12      	ldr	r2, [r2, #32]
 802720c:	430a      	orrs	r2, r1
 802720e:	431a      	orrs	r2, r3
 8027210:	69bb      	ldr	r3, [r7, #24]
 8027212:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8027214:	687b      	ldr	r3, [r7, #4]
 8027216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802721c:	d109      	bne.n	8027232 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 802721e:	683b      	ldr	r3, [r7, #0]
 8027220:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8027222:	2b08      	cmp	r3, #8
 8027224:	d105      	bne.n	8027232 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8027226:	69bb      	ldr	r3, [r7, #24]
 8027228:	681b      	ldr	r3, [r3, #0]
 802722a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 802722e:	69bb      	ldr	r3, [r7, #24]
 8027230:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8027232:	683b      	ldr	r3, [r7, #0]
 8027234:	689a      	ldr	r2, [r3, #8]
 8027236:	693b      	ldr	r3, [r7, #16]
 8027238:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 802723a:	687b      	ldr	r3, [r7, #4]
 802723c:	681b      	ldr	r3, [r3, #0]
 802723e:	683a      	ldr	r2, [r7, #0]
 8027240:	6992      	ldr	r2, [r2, #24]
 8027242:	649a      	str	r2, [r3, #72]	; 0x48
 8027244:	e078      	b.n	8027338 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8027246:	683b      	ldr	r3, [r7, #0]
 8027248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802724a:	2b00      	cmp	r3, #0
 802724c:	d017      	beq.n	802727e <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 802724e:	69bb      	ldr	r3, [r7, #24]
 8027250:	681b      	ldr	r3, [r3, #0]
 8027252:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8027256:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802725a:	683a      	ldr	r2, [r7, #0]
 802725c:	68d1      	ldr	r1, [r2, #12]
 802725e:	683a      	ldr	r2, [r7, #0]
 8027260:	6952      	ldr	r2, [r2, #20]
 8027262:	4311      	orrs	r1, r2
 8027264:	683a      	ldr	r2, [r7, #0]
 8027266:	6912      	ldr	r2, [r2, #16]
 8027268:	4311      	orrs	r1, r2
 802726a:	683a      	ldr	r2, [r7, #0]
 802726c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802726e:	4311      	orrs	r1, r2
 8027270:	683a      	ldr	r2, [r7, #0]
 8027272:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8027274:	430a      	orrs	r2, r1
 8027276:	431a      	orrs	r2, r3
 8027278:	69bb      	ldr	r3, [r7, #24]
 802727a:	601a      	str	r2, [r3, #0]
 802727c:	e01d      	b.n	80272ba <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 802727e:	69bb      	ldr	r3, [r7, #24]
 8027280:	681b      	ldr	r3, [r3, #0]
 8027282:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8027286:	683b      	ldr	r3, [r7, #0]
 8027288:	68d9      	ldr	r1, [r3, #12]
 802728a:	683b      	ldr	r3, [r7, #0]
 802728c:	695b      	ldr	r3, [r3, #20]
 802728e:	4319      	orrs	r1, r3
 8027290:	683b      	ldr	r3, [r7, #0]
 8027292:	691b      	ldr	r3, [r3, #16]
 8027294:	430b      	orrs	r3, r1
 8027296:	431a      	orrs	r2, r3
 8027298:	69bb      	ldr	r3, [r7, #24]
 802729a:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 802729c:	687b      	ldr	r3, [r7, #4]
 802729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80272a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80272a4:	d109      	bne.n	80272ba <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80272a6:	683b      	ldr	r3, [r7, #0]
 80272a8:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80272aa:	2b08      	cmp	r3, #8
 80272ac:	d105      	bne.n	80272ba <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80272ae:	69bb      	ldr	r3, [r7, #24]
 80272b0:	681b      	ldr	r3, [r3, #0]
 80272b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80272b6:	69bb      	ldr	r3, [r7, #24]
 80272b8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80272ba:	683b      	ldr	r3, [r7, #0]
 80272bc:	689a      	ldr	r2, [r3, #8]
 80272be:	693b      	ldr	r3, [r7, #16]
 80272c0:	601a      	str	r2, [r3, #0]
 80272c2:	e039      	b.n	8027338 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80272c4:	683b      	ldr	r3, [r7, #0]
 80272c6:	69db      	ldr	r3, [r3, #28]
 80272c8:	2b00      	cmp	r3, #0
 80272ca:	d030      	beq.n	802732e <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80272cc:	683b      	ldr	r3, [r7, #0]
 80272ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80272d0:	2b00      	cmp	r3, #0
 80272d2:	d017      	beq.n	8027304 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80272d4:	69bb      	ldr	r3, [r7, #24]
 80272d6:	681b      	ldr	r3, [r3, #0]
 80272d8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80272dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80272e0:	683a      	ldr	r2, [r7, #0]
 80272e2:	69d1      	ldr	r1, [r2, #28]
 80272e4:	683a      	ldr	r2, [r7, #0]
 80272e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80272e8:	4311      	orrs	r1, r2
 80272ea:	683a      	ldr	r2, [r7, #0]
 80272ec:	6a12      	ldr	r2, [r2, #32]
 80272ee:	4311      	orrs	r1, r2
 80272f0:	683a      	ldr	r2, [r7, #0]
 80272f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80272f4:	4311      	orrs	r1, r2
 80272f6:	683a      	ldr	r2, [r7, #0]
 80272f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80272fa:	430a      	orrs	r2, r1
 80272fc:	431a      	orrs	r2, r3
 80272fe:	69bb      	ldr	r3, [r7, #24]
 8027300:	601a      	str	r2, [r3, #0]
 8027302:	e00e      	b.n	8027322 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8027304:	69bb      	ldr	r3, [r7, #24]
 8027306:	681b      	ldr	r3, [r3, #0]
 8027308:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 802730c:	683b      	ldr	r3, [r7, #0]
 802730e:	69d9      	ldr	r1, [r3, #28]
 8027310:	683b      	ldr	r3, [r7, #0]
 8027312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027314:	4319      	orrs	r1, r3
 8027316:	683b      	ldr	r3, [r7, #0]
 8027318:	6a1b      	ldr	r3, [r3, #32]
 802731a:	430b      	orrs	r3, r1
 802731c:	431a      	orrs	r2, r3
 802731e:	69bb      	ldr	r3, [r7, #24]
 8027320:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8027322:	687b      	ldr	r3, [r7, #4]
 8027324:	681b      	ldr	r3, [r3, #0]
 8027326:	683a      	ldr	r2, [r7, #0]
 8027328:	6992      	ldr	r2, [r2, #24]
 802732a:	649a      	str	r2, [r3, #72]	; 0x48
 802732c:	e004      	b.n	8027338 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 802732e:	2301      	movs	r3, #1
 8027330:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8027332:	687b      	ldr	r3, [r7, #4]
 8027334:	2208      	movs	r2, #8
 8027336:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8027338:	7ffb      	ldrb	r3, [r7, #31]
}
 802733a:	4618      	mov	r0, r3
 802733c:	3724      	adds	r7, #36	; 0x24
 802733e:	46bd      	mov	sp, r7
 8027340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027344:	4770      	bx	lr
 8027346:	bf00      	nop
 8027348:	f0ffc0c0 	.word	0xf0ffc0c0

0802734c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 802734c:	b480      	push	{r7}
 802734e:	b087      	sub	sp, #28
 8027350:	af00      	add	r7, sp, #0
 8027352:	4603      	mov	r3, r0
 8027354:	6039      	str	r1, [r7, #0]
 8027356:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8027358:	2300      	movs	r3, #0
 802735a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 802735c:	2300      	movs	r3, #0
 802735e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8027360:	79fb      	ldrb	r3, [r7, #7]
 8027362:	2b00      	cmp	r3, #0
 8027364:	d005      	beq.n	8027372 <OSPIM_GetConfig+0x26>
 8027366:	79fb      	ldrb	r3, [r7, #7]
 8027368:	2b02      	cmp	r3, #2
 802736a:	d802      	bhi.n	8027372 <OSPIM_GetConfig+0x26>
 802736c:	683b      	ldr	r3, [r7, #0]
 802736e:	2b00      	cmp	r3, #0
 8027370:	d102      	bne.n	8027378 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8027372:	2301      	movs	r3, #1
 8027374:	75fb      	strb	r3, [r7, #23]
 8027376:	e08e      	b.n	8027496 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8027378:	683b      	ldr	r3, [r7, #0]
 802737a:	2200      	movs	r2, #0
 802737c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 802737e:	683b      	ldr	r3, [r7, #0]
 8027380:	2200      	movs	r2, #0
 8027382:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8027384:	683b      	ldr	r3, [r7, #0]
 8027386:	2200      	movs	r2, #0
 8027388:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 802738a:	683b      	ldr	r3, [r7, #0]
 802738c:	2200      	movs	r2, #0
 802738e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8027390:	683b      	ldr	r3, [r7, #0]
 8027392:	2200      	movs	r2, #0
 8027394:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8027396:	79fb      	ldrb	r3, [r7, #7]
 8027398:	2b02      	cmp	r3, #2
 802739a:	d101      	bne.n	80273a0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 802739c:	4b41      	ldr	r3, [pc, #260]	; (80274a4 <OSPIM_GetConfig+0x158>)
 802739e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80273a0:	2300      	movs	r3, #0
 80273a2:	60fb      	str	r3, [r7, #12]
 80273a4:	e074      	b.n	8027490 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80273a6:	4a40      	ldr	r2, [pc, #256]	; (80274a8 <OSPIM_GetConfig+0x15c>)
 80273a8:	68fb      	ldr	r3, [r7, #12]
 80273aa:	009b      	lsls	r3, r3, #2
 80273ac:	4413      	add	r3, r2
 80273ae:	685b      	ldr	r3, [r3, #4]
 80273b0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80273b2:	68bb      	ldr	r3, [r7, #8]
 80273b4:	f003 0301 	and.w	r3, r3, #1
 80273b8:	2b00      	cmp	r3, #0
 80273ba:	d00a      	beq.n	80273d2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80273bc:	68ba      	ldr	r2, [r7, #8]
 80273be:	693b      	ldr	r3, [r7, #16]
 80273c0:	4053      	eors	r3, r2
 80273c2:	f003 0302 	and.w	r3, r3, #2
 80273c6:	2b00      	cmp	r3, #0
 80273c8:	d103      	bne.n	80273d2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80273ca:	68fb      	ldr	r3, [r7, #12]
 80273cc:	1c5a      	adds	r2, r3, #1
 80273ce:	683b      	ldr	r3, [r7, #0]
 80273d0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80273d2:	68bb      	ldr	r3, [r7, #8]
 80273d4:	f003 0310 	and.w	r3, r3, #16
 80273d8:	2b00      	cmp	r3, #0
 80273da:	d00a      	beq.n	80273f2 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80273dc:	68ba      	ldr	r2, [r7, #8]
 80273de:	693b      	ldr	r3, [r7, #16]
 80273e0:	4053      	eors	r3, r2
 80273e2:	f003 0320 	and.w	r3, r3, #32
 80273e6:	2b00      	cmp	r3, #0
 80273e8:	d103      	bne.n	80273f2 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80273ea:	68fb      	ldr	r3, [r7, #12]
 80273ec:	1c5a      	adds	r2, r3, #1
 80273ee:	683b      	ldr	r3, [r7, #0]
 80273f0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80273f2:	68bb      	ldr	r3, [r7, #8]
 80273f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80273f8:	2b00      	cmp	r3, #0
 80273fa:	d00a      	beq.n	8027412 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80273fc:	68ba      	ldr	r2, [r7, #8]
 80273fe:	693b      	ldr	r3, [r7, #16]
 8027400:	4053      	eors	r3, r2
 8027402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027406:	2b00      	cmp	r3, #0
 8027408:	d103      	bne.n	8027412 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 802740a:	68fb      	ldr	r3, [r7, #12]
 802740c:	1c5a      	adds	r2, r3, #1
 802740e:	683b      	ldr	r3, [r7, #0]
 8027410:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8027412:	68bb      	ldr	r3, [r7, #8]
 8027414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027418:	2b00      	cmp	r3, #0
 802741a:	d018      	beq.n	802744e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 802741c:	68ba      	ldr	r2, [r7, #8]
 802741e:	693b      	ldr	r3, [r7, #16]
 8027420:	4053      	eors	r3, r2
 8027422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027426:	2b00      	cmp	r3, #0
 8027428:	d111      	bne.n	802744e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 802742a:	68bb      	ldr	r3, [r7, #8]
 802742c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027430:	2b00      	cmp	r3, #0
 8027432:	d106      	bne.n	8027442 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8027434:	68fb      	ldr	r3, [r7, #12]
 8027436:	3301      	adds	r3, #1
 8027438:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802743c:	683b      	ldr	r3, [r7, #0]
 802743e:	60da      	str	r2, [r3, #12]
 8027440:	e005      	b.n	802744e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8027442:	68fb      	ldr	r3, [r7, #12]
 8027444:	3301      	adds	r3, #1
 8027446:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 802744a:	683b      	ldr	r3, [r7, #0]
 802744c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 802744e:	68bb      	ldr	r3, [r7, #8]
 8027450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027454:	2b00      	cmp	r3, #0
 8027456:	d018      	beq.n	802748a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8027458:	68ba      	ldr	r2, [r7, #8]
 802745a:	693b      	ldr	r3, [r7, #16]
 802745c:	4053      	eors	r3, r2
 802745e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8027462:	2b00      	cmp	r3, #0
 8027464:	d111      	bne.n	802748a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8027466:	68bb      	ldr	r3, [r7, #8]
 8027468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802746c:	2b00      	cmp	r3, #0
 802746e:	d106      	bne.n	802747e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8027470:	68fb      	ldr	r3, [r7, #12]
 8027472:	3301      	adds	r3, #1
 8027474:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027478:	683b      	ldr	r3, [r7, #0]
 802747a:	611a      	str	r2, [r3, #16]
 802747c:	e005      	b.n	802748a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 802747e:	68fb      	ldr	r3, [r7, #12]
 8027480:	3301      	adds	r3, #1
 8027482:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8027486:	683b      	ldr	r3, [r7, #0]
 8027488:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 802748a:	68fb      	ldr	r3, [r7, #12]
 802748c:	3301      	adds	r3, #1
 802748e:	60fb      	str	r3, [r7, #12]
 8027490:	68fb      	ldr	r3, [r7, #12]
 8027492:	2b01      	cmp	r3, #1
 8027494:	d987      	bls.n	80273a6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8027496:	7dfb      	ldrb	r3, [r7, #23]
}
 8027498:	4618      	mov	r0, r3
 802749a:	371c      	adds	r7, #28
 802749c:	46bd      	mov	sp, r7
 802749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274a2:	4770      	bx	lr
 80274a4:	04040222 	.word	0x04040222
 80274a8:	50061c00 	.word	0x50061c00

080274ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80274ac:	b480      	push	{r7}
 80274ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80274b0:	4b0d      	ldr	r3, [pc, #52]	; (80274e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80274b2:	681b      	ldr	r3, [r3, #0]
 80274b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80274b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80274bc:	d102      	bne.n	80274c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80274be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80274c2:	e00b      	b.n	80274dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80274c4:	4b08      	ldr	r3, [pc, #32]	; (80274e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80274c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80274ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80274ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80274d2:	d102      	bne.n	80274da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80274d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80274d8:	e000      	b.n	80274dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80274da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80274dc:	4618      	mov	r0, r3
 80274de:	46bd      	mov	sp, r7
 80274e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274e4:	4770      	bx	lr
 80274e6:	bf00      	nop
 80274e8:	40007000 	.word	0x40007000

080274ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80274ec:	b480      	push	{r7}
 80274ee:	b085      	sub	sp, #20
 80274f0:	af00      	add	r7, sp, #0
 80274f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80274f4:	687b      	ldr	r3, [r7, #4]
 80274f6:	2b00      	cmp	r3, #0
 80274f8:	d141      	bne.n	802757e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80274fa:	4b4b      	ldr	r3, [pc, #300]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80274fc:	681b      	ldr	r3, [r3, #0]
 80274fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8027502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027506:	d131      	bne.n	802756c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8027508:	4b47      	ldr	r3, [pc, #284]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802750a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802750e:	4a46      	ldr	r2, [pc, #280]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8027514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8027518:	4b43      	ldr	r3, [pc, #268]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802751a:	681b      	ldr	r3, [r3, #0]
 802751c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8027520:	4a41      	ldr	r2, [pc, #260]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027526:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8027528:	4b40      	ldr	r3, [pc, #256]	; (802762c <HAL_PWREx_ControlVoltageScaling+0x140>)
 802752a:	681b      	ldr	r3, [r3, #0]
 802752c:	2232      	movs	r2, #50	; 0x32
 802752e:	fb02 f303 	mul.w	r3, r2, r3
 8027532:	4a3f      	ldr	r2, [pc, #252]	; (8027630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8027534:	fba2 2303 	umull	r2, r3, r2, r3
 8027538:	0c9b      	lsrs	r3, r3, #18
 802753a:	3301      	adds	r3, #1
 802753c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 802753e:	e002      	b.n	8027546 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8027540:	68fb      	ldr	r3, [r7, #12]
 8027542:	3b01      	subs	r3, #1
 8027544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8027546:	4b38      	ldr	r3, [pc, #224]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027548:	695b      	ldr	r3, [r3, #20]
 802754a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802754e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027552:	d102      	bne.n	802755a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8027554:	68fb      	ldr	r3, [r7, #12]
 8027556:	2b00      	cmp	r3, #0
 8027558:	d1f2      	bne.n	8027540 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 802755a:	4b33      	ldr	r3, [pc, #204]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802755c:	695b      	ldr	r3, [r3, #20]
 802755e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027566:	d158      	bne.n	802761a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8027568:	2303      	movs	r3, #3
 802756a:	e057      	b.n	802761c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 802756c:	4b2e      	ldr	r3, [pc, #184]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802756e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8027572:	4a2d      	ldr	r2, [pc, #180]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8027578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 802757c:	e04d      	b.n	802761a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 802757e:	687b      	ldr	r3, [r7, #4]
 8027580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027584:	d141      	bne.n	802760a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8027586:	4b28      	ldr	r3, [pc, #160]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027588:	681b      	ldr	r3, [r3, #0]
 802758a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802758e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027592:	d131      	bne.n	80275f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8027594:	4b24      	ldr	r3, [pc, #144]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802759a:	4a23      	ldr	r2, [pc, #140]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802759c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80275a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80275a4:	4b20      	ldr	r3, [pc, #128]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275a6:	681b      	ldr	r3, [r3, #0]
 80275a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80275ac:	4a1e      	ldr	r2, [pc, #120]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80275b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80275b4:	4b1d      	ldr	r3, [pc, #116]	; (802762c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80275b6:	681b      	ldr	r3, [r3, #0]
 80275b8:	2232      	movs	r2, #50	; 0x32
 80275ba:	fb02 f303 	mul.w	r3, r2, r3
 80275be:	4a1c      	ldr	r2, [pc, #112]	; (8027630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80275c0:	fba2 2303 	umull	r2, r3, r2, r3
 80275c4:	0c9b      	lsrs	r3, r3, #18
 80275c6:	3301      	adds	r3, #1
 80275c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80275ca:	e002      	b.n	80275d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80275cc:	68fb      	ldr	r3, [r7, #12]
 80275ce:	3b01      	subs	r3, #1
 80275d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80275d2:	4b15      	ldr	r3, [pc, #84]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275d4:	695b      	ldr	r3, [r3, #20]
 80275d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80275da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80275de:	d102      	bne.n	80275e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80275e0:	68fb      	ldr	r3, [r7, #12]
 80275e2:	2b00      	cmp	r3, #0
 80275e4:	d1f2      	bne.n	80275cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80275e6:	4b10      	ldr	r3, [pc, #64]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275e8:	695b      	ldr	r3, [r3, #20]
 80275ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80275ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80275f2:	d112      	bne.n	802761a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80275f4:	2303      	movs	r3, #3
 80275f6:	e011      	b.n	802761c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80275f8:	4b0b      	ldr	r3, [pc, #44]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80275fe:	4a0a      	ldr	r2, [pc, #40]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8027608:	e007      	b.n	802761a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 802760a:	4b07      	ldr	r3, [pc, #28]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802760c:	681b      	ldr	r3, [r3, #0]
 802760e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8027612:	4a05      	ldr	r2, [pc, #20]	; (8027628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027618:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 802761a:	2300      	movs	r3, #0
}
 802761c:	4618      	mov	r0, r3
 802761e:	3714      	adds	r7, #20
 8027620:	46bd      	mov	sp, r7
 8027622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027626:	4770      	bx	lr
 8027628:	40007000 	.word	0x40007000
 802762c:	20000228 	.word	0x20000228
 8027630:	431bde83 	.word	0x431bde83

08027634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8027634:	b580      	push	{r7, lr}
 8027636:	b088      	sub	sp, #32
 8027638:	af00      	add	r7, sp, #0
 802763a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 802763c:	687b      	ldr	r3, [r7, #4]
 802763e:	2b00      	cmp	r3, #0
 8027640:	d102      	bne.n	8027648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8027642:	2301      	movs	r3, #1
 8027644:	f000 bc08 	b.w	8027e58 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8027648:	4b96      	ldr	r3, [pc, #600]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 802764a:	689b      	ldr	r3, [r3, #8]
 802764c:	f003 030c 	and.w	r3, r3, #12
 8027650:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8027652:	4b94      	ldr	r3, [pc, #592]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027654:	68db      	ldr	r3, [r3, #12]
 8027656:	f003 0303 	and.w	r3, r3, #3
 802765a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 802765c:	687b      	ldr	r3, [r7, #4]
 802765e:	681b      	ldr	r3, [r3, #0]
 8027660:	f003 0310 	and.w	r3, r3, #16
 8027664:	2b00      	cmp	r3, #0
 8027666:	f000 80e4 	beq.w	8027832 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 802766a:	69bb      	ldr	r3, [r7, #24]
 802766c:	2b00      	cmp	r3, #0
 802766e:	d007      	beq.n	8027680 <HAL_RCC_OscConfig+0x4c>
 8027670:	69bb      	ldr	r3, [r7, #24]
 8027672:	2b0c      	cmp	r3, #12
 8027674:	f040 808b 	bne.w	802778e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8027678:	697b      	ldr	r3, [r7, #20]
 802767a:	2b01      	cmp	r3, #1
 802767c:	f040 8087 	bne.w	802778e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8027680:	4b88      	ldr	r3, [pc, #544]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027682:	681b      	ldr	r3, [r3, #0]
 8027684:	f003 0302 	and.w	r3, r3, #2
 8027688:	2b00      	cmp	r3, #0
 802768a:	d005      	beq.n	8027698 <HAL_RCC_OscConfig+0x64>
 802768c:	687b      	ldr	r3, [r7, #4]
 802768e:	699b      	ldr	r3, [r3, #24]
 8027690:	2b00      	cmp	r3, #0
 8027692:	d101      	bne.n	8027698 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8027694:	2301      	movs	r3, #1
 8027696:	e3df      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8027698:	687b      	ldr	r3, [r7, #4]
 802769a:	6a1a      	ldr	r2, [r3, #32]
 802769c:	4b81      	ldr	r3, [pc, #516]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 802769e:	681b      	ldr	r3, [r3, #0]
 80276a0:	f003 0308 	and.w	r3, r3, #8
 80276a4:	2b00      	cmp	r3, #0
 80276a6:	d004      	beq.n	80276b2 <HAL_RCC_OscConfig+0x7e>
 80276a8:	4b7e      	ldr	r3, [pc, #504]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80276aa:	681b      	ldr	r3, [r3, #0]
 80276ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80276b0:	e005      	b.n	80276be <HAL_RCC_OscConfig+0x8a>
 80276b2:	4b7c      	ldr	r3, [pc, #496]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80276b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80276b8:	091b      	lsrs	r3, r3, #4
 80276ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80276be:	4293      	cmp	r3, r2
 80276c0:	d223      	bcs.n	802770a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80276c2:	687b      	ldr	r3, [r7, #4]
 80276c4:	6a1b      	ldr	r3, [r3, #32]
 80276c6:	4618      	mov	r0, r3
 80276c8:	f000 fdcc 	bl	8028264 <RCC_SetFlashLatencyFromMSIRange>
 80276cc:	4603      	mov	r3, r0
 80276ce:	2b00      	cmp	r3, #0
 80276d0:	d001      	beq.n	80276d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80276d2:	2301      	movs	r3, #1
 80276d4:	e3c0      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80276d6:	4b73      	ldr	r3, [pc, #460]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80276d8:	681b      	ldr	r3, [r3, #0]
 80276da:	4a72      	ldr	r2, [pc, #456]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80276dc:	f043 0308 	orr.w	r3, r3, #8
 80276e0:	6013      	str	r3, [r2, #0]
 80276e2:	4b70      	ldr	r3, [pc, #448]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80276e4:	681b      	ldr	r3, [r3, #0]
 80276e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80276ea:	687b      	ldr	r3, [r7, #4]
 80276ec:	6a1b      	ldr	r3, [r3, #32]
 80276ee:	496d      	ldr	r1, [pc, #436]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80276f0:	4313      	orrs	r3, r2
 80276f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80276f4:	4b6b      	ldr	r3, [pc, #428]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80276f6:	685b      	ldr	r3, [r3, #4]
 80276f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80276fc:	687b      	ldr	r3, [r7, #4]
 80276fe:	69db      	ldr	r3, [r3, #28]
 8027700:	021b      	lsls	r3, r3, #8
 8027702:	4968      	ldr	r1, [pc, #416]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027704:	4313      	orrs	r3, r2
 8027706:	604b      	str	r3, [r1, #4]
 8027708:	e025      	b.n	8027756 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 802770a:	4b66      	ldr	r3, [pc, #408]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 802770c:	681b      	ldr	r3, [r3, #0]
 802770e:	4a65      	ldr	r2, [pc, #404]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027710:	f043 0308 	orr.w	r3, r3, #8
 8027714:	6013      	str	r3, [r2, #0]
 8027716:	4b63      	ldr	r3, [pc, #396]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027718:	681b      	ldr	r3, [r3, #0]
 802771a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802771e:	687b      	ldr	r3, [r7, #4]
 8027720:	6a1b      	ldr	r3, [r3, #32]
 8027722:	4960      	ldr	r1, [pc, #384]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027724:	4313      	orrs	r3, r2
 8027726:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8027728:	4b5e      	ldr	r3, [pc, #376]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 802772a:	685b      	ldr	r3, [r3, #4]
 802772c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8027730:	687b      	ldr	r3, [r7, #4]
 8027732:	69db      	ldr	r3, [r3, #28]
 8027734:	021b      	lsls	r3, r3, #8
 8027736:	495b      	ldr	r1, [pc, #364]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027738:	4313      	orrs	r3, r2
 802773a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 802773c:	69bb      	ldr	r3, [r7, #24]
 802773e:	2b00      	cmp	r3, #0
 8027740:	d109      	bne.n	8027756 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8027742:	687b      	ldr	r3, [r7, #4]
 8027744:	6a1b      	ldr	r3, [r3, #32]
 8027746:	4618      	mov	r0, r3
 8027748:	f000 fd8c 	bl	8028264 <RCC_SetFlashLatencyFromMSIRange>
 802774c:	4603      	mov	r3, r0
 802774e:	2b00      	cmp	r3, #0
 8027750:	d001      	beq.n	8027756 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8027752:	2301      	movs	r3, #1
 8027754:	e380      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8027756:	f000 fcc1 	bl	80280dc <HAL_RCC_GetSysClockFreq>
 802775a:	4602      	mov	r2, r0
 802775c:	4b51      	ldr	r3, [pc, #324]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 802775e:	689b      	ldr	r3, [r3, #8]
 8027760:	091b      	lsrs	r3, r3, #4
 8027762:	f003 030f 	and.w	r3, r3, #15
 8027766:	4950      	ldr	r1, [pc, #320]	; (80278a8 <HAL_RCC_OscConfig+0x274>)
 8027768:	5ccb      	ldrb	r3, [r1, r3]
 802776a:	f003 031f 	and.w	r3, r3, #31
 802776e:	fa22 f303 	lsr.w	r3, r2, r3
 8027772:	4a4e      	ldr	r2, [pc, #312]	; (80278ac <HAL_RCC_OscConfig+0x278>)
 8027774:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8027776:	4b4e      	ldr	r3, [pc, #312]	; (80278b0 <HAL_RCC_OscConfig+0x27c>)
 8027778:	681b      	ldr	r3, [r3, #0]
 802777a:	4618      	mov	r0, r3
 802777c:	f7fc fd86 	bl	802428c <HAL_InitTick>
 8027780:	4603      	mov	r3, r0
 8027782:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8027784:	7bfb      	ldrb	r3, [r7, #15]
 8027786:	2b00      	cmp	r3, #0
 8027788:	d052      	beq.n	8027830 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 802778a:	7bfb      	ldrb	r3, [r7, #15]
 802778c:	e364      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 802778e:	687b      	ldr	r3, [r7, #4]
 8027790:	699b      	ldr	r3, [r3, #24]
 8027792:	2b00      	cmp	r3, #0
 8027794:	d032      	beq.n	80277fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8027796:	4b43      	ldr	r3, [pc, #268]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027798:	681b      	ldr	r3, [r3, #0]
 802779a:	4a42      	ldr	r2, [pc, #264]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 802779c:	f043 0301 	orr.w	r3, r3, #1
 80277a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80277a2:	f7fc fdc3 	bl	802432c <HAL_GetTick>
 80277a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80277a8:	e008      	b.n	80277bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80277aa:	f7fc fdbf 	bl	802432c <HAL_GetTick>
 80277ae:	4602      	mov	r2, r0
 80277b0:	693b      	ldr	r3, [r7, #16]
 80277b2:	1ad3      	subs	r3, r2, r3
 80277b4:	2b02      	cmp	r3, #2
 80277b6:	d901      	bls.n	80277bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80277b8:	2303      	movs	r3, #3
 80277ba:	e34d      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80277bc:	4b39      	ldr	r3, [pc, #228]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80277be:	681b      	ldr	r3, [r3, #0]
 80277c0:	f003 0302 	and.w	r3, r3, #2
 80277c4:	2b00      	cmp	r3, #0
 80277c6:	d0f0      	beq.n	80277aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80277c8:	4b36      	ldr	r3, [pc, #216]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80277ca:	681b      	ldr	r3, [r3, #0]
 80277cc:	4a35      	ldr	r2, [pc, #212]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80277ce:	f043 0308 	orr.w	r3, r3, #8
 80277d2:	6013      	str	r3, [r2, #0]
 80277d4:	4b33      	ldr	r3, [pc, #204]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80277d6:	681b      	ldr	r3, [r3, #0]
 80277d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80277dc:	687b      	ldr	r3, [r7, #4]
 80277de:	6a1b      	ldr	r3, [r3, #32]
 80277e0:	4930      	ldr	r1, [pc, #192]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80277e2:	4313      	orrs	r3, r2
 80277e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80277e6:	4b2f      	ldr	r3, [pc, #188]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80277e8:	685b      	ldr	r3, [r3, #4]
 80277ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80277ee:	687b      	ldr	r3, [r7, #4]
 80277f0:	69db      	ldr	r3, [r3, #28]
 80277f2:	021b      	lsls	r3, r3, #8
 80277f4:	492b      	ldr	r1, [pc, #172]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80277f6:	4313      	orrs	r3, r2
 80277f8:	604b      	str	r3, [r1, #4]
 80277fa:	e01a      	b.n	8027832 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80277fc:	4b29      	ldr	r3, [pc, #164]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 80277fe:	681b      	ldr	r3, [r3, #0]
 8027800:	4a28      	ldr	r2, [pc, #160]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027802:	f023 0301 	bic.w	r3, r3, #1
 8027806:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8027808:	f7fc fd90 	bl	802432c <HAL_GetTick>
 802780c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 802780e:	e008      	b.n	8027822 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8027810:	f7fc fd8c 	bl	802432c <HAL_GetTick>
 8027814:	4602      	mov	r2, r0
 8027816:	693b      	ldr	r3, [r7, #16]
 8027818:	1ad3      	subs	r3, r2, r3
 802781a:	2b02      	cmp	r3, #2
 802781c:	d901      	bls.n	8027822 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 802781e:	2303      	movs	r3, #3
 8027820:	e31a      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8027822:	4b20      	ldr	r3, [pc, #128]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027824:	681b      	ldr	r3, [r3, #0]
 8027826:	f003 0302 	and.w	r3, r3, #2
 802782a:	2b00      	cmp	r3, #0
 802782c:	d1f0      	bne.n	8027810 <HAL_RCC_OscConfig+0x1dc>
 802782e:	e000      	b.n	8027832 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8027830:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8027832:	687b      	ldr	r3, [r7, #4]
 8027834:	681b      	ldr	r3, [r3, #0]
 8027836:	f003 0301 	and.w	r3, r3, #1
 802783a:	2b00      	cmp	r3, #0
 802783c:	d073      	beq.n	8027926 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 802783e:	69bb      	ldr	r3, [r7, #24]
 8027840:	2b08      	cmp	r3, #8
 8027842:	d005      	beq.n	8027850 <HAL_RCC_OscConfig+0x21c>
 8027844:	69bb      	ldr	r3, [r7, #24]
 8027846:	2b0c      	cmp	r3, #12
 8027848:	d10e      	bne.n	8027868 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 802784a:	697b      	ldr	r3, [r7, #20]
 802784c:	2b03      	cmp	r3, #3
 802784e:	d10b      	bne.n	8027868 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027850:	4b14      	ldr	r3, [pc, #80]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027852:	681b      	ldr	r3, [r3, #0]
 8027854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027858:	2b00      	cmp	r3, #0
 802785a:	d063      	beq.n	8027924 <HAL_RCC_OscConfig+0x2f0>
 802785c:	687b      	ldr	r3, [r7, #4]
 802785e:	685b      	ldr	r3, [r3, #4]
 8027860:	2b00      	cmp	r3, #0
 8027862:	d15f      	bne.n	8027924 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8027864:	2301      	movs	r3, #1
 8027866:	e2f7      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027868:	687b      	ldr	r3, [r7, #4]
 802786a:	685b      	ldr	r3, [r3, #4]
 802786c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027870:	d106      	bne.n	8027880 <HAL_RCC_OscConfig+0x24c>
 8027872:	4b0c      	ldr	r3, [pc, #48]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027874:	681b      	ldr	r3, [r3, #0]
 8027876:	4a0b      	ldr	r2, [pc, #44]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802787c:	6013      	str	r3, [r2, #0]
 802787e:	e025      	b.n	80278cc <HAL_RCC_OscConfig+0x298>
 8027880:	687b      	ldr	r3, [r7, #4]
 8027882:	685b      	ldr	r3, [r3, #4]
 8027884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027888:	d114      	bne.n	80278b4 <HAL_RCC_OscConfig+0x280>
 802788a:	4b06      	ldr	r3, [pc, #24]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 802788c:	681b      	ldr	r3, [r3, #0]
 802788e:	4a05      	ldr	r2, [pc, #20]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027894:	6013      	str	r3, [r2, #0]
 8027896:	4b03      	ldr	r3, [pc, #12]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 8027898:	681b      	ldr	r3, [r3, #0]
 802789a:	4a02      	ldr	r2, [pc, #8]	; (80278a4 <HAL_RCC_OscConfig+0x270>)
 802789c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80278a0:	6013      	str	r3, [r2, #0]
 80278a2:	e013      	b.n	80278cc <HAL_RCC_OscConfig+0x298>
 80278a4:	40021000 	.word	0x40021000
 80278a8:	08077fe0 	.word	0x08077fe0
 80278ac:	20000228 	.word	0x20000228
 80278b0:	20000294 	.word	0x20000294
 80278b4:	4ba0      	ldr	r3, [pc, #640]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80278b6:	681b      	ldr	r3, [r3, #0]
 80278b8:	4a9f      	ldr	r2, [pc, #636]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80278ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80278be:	6013      	str	r3, [r2, #0]
 80278c0:	4b9d      	ldr	r3, [pc, #628]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80278c2:	681b      	ldr	r3, [r3, #0]
 80278c4:	4a9c      	ldr	r2, [pc, #624]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80278c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80278ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80278cc:	687b      	ldr	r3, [r7, #4]
 80278ce:	685b      	ldr	r3, [r3, #4]
 80278d0:	2b00      	cmp	r3, #0
 80278d2:	d013      	beq.n	80278fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80278d4:	f7fc fd2a 	bl	802432c <HAL_GetTick>
 80278d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80278da:	e008      	b.n	80278ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80278dc:	f7fc fd26 	bl	802432c <HAL_GetTick>
 80278e0:	4602      	mov	r2, r0
 80278e2:	693b      	ldr	r3, [r7, #16]
 80278e4:	1ad3      	subs	r3, r2, r3
 80278e6:	2b64      	cmp	r3, #100	; 0x64
 80278e8:	d901      	bls.n	80278ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80278ea:	2303      	movs	r3, #3
 80278ec:	e2b4      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80278ee:	4b92      	ldr	r3, [pc, #584]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80278f0:	681b      	ldr	r3, [r3, #0]
 80278f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80278f6:	2b00      	cmp	r3, #0
 80278f8:	d0f0      	beq.n	80278dc <HAL_RCC_OscConfig+0x2a8>
 80278fa:	e014      	b.n	8027926 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80278fc:	f7fc fd16 	bl	802432c <HAL_GetTick>
 8027900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8027902:	e008      	b.n	8027916 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8027904:	f7fc fd12 	bl	802432c <HAL_GetTick>
 8027908:	4602      	mov	r2, r0
 802790a:	693b      	ldr	r3, [r7, #16]
 802790c:	1ad3      	subs	r3, r2, r3
 802790e:	2b64      	cmp	r3, #100	; 0x64
 8027910:	d901      	bls.n	8027916 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8027912:	2303      	movs	r3, #3
 8027914:	e2a0      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8027916:	4b88      	ldr	r3, [pc, #544]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027918:	681b      	ldr	r3, [r3, #0]
 802791a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802791e:	2b00      	cmp	r3, #0
 8027920:	d1f0      	bne.n	8027904 <HAL_RCC_OscConfig+0x2d0>
 8027922:	e000      	b.n	8027926 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8027926:	687b      	ldr	r3, [r7, #4]
 8027928:	681b      	ldr	r3, [r3, #0]
 802792a:	f003 0302 	and.w	r3, r3, #2
 802792e:	2b00      	cmp	r3, #0
 8027930:	d060      	beq.n	80279f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8027932:	69bb      	ldr	r3, [r7, #24]
 8027934:	2b04      	cmp	r3, #4
 8027936:	d005      	beq.n	8027944 <HAL_RCC_OscConfig+0x310>
 8027938:	69bb      	ldr	r3, [r7, #24]
 802793a:	2b0c      	cmp	r3, #12
 802793c:	d119      	bne.n	8027972 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 802793e:	697b      	ldr	r3, [r7, #20]
 8027940:	2b02      	cmp	r3, #2
 8027942:	d116      	bne.n	8027972 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8027944:	4b7c      	ldr	r3, [pc, #496]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027946:	681b      	ldr	r3, [r3, #0]
 8027948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802794c:	2b00      	cmp	r3, #0
 802794e:	d005      	beq.n	802795c <HAL_RCC_OscConfig+0x328>
 8027950:	687b      	ldr	r3, [r7, #4]
 8027952:	68db      	ldr	r3, [r3, #12]
 8027954:	2b00      	cmp	r3, #0
 8027956:	d101      	bne.n	802795c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8027958:	2301      	movs	r3, #1
 802795a:	e27d      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802795c:	4b76      	ldr	r3, [pc, #472]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 802795e:	685b      	ldr	r3, [r3, #4]
 8027960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8027964:	687b      	ldr	r3, [r7, #4]
 8027966:	691b      	ldr	r3, [r3, #16]
 8027968:	061b      	lsls	r3, r3, #24
 802796a:	4973      	ldr	r1, [pc, #460]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 802796c:	4313      	orrs	r3, r2
 802796e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8027970:	e040      	b.n	80279f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8027972:	687b      	ldr	r3, [r7, #4]
 8027974:	68db      	ldr	r3, [r3, #12]
 8027976:	2b00      	cmp	r3, #0
 8027978:	d023      	beq.n	80279c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802797a:	4b6f      	ldr	r3, [pc, #444]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 802797c:	681b      	ldr	r3, [r3, #0]
 802797e:	4a6e      	ldr	r2, [pc, #440]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027986:	f7fc fcd1 	bl	802432c <HAL_GetTick>
 802798a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802798c:	e008      	b.n	80279a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802798e:	f7fc fccd 	bl	802432c <HAL_GetTick>
 8027992:	4602      	mov	r2, r0
 8027994:	693b      	ldr	r3, [r7, #16]
 8027996:	1ad3      	subs	r3, r2, r3
 8027998:	2b02      	cmp	r3, #2
 802799a:	d901      	bls.n	80279a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 802799c:	2303      	movs	r3, #3
 802799e:	e25b      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80279a0:	4b65      	ldr	r3, [pc, #404]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80279a2:	681b      	ldr	r3, [r3, #0]
 80279a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80279a8:	2b00      	cmp	r3, #0
 80279aa:	d0f0      	beq.n	802798e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80279ac:	4b62      	ldr	r3, [pc, #392]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80279ae:	685b      	ldr	r3, [r3, #4]
 80279b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80279b4:	687b      	ldr	r3, [r7, #4]
 80279b6:	691b      	ldr	r3, [r3, #16]
 80279b8:	061b      	lsls	r3, r3, #24
 80279ba:	495f      	ldr	r1, [pc, #380]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80279bc:	4313      	orrs	r3, r2
 80279be:	604b      	str	r3, [r1, #4]
 80279c0:	e018      	b.n	80279f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80279c2:	4b5d      	ldr	r3, [pc, #372]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80279c4:	681b      	ldr	r3, [r3, #0]
 80279c6:	4a5c      	ldr	r2, [pc, #368]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80279c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80279cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80279ce:	f7fc fcad 	bl	802432c <HAL_GetTick>
 80279d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80279d4:	e008      	b.n	80279e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80279d6:	f7fc fca9 	bl	802432c <HAL_GetTick>
 80279da:	4602      	mov	r2, r0
 80279dc:	693b      	ldr	r3, [r7, #16]
 80279de:	1ad3      	subs	r3, r2, r3
 80279e0:	2b02      	cmp	r3, #2
 80279e2:	d901      	bls.n	80279e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80279e4:	2303      	movs	r3, #3
 80279e6:	e237      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80279e8:	4b53      	ldr	r3, [pc, #332]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 80279ea:	681b      	ldr	r3, [r3, #0]
 80279ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80279f0:	2b00      	cmp	r3, #0
 80279f2:	d1f0      	bne.n	80279d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80279f4:	687b      	ldr	r3, [r7, #4]
 80279f6:	681b      	ldr	r3, [r3, #0]
 80279f8:	f003 0308 	and.w	r3, r3, #8
 80279fc:	2b00      	cmp	r3, #0
 80279fe:	d03c      	beq.n	8027a7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8027a00:	687b      	ldr	r3, [r7, #4]
 8027a02:	695b      	ldr	r3, [r3, #20]
 8027a04:	2b00      	cmp	r3, #0
 8027a06:	d01c      	beq.n	8027a42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8027a08:	4b4b      	ldr	r3, [pc, #300]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8027a0e:	4a4a      	ldr	r2, [pc, #296]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027a10:	f043 0301 	orr.w	r3, r3, #1
 8027a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027a18:	f7fc fc88 	bl	802432c <HAL_GetTick>
 8027a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8027a1e:	e008      	b.n	8027a32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8027a20:	f7fc fc84 	bl	802432c <HAL_GetTick>
 8027a24:	4602      	mov	r2, r0
 8027a26:	693b      	ldr	r3, [r7, #16]
 8027a28:	1ad3      	subs	r3, r2, r3
 8027a2a:	2b02      	cmp	r3, #2
 8027a2c:	d901      	bls.n	8027a32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8027a2e:	2303      	movs	r3, #3
 8027a30:	e212      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8027a32:	4b41      	ldr	r3, [pc, #260]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8027a38:	f003 0302 	and.w	r3, r3, #2
 8027a3c:	2b00      	cmp	r3, #0
 8027a3e:	d0ef      	beq.n	8027a20 <HAL_RCC_OscConfig+0x3ec>
 8027a40:	e01b      	b.n	8027a7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8027a42:	4b3d      	ldr	r3, [pc, #244]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8027a48:	4a3b      	ldr	r2, [pc, #236]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027a4a:	f023 0301 	bic.w	r3, r3, #1
 8027a4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027a52:	f7fc fc6b 	bl	802432c <HAL_GetTick>
 8027a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8027a58:	e008      	b.n	8027a6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8027a5a:	f7fc fc67 	bl	802432c <HAL_GetTick>
 8027a5e:	4602      	mov	r2, r0
 8027a60:	693b      	ldr	r3, [r7, #16]
 8027a62:	1ad3      	subs	r3, r2, r3
 8027a64:	2b02      	cmp	r3, #2
 8027a66:	d901      	bls.n	8027a6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8027a68:	2303      	movs	r3, #3
 8027a6a:	e1f5      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8027a6c:	4b32      	ldr	r3, [pc, #200]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8027a72:	f003 0302 	and.w	r3, r3, #2
 8027a76:	2b00      	cmp	r3, #0
 8027a78:	d1ef      	bne.n	8027a5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8027a7a:	687b      	ldr	r3, [r7, #4]
 8027a7c:	681b      	ldr	r3, [r3, #0]
 8027a7e:	f003 0304 	and.w	r3, r3, #4
 8027a82:	2b00      	cmp	r3, #0
 8027a84:	f000 80a6 	beq.w	8027bd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8027a88:	2300      	movs	r3, #0
 8027a8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8027a8c:	4b2a      	ldr	r3, [pc, #168]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027a94:	2b00      	cmp	r3, #0
 8027a96:	d10d      	bne.n	8027ab4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8027a98:	4b27      	ldr	r3, [pc, #156]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027a9c:	4a26      	ldr	r2, [pc, #152]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8027aa4:	4b24      	ldr	r3, [pc, #144]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027aac:	60bb      	str	r3, [r7, #8]
 8027aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8027ab0:	2301      	movs	r3, #1
 8027ab2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8027ab4:	4b21      	ldr	r3, [pc, #132]	; (8027b3c <HAL_RCC_OscConfig+0x508>)
 8027ab6:	681b      	ldr	r3, [r3, #0]
 8027ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027abc:	2b00      	cmp	r3, #0
 8027abe:	d118      	bne.n	8027af2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8027ac0:	4b1e      	ldr	r3, [pc, #120]	; (8027b3c <HAL_RCC_OscConfig+0x508>)
 8027ac2:	681b      	ldr	r3, [r3, #0]
 8027ac4:	4a1d      	ldr	r2, [pc, #116]	; (8027b3c <HAL_RCC_OscConfig+0x508>)
 8027ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8027acc:	f7fc fc2e 	bl	802432c <HAL_GetTick>
 8027ad0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8027ad2:	e008      	b.n	8027ae6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8027ad4:	f7fc fc2a 	bl	802432c <HAL_GetTick>
 8027ad8:	4602      	mov	r2, r0
 8027ada:	693b      	ldr	r3, [r7, #16]
 8027adc:	1ad3      	subs	r3, r2, r3
 8027ade:	2b02      	cmp	r3, #2
 8027ae0:	d901      	bls.n	8027ae6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8027ae2:	2303      	movs	r3, #3
 8027ae4:	e1b8      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8027ae6:	4b15      	ldr	r3, [pc, #84]	; (8027b3c <HAL_RCC_OscConfig+0x508>)
 8027ae8:	681b      	ldr	r3, [r3, #0]
 8027aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027aee:	2b00      	cmp	r3, #0
 8027af0:	d0f0      	beq.n	8027ad4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027af2:	687b      	ldr	r3, [r7, #4]
 8027af4:	689b      	ldr	r3, [r3, #8]
 8027af6:	2b01      	cmp	r3, #1
 8027af8:	d108      	bne.n	8027b0c <HAL_RCC_OscConfig+0x4d8>
 8027afa:	4b0f      	ldr	r3, [pc, #60]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b00:	4a0d      	ldr	r2, [pc, #52]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027b02:	f043 0301 	orr.w	r3, r3, #1
 8027b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8027b0a:	e029      	b.n	8027b60 <HAL_RCC_OscConfig+0x52c>
 8027b0c:	687b      	ldr	r3, [r7, #4]
 8027b0e:	689b      	ldr	r3, [r3, #8]
 8027b10:	2b05      	cmp	r3, #5
 8027b12:	d115      	bne.n	8027b40 <HAL_RCC_OscConfig+0x50c>
 8027b14:	4b08      	ldr	r3, [pc, #32]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b1a:	4a07      	ldr	r2, [pc, #28]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027b1c:	f043 0304 	orr.w	r3, r3, #4
 8027b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8027b24:	4b04      	ldr	r3, [pc, #16]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b2a:	4a03      	ldr	r2, [pc, #12]	; (8027b38 <HAL_RCC_OscConfig+0x504>)
 8027b2c:	f043 0301 	orr.w	r3, r3, #1
 8027b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8027b34:	e014      	b.n	8027b60 <HAL_RCC_OscConfig+0x52c>
 8027b36:	bf00      	nop
 8027b38:	40021000 	.word	0x40021000
 8027b3c:	40007000 	.word	0x40007000
 8027b40:	4b9d      	ldr	r3, [pc, #628]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b46:	4a9c      	ldr	r2, [pc, #624]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027b48:	f023 0301 	bic.w	r3, r3, #1
 8027b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8027b50:	4b99      	ldr	r3, [pc, #612]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b56:	4a98      	ldr	r2, [pc, #608]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027b58:	f023 0304 	bic.w	r3, r3, #4
 8027b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8027b60:	687b      	ldr	r3, [r7, #4]
 8027b62:	689b      	ldr	r3, [r3, #8]
 8027b64:	2b00      	cmp	r3, #0
 8027b66:	d016      	beq.n	8027b96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027b68:	f7fc fbe0 	bl	802432c <HAL_GetTick>
 8027b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8027b6e:	e00a      	b.n	8027b86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8027b70:	f7fc fbdc 	bl	802432c <HAL_GetTick>
 8027b74:	4602      	mov	r2, r0
 8027b76:	693b      	ldr	r3, [r7, #16]
 8027b78:	1ad3      	subs	r3, r2, r3
 8027b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8027b7e:	4293      	cmp	r3, r2
 8027b80:	d901      	bls.n	8027b86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8027b82:	2303      	movs	r3, #3
 8027b84:	e168      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8027b86:	4b8c      	ldr	r3, [pc, #560]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b8c:	f003 0302 	and.w	r3, r3, #2
 8027b90:	2b00      	cmp	r3, #0
 8027b92:	d0ed      	beq.n	8027b70 <HAL_RCC_OscConfig+0x53c>
 8027b94:	e015      	b.n	8027bc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027b96:	f7fc fbc9 	bl	802432c <HAL_GetTick>
 8027b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8027b9c:	e00a      	b.n	8027bb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8027b9e:	f7fc fbc5 	bl	802432c <HAL_GetTick>
 8027ba2:	4602      	mov	r2, r0
 8027ba4:	693b      	ldr	r3, [r7, #16]
 8027ba6:	1ad3      	subs	r3, r2, r3
 8027ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8027bac:	4293      	cmp	r3, r2
 8027bae:	d901      	bls.n	8027bb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8027bb0:	2303      	movs	r3, #3
 8027bb2:	e151      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8027bb4:	4b80      	ldr	r3, [pc, #512]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027bba:	f003 0302 	and.w	r3, r3, #2
 8027bbe:	2b00      	cmp	r3, #0
 8027bc0:	d1ed      	bne.n	8027b9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8027bc2:	7ffb      	ldrb	r3, [r7, #31]
 8027bc4:	2b01      	cmp	r3, #1
 8027bc6:	d105      	bne.n	8027bd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8027bc8:	4b7b      	ldr	r3, [pc, #492]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027bcc:	4a7a      	ldr	r2, [pc, #488]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027bd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8027bd4:	687b      	ldr	r3, [r7, #4]
 8027bd6:	681b      	ldr	r3, [r3, #0]
 8027bd8:	f003 0320 	and.w	r3, r3, #32
 8027bdc:	2b00      	cmp	r3, #0
 8027bde:	d03c      	beq.n	8027c5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8027be0:	687b      	ldr	r3, [r7, #4]
 8027be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027be4:	2b00      	cmp	r3, #0
 8027be6:	d01c      	beq.n	8027c22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8027be8:	4b73      	ldr	r3, [pc, #460]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8027bee:	4a72      	ldr	r2, [pc, #456]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027bf0:	f043 0301 	orr.w	r3, r3, #1
 8027bf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027bf8:	f7fc fb98 	bl	802432c <HAL_GetTick>
 8027bfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8027bfe:	e008      	b.n	8027c12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8027c00:	f7fc fb94 	bl	802432c <HAL_GetTick>
 8027c04:	4602      	mov	r2, r0
 8027c06:	693b      	ldr	r3, [r7, #16]
 8027c08:	1ad3      	subs	r3, r2, r3
 8027c0a:	2b02      	cmp	r3, #2
 8027c0c:	d901      	bls.n	8027c12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8027c0e:	2303      	movs	r3, #3
 8027c10:	e122      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8027c12:	4b69      	ldr	r3, [pc, #420]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8027c18:	f003 0302 	and.w	r3, r3, #2
 8027c1c:	2b00      	cmp	r3, #0
 8027c1e:	d0ef      	beq.n	8027c00 <HAL_RCC_OscConfig+0x5cc>
 8027c20:	e01b      	b.n	8027c5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8027c22:	4b65      	ldr	r3, [pc, #404]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8027c28:	4a63      	ldr	r2, [pc, #396]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027c2a:	f023 0301 	bic.w	r3, r3, #1
 8027c2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027c32:	f7fc fb7b 	bl	802432c <HAL_GetTick>
 8027c36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8027c38:	e008      	b.n	8027c4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8027c3a:	f7fc fb77 	bl	802432c <HAL_GetTick>
 8027c3e:	4602      	mov	r2, r0
 8027c40:	693b      	ldr	r3, [r7, #16]
 8027c42:	1ad3      	subs	r3, r2, r3
 8027c44:	2b02      	cmp	r3, #2
 8027c46:	d901      	bls.n	8027c4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8027c48:	2303      	movs	r3, #3
 8027c4a:	e105      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8027c4c:	4b5a      	ldr	r3, [pc, #360]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8027c52:	f003 0302 	and.w	r3, r3, #2
 8027c56:	2b00      	cmp	r3, #0
 8027c58:	d1ef      	bne.n	8027c3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8027c5a:	687b      	ldr	r3, [r7, #4]
 8027c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c5e:	2b00      	cmp	r3, #0
 8027c60:	f000 80f9 	beq.w	8027e56 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8027c64:	687b      	ldr	r3, [r7, #4]
 8027c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c68:	2b02      	cmp	r3, #2
 8027c6a:	f040 80cf 	bne.w	8027e0c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8027c6e:	4b52      	ldr	r3, [pc, #328]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027c70:	68db      	ldr	r3, [r3, #12]
 8027c72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8027c74:	697b      	ldr	r3, [r7, #20]
 8027c76:	f003 0203 	and.w	r2, r3, #3
 8027c7a:	687b      	ldr	r3, [r7, #4]
 8027c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027c7e:	429a      	cmp	r2, r3
 8027c80:	d12c      	bne.n	8027cdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8027c82:	697b      	ldr	r3, [r7, #20]
 8027c84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027c88:	687b      	ldr	r3, [r7, #4]
 8027c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c8c:	3b01      	subs	r3, #1
 8027c8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8027c90:	429a      	cmp	r2, r3
 8027c92:	d123      	bne.n	8027cdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8027c94:	697b      	ldr	r3, [r7, #20]
 8027c96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8027c9a:	687b      	ldr	r3, [r7, #4]
 8027c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027c9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8027ca0:	429a      	cmp	r2, r3
 8027ca2:	d11b      	bne.n	8027cdc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8027ca4:	697b      	ldr	r3, [r7, #20]
 8027ca6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8027caa:	687b      	ldr	r3, [r7, #4]
 8027cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027cae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8027cb0:	429a      	cmp	r2, r3
 8027cb2:	d113      	bne.n	8027cdc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8027cb4:	697b      	ldr	r3, [r7, #20]
 8027cb6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8027cba:	687b      	ldr	r3, [r7, #4]
 8027cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027cbe:	085b      	lsrs	r3, r3, #1
 8027cc0:	3b01      	subs	r3, #1
 8027cc2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8027cc4:	429a      	cmp	r2, r3
 8027cc6:	d109      	bne.n	8027cdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8027cc8:	697b      	ldr	r3, [r7, #20]
 8027cca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8027cce:	687b      	ldr	r3, [r7, #4]
 8027cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027cd2:	085b      	lsrs	r3, r3, #1
 8027cd4:	3b01      	subs	r3, #1
 8027cd6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8027cd8:	429a      	cmp	r2, r3
 8027cda:	d071      	beq.n	8027dc0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8027cdc:	69bb      	ldr	r3, [r7, #24]
 8027cde:	2b0c      	cmp	r3, #12
 8027ce0:	d068      	beq.n	8027db4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8027ce2:	4b35      	ldr	r3, [pc, #212]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027ce4:	681b      	ldr	r3, [r3, #0]
 8027ce6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8027cea:	2b00      	cmp	r3, #0
 8027cec:	d105      	bne.n	8027cfa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8027cee:	4b32      	ldr	r3, [pc, #200]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027cf0:	681b      	ldr	r3, [r3, #0]
 8027cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027cf6:	2b00      	cmp	r3, #0
 8027cf8:	d001      	beq.n	8027cfe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8027cfa:	2301      	movs	r3, #1
 8027cfc:	e0ac      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8027cfe:	4b2e      	ldr	r3, [pc, #184]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027d00:	681b      	ldr	r3, [r3, #0]
 8027d02:	4a2d      	ldr	r2, [pc, #180]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027d08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8027d0a:	f7fc fb0f 	bl	802432c <HAL_GetTick>
 8027d0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8027d10:	e008      	b.n	8027d24 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027d12:	f7fc fb0b 	bl	802432c <HAL_GetTick>
 8027d16:	4602      	mov	r2, r0
 8027d18:	693b      	ldr	r3, [r7, #16]
 8027d1a:	1ad3      	subs	r3, r2, r3
 8027d1c:	2b02      	cmp	r3, #2
 8027d1e:	d901      	bls.n	8027d24 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8027d20:	2303      	movs	r3, #3
 8027d22:	e099      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8027d24:	4b24      	ldr	r3, [pc, #144]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027d26:	681b      	ldr	r3, [r3, #0]
 8027d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027d2c:	2b00      	cmp	r3, #0
 8027d2e:	d1f0      	bne.n	8027d12 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8027d30:	4b21      	ldr	r3, [pc, #132]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027d32:	68da      	ldr	r2, [r3, #12]
 8027d34:	4b21      	ldr	r3, [pc, #132]	; (8027dbc <HAL_RCC_OscConfig+0x788>)
 8027d36:	4013      	ands	r3, r2
 8027d38:	687a      	ldr	r2, [r7, #4]
 8027d3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8027d3c:	687a      	ldr	r2, [r7, #4]
 8027d3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8027d40:	3a01      	subs	r2, #1
 8027d42:	0112      	lsls	r2, r2, #4
 8027d44:	4311      	orrs	r1, r2
 8027d46:	687a      	ldr	r2, [r7, #4]
 8027d48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8027d4a:	0212      	lsls	r2, r2, #8
 8027d4c:	4311      	orrs	r1, r2
 8027d4e:	687a      	ldr	r2, [r7, #4]
 8027d50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8027d52:	0852      	lsrs	r2, r2, #1
 8027d54:	3a01      	subs	r2, #1
 8027d56:	0552      	lsls	r2, r2, #21
 8027d58:	4311      	orrs	r1, r2
 8027d5a:	687a      	ldr	r2, [r7, #4]
 8027d5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8027d5e:	0852      	lsrs	r2, r2, #1
 8027d60:	3a01      	subs	r2, #1
 8027d62:	0652      	lsls	r2, r2, #25
 8027d64:	4311      	orrs	r1, r2
 8027d66:	687a      	ldr	r2, [r7, #4]
 8027d68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8027d6a:	06d2      	lsls	r2, r2, #27
 8027d6c:	430a      	orrs	r2, r1
 8027d6e:	4912      	ldr	r1, [pc, #72]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027d70:	4313      	orrs	r3, r2
 8027d72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8027d74:	4b10      	ldr	r3, [pc, #64]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027d76:	681b      	ldr	r3, [r3, #0]
 8027d78:	4a0f      	ldr	r2, [pc, #60]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027d7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8027d80:	4b0d      	ldr	r3, [pc, #52]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027d82:	68db      	ldr	r3, [r3, #12]
 8027d84:	4a0c      	ldr	r2, [pc, #48]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027d8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8027d8c:	f7fc face 	bl	802432c <HAL_GetTick>
 8027d90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027d92:	e008      	b.n	8027da6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027d94:	f7fc faca 	bl	802432c <HAL_GetTick>
 8027d98:	4602      	mov	r2, r0
 8027d9a:	693b      	ldr	r3, [r7, #16]
 8027d9c:	1ad3      	subs	r3, r2, r3
 8027d9e:	2b02      	cmp	r3, #2
 8027da0:	d901      	bls.n	8027da6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8027da2:	2303      	movs	r3, #3
 8027da4:	e058      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027da6:	4b04      	ldr	r3, [pc, #16]	; (8027db8 <HAL_RCC_OscConfig+0x784>)
 8027da8:	681b      	ldr	r3, [r3, #0]
 8027daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027dae:	2b00      	cmp	r3, #0
 8027db0:	d0f0      	beq.n	8027d94 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8027db2:	e050      	b.n	8027e56 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8027db4:	2301      	movs	r3, #1
 8027db6:	e04f      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
 8027db8:	40021000 	.word	0x40021000
 8027dbc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027dc0:	4b27      	ldr	r3, [pc, #156]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027dc2:	681b      	ldr	r3, [r3, #0]
 8027dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027dc8:	2b00      	cmp	r3, #0
 8027dca:	d144      	bne.n	8027e56 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8027dcc:	4b24      	ldr	r3, [pc, #144]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027dce:	681b      	ldr	r3, [r3, #0]
 8027dd0:	4a23      	ldr	r2, [pc, #140]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027dd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8027dd8:	4b21      	ldr	r3, [pc, #132]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027dda:	68db      	ldr	r3, [r3, #12]
 8027ddc:	4a20      	ldr	r2, [pc, #128]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027de2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8027de4:	f7fc faa2 	bl	802432c <HAL_GetTick>
 8027de8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027dea:	e008      	b.n	8027dfe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027dec:	f7fc fa9e 	bl	802432c <HAL_GetTick>
 8027df0:	4602      	mov	r2, r0
 8027df2:	693b      	ldr	r3, [r7, #16]
 8027df4:	1ad3      	subs	r3, r2, r3
 8027df6:	2b02      	cmp	r3, #2
 8027df8:	d901      	bls.n	8027dfe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8027dfa:	2303      	movs	r3, #3
 8027dfc:	e02c      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027dfe:	4b18      	ldr	r3, [pc, #96]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027e00:	681b      	ldr	r3, [r3, #0]
 8027e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027e06:	2b00      	cmp	r3, #0
 8027e08:	d0f0      	beq.n	8027dec <HAL_RCC_OscConfig+0x7b8>
 8027e0a:	e024      	b.n	8027e56 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8027e0c:	69bb      	ldr	r3, [r7, #24]
 8027e0e:	2b0c      	cmp	r3, #12
 8027e10:	d01f      	beq.n	8027e52 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027e12:	4b13      	ldr	r3, [pc, #76]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027e14:	681b      	ldr	r3, [r3, #0]
 8027e16:	4a12      	ldr	r2, [pc, #72]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027e1e:	f7fc fa85 	bl	802432c <HAL_GetTick>
 8027e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8027e24:	e008      	b.n	8027e38 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027e26:	f7fc fa81 	bl	802432c <HAL_GetTick>
 8027e2a:	4602      	mov	r2, r0
 8027e2c:	693b      	ldr	r3, [r7, #16]
 8027e2e:	1ad3      	subs	r3, r2, r3
 8027e30:	2b02      	cmp	r3, #2
 8027e32:	d901      	bls.n	8027e38 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8027e34:	2303      	movs	r3, #3
 8027e36:	e00f      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8027e38:	4b09      	ldr	r3, [pc, #36]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027e3a:	681b      	ldr	r3, [r3, #0]
 8027e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027e40:	2b00      	cmp	r3, #0
 8027e42:	d1f0      	bne.n	8027e26 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8027e44:	4b06      	ldr	r3, [pc, #24]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027e46:	68da      	ldr	r2, [r3, #12]
 8027e48:	4905      	ldr	r1, [pc, #20]	; (8027e60 <HAL_RCC_OscConfig+0x82c>)
 8027e4a:	4b06      	ldr	r3, [pc, #24]	; (8027e64 <HAL_RCC_OscConfig+0x830>)
 8027e4c:	4013      	ands	r3, r2
 8027e4e:	60cb      	str	r3, [r1, #12]
 8027e50:	e001      	b.n	8027e56 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8027e52:	2301      	movs	r3, #1
 8027e54:	e000      	b.n	8027e58 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8027e56:	2300      	movs	r3, #0
}
 8027e58:	4618      	mov	r0, r3
 8027e5a:	3720      	adds	r7, #32
 8027e5c:	46bd      	mov	sp, r7
 8027e5e:	bd80      	pop	{r7, pc}
 8027e60:	40021000 	.word	0x40021000
 8027e64:	feeefffc 	.word	0xfeeefffc

08027e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027e68:	b580      	push	{r7, lr}
 8027e6a:	b086      	sub	sp, #24
 8027e6c:	af00      	add	r7, sp, #0
 8027e6e:	6078      	str	r0, [r7, #4]
 8027e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8027e72:	2300      	movs	r3, #0
 8027e74:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8027e76:	687b      	ldr	r3, [r7, #4]
 8027e78:	2b00      	cmp	r3, #0
 8027e7a:	d101      	bne.n	8027e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8027e7c:	2301      	movs	r3, #1
 8027e7e:	e11d      	b.n	80280bc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027e80:	4b90      	ldr	r3, [pc, #576]	; (80280c4 <HAL_RCC_ClockConfig+0x25c>)
 8027e82:	681b      	ldr	r3, [r3, #0]
 8027e84:	f003 030f 	and.w	r3, r3, #15
 8027e88:	683a      	ldr	r2, [r7, #0]
 8027e8a:	429a      	cmp	r2, r3
 8027e8c:	d910      	bls.n	8027eb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027e8e:	4b8d      	ldr	r3, [pc, #564]	; (80280c4 <HAL_RCC_ClockConfig+0x25c>)
 8027e90:	681b      	ldr	r3, [r3, #0]
 8027e92:	f023 020f 	bic.w	r2, r3, #15
 8027e96:	498b      	ldr	r1, [pc, #556]	; (80280c4 <HAL_RCC_ClockConfig+0x25c>)
 8027e98:	683b      	ldr	r3, [r7, #0]
 8027e9a:	4313      	orrs	r3, r2
 8027e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027e9e:	4b89      	ldr	r3, [pc, #548]	; (80280c4 <HAL_RCC_ClockConfig+0x25c>)
 8027ea0:	681b      	ldr	r3, [r3, #0]
 8027ea2:	f003 030f 	and.w	r3, r3, #15
 8027ea6:	683a      	ldr	r2, [r7, #0]
 8027ea8:	429a      	cmp	r2, r3
 8027eaa:	d001      	beq.n	8027eb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8027eac:	2301      	movs	r3, #1
 8027eae:	e105      	b.n	80280bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027eb0:	687b      	ldr	r3, [r7, #4]
 8027eb2:	681b      	ldr	r3, [r3, #0]
 8027eb4:	f003 0302 	and.w	r3, r3, #2
 8027eb8:	2b00      	cmp	r3, #0
 8027eba:	d010      	beq.n	8027ede <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8027ebc:	687b      	ldr	r3, [r7, #4]
 8027ebe:	689a      	ldr	r2, [r3, #8]
 8027ec0:	4b81      	ldr	r3, [pc, #516]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027ec2:	689b      	ldr	r3, [r3, #8]
 8027ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027ec8:	429a      	cmp	r2, r3
 8027eca:	d908      	bls.n	8027ede <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027ecc:	4b7e      	ldr	r3, [pc, #504]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027ece:	689b      	ldr	r3, [r3, #8]
 8027ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027ed4:	687b      	ldr	r3, [r7, #4]
 8027ed6:	689b      	ldr	r3, [r3, #8]
 8027ed8:	497b      	ldr	r1, [pc, #492]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027eda:	4313      	orrs	r3, r2
 8027edc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8027ede:	687b      	ldr	r3, [r7, #4]
 8027ee0:	681b      	ldr	r3, [r3, #0]
 8027ee2:	f003 0301 	and.w	r3, r3, #1
 8027ee6:	2b00      	cmp	r3, #0
 8027ee8:	d079      	beq.n	8027fde <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8027eea:	687b      	ldr	r3, [r7, #4]
 8027eec:	685b      	ldr	r3, [r3, #4]
 8027eee:	2b03      	cmp	r3, #3
 8027ef0:	d11e      	bne.n	8027f30 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027ef2:	4b75      	ldr	r3, [pc, #468]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027ef4:	681b      	ldr	r3, [r3, #0]
 8027ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027efa:	2b00      	cmp	r3, #0
 8027efc:	d101      	bne.n	8027f02 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8027efe:	2301      	movs	r3, #1
 8027f00:	e0dc      	b.n	80280bc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8027f02:	f000 fa09 	bl	8028318 <RCC_GetSysClockFreqFromPLLSource>
 8027f06:	4603      	mov	r3, r0
 8027f08:	4a70      	ldr	r2, [pc, #448]	; (80280cc <HAL_RCC_ClockConfig+0x264>)
 8027f0a:	4293      	cmp	r3, r2
 8027f0c:	d946      	bls.n	8027f9c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8027f0e:	4b6e      	ldr	r3, [pc, #440]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f10:	689b      	ldr	r3, [r3, #8]
 8027f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027f16:	2b00      	cmp	r3, #0
 8027f18:	d140      	bne.n	8027f9c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8027f1a:	4b6b      	ldr	r3, [pc, #428]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f1c:	689b      	ldr	r3, [r3, #8]
 8027f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027f22:	4a69      	ldr	r2, [pc, #420]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027f28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8027f2a:	2380      	movs	r3, #128	; 0x80
 8027f2c:	617b      	str	r3, [r7, #20]
 8027f2e:	e035      	b.n	8027f9c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8027f30:	687b      	ldr	r3, [r7, #4]
 8027f32:	685b      	ldr	r3, [r3, #4]
 8027f34:	2b02      	cmp	r3, #2
 8027f36:	d107      	bne.n	8027f48 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8027f38:	4b63      	ldr	r3, [pc, #396]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f3a:	681b      	ldr	r3, [r3, #0]
 8027f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027f40:	2b00      	cmp	r3, #0
 8027f42:	d115      	bne.n	8027f70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8027f44:	2301      	movs	r3, #1
 8027f46:	e0b9      	b.n	80280bc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8027f48:	687b      	ldr	r3, [r7, #4]
 8027f4a:	685b      	ldr	r3, [r3, #4]
 8027f4c:	2b00      	cmp	r3, #0
 8027f4e:	d107      	bne.n	8027f60 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8027f50:	4b5d      	ldr	r3, [pc, #372]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f52:	681b      	ldr	r3, [r3, #0]
 8027f54:	f003 0302 	and.w	r3, r3, #2
 8027f58:	2b00      	cmp	r3, #0
 8027f5a:	d109      	bne.n	8027f70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8027f5c:	2301      	movs	r3, #1
 8027f5e:	e0ad      	b.n	80280bc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8027f60:	4b59      	ldr	r3, [pc, #356]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f62:	681b      	ldr	r3, [r3, #0]
 8027f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027f68:	2b00      	cmp	r3, #0
 8027f6a:	d101      	bne.n	8027f70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8027f6c:	2301      	movs	r3, #1
 8027f6e:	e0a5      	b.n	80280bc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8027f70:	f000 f8b4 	bl	80280dc <HAL_RCC_GetSysClockFreq>
 8027f74:	4603      	mov	r3, r0
 8027f76:	4a55      	ldr	r2, [pc, #340]	; (80280cc <HAL_RCC_ClockConfig+0x264>)
 8027f78:	4293      	cmp	r3, r2
 8027f7a:	d90f      	bls.n	8027f9c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8027f7c:	4b52      	ldr	r3, [pc, #328]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f7e:	689b      	ldr	r3, [r3, #8]
 8027f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027f84:	2b00      	cmp	r3, #0
 8027f86:	d109      	bne.n	8027f9c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8027f88:	4b4f      	ldr	r3, [pc, #316]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f8a:	689b      	ldr	r3, [r3, #8]
 8027f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027f90:	4a4d      	ldr	r2, [pc, #308]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027f96:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8027f98:	2380      	movs	r3, #128	; 0x80
 8027f9a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8027f9c:	4b4a      	ldr	r3, [pc, #296]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027f9e:	689b      	ldr	r3, [r3, #8]
 8027fa0:	f023 0203 	bic.w	r2, r3, #3
 8027fa4:	687b      	ldr	r3, [r7, #4]
 8027fa6:	685b      	ldr	r3, [r3, #4]
 8027fa8:	4947      	ldr	r1, [pc, #284]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027faa:	4313      	orrs	r3, r2
 8027fac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027fae:	f7fc f9bd 	bl	802432c <HAL_GetTick>
 8027fb2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027fb4:	e00a      	b.n	8027fcc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027fb6:	f7fc f9b9 	bl	802432c <HAL_GetTick>
 8027fba:	4602      	mov	r2, r0
 8027fbc:	693b      	ldr	r3, [r7, #16]
 8027fbe:	1ad3      	subs	r3, r2, r3
 8027fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8027fc4:	4293      	cmp	r3, r2
 8027fc6:	d901      	bls.n	8027fcc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8027fc8:	2303      	movs	r3, #3
 8027fca:	e077      	b.n	80280bc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027fcc:	4b3e      	ldr	r3, [pc, #248]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027fce:	689b      	ldr	r3, [r3, #8]
 8027fd0:	f003 020c 	and.w	r2, r3, #12
 8027fd4:	687b      	ldr	r3, [r7, #4]
 8027fd6:	685b      	ldr	r3, [r3, #4]
 8027fd8:	009b      	lsls	r3, r3, #2
 8027fda:	429a      	cmp	r2, r3
 8027fdc:	d1eb      	bne.n	8027fb6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8027fde:	697b      	ldr	r3, [r7, #20]
 8027fe0:	2b80      	cmp	r3, #128	; 0x80
 8027fe2:	d105      	bne.n	8027ff0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8027fe4:	4b38      	ldr	r3, [pc, #224]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027fe6:	689b      	ldr	r3, [r3, #8]
 8027fe8:	4a37      	ldr	r2, [pc, #220]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8027fea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027fee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027ff0:	687b      	ldr	r3, [r7, #4]
 8027ff2:	681b      	ldr	r3, [r3, #0]
 8027ff4:	f003 0302 	and.w	r3, r3, #2
 8027ff8:	2b00      	cmp	r3, #0
 8027ffa:	d010      	beq.n	802801e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8027ffc:	687b      	ldr	r3, [r7, #4]
 8027ffe:	689a      	ldr	r2, [r3, #8]
 8028000:	4b31      	ldr	r3, [pc, #196]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8028002:	689b      	ldr	r3, [r3, #8]
 8028004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8028008:	429a      	cmp	r2, r3
 802800a:	d208      	bcs.n	802801e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802800c:	4b2e      	ldr	r3, [pc, #184]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 802800e:	689b      	ldr	r3, [r3, #8]
 8028010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8028014:	687b      	ldr	r3, [r7, #4]
 8028016:	689b      	ldr	r3, [r3, #8]
 8028018:	492b      	ldr	r1, [pc, #172]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 802801a:	4313      	orrs	r3, r2
 802801c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802801e:	4b29      	ldr	r3, [pc, #164]	; (80280c4 <HAL_RCC_ClockConfig+0x25c>)
 8028020:	681b      	ldr	r3, [r3, #0]
 8028022:	f003 030f 	and.w	r3, r3, #15
 8028026:	683a      	ldr	r2, [r7, #0]
 8028028:	429a      	cmp	r2, r3
 802802a:	d210      	bcs.n	802804e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802802c:	4b25      	ldr	r3, [pc, #148]	; (80280c4 <HAL_RCC_ClockConfig+0x25c>)
 802802e:	681b      	ldr	r3, [r3, #0]
 8028030:	f023 020f 	bic.w	r2, r3, #15
 8028034:	4923      	ldr	r1, [pc, #140]	; (80280c4 <HAL_RCC_ClockConfig+0x25c>)
 8028036:	683b      	ldr	r3, [r7, #0]
 8028038:	4313      	orrs	r3, r2
 802803a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802803c:	4b21      	ldr	r3, [pc, #132]	; (80280c4 <HAL_RCC_ClockConfig+0x25c>)
 802803e:	681b      	ldr	r3, [r3, #0]
 8028040:	f003 030f 	and.w	r3, r3, #15
 8028044:	683a      	ldr	r2, [r7, #0]
 8028046:	429a      	cmp	r2, r3
 8028048:	d001      	beq.n	802804e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 802804a:	2301      	movs	r3, #1
 802804c:	e036      	b.n	80280bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802804e:	687b      	ldr	r3, [r7, #4]
 8028050:	681b      	ldr	r3, [r3, #0]
 8028052:	f003 0304 	and.w	r3, r3, #4
 8028056:	2b00      	cmp	r3, #0
 8028058:	d008      	beq.n	802806c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802805a:	4b1b      	ldr	r3, [pc, #108]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 802805c:	689b      	ldr	r3, [r3, #8]
 802805e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8028062:	687b      	ldr	r3, [r7, #4]
 8028064:	68db      	ldr	r3, [r3, #12]
 8028066:	4918      	ldr	r1, [pc, #96]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8028068:	4313      	orrs	r3, r2
 802806a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802806c:	687b      	ldr	r3, [r7, #4]
 802806e:	681b      	ldr	r3, [r3, #0]
 8028070:	f003 0308 	and.w	r3, r3, #8
 8028074:	2b00      	cmp	r3, #0
 8028076:	d009      	beq.n	802808c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8028078:	4b13      	ldr	r3, [pc, #76]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 802807a:	689b      	ldr	r3, [r3, #8]
 802807c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8028080:	687b      	ldr	r3, [r7, #4]
 8028082:	691b      	ldr	r3, [r3, #16]
 8028084:	00db      	lsls	r3, r3, #3
 8028086:	4910      	ldr	r1, [pc, #64]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8028088:	4313      	orrs	r3, r2
 802808a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 802808c:	f000 f826 	bl	80280dc <HAL_RCC_GetSysClockFreq>
 8028090:	4602      	mov	r2, r0
 8028092:	4b0d      	ldr	r3, [pc, #52]	; (80280c8 <HAL_RCC_ClockConfig+0x260>)
 8028094:	689b      	ldr	r3, [r3, #8]
 8028096:	091b      	lsrs	r3, r3, #4
 8028098:	f003 030f 	and.w	r3, r3, #15
 802809c:	490c      	ldr	r1, [pc, #48]	; (80280d0 <HAL_RCC_ClockConfig+0x268>)
 802809e:	5ccb      	ldrb	r3, [r1, r3]
 80280a0:	f003 031f 	and.w	r3, r3, #31
 80280a4:	fa22 f303 	lsr.w	r3, r2, r3
 80280a8:	4a0a      	ldr	r2, [pc, #40]	; (80280d4 <HAL_RCC_ClockConfig+0x26c>)
 80280aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80280ac:	4b0a      	ldr	r3, [pc, #40]	; (80280d8 <HAL_RCC_ClockConfig+0x270>)
 80280ae:	681b      	ldr	r3, [r3, #0]
 80280b0:	4618      	mov	r0, r3
 80280b2:	f7fc f8eb 	bl	802428c <HAL_InitTick>
 80280b6:	4603      	mov	r3, r0
 80280b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80280ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80280bc:	4618      	mov	r0, r3
 80280be:	3718      	adds	r7, #24
 80280c0:	46bd      	mov	sp, r7
 80280c2:	bd80      	pop	{r7, pc}
 80280c4:	40022000 	.word	0x40022000
 80280c8:	40021000 	.word	0x40021000
 80280cc:	04c4b400 	.word	0x04c4b400
 80280d0:	08077fe0 	.word	0x08077fe0
 80280d4:	20000228 	.word	0x20000228
 80280d8:	20000294 	.word	0x20000294

080280dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80280dc:	b480      	push	{r7}
 80280de:	b089      	sub	sp, #36	; 0x24
 80280e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80280e2:	2300      	movs	r3, #0
 80280e4:	61fb      	str	r3, [r7, #28]
 80280e6:	2300      	movs	r3, #0
 80280e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80280ea:	4b3e      	ldr	r3, [pc, #248]	; (80281e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80280ec:	689b      	ldr	r3, [r3, #8]
 80280ee:	f003 030c 	and.w	r3, r3, #12
 80280f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80280f4:	4b3b      	ldr	r3, [pc, #236]	; (80281e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80280f6:	68db      	ldr	r3, [r3, #12]
 80280f8:	f003 0303 	and.w	r3, r3, #3
 80280fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80280fe:	693b      	ldr	r3, [r7, #16]
 8028100:	2b00      	cmp	r3, #0
 8028102:	d005      	beq.n	8028110 <HAL_RCC_GetSysClockFreq+0x34>
 8028104:	693b      	ldr	r3, [r7, #16]
 8028106:	2b0c      	cmp	r3, #12
 8028108:	d121      	bne.n	802814e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 802810a:	68fb      	ldr	r3, [r7, #12]
 802810c:	2b01      	cmp	r3, #1
 802810e:	d11e      	bne.n	802814e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8028110:	4b34      	ldr	r3, [pc, #208]	; (80281e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8028112:	681b      	ldr	r3, [r3, #0]
 8028114:	f003 0308 	and.w	r3, r3, #8
 8028118:	2b00      	cmp	r3, #0
 802811a:	d107      	bne.n	802812c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 802811c:	4b31      	ldr	r3, [pc, #196]	; (80281e4 <HAL_RCC_GetSysClockFreq+0x108>)
 802811e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8028122:	0a1b      	lsrs	r3, r3, #8
 8028124:	f003 030f 	and.w	r3, r3, #15
 8028128:	61fb      	str	r3, [r7, #28]
 802812a:	e005      	b.n	8028138 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 802812c:	4b2d      	ldr	r3, [pc, #180]	; (80281e4 <HAL_RCC_GetSysClockFreq+0x108>)
 802812e:	681b      	ldr	r3, [r3, #0]
 8028130:	091b      	lsrs	r3, r3, #4
 8028132:	f003 030f 	and.w	r3, r3, #15
 8028136:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8028138:	4a2b      	ldr	r2, [pc, #172]	; (80281e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 802813a:	69fb      	ldr	r3, [r7, #28]
 802813c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028140:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8028142:	693b      	ldr	r3, [r7, #16]
 8028144:	2b00      	cmp	r3, #0
 8028146:	d10d      	bne.n	8028164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8028148:	69fb      	ldr	r3, [r7, #28]
 802814a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 802814c:	e00a      	b.n	8028164 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 802814e:	693b      	ldr	r3, [r7, #16]
 8028150:	2b04      	cmp	r3, #4
 8028152:	d102      	bne.n	802815a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8028154:	4b25      	ldr	r3, [pc, #148]	; (80281ec <HAL_RCC_GetSysClockFreq+0x110>)
 8028156:	61bb      	str	r3, [r7, #24]
 8028158:	e004      	b.n	8028164 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 802815a:	693b      	ldr	r3, [r7, #16]
 802815c:	2b08      	cmp	r3, #8
 802815e:	d101      	bne.n	8028164 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8028160:	4b23      	ldr	r3, [pc, #140]	; (80281f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8028162:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8028164:	693b      	ldr	r3, [r7, #16]
 8028166:	2b0c      	cmp	r3, #12
 8028168:	d134      	bne.n	80281d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802816a:	4b1e      	ldr	r3, [pc, #120]	; (80281e4 <HAL_RCC_GetSysClockFreq+0x108>)
 802816c:	68db      	ldr	r3, [r3, #12]
 802816e:	f003 0303 	and.w	r3, r3, #3
 8028172:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8028174:	68bb      	ldr	r3, [r7, #8]
 8028176:	2b02      	cmp	r3, #2
 8028178:	d003      	beq.n	8028182 <HAL_RCC_GetSysClockFreq+0xa6>
 802817a:	68bb      	ldr	r3, [r7, #8]
 802817c:	2b03      	cmp	r3, #3
 802817e:	d003      	beq.n	8028188 <HAL_RCC_GetSysClockFreq+0xac>
 8028180:	e005      	b.n	802818e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8028182:	4b1a      	ldr	r3, [pc, #104]	; (80281ec <HAL_RCC_GetSysClockFreq+0x110>)
 8028184:	617b      	str	r3, [r7, #20]
      break;
 8028186:	e005      	b.n	8028194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8028188:	4b19      	ldr	r3, [pc, #100]	; (80281f0 <HAL_RCC_GetSysClockFreq+0x114>)
 802818a:	617b      	str	r3, [r7, #20]
      break;
 802818c:	e002      	b.n	8028194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 802818e:	69fb      	ldr	r3, [r7, #28]
 8028190:	617b      	str	r3, [r7, #20]
      break;
 8028192:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8028194:	4b13      	ldr	r3, [pc, #76]	; (80281e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8028196:	68db      	ldr	r3, [r3, #12]
 8028198:	091b      	lsrs	r3, r3, #4
 802819a:	f003 030f 	and.w	r3, r3, #15
 802819e:	3301      	adds	r3, #1
 80281a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80281a2:	4b10      	ldr	r3, [pc, #64]	; (80281e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80281a4:	68db      	ldr	r3, [r3, #12]
 80281a6:	0a1b      	lsrs	r3, r3, #8
 80281a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80281ac:	697a      	ldr	r2, [r7, #20]
 80281ae:	fb03 f202 	mul.w	r2, r3, r2
 80281b2:	687b      	ldr	r3, [r7, #4]
 80281b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80281b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80281ba:	4b0a      	ldr	r3, [pc, #40]	; (80281e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80281bc:	68db      	ldr	r3, [r3, #12]
 80281be:	0e5b      	lsrs	r3, r3, #25
 80281c0:	f003 0303 	and.w	r3, r3, #3
 80281c4:	3301      	adds	r3, #1
 80281c6:	005b      	lsls	r3, r3, #1
 80281c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80281ca:	697a      	ldr	r2, [r7, #20]
 80281cc:	683b      	ldr	r3, [r7, #0]
 80281ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80281d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80281d4:	69bb      	ldr	r3, [r7, #24]
}
 80281d6:	4618      	mov	r0, r3
 80281d8:	3724      	adds	r7, #36	; 0x24
 80281da:	46bd      	mov	sp, r7
 80281dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281e0:	4770      	bx	lr
 80281e2:	bf00      	nop
 80281e4:	40021000 	.word	0x40021000
 80281e8:	08077ff8 	.word	0x08077ff8
 80281ec:	00f42400 	.word	0x00f42400
 80281f0:	007a1200 	.word	0x007a1200

080281f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80281f4:	b480      	push	{r7}
 80281f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80281f8:	4b03      	ldr	r3, [pc, #12]	; (8028208 <HAL_RCC_GetHCLKFreq+0x14>)
 80281fa:	681b      	ldr	r3, [r3, #0]
}
 80281fc:	4618      	mov	r0, r3
 80281fe:	46bd      	mov	sp, r7
 8028200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028204:	4770      	bx	lr
 8028206:	bf00      	nop
 8028208:	20000228 	.word	0x20000228

0802820c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802820c:	b580      	push	{r7, lr}
 802820e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8028210:	f7ff fff0 	bl	80281f4 <HAL_RCC_GetHCLKFreq>
 8028214:	4602      	mov	r2, r0
 8028216:	4b06      	ldr	r3, [pc, #24]	; (8028230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8028218:	689b      	ldr	r3, [r3, #8]
 802821a:	0a1b      	lsrs	r3, r3, #8
 802821c:	f003 0307 	and.w	r3, r3, #7
 8028220:	4904      	ldr	r1, [pc, #16]	; (8028234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8028222:	5ccb      	ldrb	r3, [r1, r3]
 8028224:	f003 031f 	and.w	r3, r3, #31
 8028228:	fa22 f303 	lsr.w	r3, r2, r3
}
 802822c:	4618      	mov	r0, r3
 802822e:	bd80      	pop	{r7, pc}
 8028230:	40021000 	.word	0x40021000
 8028234:	08077ff0 	.word	0x08077ff0

08028238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8028238:	b580      	push	{r7, lr}
 802823a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 802823c:	f7ff ffda 	bl	80281f4 <HAL_RCC_GetHCLKFreq>
 8028240:	4602      	mov	r2, r0
 8028242:	4b06      	ldr	r3, [pc, #24]	; (802825c <HAL_RCC_GetPCLK2Freq+0x24>)
 8028244:	689b      	ldr	r3, [r3, #8]
 8028246:	0adb      	lsrs	r3, r3, #11
 8028248:	f003 0307 	and.w	r3, r3, #7
 802824c:	4904      	ldr	r1, [pc, #16]	; (8028260 <HAL_RCC_GetPCLK2Freq+0x28>)
 802824e:	5ccb      	ldrb	r3, [r1, r3]
 8028250:	f003 031f 	and.w	r3, r3, #31
 8028254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8028258:	4618      	mov	r0, r3
 802825a:	bd80      	pop	{r7, pc}
 802825c:	40021000 	.word	0x40021000
 8028260:	08077ff0 	.word	0x08077ff0

08028264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8028264:	b580      	push	{r7, lr}
 8028266:	b086      	sub	sp, #24
 8028268:	af00      	add	r7, sp, #0
 802826a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 802826c:	2300      	movs	r3, #0
 802826e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8028270:	4b27      	ldr	r3, [pc, #156]	; (8028310 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8028272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028278:	2b00      	cmp	r3, #0
 802827a:	d003      	beq.n	8028284 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 802827c:	f7ff f916 	bl	80274ac <HAL_PWREx_GetVoltageRange>
 8028280:	6178      	str	r0, [r7, #20]
 8028282:	e014      	b.n	80282ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8028284:	4b22      	ldr	r3, [pc, #136]	; (8028310 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8028286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028288:	4a21      	ldr	r2, [pc, #132]	; (8028310 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802828a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802828e:	6593      	str	r3, [r2, #88]	; 0x58
 8028290:	4b1f      	ldr	r3, [pc, #124]	; (8028310 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8028292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028298:	60fb      	str	r3, [r7, #12]
 802829a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 802829c:	f7ff f906 	bl	80274ac <HAL_PWREx_GetVoltageRange>
 80282a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80282a2:	4b1b      	ldr	r3, [pc, #108]	; (8028310 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80282a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80282a6:	4a1a      	ldr	r2, [pc, #104]	; (8028310 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80282a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80282ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80282ae:	697b      	ldr	r3, [r7, #20]
 80282b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80282b4:	d10b      	bne.n	80282ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80282b6:	687b      	ldr	r3, [r7, #4]
 80282b8:	2b80      	cmp	r3, #128	; 0x80
 80282ba:	d913      	bls.n	80282e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80282bc:	687b      	ldr	r3, [r7, #4]
 80282be:	2ba0      	cmp	r3, #160	; 0xa0
 80282c0:	d902      	bls.n	80282c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80282c2:	2302      	movs	r3, #2
 80282c4:	613b      	str	r3, [r7, #16]
 80282c6:	e00d      	b.n	80282e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80282c8:	2301      	movs	r3, #1
 80282ca:	613b      	str	r3, [r7, #16]
 80282cc:	e00a      	b.n	80282e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80282ce:	687b      	ldr	r3, [r7, #4]
 80282d0:	2b7f      	cmp	r3, #127	; 0x7f
 80282d2:	d902      	bls.n	80282da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80282d4:	2302      	movs	r3, #2
 80282d6:	613b      	str	r3, [r7, #16]
 80282d8:	e004      	b.n	80282e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80282da:	687b      	ldr	r3, [r7, #4]
 80282dc:	2b70      	cmp	r3, #112	; 0x70
 80282de:	d101      	bne.n	80282e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80282e0:	2301      	movs	r3, #1
 80282e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80282e4:	4b0b      	ldr	r3, [pc, #44]	; (8028314 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80282e6:	681b      	ldr	r3, [r3, #0]
 80282e8:	f023 020f 	bic.w	r2, r3, #15
 80282ec:	4909      	ldr	r1, [pc, #36]	; (8028314 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80282ee:	693b      	ldr	r3, [r7, #16]
 80282f0:	4313      	orrs	r3, r2
 80282f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80282f4:	4b07      	ldr	r3, [pc, #28]	; (8028314 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80282f6:	681b      	ldr	r3, [r3, #0]
 80282f8:	f003 030f 	and.w	r3, r3, #15
 80282fc:	693a      	ldr	r2, [r7, #16]
 80282fe:	429a      	cmp	r2, r3
 8028300:	d001      	beq.n	8028306 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8028302:	2301      	movs	r3, #1
 8028304:	e000      	b.n	8028308 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8028306:	2300      	movs	r3, #0
}
 8028308:	4618      	mov	r0, r3
 802830a:	3718      	adds	r7, #24
 802830c:	46bd      	mov	sp, r7
 802830e:	bd80      	pop	{r7, pc}
 8028310:	40021000 	.word	0x40021000
 8028314:	40022000 	.word	0x40022000

08028318 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8028318:	b480      	push	{r7}
 802831a:	b087      	sub	sp, #28
 802831c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802831e:	4b2d      	ldr	r3, [pc, #180]	; (80283d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8028320:	68db      	ldr	r3, [r3, #12]
 8028322:	f003 0303 	and.w	r3, r3, #3
 8028326:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8028328:	68fb      	ldr	r3, [r7, #12]
 802832a:	2b03      	cmp	r3, #3
 802832c:	d00b      	beq.n	8028346 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 802832e:	68fb      	ldr	r3, [r7, #12]
 8028330:	2b03      	cmp	r3, #3
 8028332:	d825      	bhi.n	8028380 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8028334:	68fb      	ldr	r3, [r7, #12]
 8028336:	2b01      	cmp	r3, #1
 8028338:	d008      	beq.n	802834c <RCC_GetSysClockFreqFromPLLSource+0x34>
 802833a:	68fb      	ldr	r3, [r7, #12]
 802833c:	2b02      	cmp	r3, #2
 802833e:	d11f      	bne.n	8028380 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8028340:	4b25      	ldr	r3, [pc, #148]	; (80283d8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8028342:	613b      	str	r3, [r7, #16]
    break;
 8028344:	e01f      	b.n	8028386 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8028346:	4b25      	ldr	r3, [pc, #148]	; (80283dc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8028348:	613b      	str	r3, [r7, #16]
    break;
 802834a:	e01c      	b.n	8028386 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 802834c:	4b21      	ldr	r3, [pc, #132]	; (80283d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802834e:	681b      	ldr	r3, [r3, #0]
 8028350:	f003 0308 	and.w	r3, r3, #8
 8028354:	2b00      	cmp	r3, #0
 8028356:	d107      	bne.n	8028368 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8028358:	4b1e      	ldr	r3, [pc, #120]	; (80283d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802835a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802835e:	0a1b      	lsrs	r3, r3, #8
 8028360:	f003 030f 	and.w	r3, r3, #15
 8028364:	617b      	str	r3, [r7, #20]
 8028366:	e005      	b.n	8028374 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8028368:	4b1a      	ldr	r3, [pc, #104]	; (80283d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802836a:	681b      	ldr	r3, [r3, #0]
 802836c:	091b      	lsrs	r3, r3, #4
 802836e:	f003 030f 	and.w	r3, r3, #15
 8028372:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8028374:	4a1a      	ldr	r2, [pc, #104]	; (80283e0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8028376:	697b      	ldr	r3, [r7, #20]
 8028378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802837c:	613b      	str	r3, [r7, #16]
    break;
 802837e:	e002      	b.n	8028386 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8028380:	2300      	movs	r3, #0
 8028382:	613b      	str	r3, [r7, #16]
    break;
 8028384:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8028386:	4b13      	ldr	r3, [pc, #76]	; (80283d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8028388:	68db      	ldr	r3, [r3, #12]
 802838a:	091b      	lsrs	r3, r3, #4
 802838c:	f003 030f 	and.w	r3, r3, #15
 8028390:	3301      	adds	r3, #1
 8028392:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8028394:	4b0f      	ldr	r3, [pc, #60]	; (80283d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8028396:	68db      	ldr	r3, [r3, #12]
 8028398:	0a1b      	lsrs	r3, r3, #8
 802839a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802839e:	693a      	ldr	r2, [r7, #16]
 80283a0:	fb03 f202 	mul.w	r2, r3, r2
 80283a4:	68bb      	ldr	r3, [r7, #8]
 80283a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80283aa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80283ac:	4b09      	ldr	r3, [pc, #36]	; (80283d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80283ae:	68db      	ldr	r3, [r3, #12]
 80283b0:	0e5b      	lsrs	r3, r3, #25
 80283b2:	f003 0303 	and.w	r3, r3, #3
 80283b6:	3301      	adds	r3, #1
 80283b8:	005b      	lsls	r3, r3, #1
 80283ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80283bc:	693a      	ldr	r2, [r7, #16]
 80283be:	687b      	ldr	r3, [r7, #4]
 80283c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80283c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80283c6:	683b      	ldr	r3, [r7, #0]
}
 80283c8:	4618      	mov	r0, r3
 80283ca:	371c      	adds	r7, #28
 80283cc:	46bd      	mov	sp, r7
 80283ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283d2:	4770      	bx	lr
 80283d4:	40021000 	.word	0x40021000
 80283d8:	00f42400 	.word	0x00f42400
 80283dc:	007a1200 	.word	0x007a1200
 80283e0:	08077ff8 	.word	0x08077ff8

080283e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80283e4:	b580      	push	{r7, lr}
 80283e6:	b086      	sub	sp, #24
 80283e8:	af00      	add	r7, sp, #0
 80283ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80283ec:	2300      	movs	r3, #0
 80283ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80283f0:	2300      	movs	r3, #0
 80283f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80283f4:	687b      	ldr	r3, [r7, #4]
 80283f6:	681b      	ldr	r3, [r3, #0]
 80283f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80283fc:	2b00      	cmp	r3, #0
 80283fe:	d040      	beq.n	8028482 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8028400:	687b      	ldr	r3, [r7, #4]
 8028402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028404:	2b80      	cmp	r3, #128	; 0x80
 8028406:	d02a      	beq.n	802845e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8028408:	2b80      	cmp	r3, #128	; 0x80
 802840a:	d825      	bhi.n	8028458 <HAL_RCCEx_PeriphCLKConfig+0x74>
 802840c:	2b60      	cmp	r3, #96	; 0x60
 802840e:	d026      	beq.n	802845e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8028410:	2b60      	cmp	r3, #96	; 0x60
 8028412:	d821      	bhi.n	8028458 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8028414:	2b40      	cmp	r3, #64	; 0x40
 8028416:	d006      	beq.n	8028426 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8028418:	2b40      	cmp	r3, #64	; 0x40
 802841a:	d81d      	bhi.n	8028458 <HAL_RCCEx_PeriphCLKConfig+0x74>
 802841c:	2b00      	cmp	r3, #0
 802841e:	d009      	beq.n	8028434 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8028420:	2b20      	cmp	r3, #32
 8028422:	d010      	beq.n	8028446 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8028424:	e018      	b.n	8028458 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8028426:	4b89      	ldr	r3, [pc, #548]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028428:	68db      	ldr	r3, [r3, #12]
 802842a:	4a88      	ldr	r2, [pc, #544]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 802842c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028430:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8028432:	e015      	b.n	8028460 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8028434:	687b      	ldr	r3, [r7, #4]
 8028436:	3304      	adds	r3, #4
 8028438:	2100      	movs	r1, #0
 802843a:	4618      	mov	r0, r3
 802843c:	f000 fb02 	bl	8028a44 <RCCEx_PLLSAI1_Config>
 8028440:	4603      	mov	r3, r0
 8028442:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8028444:	e00c      	b.n	8028460 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8028446:	687b      	ldr	r3, [r7, #4]
 8028448:	3320      	adds	r3, #32
 802844a:	2100      	movs	r1, #0
 802844c:	4618      	mov	r0, r3
 802844e:	f000 fbed 	bl	8028c2c <RCCEx_PLLSAI2_Config>
 8028452:	4603      	mov	r3, r0
 8028454:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8028456:	e003      	b.n	8028460 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028458:	2301      	movs	r3, #1
 802845a:	74fb      	strb	r3, [r7, #19]
      break;
 802845c:	e000      	b.n	8028460 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 802845e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028460:	7cfb      	ldrb	r3, [r7, #19]
 8028462:	2b00      	cmp	r3, #0
 8028464:	d10b      	bne.n	802847e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8028466:	4b79      	ldr	r3, [pc, #484]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028468:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802846c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8028470:	687b      	ldr	r3, [r7, #4]
 8028472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028474:	4975      	ldr	r1, [pc, #468]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028476:	4313      	orrs	r3, r2
 8028478:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 802847c:	e001      	b.n	8028482 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802847e:	7cfb      	ldrb	r3, [r7, #19]
 8028480:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8028482:	687b      	ldr	r3, [r7, #4]
 8028484:	681b      	ldr	r3, [r3, #0]
 8028486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802848a:	2b00      	cmp	r3, #0
 802848c:	d047      	beq.n	802851e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 802848e:	687b      	ldr	r3, [r7, #4]
 8028490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028496:	d030      	beq.n	80284fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8028498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802849c:	d82a      	bhi.n	80284f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 802849e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80284a2:	d02a      	beq.n	80284fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80284a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80284a8:	d824      	bhi.n	80284f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80284aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80284ae:	d008      	beq.n	80284c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80284b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80284b4:	d81e      	bhi.n	80284f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80284b6:	2b00      	cmp	r3, #0
 80284b8:	d00a      	beq.n	80284d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80284ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80284be:	d010      	beq.n	80284e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80284c0:	e018      	b.n	80284f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80284c2:	4b62      	ldr	r3, [pc, #392]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80284c4:	68db      	ldr	r3, [r3, #12]
 80284c6:	4a61      	ldr	r2, [pc, #388]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80284c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80284cc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80284ce:	e015      	b.n	80284fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80284d0:	687b      	ldr	r3, [r7, #4]
 80284d2:	3304      	adds	r3, #4
 80284d4:	2100      	movs	r1, #0
 80284d6:	4618      	mov	r0, r3
 80284d8:	f000 fab4 	bl	8028a44 <RCCEx_PLLSAI1_Config>
 80284dc:	4603      	mov	r3, r0
 80284de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80284e0:	e00c      	b.n	80284fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80284e2:	687b      	ldr	r3, [r7, #4]
 80284e4:	3320      	adds	r3, #32
 80284e6:	2100      	movs	r1, #0
 80284e8:	4618      	mov	r0, r3
 80284ea:	f000 fb9f 	bl	8028c2c <RCCEx_PLLSAI2_Config>
 80284ee:	4603      	mov	r3, r0
 80284f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80284f2:	e003      	b.n	80284fc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80284f4:	2301      	movs	r3, #1
 80284f6:	74fb      	strb	r3, [r7, #19]
      break;
 80284f8:	e000      	b.n	80284fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80284fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80284fc:	7cfb      	ldrb	r3, [r7, #19]
 80284fe:	2b00      	cmp	r3, #0
 8028500:	d10b      	bne.n	802851a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8028502:	4b52      	ldr	r3, [pc, #328]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8028508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802850c:	687b      	ldr	r3, [r7, #4]
 802850e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028510:	494e      	ldr	r1, [pc, #312]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028512:	4313      	orrs	r3, r2
 8028514:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8028518:	e001      	b.n	802851e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802851a:	7cfb      	ldrb	r3, [r7, #19]
 802851c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802851e:	687b      	ldr	r3, [r7, #4]
 8028520:	681b      	ldr	r3, [r3, #0]
 8028522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028526:	2b00      	cmp	r3, #0
 8028528:	f000 809f 	beq.w	802866a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 802852c:	2300      	movs	r3, #0
 802852e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8028530:	4b46      	ldr	r3, [pc, #280]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028538:	2b00      	cmp	r3, #0
 802853a:	d101      	bne.n	8028540 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 802853c:	2301      	movs	r3, #1
 802853e:	e000      	b.n	8028542 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8028540:	2300      	movs	r3, #0
 8028542:	2b00      	cmp	r3, #0
 8028544:	d00d      	beq.n	8028562 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8028546:	4b41      	ldr	r3, [pc, #260]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802854a:	4a40      	ldr	r2, [pc, #256]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 802854c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028550:	6593      	str	r3, [r2, #88]	; 0x58
 8028552:	4b3e      	ldr	r3, [pc, #248]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802855a:	60bb      	str	r3, [r7, #8]
 802855c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802855e:	2301      	movs	r3, #1
 8028560:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8028562:	4b3b      	ldr	r3, [pc, #236]	; (8028650 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8028564:	681b      	ldr	r3, [r3, #0]
 8028566:	4a3a      	ldr	r2, [pc, #232]	; (8028650 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8028568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802856c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802856e:	f7fb fedd 	bl	802432c <HAL_GetTick>
 8028572:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8028574:	e009      	b.n	802858a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8028576:	f7fb fed9 	bl	802432c <HAL_GetTick>
 802857a:	4602      	mov	r2, r0
 802857c:	68fb      	ldr	r3, [r7, #12]
 802857e:	1ad3      	subs	r3, r2, r3
 8028580:	2b02      	cmp	r3, #2
 8028582:	d902      	bls.n	802858a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8028584:	2303      	movs	r3, #3
 8028586:	74fb      	strb	r3, [r7, #19]
        break;
 8028588:	e005      	b.n	8028596 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 802858a:	4b31      	ldr	r3, [pc, #196]	; (8028650 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 802858c:	681b      	ldr	r3, [r3, #0]
 802858e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028592:	2b00      	cmp	r3, #0
 8028594:	d0ef      	beq.n	8028576 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8028596:	7cfb      	ldrb	r3, [r7, #19]
 8028598:	2b00      	cmp	r3, #0
 802859a:	d15b      	bne.n	8028654 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 802859c:	4b2b      	ldr	r3, [pc, #172]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 802859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80285a6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80285a8:	697b      	ldr	r3, [r7, #20]
 80285aa:	2b00      	cmp	r3, #0
 80285ac:	d01f      	beq.n	80285ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80285ae:	687b      	ldr	r3, [r7, #4]
 80285b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285b4:	697a      	ldr	r2, [r7, #20]
 80285b6:	429a      	cmp	r2, r3
 80285b8:	d019      	beq.n	80285ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80285ba:	4b24      	ldr	r3, [pc, #144]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80285c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80285c6:	4b21      	ldr	r3, [pc, #132]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285cc:	4a1f      	ldr	r2, [pc, #124]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80285d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80285d6:	4b1d      	ldr	r3, [pc, #116]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285dc:	4a1b      	ldr	r2, [pc, #108]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80285e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80285e6:	4a19      	ldr	r2, [pc, #100]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285e8:	697b      	ldr	r3, [r7, #20]
 80285ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80285ee:	697b      	ldr	r3, [r7, #20]
 80285f0:	f003 0301 	and.w	r3, r3, #1
 80285f4:	2b00      	cmp	r3, #0
 80285f6:	d016      	beq.n	8028626 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80285f8:	f7fb fe98 	bl	802432c <HAL_GetTick>
 80285fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80285fe:	e00b      	b.n	8028618 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8028600:	f7fb fe94 	bl	802432c <HAL_GetTick>
 8028604:	4602      	mov	r2, r0
 8028606:	68fb      	ldr	r3, [r7, #12]
 8028608:	1ad3      	subs	r3, r2, r3
 802860a:	f241 3288 	movw	r2, #5000	; 0x1388
 802860e:	4293      	cmp	r3, r2
 8028610:	d902      	bls.n	8028618 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8028612:	2303      	movs	r3, #3
 8028614:	74fb      	strb	r3, [r7, #19]
            break;
 8028616:	e006      	b.n	8028626 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8028618:	4b0c      	ldr	r3, [pc, #48]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 802861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802861e:	f003 0302 	and.w	r3, r3, #2
 8028622:	2b00      	cmp	r3, #0
 8028624:	d0ec      	beq.n	8028600 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8028626:	7cfb      	ldrb	r3, [r7, #19]
 8028628:	2b00      	cmp	r3, #0
 802862a:	d10c      	bne.n	8028646 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802862c:	4b07      	ldr	r3, [pc, #28]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 802862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8028632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8028636:	687b      	ldr	r3, [r7, #4]
 8028638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802863c:	4903      	ldr	r1, [pc, #12]	; (802864c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 802863e:	4313      	orrs	r3, r2
 8028640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8028644:	e008      	b.n	8028658 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8028646:	7cfb      	ldrb	r3, [r7, #19]
 8028648:	74bb      	strb	r3, [r7, #18]
 802864a:	e005      	b.n	8028658 <HAL_RCCEx_PeriphCLKConfig+0x274>
 802864c:	40021000 	.word	0x40021000
 8028650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028654:	7cfb      	ldrb	r3, [r7, #19]
 8028656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8028658:	7c7b      	ldrb	r3, [r7, #17]
 802865a:	2b01      	cmp	r3, #1
 802865c:	d105      	bne.n	802866a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802865e:	4ba0      	ldr	r3, [pc, #640]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028662:	4a9f      	ldr	r2, [pc, #636]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028668:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 802866a:	687b      	ldr	r3, [r7, #4]
 802866c:	681b      	ldr	r3, [r3, #0]
 802866e:	f003 0301 	and.w	r3, r3, #1
 8028672:	2b00      	cmp	r3, #0
 8028674:	d00a      	beq.n	802868c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8028676:	4b9a      	ldr	r3, [pc, #616]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802867c:	f023 0203 	bic.w	r2, r3, #3
 8028680:	687b      	ldr	r3, [r7, #4]
 8028682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028684:	4996      	ldr	r1, [pc, #600]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028686:	4313      	orrs	r3, r2
 8028688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 802868c:	687b      	ldr	r3, [r7, #4]
 802868e:	681b      	ldr	r3, [r3, #0]
 8028690:	f003 0302 	and.w	r3, r3, #2
 8028694:	2b00      	cmp	r3, #0
 8028696:	d00a      	beq.n	80286ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8028698:	4b91      	ldr	r3, [pc, #580]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802869a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802869e:	f023 020c 	bic.w	r2, r3, #12
 80286a2:	687b      	ldr	r3, [r7, #4]
 80286a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80286a6:	498e      	ldr	r1, [pc, #568]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286a8:	4313      	orrs	r3, r2
 80286aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80286ae:	687b      	ldr	r3, [r7, #4]
 80286b0:	681b      	ldr	r3, [r3, #0]
 80286b2:	f003 0304 	and.w	r3, r3, #4
 80286b6:	2b00      	cmp	r3, #0
 80286b8:	d00a      	beq.n	80286d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80286ba:	4b89      	ldr	r3, [pc, #548]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80286c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80286c4:	687b      	ldr	r3, [r7, #4]
 80286c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80286c8:	4985      	ldr	r1, [pc, #532]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286ca:	4313      	orrs	r3, r2
 80286cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80286d0:	687b      	ldr	r3, [r7, #4]
 80286d2:	681b      	ldr	r3, [r3, #0]
 80286d4:	f003 0308 	and.w	r3, r3, #8
 80286d8:	2b00      	cmp	r3, #0
 80286da:	d00a      	beq.n	80286f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80286dc:	4b80      	ldr	r3, [pc, #512]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80286e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80286e6:	687b      	ldr	r3, [r7, #4]
 80286e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80286ea:	497d      	ldr	r1, [pc, #500]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286ec:	4313      	orrs	r3, r2
 80286ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80286f2:	687b      	ldr	r3, [r7, #4]
 80286f4:	681b      	ldr	r3, [r3, #0]
 80286f6:	f003 0310 	and.w	r3, r3, #16
 80286fa:	2b00      	cmp	r3, #0
 80286fc:	d00a      	beq.n	8028714 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80286fe:	4b78      	ldr	r3, [pc, #480]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8028708:	687b      	ldr	r3, [r7, #4]
 802870a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802870c:	4974      	ldr	r1, [pc, #464]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802870e:	4313      	orrs	r3, r2
 8028710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8028714:	687b      	ldr	r3, [r7, #4]
 8028716:	681b      	ldr	r3, [r3, #0]
 8028718:	f003 0320 	and.w	r3, r3, #32
 802871c:	2b00      	cmp	r3, #0
 802871e:	d00a      	beq.n	8028736 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8028720:	4b6f      	ldr	r3, [pc, #444]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028726:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 802872a:	687b      	ldr	r3, [r7, #4]
 802872c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802872e:	496c      	ldr	r1, [pc, #432]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028730:	4313      	orrs	r3, r2
 8028732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8028736:	687b      	ldr	r3, [r7, #4]
 8028738:	681b      	ldr	r3, [r3, #0]
 802873a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802873e:	2b00      	cmp	r3, #0
 8028740:	d00a      	beq.n	8028758 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8028742:	4b67      	ldr	r3, [pc, #412]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 802874c:	687b      	ldr	r3, [r7, #4]
 802874e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028750:	4963      	ldr	r1, [pc, #396]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028752:	4313      	orrs	r3, r2
 8028754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8028758:	687b      	ldr	r3, [r7, #4]
 802875a:	681b      	ldr	r3, [r3, #0]
 802875c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028760:	2b00      	cmp	r3, #0
 8028762:	d00a      	beq.n	802877a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8028764:	4b5e      	ldr	r3, [pc, #376]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802876a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802876e:	687b      	ldr	r3, [r7, #4]
 8028770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028772:	495b      	ldr	r1, [pc, #364]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028774:	4313      	orrs	r3, r2
 8028776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 802877a:	687b      	ldr	r3, [r7, #4]
 802877c:	681b      	ldr	r3, [r3, #0]
 802877e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028782:	2b00      	cmp	r3, #0
 8028784:	d00a      	beq.n	802879c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8028786:	4b56      	ldr	r3, [pc, #344]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802878c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8028790:	687b      	ldr	r3, [r7, #4]
 8028792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028794:	4952      	ldr	r1, [pc, #328]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028796:	4313      	orrs	r3, r2
 8028798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 802879c:	687b      	ldr	r3, [r7, #4]
 802879e:	681b      	ldr	r3, [r3, #0]
 80287a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80287a4:	2b00      	cmp	r3, #0
 80287a6:	d00a      	beq.n	80287be <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80287a8:	4b4d      	ldr	r3, [pc, #308]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80287ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80287b2:	687b      	ldr	r3, [r7, #4]
 80287b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80287b6:	494a      	ldr	r1, [pc, #296]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287b8:	4313      	orrs	r3, r2
 80287ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80287be:	687b      	ldr	r3, [r7, #4]
 80287c0:	681b      	ldr	r3, [r3, #0]
 80287c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80287c6:	2b00      	cmp	r3, #0
 80287c8:	d00a      	beq.n	80287e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80287ca:	4b45      	ldr	r3, [pc, #276]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80287d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80287d4:	687b      	ldr	r3, [r7, #4]
 80287d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80287d8:	4941      	ldr	r1, [pc, #260]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287da:	4313      	orrs	r3, r2
 80287dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80287e0:	687b      	ldr	r3, [r7, #4]
 80287e2:	681b      	ldr	r3, [r3, #0]
 80287e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80287e8:	2b00      	cmp	r3, #0
 80287ea:	d00a      	beq.n	8028802 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80287ec:	4b3c      	ldr	r3, [pc, #240]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80287f2:	f023 0203 	bic.w	r2, r3, #3
 80287f6:	687b      	ldr	r3, [r7, #4]
 80287f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80287fa:	4939      	ldr	r1, [pc, #228]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287fc:	4313      	orrs	r3, r2
 80287fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8028802:	687b      	ldr	r3, [r7, #4]
 8028804:	681b      	ldr	r3, [r3, #0]
 8028806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802880a:	2b00      	cmp	r3, #0
 802880c:	d028      	beq.n	8028860 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 802880e:	4b34      	ldr	r3, [pc, #208]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028814:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802881c:	4930      	ldr	r1, [pc, #192]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802881e:	4313      	orrs	r3, r2
 8028820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8028824:	687b      	ldr	r3, [r7, #4]
 8028826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802882c:	d106      	bne.n	802883c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 802882e:	4b2c      	ldr	r3, [pc, #176]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028830:	68db      	ldr	r3, [r3, #12]
 8028832:	4a2b      	ldr	r2, [pc, #172]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028838:	60d3      	str	r3, [r2, #12]
 802883a:	e011      	b.n	8028860 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 802883c:	687b      	ldr	r3, [r7, #4]
 802883e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8028844:	d10c      	bne.n	8028860 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8028846:	687b      	ldr	r3, [r7, #4]
 8028848:	3304      	adds	r3, #4
 802884a:	2101      	movs	r1, #1
 802884c:	4618      	mov	r0, r3
 802884e:	f000 f8f9 	bl	8028a44 <RCCEx_PLLSAI1_Config>
 8028852:	4603      	mov	r3, r0
 8028854:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8028856:	7cfb      	ldrb	r3, [r7, #19]
 8028858:	2b00      	cmp	r3, #0
 802885a:	d001      	beq.n	8028860 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 802885c:	7cfb      	ldrb	r3, [r7, #19]
 802885e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8028860:	687b      	ldr	r3, [r7, #4]
 8028862:	681b      	ldr	r3, [r3, #0]
 8028864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8028868:	2b00      	cmp	r3, #0
 802886a:	d04d      	beq.n	8028908 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 802886c:	687b      	ldr	r3, [r7, #4]
 802886e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8028870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8028874:	d108      	bne.n	8028888 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8028876:	4b1a      	ldr	r3, [pc, #104]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802887c:	4a18      	ldr	r2, [pc, #96]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802887e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8028882:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8028886:	e012      	b.n	80288ae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8028888:	4b15      	ldr	r3, [pc, #84]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802888a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802888e:	4a14      	ldr	r2, [pc, #80]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8028894:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8028898:	4b11      	ldr	r3, [pc, #68]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802889a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802889e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80288a2:	687b      	ldr	r3, [r7, #4]
 80288a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80288a6:	490e      	ldr	r1, [pc, #56]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80288a8:	4313      	orrs	r3, r2
 80288aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80288ae:	687b      	ldr	r3, [r7, #4]
 80288b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80288b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80288b6:	d106      	bne.n	80288c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80288b8:	4b09      	ldr	r3, [pc, #36]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80288ba:	68db      	ldr	r3, [r3, #12]
 80288bc:	4a08      	ldr	r2, [pc, #32]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80288be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80288c2:	60d3      	str	r3, [r2, #12]
 80288c4:	e020      	b.n	8028908 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80288c6:	687b      	ldr	r3, [r7, #4]
 80288c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80288ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80288ce:	d109      	bne.n	80288e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80288d0:	4b03      	ldr	r3, [pc, #12]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80288d2:	68db      	ldr	r3, [r3, #12]
 80288d4:	4a02      	ldr	r2, [pc, #8]	; (80288e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80288d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80288da:	60d3      	str	r3, [r2, #12]
 80288dc:	e014      	b.n	8028908 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80288de:	bf00      	nop
 80288e0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80288e4:	687b      	ldr	r3, [r7, #4]
 80288e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80288e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80288ec:	d10c      	bne.n	8028908 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80288ee:	687b      	ldr	r3, [r7, #4]
 80288f0:	3304      	adds	r3, #4
 80288f2:	2101      	movs	r1, #1
 80288f4:	4618      	mov	r0, r3
 80288f6:	f000 f8a5 	bl	8028a44 <RCCEx_PLLSAI1_Config>
 80288fa:	4603      	mov	r3, r0
 80288fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80288fe:	7cfb      	ldrb	r3, [r7, #19]
 8028900:	2b00      	cmp	r3, #0
 8028902:	d001      	beq.n	8028908 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8028904:	7cfb      	ldrb	r3, [r7, #19]
 8028906:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8028908:	687b      	ldr	r3, [r7, #4]
 802890a:	681b      	ldr	r3, [r3, #0]
 802890c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028910:	2b00      	cmp	r3, #0
 8028912:	d028      	beq.n	8028966 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8028914:	4b4a      	ldr	r3, [pc, #296]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802891a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 802891e:	687b      	ldr	r3, [r7, #4]
 8028920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8028922:	4947      	ldr	r1, [pc, #284]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028924:	4313      	orrs	r3, r2
 8028926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 802892a:	687b      	ldr	r3, [r7, #4]
 802892c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802892e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8028932:	d106      	bne.n	8028942 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8028934:	4b42      	ldr	r3, [pc, #264]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028936:	68db      	ldr	r3, [r3, #12]
 8028938:	4a41      	ldr	r2, [pc, #260]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 802893a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802893e:	60d3      	str	r3, [r2, #12]
 8028940:	e011      	b.n	8028966 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8028942:	687b      	ldr	r3, [r7, #4]
 8028944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8028946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802894a:	d10c      	bne.n	8028966 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 802894c:	687b      	ldr	r3, [r7, #4]
 802894e:	3304      	adds	r3, #4
 8028950:	2101      	movs	r1, #1
 8028952:	4618      	mov	r0, r3
 8028954:	f000 f876 	bl	8028a44 <RCCEx_PLLSAI1_Config>
 8028958:	4603      	mov	r3, r0
 802895a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 802895c:	7cfb      	ldrb	r3, [r7, #19]
 802895e:	2b00      	cmp	r3, #0
 8028960:	d001      	beq.n	8028966 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8028962:	7cfb      	ldrb	r3, [r7, #19]
 8028964:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8028966:	687b      	ldr	r3, [r7, #4]
 8028968:	681b      	ldr	r3, [r3, #0]
 802896a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802896e:	2b00      	cmp	r3, #0
 8028970:	d01e      	beq.n	80289b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8028972:	4b33      	ldr	r3, [pc, #204]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028978:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 802897c:	687b      	ldr	r3, [r7, #4]
 802897e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8028982:	492f      	ldr	r1, [pc, #188]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028984:	4313      	orrs	r3, r2
 8028986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 802898a:	687b      	ldr	r3, [r7, #4]
 802898c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8028990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8028994:	d10c      	bne.n	80289b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8028996:	687b      	ldr	r3, [r7, #4]
 8028998:	3304      	adds	r3, #4
 802899a:	2102      	movs	r1, #2
 802899c:	4618      	mov	r0, r3
 802899e:	f000 f851 	bl	8028a44 <RCCEx_PLLSAI1_Config>
 80289a2:	4603      	mov	r3, r0
 80289a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80289a6:	7cfb      	ldrb	r3, [r7, #19]
 80289a8:	2b00      	cmp	r3, #0
 80289aa:	d001      	beq.n	80289b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80289ac:	7cfb      	ldrb	r3, [r7, #19]
 80289ae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80289b0:	687b      	ldr	r3, [r7, #4]
 80289b2:	681b      	ldr	r3, [r3, #0]
 80289b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80289b8:	2b00      	cmp	r3, #0
 80289ba:	d00b      	beq.n	80289d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80289bc:	4b20      	ldr	r3, [pc, #128]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80289be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80289c2:	f023 0204 	bic.w	r2, r3, #4
 80289c6:	687b      	ldr	r3, [r7, #4]
 80289c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80289cc:	491c      	ldr	r1, [pc, #112]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80289ce:	4313      	orrs	r3, r2
 80289d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80289d4:	687b      	ldr	r3, [r7, #4]
 80289d6:	681b      	ldr	r3, [r3, #0]
 80289d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80289dc:	2b00      	cmp	r3, #0
 80289de:	d00b      	beq.n	80289f8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80289e0:	4b17      	ldr	r3, [pc, #92]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80289e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80289e6:	f023 0218 	bic.w	r2, r3, #24
 80289ea:	687b      	ldr	r3, [r7, #4]
 80289ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80289f0:	4913      	ldr	r1, [pc, #76]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80289f2:	4313      	orrs	r3, r2
 80289f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80289f8:	687b      	ldr	r3, [r7, #4]
 80289fa:	681b      	ldr	r3, [r3, #0]
 80289fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8028a00:	2b00      	cmp	r3, #0
 8028a02:	d017      	beq.n	8028a34 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8028a04:	4b0e      	ldr	r3, [pc, #56]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8028a0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8028a0e:	687b      	ldr	r3, [r7, #4]
 8028a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028a14:	490a      	ldr	r1, [pc, #40]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028a16:	4313      	orrs	r3, r2
 8028a18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8028a1c:	687b      	ldr	r3, [r7, #4]
 8028a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028a22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8028a26:	d105      	bne.n	8028a34 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8028a28:	4b05      	ldr	r3, [pc, #20]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028a2a:	68db      	ldr	r3, [r3, #12]
 8028a2c:	4a04      	ldr	r2, [pc, #16]	; (8028a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028a32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8028a34:	7cbb      	ldrb	r3, [r7, #18]
}
 8028a36:	4618      	mov	r0, r3
 8028a38:	3718      	adds	r7, #24
 8028a3a:	46bd      	mov	sp, r7
 8028a3c:	bd80      	pop	{r7, pc}
 8028a3e:	bf00      	nop
 8028a40:	40021000 	.word	0x40021000

08028a44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8028a44:	b580      	push	{r7, lr}
 8028a46:	b084      	sub	sp, #16
 8028a48:	af00      	add	r7, sp, #0
 8028a4a:	6078      	str	r0, [r7, #4]
 8028a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8028a4e:	2300      	movs	r3, #0
 8028a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8028a52:	4b72      	ldr	r3, [pc, #456]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028a54:	68db      	ldr	r3, [r3, #12]
 8028a56:	f003 0303 	and.w	r3, r3, #3
 8028a5a:	2b00      	cmp	r3, #0
 8028a5c:	d00e      	beq.n	8028a7c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8028a5e:	4b6f      	ldr	r3, [pc, #444]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028a60:	68db      	ldr	r3, [r3, #12]
 8028a62:	f003 0203 	and.w	r2, r3, #3
 8028a66:	687b      	ldr	r3, [r7, #4]
 8028a68:	681b      	ldr	r3, [r3, #0]
 8028a6a:	429a      	cmp	r2, r3
 8028a6c:	d103      	bne.n	8028a76 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8028a6e:	687b      	ldr	r3, [r7, #4]
 8028a70:	681b      	ldr	r3, [r3, #0]
       ||
 8028a72:	2b00      	cmp	r3, #0
 8028a74:	d142      	bne.n	8028afc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8028a76:	2301      	movs	r3, #1
 8028a78:	73fb      	strb	r3, [r7, #15]
 8028a7a:	e03f      	b.n	8028afc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8028a7c:	687b      	ldr	r3, [r7, #4]
 8028a7e:	681b      	ldr	r3, [r3, #0]
 8028a80:	2b03      	cmp	r3, #3
 8028a82:	d018      	beq.n	8028ab6 <RCCEx_PLLSAI1_Config+0x72>
 8028a84:	2b03      	cmp	r3, #3
 8028a86:	d825      	bhi.n	8028ad4 <RCCEx_PLLSAI1_Config+0x90>
 8028a88:	2b01      	cmp	r3, #1
 8028a8a:	d002      	beq.n	8028a92 <RCCEx_PLLSAI1_Config+0x4e>
 8028a8c:	2b02      	cmp	r3, #2
 8028a8e:	d009      	beq.n	8028aa4 <RCCEx_PLLSAI1_Config+0x60>
 8028a90:	e020      	b.n	8028ad4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8028a92:	4b62      	ldr	r3, [pc, #392]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028a94:	681b      	ldr	r3, [r3, #0]
 8028a96:	f003 0302 	and.w	r3, r3, #2
 8028a9a:	2b00      	cmp	r3, #0
 8028a9c:	d11d      	bne.n	8028ada <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8028a9e:	2301      	movs	r3, #1
 8028aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8028aa2:	e01a      	b.n	8028ada <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8028aa4:	4b5d      	ldr	r3, [pc, #372]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028aa6:	681b      	ldr	r3, [r3, #0]
 8028aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028aac:	2b00      	cmp	r3, #0
 8028aae:	d116      	bne.n	8028ade <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8028ab0:	2301      	movs	r3, #1
 8028ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8028ab4:	e013      	b.n	8028ade <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8028ab6:	4b59      	ldr	r3, [pc, #356]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028ab8:	681b      	ldr	r3, [r3, #0]
 8028aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	d10f      	bne.n	8028ae2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8028ac2:	4b56      	ldr	r3, [pc, #344]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028ac4:	681b      	ldr	r3, [r3, #0]
 8028ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028aca:	2b00      	cmp	r3, #0
 8028acc:	d109      	bne.n	8028ae2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8028ace:	2301      	movs	r3, #1
 8028ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8028ad2:	e006      	b.n	8028ae2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8028ad4:	2301      	movs	r3, #1
 8028ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8028ad8:	e004      	b.n	8028ae4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8028ada:	bf00      	nop
 8028adc:	e002      	b.n	8028ae4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8028ade:	bf00      	nop
 8028ae0:	e000      	b.n	8028ae4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8028ae2:	bf00      	nop
    }

    if(status == HAL_OK)
 8028ae4:	7bfb      	ldrb	r3, [r7, #15]
 8028ae6:	2b00      	cmp	r3, #0
 8028ae8:	d108      	bne.n	8028afc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8028aea:	4b4c      	ldr	r3, [pc, #304]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028aec:	68db      	ldr	r3, [r3, #12]
 8028aee:	f023 0203 	bic.w	r2, r3, #3
 8028af2:	687b      	ldr	r3, [r7, #4]
 8028af4:	681b      	ldr	r3, [r3, #0]
 8028af6:	4949      	ldr	r1, [pc, #292]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028af8:	4313      	orrs	r3, r2
 8028afa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8028afc:	7bfb      	ldrb	r3, [r7, #15]
 8028afe:	2b00      	cmp	r3, #0
 8028b00:	f040 8086 	bne.w	8028c10 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8028b04:	4b45      	ldr	r3, [pc, #276]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b06:	681b      	ldr	r3, [r3, #0]
 8028b08:	4a44      	ldr	r2, [pc, #272]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8028b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028b10:	f7fb fc0c 	bl	802432c <HAL_GetTick>
 8028b14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8028b16:	e009      	b.n	8028b2c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8028b18:	f7fb fc08 	bl	802432c <HAL_GetTick>
 8028b1c:	4602      	mov	r2, r0
 8028b1e:	68bb      	ldr	r3, [r7, #8]
 8028b20:	1ad3      	subs	r3, r2, r3
 8028b22:	2b02      	cmp	r3, #2
 8028b24:	d902      	bls.n	8028b2c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8028b26:	2303      	movs	r3, #3
 8028b28:	73fb      	strb	r3, [r7, #15]
        break;
 8028b2a:	e005      	b.n	8028b38 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8028b2c:	4b3b      	ldr	r3, [pc, #236]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b2e:	681b      	ldr	r3, [r3, #0]
 8028b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028b34:	2b00      	cmp	r3, #0
 8028b36:	d1ef      	bne.n	8028b18 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8028b38:	7bfb      	ldrb	r3, [r7, #15]
 8028b3a:	2b00      	cmp	r3, #0
 8028b3c:	d168      	bne.n	8028c10 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8028b3e:	683b      	ldr	r3, [r7, #0]
 8028b40:	2b00      	cmp	r3, #0
 8028b42:	d113      	bne.n	8028b6c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8028b44:	4b35      	ldr	r3, [pc, #212]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b46:	691a      	ldr	r2, [r3, #16]
 8028b48:	4b35      	ldr	r3, [pc, #212]	; (8028c20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8028b4a:	4013      	ands	r3, r2
 8028b4c:	687a      	ldr	r2, [r7, #4]
 8028b4e:	6892      	ldr	r2, [r2, #8]
 8028b50:	0211      	lsls	r1, r2, #8
 8028b52:	687a      	ldr	r2, [r7, #4]
 8028b54:	68d2      	ldr	r2, [r2, #12]
 8028b56:	06d2      	lsls	r2, r2, #27
 8028b58:	4311      	orrs	r1, r2
 8028b5a:	687a      	ldr	r2, [r7, #4]
 8028b5c:	6852      	ldr	r2, [r2, #4]
 8028b5e:	3a01      	subs	r2, #1
 8028b60:	0112      	lsls	r2, r2, #4
 8028b62:	430a      	orrs	r2, r1
 8028b64:	492d      	ldr	r1, [pc, #180]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b66:	4313      	orrs	r3, r2
 8028b68:	610b      	str	r3, [r1, #16]
 8028b6a:	e02d      	b.n	8028bc8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8028b6c:	683b      	ldr	r3, [r7, #0]
 8028b6e:	2b01      	cmp	r3, #1
 8028b70:	d115      	bne.n	8028b9e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8028b72:	4b2a      	ldr	r3, [pc, #168]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b74:	691a      	ldr	r2, [r3, #16]
 8028b76:	4b2b      	ldr	r3, [pc, #172]	; (8028c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8028b78:	4013      	ands	r3, r2
 8028b7a:	687a      	ldr	r2, [r7, #4]
 8028b7c:	6892      	ldr	r2, [r2, #8]
 8028b7e:	0211      	lsls	r1, r2, #8
 8028b80:	687a      	ldr	r2, [r7, #4]
 8028b82:	6912      	ldr	r2, [r2, #16]
 8028b84:	0852      	lsrs	r2, r2, #1
 8028b86:	3a01      	subs	r2, #1
 8028b88:	0552      	lsls	r2, r2, #21
 8028b8a:	4311      	orrs	r1, r2
 8028b8c:	687a      	ldr	r2, [r7, #4]
 8028b8e:	6852      	ldr	r2, [r2, #4]
 8028b90:	3a01      	subs	r2, #1
 8028b92:	0112      	lsls	r2, r2, #4
 8028b94:	430a      	orrs	r2, r1
 8028b96:	4921      	ldr	r1, [pc, #132]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b98:	4313      	orrs	r3, r2
 8028b9a:	610b      	str	r3, [r1, #16]
 8028b9c:	e014      	b.n	8028bc8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8028b9e:	4b1f      	ldr	r3, [pc, #124]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028ba0:	691a      	ldr	r2, [r3, #16]
 8028ba2:	4b21      	ldr	r3, [pc, #132]	; (8028c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8028ba4:	4013      	ands	r3, r2
 8028ba6:	687a      	ldr	r2, [r7, #4]
 8028ba8:	6892      	ldr	r2, [r2, #8]
 8028baa:	0211      	lsls	r1, r2, #8
 8028bac:	687a      	ldr	r2, [r7, #4]
 8028bae:	6952      	ldr	r2, [r2, #20]
 8028bb0:	0852      	lsrs	r2, r2, #1
 8028bb2:	3a01      	subs	r2, #1
 8028bb4:	0652      	lsls	r2, r2, #25
 8028bb6:	4311      	orrs	r1, r2
 8028bb8:	687a      	ldr	r2, [r7, #4]
 8028bba:	6852      	ldr	r2, [r2, #4]
 8028bbc:	3a01      	subs	r2, #1
 8028bbe:	0112      	lsls	r2, r2, #4
 8028bc0:	430a      	orrs	r2, r1
 8028bc2:	4916      	ldr	r1, [pc, #88]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028bc4:	4313      	orrs	r3, r2
 8028bc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8028bc8:	4b14      	ldr	r3, [pc, #80]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028bca:	681b      	ldr	r3, [r3, #0]
 8028bcc:	4a13      	ldr	r2, [pc, #76]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8028bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028bd4:	f7fb fbaa 	bl	802432c <HAL_GetTick>
 8028bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8028bda:	e009      	b.n	8028bf0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8028bdc:	f7fb fba6 	bl	802432c <HAL_GetTick>
 8028be0:	4602      	mov	r2, r0
 8028be2:	68bb      	ldr	r3, [r7, #8]
 8028be4:	1ad3      	subs	r3, r2, r3
 8028be6:	2b02      	cmp	r3, #2
 8028be8:	d902      	bls.n	8028bf0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8028bea:	2303      	movs	r3, #3
 8028bec:	73fb      	strb	r3, [r7, #15]
          break;
 8028bee:	e005      	b.n	8028bfc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8028bf0:	4b0a      	ldr	r3, [pc, #40]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028bf2:	681b      	ldr	r3, [r3, #0]
 8028bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028bf8:	2b00      	cmp	r3, #0
 8028bfa:	d0ef      	beq.n	8028bdc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8028bfc:	7bfb      	ldrb	r3, [r7, #15]
 8028bfe:	2b00      	cmp	r3, #0
 8028c00:	d106      	bne.n	8028c10 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8028c02:	4b06      	ldr	r3, [pc, #24]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028c04:	691a      	ldr	r2, [r3, #16]
 8028c06:	687b      	ldr	r3, [r7, #4]
 8028c08:	699b      	ldr	r3, [r3, #24]
 8028c0a:	4904      	ldr	r1, [pc, #16]	; (8028c1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8028c0c:	4313      	orrs	r3, r2
 8028c0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8028c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8028c12:	4618      	mov	r0, r3
 8028c14:	3710      	adds	r7, #16
 8028c16:	46bd      	mov	sp, r7
 8028c18:	bd80      	pop	{r7, pc}
 8028c1a:	bf00      	nop
 8028c1c:	40021000 	.word	0x40021000
 8028c20:	07ff800f 	.word	0x07ff800f
 8028c24:	ff9f800f 	.word	0xff9f800f
 8028c28:	f9ff800f 	.word	0xf9ff800f

08028c2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8028c2c:	b580      	push	{r7, lr}
 8028c2e:	b084      	sub	sp, #16
 8028c30:	af00      	add	r7, sp, #0
 8028c32:	6078      	str	r0, [r7, #4]
 8028c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8028c36:	2300      	movs	r3, #0
 8028c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8028c3a:	4b72      	ldr	r3, [pc, #456]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c3c:	68db      	ldr	r3, [r3, #12]
 8028c3e:	f003 0303 	and.w	r3, r3, #3
 8028c42:	2b00      	cmp	r3, #0
 8028c44:	d00e      	beq.n	8028c64 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8028c46:	4b6f      	ldr	r3, [pc, #444]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c48:	68db      	ldr	r3, [r3, #12]
 8028c4a:	f003 0203 	and.w	r2, r3, #3
 8028c4e:	687b      	ldr	r3, [r7, #4]
 8028c50:	681b      	ldr	r3, [r3, #0]
 8028c52:	429a      	cmp	r2, r3
 8028c54:	d103      	bne.n	8028c5e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8028c56:	687b      	ldr	r3, [r7, #4]
 8028c58:	681b      	ldr	r3, [r3, #0]
       ||
 8028c5a:	2b00      	cmp	r3, #0
 8028c5c:	d142      	bne.n	8028ce4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8028c5e:	2301      	movs	r3, #1
 8028c60:	73fb      	strb	r3, [r7, #15]
 8028c62:	e03f      	b.n	8028ce4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8028c64:	687b      	ldr	r3, [r7, #4]
 8028c66:	681b      	ldr	r3, [r3, #0]
 8028c68:	2b03      	cmp	r3, #3
 8028c6a:	d018      	beq.n	8028c9e <RCCEx_PLLSAI2_Config+0x72>
 8028c6c:	2b03      	cmp	r3, #3
 8028c6e:	d825      	bhi.n	8028cbc <RCCEx_PLLSAI2_Config+0x90>
 8028c70:	2b01      	cmp	r3, #1
 8028c72:	d002      	beq.n	8028c7a <RCCEx_PLLSAI2_Config+0x4e>
 8028c74:	2b02      	cmp	r3, #2
 8028c76:	d009      	beq.n	8028c8c <RCCEx_PLLSAI2_Config+0x60>
 8028c78:	e020      	b.n	8028cbc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8028c7a:	4b62      	ldr	r3, [pc, #392]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c7c:	681b      	ldr	r3, [r3, #0]
 8028c7e:	f003 0302 	and.w	r3, r3, #2
 8028c82:	2b00      	cmp	r3, #0
 8028c84:	d11d      	bne.n	8028cc2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8028c86:	2301      	movs	r3, #1
 8028c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8028c8a:	e01a      	b.n	8028cc2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8028c8c:	4b5d      	ldr	r3, [pc, #372]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c8e:	681b      	ldr	r3, [r3, #0]
 8028c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028c94:	2b00      	cmp	r3, #0
 8028c96:	d116      	bne.n	8028cc6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8028c98:	2301      	movs	r3, #1
 8028c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8028c9c:	e013      	b.n	8028cc6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8028c9e:	4b59      	ldr	r3, [pc, #356]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028ca0:	681b      	ldr	r3, [r3, #0]
 8028ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028ca6:	2b00      	cmp	r3, #0
 8028ca8:	d10f      	bne.n	8028cca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8028caa:	4b56      	ldr	r3, [pc, #344]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028cac:	681b      	ldr	r3, [r3, #0]
 8028cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028cb2:	2b00      	cmp	r3, #0
 8028cb4:	d109      	bne.n	8028cca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8028cb6:	2301      	movs	r3, #1
 8028cb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8028cba:	e006      	b.n	8028cca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8028cbc:	2301      	movs	r3, #1
 8028cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8028cc0:	e004      	b.n	8028ccc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8028cc2:	bf00      	nop
 8028cc4:	e002      	b.n	8028ccc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8028cc6:	bf00      	nop
 8028cc8:	e000      	b.n	8028ccc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8028cca:	bf00      	nop
    }

    if(status == HAL_OK)
 8028ccc:	7bfb      	ldrb	r3, [r7, #15]
 8028cce:	2b00      	cmp	r3, #0
 8028cd0:	d108      	bne.n	8028ce4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8028cd2:	4b4c      	ldr	r3, [pc, #304]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028cd4:	68db      	ldr	r3, [r3, #12]
 8028cd6:	f023 0203 	bic.w	r2, r3, #3
 8028cda:	687b      	ldr	r3, [r7, #4]
 8028cdc:	681b      	ldr	r3, [r3, #0]
 8028cde:	4949      	ldr	r1, [pc, #292]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028ce0:	4313      	orrs	r3, r2
 8028ce2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8028ce4:	7bfb      	ldrb	r3, [r7, #15]
 8028ce6:	2b00      	cmp	r3, #0
 8028ce8:	f040 8086 	bne.w	8028df8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8028cec:	4b45      	ldr	r3, [pc, #276]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028cee:	681b      	ldr	r3, [r3, #0]
 8028cf0:	4a44      	ldr	r2, [pc, #272]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028cf8:	f7fb fb18 	bl	802432c <HAL_GetTick>
 8028cfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8028cfe:	e009      	b.n	8028d14 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8028d00:	f7fb fb14 	bl	802432c <HAL_GetTick>
 8028d04:	4602      	mov	r2, r0
 8028d06:	68bb      	ldr	r3, [r7, #8]
 8028d08:	1ad3      	subs	r3, r2, r3
 8028d0a:	2b02      	cmp	r3, #2
 8028d0c:	d902      	bls.n	8028d14 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8028d0e:	2303      	movs	r3, #3
 8028d10:	73fb      	strb	r3, [r7, #15]
        break;
 8028d12:	e005      	b.n	8028d20 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8028d14:	4b3b      	ldr	r3, [pc, #236]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d16:	681b      	ldr	r3, [r3, #0]
 8028d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8028d1c:	2b00      	cmp	r3, #0
 8028d1e:	d1ef      	bne.n	8028d00 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8028d20:	7bfb      	ldrb	r3, [r7, #15]
 8028d22:	2b00      	cmp	r3, #0
 8028d24:	d168      	bne.n	8028df8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8028d26:	683b      	ldr	r3, [r7, #0]
 8028d28:	2b00      	cmp	r3, #0
 8028d2a:	d113      	bne.n	8028d54 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8028d2c:	4b35      	ldr	r3, [pc, #212]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d2e:	695a      	ldr	r2, [r3, #20]
 8028d30:	4b35      	ldr	r3, [pc, #212]	; (8028e08 <RCCEx_PLLSAI2_Config+0x1dc>)
 8028d32:	4013      	ands	r3, r2
 8028d34:	687a      	ldr	r2, [r7, #4]
 8028d36:	6892      	ldr	r2, [r2, #8]
 8028d38:	0211      	lsls	r1, r2, #8
 8028d3a:	687a      	ldr	r2, [r7, #4]
 8028d3c:	68d2      	ldr	r2, [r2, #12]
 8028d3e:	06d2      	lsls	r2, r2, #27
 8028d40:	4311      	orrs	r1, r2
 8028d42:	687a      	ldr	r2, [r7, #4]
 8028d44:	6852      	ldr	r2, [r2, #4]
 8028d46:	3a01      	subs	r2, #1
 8028d48:	0112      	lsls	r2, r2, #4
 8028d4a:	430a      	orrs	r2, r1
 8028d4c:	492d      	ldr	r1, [pc, #180]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d4e:	4313      	orrs	r3, r2
 8028d50:	614b      	str	r3, [r1, #20]
 8028d52:	e02d      	b.n	8028db0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8028d54:	683b      	ldr	r3, [r7, #0]
 8028d56:	2b01      	cmp	r3, #1
 8028d58:	d115      	bne.n	8028d86 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8028d5a:	4b2a      	ldr	r3, [pc, #168]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d5c:	695a      	ldr	r2, [r3, #20]
 8028d5e:	4b2b      	ldr	r3, [pc, #172]	; (8028e0c <RCCEx_PLLSAI2_Config+0x1e0>)
 8028d60:	4013      	ands	r3, r2
 8028d62:	687a      	ldr	r2, [r7, #4]
 8028d64:	6892      	ldr	r2, [r2, #8]
 8028d66:	0211      	lsls	r1, r2, #8
 8028d68:	687a      	ldr	r2, [r7, #4]
 8028d6a:	6912      	ldr	r2, [r2, #16]
 8028d6c:	0852      	lsrs	r2, r2, #1
 8028d6e:	3a01      	subs	r2, #1
 8028d70:	0552      	lsls	r2, r2, #21
 8028d72:	4311      	orrs	r1, r2
 8028d74:	687a      	ldr	r2, [r7, #4]
 8028d76:	6852      	ldr	r2, [r2, #4]
 8028d78:	3a01      	subs	r2, #1
 8028d7a:	0112      	lsls	r2, r2, #4
 8028d7c:	430a      	orrs	r2, r1
 8028d7e:	4921      	ldr	r1, [pc, #132]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d80:	4313      	orrs	r3, r2
 8028d82:	614b      	str	r3, [r1, #20]
 8028d84:	e014      	b.n	8028db0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8028d86:	4b1f      	ldr	r3, [pc, #124]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d88:	695a      	ldr	r2, [r3, #20]
 8028d8a:	4b21      	ldr	r3, [pc, #132]	; (8028e10 <RCCEx_PLLSAI2_Config+0x1e4>)
 8028d8c:	4013      	ands	r3, r2
 8028d8e:	687a      	ldr	r2, [r7, #4]
 8028d90:	6892      	ldr	r2, [r2, #8]
 8028d92:	0211      	lsls	r1, r2, #8
 8028d94:	687a      	ldr	r2, [r7, #4]
 8028d96:	6952      	ldr	r2, [r2, #20]
 8028d98:	0852      	lsrs	r2, r2, #1
 8028d9a:	3a01      	subs	r2, #1
 8028d9c:	0652      	lsls	r2, r2, #25
 8028d9e:	4311      	orrs	r1, r2
 8028da0:	687a      	ldr	r2, [r7, #4]
 8028da2:	6852      	ldr	r2, [r2, #4]
 8028da4:	3a01      	subs	r2, #1
 8028da6:	0112      	lsls	r2, r2, #4
 8028da8:	430a      	orrs	r2, r1
 8028daa:	4916      	ldr	r1, [pc, #88]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028dac:	4313      	orrs	r3, r2
 8028dae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8028db0:	4b14      	ldr	r3, [pc, #80]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028db2:	681b      	ldr	r3, [r3, #0]
 8028db4:	4a13      	ldr	r2, [pc, #76]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028dba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028dbc:	f7fb fab6 	bl	802432c <HAL_GetTick>
 8028dc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8028dc2:	e009      	b.n	8028dd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8028dc4:	f7fb fab2 	bl	802432c <HAL_GetTick>
 8028dc8:	4602      	mov	r2, r0
 8028dca:	68bb      	ldr	r3, [r7, #8]
 8028dcc:	1ad3      	subs	r3, r2, r3
 8028dce:	2b02      	cmp	r3, #2
 8028dd0:	d902      	bls.n	8028dd8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8028dd2:	2303      	movs	r3, #3
 8028dd4:	73fb      	strb	r3, [r7, #15]
          break;
 8028dd6:	e005      	b.n	8028de4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8028dd8:	4b0a      	ldr	r3, [pc, #40]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028dda:	681b      	ldr	r3, [r3, #0]
 8028ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8028de0:	2b00      	cmp	r3, #0
 8028de2:	d0ef      	beq.n	8028dc4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8028de4:	7bfb      	ldrb	r3, [r7, #15]
 8028de6:	2b00      	cmp	r3, #0
 8028de8:	d106      	bne.n	8028df8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8028dea:	4b06      	ldr	r3, [pc, #24]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028dec:	695a      	ldr	r2, [r3, #20]
 8028dee:	687b      	ldr	r3, [r7, #4]
 8028df0:	699b      	ldr	r3, [r3, #24]
 8028df2:	4904      	ldr	r1, [pc, #16]	; (8028e04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8028df4:	4313      	orrs	r3, r2
 8028df6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8028df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8028dfa:	4618      	mov	r0, r3
 8028dfc:	3710      	adds	r7, #16
 8028dfe:	46bd      	mov	sp, r7
 8028e00:	bd80      	pop	{r7, pc}
 8028e02:	bf00      	nop
 8028e04:	40021000 	.word	0x40021000
 8028e08:	07ff800f 	.word	0x07ff800f
 8028e0c:	ff9f800f 	.word	0xff9f800f
 8028e10:	f9ff800f 	.word	0xf9ff800f

08028e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028e14:	b580      	push	{r7, lr}
 8028e16:	b082      	sub	sp, #8
 8028e18:	af00      	add	r7, sp, #0
 8028e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028e1c:	687b      	ldr	r3, [r7, #4]
 8028e1e:	2b00      	cmp	r3, #0
 8028e20:	d101      	bne.n	8028e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028e22:	2301      	movs	r3, #1
 8028e24:	e049      	b.n	8028eba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028e26:	687b      	ldr	r3, [r7, #4]
 8028e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028e2c:	b2db      	uxtb	r3, r3
 8028e2e:	2b00      	cmp	r3, #0
 8028e30:	d106      	bne.n	8028e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028e32:	687b      	ldr	r3, [r7, #4]
 8028e34:	2200      	movs	r2, #0
 8028e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8028e3a:	6878      	ldr	r0, [r7, #4]
 8028e3c:	f7fa fdfe 	bl	8023a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	2202      	movs	r2, #2
 8028e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028e48:	687b      	ldr	r3, [r7, #4]
 8028e4a:	681a      	ldr	r2, [r3, #0]
 8028e4c:	687b      	ldr	r3, [r7, #4]
 8028e4e:	3304      	adds	r3, #4
 8028e50:	4619      	mov	r1, r3
 8028e52:	4610      	mov	r0, r2
 8028e54:	f000 fab6 	bl	80293c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028e58:	687b      	ldr	r3, [r7, #4]
 8028e5a:	2201      	movs	r2, #1
 8028e5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028e60:	687b      	ldr	r3, [r7, #4]
 8028e62:	2201      	movs	r2, #1
 8028e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028e68:	687b      	ldr	r3, [r7, #4]
 8028e6a:	2201      	movs	r2, #1
 8028e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028e70:	687b      	ldr	r3, [r7, #4]
 8028e72:	2201      	movs	r2, #1
 8028e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028e78:	687b      	ldr	r3, [r7, #4]
 8028e7a:	2201      	movs	r2, #1
 8028e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8028e80:	687b      	ldr	r3, [r7, #4]
 8028e82:	2201      	movs	r2, #1
 8028e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028e88:	687b      	ldr	r3, [r7, #4]
 8028e8a:	2201      	movs	r2, #1
 8028e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028e90:	687b      	ldr	r3, [r7, #4]
 8028e92:	2201      	movs	r2, #1
 8028e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028e98:	687b      	ldr	r3, [r7, #4]
 8028e9a:	2201      	movs	r2, #1
 8028e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8028ea0:	687b      	ldr	r3, [r7, #4]
 8028ea2:	2201      	movs	r2, #1
 8028ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8028ea8:	687b      	ldr	r3, [r7, #4]
 8028eaa:	2201      	movs	r2, #1
 8028eac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028eb0:	687b      	ldr	r3, [r7, #4]
 8028eb2:	2201      	movs	r2, #1
 8028eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028eb8:	2300      	movs	r3, #0
}
 8028eba:	4618      	mov	r0, r3
 8028ebc:	3708      	adds	r7, #8
 8028ebe:	46bd      	mov	sp, r7
 8028ec0:	bd80      	pop	{r7, pc}
	...

08028ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028ec4:	b480      	push	{r7}
 8028ec6:	b085      	sub	sp, #20
 8028ec8:	af00      	add	r7, sp, #0
 8028eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028ecc:	687b      	ldr	r3, [r7, #4]
 8028ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028ed2:	b2db      	uxtb	r3, r3
 8028ed4:	2b01      	cmp	r3, #1
 8028ed6:	d001      	beq.n	8028edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028ed8:	2301      	movs	r3, #1
 8028eda:	e04f      	b.n	8028f7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028edc:	687b      	ldr	r3, [r7, #4]
 8028ede:	2202      	movs	r2, #2
 8028ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028ee4:	687b      	ldr	r3, [r7, #4]
 8028ee6:	681b      	ldr	r3, [r3, #0]
 8028ee8:	68da      	ldr	r2, [r3, #12]
 8028eea:	687b      	ldr	r3, [r7, #4]
 8028eec:	681b      	ldr	r3, [r3, #0]
 8028eee:	f042 0201 	orr.w	r2, r2, #1
 8028ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028ef4:	687b      	ldr	r3, [r7, #4]
 8028ef6:	681b      	ldr	r3, [r3, #0]
 8028ef8:	4a23      	ldr	r2, [pc, #140]	; (8028f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8028efa:	4293      	cmp	r3, r2
 8028efc:	d01d      	beq.n	8028f3a <HAL_TIM_Base_Start_IT+0x76>
 8028efe:	687b      	ldr	r3, [r7, #4]
 8028f00:	681b      	ldr	r3, [r3, #0]
 8028f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028f06:	d018      	beq.n	8028f3a <HAL_TIM_Base_Start_IT+0x76>
 8028f08:	687b      	ldr	r3, [r7, #4]
 8028f0a:	681b      	ldr	r3, [r3, #0]
 8028f0c:	4a1f      	ldr	r2, [pc, #124]	; (8028f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8028f0e:	4293      	cmp	r3, r2
 8028f10:	d013      	beq.n	8028f3a <HAL_TIM_Base_Start_IT+0x76>
 8028f12:	687b      	ldr	r3, [r7, #4]
 8028f14:	681b      	ldr	r3, [r3, #0]
 8028f16:	4a1e      	ldr	r2, [pc, #120]	; (8028f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8028f18:	4293      	cmp	r3, r2
 8028f1a:	d00e      	beq.n	8028f3a <HAL_TIM_Base_Start_IT+0x76>
 8028f1c:	687b      	ldr	r3, [r7, #4]
 8028f1e:	681b      	ldr	r3, [r3, #0]
 8028f20:	4a1c      	ldr	r2, [pc, #112]	; (8028f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8028f22:	4293      	cmp	r3, r2
 8028f24:	d009      	beq.n	8028f3a <HAL_TIM_Base_Start_IT+0x76>
 8028f26:	687b      	ldr	r3, [r7, #4]
 8028f28:	681b      	ldr	r3, [r3, #0]
 8028f2a:	4a1b      	ldr	r2, [pc, #108]	; (8028f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8028f2c:	4293      	cmp	r3, r2
 8028f2e:	d004      	beq.n	8028f3a <HAL_TIM_Base_Start_IT+0x76>
 8028f30:	687b      	ldr	r3, [r7, #4]
 8028f32:	681b      	ldr	r3, [r3, #0]
 8028f34:	4a19      	ldr	r2, [pc, #100]	; (8028f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8028f36:	4293      	cmp	r3, r2
 8028f38:	d115      	bne.n	8028f66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028f3a:	687b      	ldr	r3, [r7, #4]
 8028f3c:	681b      	ldr	r3, [r3, #0]
 8028f3e:	689a      	ldr	r2, [r3, #8]
 8028f40:	4b17      	ldr	r3, [pc, #92]	; (8028fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8028f42:	4013      	ands	r3, r2
 8028f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028f46:	68fb      	ldr	r3, [r7, #12]
 8028f48:	2b06      	cmp	r3, #6
 8028f4a:	d015      	beq.n	8028f78 <HAL_TIM_Base_Start_IT+0xb4>
 8028f4c:	68fb      	ldr	r3, [r7, #12]
 8028f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028f52:	d011      	beq.n	8028f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8028f54:	687b      	ldr	r3, [r7, #4]
 8028f56:	681b      	ldr	r3, [r3, #0]
 8028f58:	681a      	ldr	r2, [r3, #0]
 8028f5a:	687b      	ldr	r3, [r7, #4]
 8028f5c:	681b      	ldr	r3, [r3, #0]
 8028f5e:	f042 0201 	orr.w	r2, r2, #1
 8028f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028f64:	e008      	b.n	8028f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	681b      	ldr	r3, [r3, #0]
 8028f6a:	681a      	ldr	r2, [r3, #0]
 8028f6c:	687b      	ldr	r3, [r7, #4]
 8028f6e:	681b      	ldr	r3, [r3, #0]
 8028f70:	f042 0201 	orr.w	r2, r2, #1
 8028f74:	601a      	str	r2, [r3, #0]
 8028f76:	e000      	b.n	8028f7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028f78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8028f7a:	2300      	movs	r3, #0
}
 8028f7c:	4618      	mov	r0, r3
 8028f7e:	3714      	adds	r7, #20
 8028f80:	46bd      	mov	sp, r7
 8028f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f86:	4770      	bx	lr
 8028f88:	40012c00 	.word	0x40012c00
 8028f8c:	40000400 	.word	0x40000400
 8028f90:	40000800 	.word	0x40000800
 8028f94:	40000c00 	.word	0x40000c00
 8028f98:	40013400 	.word	0x40013400
 8028f9c:	40014000 	.word	0x40014000
 8028fa0:	00010007 	.word	0x00010007

08028fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028fa4:	b580      	push	{r7, lr}
 8028fa6:	b082      	sub	sp, #8
 8028fa8:	af00      	add	r7, sp, #0
 8028faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028fac:	687b      	ldr	r3, [r7, #4]
 8028fae:	681b      	ldr	r3, [r3, #0]
 8028fb0:	691b      	ldr	r3, [r3, #16]
 8028fb2:	f003 0302 	and.w	r3, r3, #2
 8028fb6:	2b02      	cmp	r3, #2
 8028fb8:	d122      	bne.n	8029000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028fba:	687b      	ldr	r3, [r7, #4]
 8028fbc:	681b      	ldr	r3, [r3, #0]
 8028fbe:	68db      	ldr	r3, [r3, #12]
 8028fc0:	f003 0302 	and.w	r3, r3, #2
 8028fc4:	2b02      	cmp	r3, #2
 8028fc6:	d11b      	bne.n	8029000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028fc8:	687b      	ldr	r3, [r7, #4]
 8028fca:	681b      	ldr	r3, [r3, #0]
 8028fcc:	f06f 0202 	mvn.w	r2, #2
 8028fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8028fd2:	687b      	ldr	r3, [r7, #4]
 8028fd4:	2201      	movs	r2, #1
 8028fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028fd8:	687b      	ldr	r3, [r7, #4]
 8028fda:	681b      	ldr	r3, [r3, #0]
 8028fdc:	699b      	ldr	r3, [r3, #24]
 8028fde:	f003 0303 	and.w	r3, r3, #3
 8028fe2:	2b00      	cmp	r3, #0
 8028fe4:	d003      	beq.n	8028fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8028fe6:	6878      	ldr	r0, [r7, #4]
 8028fe8:	f000 f9ce 	bl	8029388 <HAL_TIM_IC_CaptureCallback>
 8028fec:	e005      	b.n	8028ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028fee:	6878      	ldr	r0, [r7, #4]
 8028ff0:	f000 f9c0 	bl	8029374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028ff4:	6878      	ldr	r0, [r7, #4]
 8028ff6:	f000 f9d1 	bl	802939c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028ffa:	687b      	ldr	r3, [r7, #4]
 8028ffc:	2200      	movs	r2, #0
 8028ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8029000:	687b      	ldr	r3, [r7, #4]
 8029002:	681b      	ldr	r3, [r3, #0]
 8029004:	691b      	ldr	r3, [r3, #16]
 8029006:	f003 0304 	and.w	r3, r3, #4
 802900a:	2b04      	cmp	r3, #4
 802900c:	d122      	bne.n	8029054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802900e:	687b      	ldr	r3, [r7, #4]
 8029010:	681b      	ldr	r3, [r3, #0]
 8029012:	68db      	ldr	r3, [r3, #12]
 8029014:	f003 0304 	and.w	r3, r3, #4
 8029018:	2b04      	cmp	r3, #4
 802901a:	d11b      	bne.n	8029054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802901c:	687b      	ldr	r3, [r7, #4]
 802901e:	681b      	ldr	r3, [r3, #0]
 8029020:	f06f 0204 	mvn.w	r2, #4
 8029024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029026:	687b      	ldr	r3, [r7, #4]
 8029028:	2202      	movs	r2, #2
 802902a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802902c:	687b      	ldr	r3, [r7, #4]
 802902e:	681b      	ldr	r3, [r3, #0]
 8029030:	699b      	ldr	r3, [r3, #24]
 8029032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029036:	2b00      	cmp	r3, #0
 8029038:	d003      	beq.n	8029042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802903a:	6878      	ldr	r0, [r7, #4]
 802903c:	f000 f9a4 	bl	8029388 <HAL_TIM_IC_CaptureCallback>
 8029040:	e005      	b.n	802904e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029042:	6878      	ldr	r0, [r7, #4]
 8029044:	f000 f996 	bl	8029374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029048:	6878      	ldr	r0, [r7, #4]
 802904a:	f000 f9a7 	bl	802939c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802904e:	687b      	ldr	r3, [r7, #4]
 8029050:	2200      	movs	r2, #0
 8029052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029054:	687b      	ldr	r3, [r7, #4]
 8029056:	681b      	ldr	r3, [r3, #0]
 8029058:	691b      	ldr	r3, [r3, #16]
 802905a:	f003 0308 	and.w	r3, r3, #8
 802905e:	2b08      	cmp	r3, #8
 8029060:	d122      	bne.n	80290a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029062:	687b      	ldr	r3, [r7, #4]
 8029064:	681b      	ldr	r3, [r3, #0]
 8029066:	68db      	ldr	r3, [r3, #12]
 8029068:	f003 0308 	and.w	r3, r3, #8
 802906c:	2b08      	cmp	r3, #8
 802906e:	d11b      	bne.n	80290a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8029070:	687b      	ldr	r3, [r7, #4]
 8029072:	681b      	ldr	r3, [r3, #0]
 8029074:	f06f 0208 	mvn.w	r2, #8
 8029078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802907a:	687b      	ldr	r3, [r7, #4]
 802907c:	2204      	movs	r2, #4
 802907e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8029080:	687b      	ldr	r3, [r7, #4]
 8029082:	681b      	ldr	r3, [r3, #0]
 8029084:	69db      	ldr	r3, [r3, #28]
 8029086:	f003 0303 	and.w	r3, r3, #3
 802908a:	2b00      	cmp	r3, #0
 802908c:	d003      	beq.n	8029096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802908e:	6878      	ldr	r0, [r7, #4]
 8029090:	f000 f97a 	bl	8029388 <HAL_TIM_IC_CaptureCallback>
 8029094:	e005      	b.n	80290a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029096:	6878      	ldr	r0, [r7, #4]
 8029098:	f000 f96c 	bl	8029374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802909c:	6878      	ldr	r0, [r7, #4]
 802909e:	f000 f97d 	bl	802939c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80290a2:	687b      	ldr	r3, [r7, #4]
 80290a4:	2200      	movs	r2, #0
 80290a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80290a8:	687b      	ldr	r3, [r7, #4]
 80290aa:	681b      	ldr	r3, [r3, #0]
 80290ac:	691b      	ldr	r3, [r3, #16]
 80290ae:	f003 0310 	and.w	r3, r3, #16
 80290b2:	2b10      	cmp	r3, #16
 80290b4:	d122      	bne.n	80290fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80290b6:	687b      	ldr	r3, [r7, #4]
 80290b8:	681b      	ldr	r3, [r3, #0]
 80290ba:	68db      	ldr	r3, [r3, #12]
 80290bc:	f003 0310 	and.w	r3, r3, #16
 80290c0:	2b10      	cmp	r3, #16
 80290c2:	d11b      	bne.n	80290fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80290c4:	687b      	ldr	r3, [r7, #4]
 80290c6:	681b      	ldr	r3, [r3, #0]
 80290c8:	f06f 0210 	mvn.w	r2, #16
 80290cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80290ce:	687b      	ldr	r3, [r7, #4]
 80290d0:	2208      	movs	r2, #8
 80290d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80290d4:	687b      	ldr	r3, [r7, #4]
 80290d6:	681b      	ldr	r3, [r3, #0]
 80290d8:	69db      	ldr	r3, [r3, #28]
 80290da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80290de:	2b00      	cmp	r3, #0
 80290e0:	d003      	beq.n	80290ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80290e2:	6878      	ldr	r0, [r7, #4]
 80290e4:	f000 f950 	bl	8029388 <HAL_TIM_IC_CaptureCallback>
 80290e8:	e005      	b.n	80290f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80290ea:	6878      	ldr	r0, [r7, #4]
 80290ec:	f000 f942 	bl	8029374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80290f0:	6878      	ldr	r0, [r7, #4]
 80290f2:	f000 f953 	bl	802939c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80290f6:	687b      	ldr	r3, [r7, #4]
 80290f8:	2200      	movs	r2, #0
 80290fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80290fc:	687b      	ldr	r3, [r7, #4]
 80290fe:	681b      	ldr	r3, [r3, #0]
 8029100:	691b      	ldr	r3, [r3, #16]
 8029102:	f003 0301 	and.w	r3, r3, #1
 8029106:	2b01      	cmp	r3, #1
 8029108:	d10e      	bne.n	8029128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802910a:	687b      	ldr	r3, [r7, #4]
 802910c:	681b      	ldr	r3, [r3, #0]
 802910e:	68db      	ldr	r3, [r3, #12]
 8029110:	f003 0301 	and.w	r3, r3, #1
 8029114:	2b01      	cmp	r3, #1
 8029116:	d107      	bne.n	8029128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029118:	687b      	ldr	r3, [r7, #4]
 802911a:	681b      	ldr	r3, [r3, #0]
 802911c:	f06f 0201 	mvn.w	r2, #1
 8029120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029122:	6878      	ldr	r0, [r7, #4]
 8029124:	f7f8 feae 	bl	8021e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029128:	687b      	ldr	r3, [r7, #4]
 802912a:	681b      	ldr	r3, [r3, #0]
 802912c:	691b      	ldr	r3, [r3, #16]
 802912e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029132:	2b80      	cmp	r3, #128	; 0x80
 8029134:	d10e      	bne.n	8029154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029136:	687b      	ldr	r3, [r7, #4]
 8029138:	681b      	ldr	r3, [r3, #0]
 802913a:	68db      	ldr	r3, [r3, #12]
 802913c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029140:	2b80      	cmp	r3, #128	; 0x80
 8029142:	d107      	bne.n	8029154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029144:	687b      	ldr	r3, [r7, #4]
 8029146:	681b      	ldr	r3, [r3, #0]
 8029148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802914c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802914e:	6878      	ldr	r0, [r7, #4]
 8029150:	f000 fafe 	bl	8029750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8029154:	687b      	ldr	r3, [r7, #4]
 8029156:	681b      	ldr	r3, [r3, #0]
 8029158:	691b      	ldr	r3, [r3, #16]
 802915a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802915e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029162:	d10e      	bne.n	8029182 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029164:	687b      	ldr	r3, [r7, #4]
 8029166:	681b      	ldr	r3, [r3, #0]
 8029168:	68db      	ldr	r3, [r3, #12]
 802916a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802916e:	2b80      	cmp	r3, #128	; 0x80
 8029170:	d107      	bne.n	8029182 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8029172:	687b      	ldr	r3, [r7, #4]
 8029174:	681b      	ldr	r3, [r3, #0]
 8029176:	f46f 7280 	mvn.w	r2, #256	; 0x100
 802917a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 802917c:	6878      	ldr	r0, [r7, #4]
 802917e:	f000 faf1 	bl	8029764 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029182:	687b      	ldr	r3, [r7, #4]
 8029184:	681b      	ldr	r3, [r3, #0]
 8029186:	691b      	ldr	r3, [r3, #16]
 8029188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802918c:	2b40      	cmp	r3, #64	; 0x40
 802918e:	d10e      	bne.n	80291ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029190:	687b      	ldr	r3, [r7, #4]
 8029192:	681b      	ldr	r3, [r3, #0]
 8029194:	68db      	ldr	r3, [r3, #12]
 8029196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802919a:	2b40      	cmp	r3, #64	; 0x40
 802919c:	d107      	bne.n	80291ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802919e:	687b      	ldr	r3, [r7, #4]
 80291a0:	681b      	ldr	r3, [r3, #0]
 80291a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80291a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80291a8:	6878      	ldr	r0, [r7, #4]
 80291aa:	f000 f901 	bl	80293b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80291ae:	687b      	ldr	r3, [r7, #4]
 80291b0:	681b      	ldr	r3, [r3, #0]
 80291b2:	691b      	ldr	r3, [r3, #16]
 80291b4:	f003 0320 	and.w	r3, r3, #32
 80291b8:	2b20      	cmp	r3, #32
 80291ba:	d10e      	bne.n	80291da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80291bc:	687b      	ldr	r3, [r7, #4]
 80291be:	681b      	ldr	r3, [r3, #0]
 80291c0:	68db      	ldr	r3, [r3, #12]
 80291c2:	f003 0320 	and.w	r3, r3, #32
 80291c6:	2b20      	cmp	r3, #32
 80291c8:	d107      	bne.n	80291da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80291ca:	687b      	ldr	r3, [r7, #4]
 80291cc:	681b      	ldr	r3, [r3, #0]
 80291ce:	f06f 0220 	mvn.w	r2, #32
 80291d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80291d4:	6878      	ldr	r0, [r7, #4]
 80291d6:	f000 fab1 	bl	802973c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80291da:	bf00      	nop
 80291dc:	3708      	adds	r7, #8
 80291de:	46bd      	mov	sp, r7
 80291e0:	bd80      	pop	{r7, pc}

080291e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80291e2:	b580      	push	{r7, lr}
 80291e4:	b084      	sub	sp, #16
 80291e6:	af00      	add	r7, sp, #0
 80291e8:	6078      	str	r0, [r7, #4]
 80291ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80291ec:	2300      	movs	r3, #0
 80291ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80291f0:	687b      	ldr	r3, [r7, #4]
 80291f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80291f6:	2b01      	cmp	r3, #1
 80291f8:	d101      	bne.n	80291fe <HAL_TIM_ConfigClockSource+0x1c>
 80291fa:	2302      	movs	r3, #2
 80291fc:	e0b6      	b.n	802936c <HAL_TIM_ConfigClockSource+0x18a>
 80291fe:	687b      	ldr	r3, [r7, #4]
 8029200:	2201      	movs	r2, #1
 8029202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029206:	687b      	ldr	r3, [r7, #4]
 8029208:	2202      	movs	r2, #2
 802920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802920e:	687b      	ldr	r3, [r7, #4]
 8029210:	681b      	ldr	r3, [r3, #0]
 8029212:	689b      	ldr	r3, [r3, #8]
 8029214:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029216:	68bb      	ldr	r3, [r7, #8]
 8029218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802921c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8029220:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029222:	68bb      	ldr	r3, [r7, #8]
 8029224:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029228:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	681b      	ldr	r3, [r3, #0]
 802922e:	68ba      	ldr	r2, [r7, #8]
 8029230:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029232:	683b      	ldr	r3, [r7, #0]
 8029234:	681b      	ldr	r3, [r3, #0]
 8029236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802923a:	d03e      	beq.n	80292ba <HAL_TIM_ConfigClockSource+0xd8>
 802923c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029240:	f200 8087 	bhi.w	8029352 <HAL_TIM_ConfigClockSource+0x170>
 8029244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029248:	f000 8086 	beq.w	8029358 <HAL_TIM_ConfigClockSource+0x176>
 802924c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029250:	d87f      	bhi.n	8029352 <HAL_TIM_ConfigClockSource+0x170>
 8029252:	2b70      	cmp	r3, #112	; 0x70
 8029254:	d01a      	beq.n	802928c <HAL_TIM_ConfigClockSource+0xaa>
 8029256:	2b70      	cmp	r3, #112	; 0x70
 8029258:	d87b      	bhi.n	8029352 <HAL_TIM_ConfigClockSource+0x170>
 802925a:	2b60      	cmp	r3, #96	; 0x60
 802925c:	d050      	beq.n	8029300 <HAL_TIM_ConfigClockSource+0x11e>
 802925e:	2b60      	cmp	r3, #96	; 0x60
 8029260:	d877      	bhi.n	8029352 <HAL_TIM_ConfigClockSource+0x170>
 8029262:	2b50      	cmp	r3, #80	; 0x50
 8029264:	d03c      	beq.n	80292e0 <HAL_TIM_ConfigClockSource+0xfe>
 8029266:	2b50      	cmp	r3, #80	; 0x50
 8029268:	d873      	bhi.n	8029352 <HAL_TIM_ConfigClockSource+0x170>
 802926a:	2b40      	cmp	r3, #64	; 0x40
 802926c:	d058      	beq.n	8029320 <HAL_TIM_ConfigClockSource+0x13e>
 802926e:	2b40      	cmp	r3, #64	; 0x40
 8029270:	d86f      	bhi.n	8029352 <HAL_TIM_ConfigClockSource+0x170>
 8029272:	2b30      	cmp	r3, #48	; 0x30
 8029274:	d064      	beq.n	8029340 <HAL_TIM_ConfigClockSource+0x15e>
 8029276:	2b30      	cmp	r3, #48	; 0x30
 8029278:	d86b      	bhi.n	8029352 <HAL_TIM_ConfigClockSource+0x170>
 802927a:	2b20      	cmp	r3, #32
 802927c:	d060      	beq.n	8029340 <HAL_TIM_ConfigClockSource+0x15e>
 802927e:	2b20      	cmp	r3, #32
 8029280:	d867      	bhi.n	8029352 <HAL_TIM_ConfigClockSource+0x170>
 8029282:	2b00      	cmp	r3, #0
 8029284:	d05c      	beq.n	8029340 <HAL_TIM_ConfigClockSource+0x15e>
 8029286:	2b10      	cmp	r3, #16
 8029288:	d05a      	beq.n	8029340 <HAL_TIM_ConfigClockSource+0x15e>
 802928a:	e062      	b.n	8029352 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802928c:	687b      	ldr	r3, [r7, #4]
 802928e:	6818      	ldr	r0, [r3, #0]
 8029290:	683b      	ldr	r3, [r7, #0]
 8029292:	6899      	ldr	r1, [r3, #8]
 8029294:	683b      	ldr	r3, [r7, #0]
 8029296:	685a      	ldr	r2, [r3, #4]
 8029298:	683b      	ldr	r3, [r7, #0]
 802929a:	68db      	ldr	r3, [r3, #12]
 802929c:	f000 f9a6 	bl	80295ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80292a0:	687b      	ldr	r3, [r7, #4]
 80292a2:	681b      	ldr	r3, [r3, #0]
 80292a4:	689b      	ldr	r3, [r3, #8]
 80292a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80292a8:	68bb      	ldr	r3, [r7, #8]
 80292aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80292ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80292b0:	687b      	ldr	r3, [r7, #4]
 80292b2:	681b      	ldr	r3, [r3, #0]
 80292b4:	68ba      	ldr	r2, [r7, #8]
 80292b6:	609a      	str	r2, [r3, #8]
      break;
 80292b8:	e04f      	b.n	802935a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80292ba:	687b      	ldr	r3, [r7, #4]
 80292bc:	6818      	ldr	r0, [r3, #0]
 80292be:	683b      	ldr	r3, [r7, #0]
 80292c0:	6899      	ldr	r1, [r3, #8]
 80292c2:	683b      	ldr	r3, [r7, #0]
 80292c4:	685a      	ldr	r2, [r3, #4]
 80292c6:	683b      	ldr	r3, [r7, #0]
 80292c8:	68db      	ldr	r3, [r3, #12]
 80292ca:	f000 f98f 	bl	80295ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80292ce:	687b      	ldr	r3, [r7, #4]
 80292d0:	681b      	ldr	r3, [r3, #0]
 80292d2:	689a      	ldr	r2, [r3, #8]
 80292d4:	687b      	ldr	r3, [r7, #4]
 80292d6:	681b      	ldr	r3, [r3, #0]
 80292d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80292dc:	609a      	str	r2, [r3, #8]
      break;
 80292de:	e03c      	b.n	802935a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80292e0:	687b      	ldr	r3, [r7, #4]
 80292e2:	6818      	ldr	r0, [r3, #0]
 80292e4:	683b      	ldr	r3, [r7, #0]
 80292e6:	6859      	ldr	r1, [r3, #4]
 80292e8:	683b      	ldr	r3, [r7, #0]
 80292ea:	68db      	ldr	r3, [r3, #12]
 80292ec:	461a      	mov	r2, r3
 80292ee:	f000 f903 	bl	80294f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80292f2:	687b      	ldr	r3, [r7, #4]
 80292f4:	681b      	ldr	r3, [r3, #0]
 80292f6:	2150      	movs	r1, #80	; 0x50
 80292f8:	4618      	mov	r0, r3
 80292fa:	f000 f95c 	bl	80295b6 <TIM_ITRx_SetConfig>
      break;
 80292fe:	e02c      	b.n	802935a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8029300:	687b      	ldr	r3, [r7, #4]
 8029302:	6818      	ldr	r0, [r3, #0]
 8029304:	683b      	ldr	r3, [r7, #0]
 8029306:	6859      	ldr	r1, [r3, #4]
 8029308:	683b      	ldr	r3, [r7, #0]
 802930a:	68db      	ldr	r3, [r3, #12]
 802930c:	461a      	mov	r2, r3
 802930e:	f000 f922 	bl	8029556 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029312:	687b      	ldr	r3, [r7, #4]
 8029314:	681b      	ldr	r3, [r3, #0]
 8029316:	2160      	movs	r1, #96	; 0x60
 8029318:	4618      	mov	r0, r3
 802931a:	f000 f94c 	bl	80295b6 <TIM_ITRx_SetConfig>
      break;
 802931e:	e01c      	b.n	802935a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8029320:	687b      	ldr	r3, [r7, #4]
 8029322:	6818      	ldr	r0, [r3, #0]
 8029324:	683b      	ldr	r3, [r7, #0]
 8029326:	6859      	ldr	r1, [r3, #4]
 8029328:	683b      	ldr	r3, [r7, #0]
 802932a:	68db      	ldr	r3, [r3, #12]
 802932c:	461a      	mov	r2, r3
 802932e:	f000 f8e3 	bl	80294f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029332:	687b      	ldr	r3, [r7, #4]
 8029334:	681b      	ldr	r3, [r3, #0]
 8029336:	2140      	movs	r1, #64	; 0x40
 8029338:	4618      	mov	r0, r3
 802933a:	f000 f93c 	bl	80295b6 <TIM_ITRx_SetConfig>
      break;
 802933e:	e00c      	b.n	802935a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029340:	687b      	ldr	r3, [r7, #4]
 8029342:	681a      	ldr	r2, [r3, #0]
 8029344:	683b      	ldr	r3, [r7, #0]
 8029346:	681b      	ldr	r3, [r3, #0]
 8029348:	4619      	mov	r1, r3
 802934a:	4610      	mov	r0, r2
 802934c:	f000 f933 	bl	80295b6 <TIM_ITRx_SetConfig>
      break;
 8029350:	e003      	b.n	802935a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8029352:	2301      	movs	r3, #1
 8029354:	73fb      	strb	r3, [r7, #15]
      break;
 8029356:	e000      	b.n	802935a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8029358:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802935a:	687b      	ldr	r3, [r7, #4]
 802935c:	2201      	movs	r2, #1
 802935e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029362:	687b      	ldr	r3, [r7, #4]
 8029364:	2200      	movs	r2, #0
 8029366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802936a:	7bfb      	ldrb	r3, [r7, #15]
}
 802936c:	4618      	mov	r0, r3
 802936e:	3710      	adds	r7, #16
 8029370:	46bd      	mov	sp, r7
 8029372:	bd80      	pop	{r7, pc}

08029374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029374:	b480      	push	{r7}
 8029376:	b083      	sub	sp, #12
 8029378:	af00      	add	r7, sp, #0
 802937a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802937c:	bf00      	nop
 802937e:	370c      	adds	r7, #12
 8029380:	46bd      	mov	sp, r7
 8029382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029386:	4770      	bx	lr

08029388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029388:	b480      	push	{r7}
 802938a:	b083      	sub	sp, #12
 802938c:	af00      	add	r7, sp, #0
 802938e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029390:	bf00      	nop
 8029392:	370c      	adds	r7, #12
 8029394:	46bd      	mov	sp, r7
 8029396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802939a:	4770      	bx	lr

0802939c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802939c:	b480      	push	{r7}
 802939e:	b083      	sub	sp, #12
 80293a0:	af00      	add	r7, sp, #0
 80293a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80293a4:	bf00      	nop
 80293a6:	370c      	adds	r7, #12
 80293a8:	46bd      	mov	sp, r7
 80293aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293ae:	4770      	bx	lr

080293b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80293b0:	b480      	push	{r7}
 80293b2:	b083      	sub	sp, #12
 80293b4:	af00      	add	r7, sp, #0
 80293b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80293b8:	bf00      	nop
 80293ba:	370c      	adds	r7, #12
 80293bc:	46bd      	mov	sp, r7
 80293be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293c2:	4770      	bx	lr

080293c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80293c4:	b480      	push	{r7}
 80293c6:	b085      	sub	sp, #20
 80293c8:	af00      	add	r7, sp, #0
 80293ca:	6078      	str	r0, [r7, #4]
 80293cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80293ce:	687b      	ldr	r3, [r7, #4]
 80293d0:	681b      	ldr	r3, [r3, #0]
 80293d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80293d4:	687b      	ldr	r3, [r7, #4]
 80293d6:	4a40      	ldr	r2, [pc, #256]	; (80294d8 <TIM_Base_SetConfig+0x114>)
 80293d8:	4293      	cmp	r3, r2
 80293da:	d013      	beq.n	8029404 <TIM_Base_SetConfig+0x40>
 80293dc:	687b      	ldr	r3, [r7, #4]
 80293de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80293e2:	d00f      	beq.n	8029404 <TIM_Base_SetConfig+0x40>
 80293e4:	687b      	ldr	r3, [r7, #4]
 80293e6:	4a3d      	ldr	r2, [pc, #244]	; (80294dc <TIM_Base_SetConfig+0x118>)
 80293e8:	4293      	cmp	r3, r2
 80293ea:	d00b      	beq.n	8029404 <TIM_Base_SetConfig+0x40>
 80293ec:	687b      	ldr	r3, [r7, #4]
 80293ee:	4a3c      	ldr	r2, [pc, #240]	; (80294e0 <TIM_Base_SetConfig+0x11c>)
 80293f0:	4293      	cmp	r3, r2
 80293f2:	d007      	beq.n	8029404 <TIM_Base_SetConfig+0x40>
 80293f4:	687b      	ldr	r3, [r7, #4]
 80293f6:	4a3b      	ldr	r2, [pc, #236]	; (80294e4 <TIM_Base_SetConfig+0x120>)
 80293f8:	4293      	cmp	r3, r2
 80293fa:	d003      	beq.n	8029404 <TIM_Base_SetConfig+0x40>
 80293fc:	687b      	ldr	r3, [r7, #4]
 80293fe:	4a3a      	ldr	r2, [pc, #232]	; (80294e8 <TIM_Base_SetConfig+0x124>)
 8029400:	4293      	cmp	r3, r2
 8029402:	d108      	bne.n	8029416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029404:	68fb      	ldr	r3, [r7, #12]
 8029406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802940a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802940c:	683b      	ldr	r3, [r7, #0]
 802940e:	685b      	ldr	r3, [r3, #4]
 8029410:	68fa      	ldr	r2, [r7, #12]
 8029412:	4313      	orrs	r3, r2
 8029414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029416:	687b      	ldr	r3, [r7, #4]
 8029418:	4a2f      	ldr	r2, [pc, #188]	; (80294d8 <TIM_Base_SetConfig+0x114>)
 802941a:	4293      	cmp	r3, r2
 802941c:	d01f      	beq.n	802945e <TIM_Base_SetConfig+0x9a>
 802941e:	687b      	ldr	r3, [r7, #4]
 8029420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029424:	d01b      	beq.n	802945e <TIM_Base_SetConfig+0x9a>
 8029426:	687b      	ldr	r3, [r7, #4]
 8029428:	4a2c      	ldr	r2, [pc, #176]	; (80294dc <TIM_Base_SetConfig+0x118>)
 802942a:	4293      	cmp	r3, r2
 802942c:	d017      	beq.n	802945e <TIM_Base_SetConfig+0x9a>
 802942e:	687b      	ldr	r3, [r7, #4]
 8029430:	4a2b      	ldr	r2, [pc, #172]	; (80294e0 <TIM_Base_SetConfig+0x11c>)
 8029432:	4293      	cmp	r3, r2
 8029434:	d013      	beq.n	802945e <TIM_Base_SetConfig+0x9a>
 8029436:	687b      	ldr	r3, [r7, #4]
 8029438:	4a2a      	ldr	r2, [pc, #168]	; (80294e4 <TIM_Base_SetConfig+0x120>)
 802943a:	4293      	cmp	r3, r2
 802943c:	d00f      	beq.n	802945e <TIM_Base_SetConfig+0x9a>
 802943e:	687b      	ldr	r3, [r7, #4]
 8029440:	4a29      	ldr	r2, [pc, #164]	; (80294e8 <TIM_Base_SetConfig+0x124>)
 8029442:	4293      	cmp	r3, r2
 8029444:	d00b      	beq.n	802945e <TIM_Base_SetConfig+0x9a>
 8029446:	687b      	ldr	r3, [r7, #4]
 8029448:	4a28      	ldr	r2, [pc, #160]	; (80294ec <TIM_Base_SetConfig+0x128>)
 802944a:	4293      	cmp	r3, r2
 802944c:	d007      	beq.n	802945e <TIM_Base_SetConfig+0x9a>
 802944e:	687b      	ldr	r3, [r7, #4]
 8029450:	4a27      	ldr	r2, [pc, #156]	; (80294f0 <TIM_Base_SetConfig+0x12c>)
 8029452:	4293      	cmp	r3, r2
 8029454:	d003      	beq.n	802945e <TIM_Base_SetConfig+0x9a>
 8029456:	687b      	ldr	r3, [r7, #4]
 8029458:	4a26      	ldr	r2, [pc, #152]	; (80294f4 <TIM_Base_SetConfig+0x130>)
 802945a:	4293      	cmp	r3, r2
 802945c:	d108      	bne.n	8029470 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802945e:	68fb      	ldr	r3, [r7, #12]
 8029460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029466:	683b      	ldr	r3, [r7, #0]
 8029468:	68db      	ldr	r3, [r3, #12]
 802946a:	68fa      	ldr	r2, [r7, #12]
 802946c:	4313      	orrs	r3, r2
 802946e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029470:	68fb      	ldr	r3, [r7, #12]
 8029472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029476:	683b      	ldr	r3, [r7, #0]
 8029478:	695b      	ldr	r3, [r3, #20]
 802947a:	4313      	orrs	r3, r2
 802947c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802947e:	687b      	ldr	r3, [r7, #4]
 8029480:	68fa      	ldr	r2, [r7, #12]
 8029482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029484:	683b      	ldr	r3, [r7, #0]
 8029486:	689a      	ldr	r2, [r3, #8]
 8029488:	687b      	ldr	r3, [r7, #4]
 802948a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802948c:	683b      	ldr	r3, [r7, #0]
 802948e:	681a      	ldr	r2, [r3, #0]
 8029490:	687b      	ldr	r3, [r7, #4]
 8029492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029494:	687b      	ldr	r3, [r7, #4]
 8029496:	4a10      	ldr	r2, [pc, #64]	; (80294d8 <TIM_Base_SetConfig+0x114>)
 8029498:	4293      	cmp	r3, r2
 802949a:	d00f      	beq.n	80294bc <TIM_Base_SetConfig+0xf8>
 802949c:	687b      	ldr	r3, [r7, #4]
 802949e:	4a12      	ldr	r2, [pc, #72]	; (80294e8 <TIM_Base_SetConfig+0x124>)
 80294a0:	4293      	cmp	r3, r2
 80294a2:	d00b      	beq.n	80294bc <TIM_Base_SetConfig+0xf8>
 80294a4:	687b      	ldr	r3, [r7, #4]
 80294a6:	4a11      	ldr	r2, [pc, #68]	; (80294ec <TIM_Base_SetConfig+0x128>)
 80294a8:	4293      	cmp	r3, r2
 80294aa:	d007      	beq.n	80294bc <TIM_Base_SetConfig+0xf8>
 80294ac:	687b      	ldr	r3, [r7, #4]
 80294ae:	4a10      	ldr	r2, [pc, #64]	; (80294f0 <TIM_Base_SetConfig+0x12c>)
 80294b0:	4293      	cmp	r3, r2
 80294b2:	d003      	beq.n	80294bc <TIM_Base_SetConfig+0xf8>
 80294b4:	687b      	ldr	r3, [r7, #4]
 80294b6:	4a0f      	ldr	r2, [pc, #60]	; (80294f4 <TIM_Base_SetConfig+0x130>)
 80294b8:	4293      	cmp	r3, r2
 80294ba:	d103      	bne.n	80294c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80294bc:	683b      	ldr	r3, [r7, #0]
 80294be:	691a      	ldr	r2, [r3, #16]
 80294c0:	687b      	ldr	r3, [r7, #4]
 80294c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80294c4:	687b      	ldr	r3, [r7, #4]
 80294c6:	2201      	movs	r2, #1
 80294c8:	615a      	str	r2, [r3, #20]
}
 80294ca:	bf00      	nop
 80294cc:	3714      	adds	r7, #20
 80294ce:	46bd      	mov	sp, r7
 80294d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294d4:	4770      	bx	lr
 80294d6:	bf00      	nop
 80294d8:	40012c00 	.word	0x40012c00
 80294dc:	40000400 	.word	0x40000400
 80294e0:	40000800 	.word	0x40000800
 80294e4:	40000c00 	.word	0x40000c00
 80294e8:	40013400 	.word	0x40013400
 80294ec:	40014000 	.word	0x40014000
 80294f0:	40014400 	.word	0x40014400
 80294f4:	40014800 	.word	0x40014800

080294f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80294f8:	b480      	push	{r7}
 80294fa:	b087      	sub	sp, #28
 80294fc:	af00      	add	r7, sp, #0
 80294fe:	60f8      	str	r0, [r7, #12]
 8029500:	60b9      	str	r1, [r7, #8]
 8029502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029504:	68fb      	ldr	r3, [r7, #12]
 8029506:	6a1b      	ldr	r3, [r3, #32]
 8029508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802950a:	68fb      	ldr	r3, [r7, #12]
 802950c:	6a1b      	ldr	r3, [r3, #32]
 802950e:	f023 0201 	bic.w	r2, r3, #1
 8029512:	68fb      	ldr	r3, [r7, #12]
 8029514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029516:	68fb      	ldr	r3, [r7, #12]
 8029518:	699b      	ldr	r3, [r3, #24]
 802951a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802951c:	693b      	ldr	r3, [r7, #16]
 802951e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029524:	687b      	ldr	r3, [r7, #4]
 8029526:	011b      	lsls	r3, r3, #4
 8029528:	693a      	ldr	r2, [r7, #16]
 802952a:	4313      	orrs	r3, r2
 802952c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802952e:	697b      	ldr	r3, [r7, #20]
 8029530:	f023 030a 	bic.w	r3, r3, #10
 8029534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029536:	697a      	ldr	r2, [r7, #20]
 8029538:	68bb      	ldr	r3, [r7, #8]
 802953a:	4313      	orrs	r3, r2
 802953c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802953e:	68fb      	ldr	r3, [r7, #12]
 8029540:	693a      	ldr	r2, [r7, #16]
 8029542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029544:	68fb      	ldr	r3, [r7, #12]
 8029546:	697a      	ldr	r2, [r7, #20]
 8029548:	621a      	str	r2, [r3, #32]
}
 802954a:	bf00      	nop
 802954c:	371c      	adds	r7, #28
 802954e:	46bd      	mov	sp, r7
 8029550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029554:	4770      	bx	lr

08029556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029556:	b480      	push	{r7}
 8029558:	b087      	sub	sp, #28
 802955a:	af00      	add	r7, sp, #0
 802955c:	60f8      	str	r0, [r7, #12]
 802955e:	60b9      	str	r1, [r7, #8]
 8029560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029562:	68fb      	ldr	r3, [r7, #12]
 8029564:	6a1b      	ldr	r3, [r3, #32]
 8029566:	f023 0210 	bic.w	r2, r3, #16
 802956a:	68fb      	ldr	r3, [r7, #12]
 802956c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802956e:	68fb      	ldr	r3, [r7, #12]
 8029570:	699b      	ldr	r3, [r3, #24]
 8029572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029574:	68fb      	ldr	r3, [r7, #12]
 8029576:	6a1b      	ldr	r3, [r3, #32]
 8029578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802957a:	697b      	ldr	r3, [r7, #20]
 802957c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029580:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8029582:	687b      	ldr	r3, [r7, #4]
 8029584:	031b      	lsls	r3, r3, #12
 8029586:	697a      	ldr	r2, [r7, #20]
 8029588:	4313      	orrs	r3, r2
 802958a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802958c:	693b      	ldr	r3, [r7, #16]
 802958e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8029592:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8029594:	68bb      	ldr	r3, [r7, #8]
 8029596:	011b      	lsls	r3, r3, #4
 8029598:	693a      	ldr	r2, [r7, #16]
 802959a:	4313      	orrs	r3, r2
 802959c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802959e:	68fb      	ldr	r3, [r7, #12]
 80295a0:	697a      	ldr	r2, [r7, #20]
 80295a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80295a4:	68fb      	ldr	r3, [r7, #12]
 80295a6:	693a      	ldr	r2, [r7, #16]
 80295a8:	621a      	str	r2, [r3, #32]
}
 80295aa:	bf00      	nop
 80295ac:	371c      	adds	r7, #28
 80295ae:	46bd      	mov	sp, r7
 80295b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295b4:	4770      	bx	lr

080295b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80295b6:	b480      	push	{r7}
 80295b8:	b085      	sub	sp, #20
 80295ba:	af00      	add	r7, sp, #0
 80295bc:	6078      	str	r0, [r7, #4]
 80295be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80295c0:	687b      	ldr	r3, [r7, #4]
 80295c2:	689b      	ldr	r3, [r3, #8]
 80295c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80295c6:	68fb      	ldr	r3, [r7, #12]
 80295c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80295cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80295ce:	683a      	ldr	r2, [r7, #0]
 80295d0:	68fb      	ldr	r3, [r7, #12]
 80295d2:	4313      	orrs	r3, r2
 80295d4:	f043 0307 	orr.w	r3, r3, #7
 80295d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80295da:	687b      	ldr	r3, [r7, #4]
 80295dc:	68fa      	ldr	r2, [r7, #12]
 80295de:	609a      	str	r2, [r3, #8]
}
 80295e0:	bf00      	nop
 80295e2:	3714      	adds	r7, #20
 80295e4:	46bd      	mov	sp, r7
 80295e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295ea:	4770      	bx	lr

080295ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80295ec:	b480      	push	{r7}
 80295ee:	b087      	sub	sp, #28
 80295f0:	af00      	add	r7, sp, #0
 80295f2:	60f8      	str	r0, [r7, #12]
 80295f4:	60b9      	str	r1, [r7, #8]
 80295f6:	607a      	str	r2, [r7, #4]
 80295f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80295fa:	68fb      	ldr	r3, [r7, #12]
 80295fc:	689b      	ldr	r3, [r3, #8]
 80295fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029600:	697b      	ldr	r3, [r7, #20]
 8029602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029608:	683b      	ldr	r3, [r7, #0]
 802960a:	021a      	lsls	r2, r3, #8
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	431a      	orrs	r2, r3
 8029610:	68bb      	ldr	r3, [r7, #8]
 8029612:	4313      	orrs	r3, r2
 8029614:	697a      	ldr	r2, [r7, #20]
 8029616:	4313      	orrs	r3, r2
 8029618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802961a:	68fb      	ldr	r3, [r7, #12]
 802961c:	697a      	ldr	r2, [r7, #20]
 802961e:	609a      	str	r2, [r3, #8]
}
 8029620:	bf00      	nop
 8029622:	371c      	adds	r7, #28
 8029624:	46bd      	mov	sp, r7
 8029626:	f85d 7b04 	ldr.w	r7, [sp], #4
 802962a:	4770      	bx	lr

0802962c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 802962c:	b480      	push	{r7}
 802962e:	b085      	sub	sp, #20
 8029630:	af00      	add	r7, sp, #0
 8029632:	6078      	str	r0, [r7, #4]
 8029634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8029636:	687b      	ldr	r3, [r7, #4]
 8029638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802963c:	2b01      	cmp	r3, #1
 802963e:	d101      	bne.n	8029644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8029640:	2302      	movs	r3, #2
 8029642:	e068      	b.n	8029716 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	2201      	movs	r2, #1
 8029648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802964c:	687b      	ldr	r3, [r7, #4]
 802964e:	2202      	movs	r2, #2
 8029650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8029654:	687b      	ldr	r3, [r7, #4]
 8029656:	681b      	ldr	r3, [r3, #0]
 8029658:	685b      	ldr	r3, [r3, #4]
 802965a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802965c:	687b      	ldr	r3, [r7, #4]
 802965e:	681b      	ldr	r3, [r3, #0]
 8029660:	689b      	ldr	r3, [r3, #8]
 8029662:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8029664:	687b      	ldr	r3, [r7, #4]
 8029666:	681b      	ldr	r3, [r3, #0]
 8029668:	4a2e      	ldr	r2, [pc, #184]	; (8029724 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 802966a:	4293      	cmp	r3, r2
 802966c:	d004      	beq.n	8029678 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802966e:	687b      	ldr	r3, [r7, #4]
 8029670:	681b      	ldr	r3, [r3, #0]
 8029672:	4a2d      	ldr	r2, [pc, #180]	; (8029728 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8029674:	4293      	cmp	r3, r2
 8029676:	d108      	bne.n	802968a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8029678:	68fb      	ldr	r3, [r7, #12]
 802967a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802967e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8029680:	683b      	ldr	r3, [r7, #0]
 8029682:	685b      	ldr	r3, [r3, #4]
 8029684:	68fa      	ldr	r2, [r7, #12]
 8029686:	4313      	orrs	r3, r2
 8029688:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802968a:	68fb      	ldr	r3, [r7, #12]
 802968c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029690:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8029692:	683b      	ldr	r3, [r7, #0]
 8029694:	681b      	ldr	r3, [r3, #0]
 8029696:	68fa      	ldr	r2, [r7, #12]
 8029698:	4313      	orrs	r3, r2
 802969a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802969c:	687b      	ldr	r3, [r7, #4]
 802969e:	681b      	ldr	r3, [r3, #0]
 80296a0:	68fa      	ldr	r2, [r7, #12]
 80296a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80296a4:	687b      	ldr	r3, [r7, #4]
 80296a6:	681b      	ldr	r3, [r3, #0]
 80296a8:	4a1e      	ldr	r2, [pc, #120]	; (8029724 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80296aa:	4293      	cmp	r3, r2
 80296ac:	d01d      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80296ae:	687b      	ldr	r3, [r7, #4]
 80296b0:	681b      	ldr	r3, [r3, #0]
 80296b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80296b6:	d018      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80296b8:	687b      	ldr	r3, [r7, #4]
 80296ba:	681b      	ldr	r3, [r3, #0]
 80296bc:	4a1b      	ldr	r2, [pc, #108]	; (802972c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80296be:	4293      	cmp	r3, r2
 80296c0:	d013      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80296c2:	687b      	ldr	r3, [r7, #4]
 80296c4:	681b      	ldr	r3, [r3, #0]
 80296c6:	4a1a      	ldr	r2, [pc, #104]	; (8029730 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80296c8:	4293      	cmp	r3, r2
 80296ca:	d00e      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80296cc:	687b      	ldr	r3, [r7, #4]
 80296ce:	681b      	ldr	r3, [r3, #0]
 80296d0:	4a18      	ldr	r2, [pc, #96]	; (8029734 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80296d2:	4293      	cmp	r3, r2
 80296d4:	d009      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80296d6:	687b      	ldr	r3, [r7, #4]
 80296d8:	681b      	ldr	r3, [r3, #0]
 80296da:	4a13      	ldr	r2, [pc, #76]	; (8029728 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80296dc:	4293      	cmp	r3, r2
 80296de:	d004      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80296e0:	687b      	ldr	r3, [r7, #4]
 80296e2:	681b      	ldr	r3, [r3, #0]
 80296e4:	4a14      	ldr	r2, [pc, #80]	; (8029738 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80296e6:	4293      	cmp	r3, r2
 80296e8:	d10c      	bne.n	8029704 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80296ea:	68bb      	ldr	r3, [r7, #8]
 80296ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80296f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80296f2:	683b      	ldr	r3, [r7, #0]
 80296f4:	689b      	ldr	r3, [r3, #8]
 80296f6:	68ba      	ldr	r2, [r7, #8]
 80296f8:	4313      	orrs	r3, r2
 80296fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80296fc:	687b      	ldr	r3, [r7, #4]
 80296fe:	681b      	ldr	r3, [r3, #0]
 8029700:	68ba      	ldr	r2, [r7, #8]
 8029702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8029704:	687b      	ldr	r3, [r7, #4]
 8029706:	2201      	movs	r2, #1
 8029708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802970c:	687b      	ldr	r3, [r7, #4]
 802970e:	2200      	movs	r2, #0
 8029710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029714:	2300      	movs	r3, #0
}
 8029716:	4618      	mov	r0, r3
 8029718:	3714      	adds	r7, #20
 802971a:	46bd      	mov	sp, r7
 802971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029720:	4770      	bx	lr
 8029722:	bf00      	nop
 8029724:	40012c00 	.word	0x40012c00
 8029728:	40013400 	.word	0x40013400
 802972c:	40000400 	.word	0x40000400
 8029730:	40000800 	.word	0x40000800
 8029734:	40000c00 	.word	0x40000c00
 8029738:	40014000 	.word	0x40014000

0802973c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802973c:	b480      	push	{r7}
 802973e:	b083      	sub	sp, #12
 8029740:	af00      	add	r7, sp, #0
 8029742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8029744:	bf00      	nop
 8029746:	370c      	adds	r7, #12
 8029748:	46bd      	mov	sp, r7
 802974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802974e:	4770      	bx	lr

08029750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029750:	b480      	push	{r7}
 8029752:	b083      	sub	sp, #12
 8029754:	af00      	add	r7, sp, #0
 8029756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8029758:	bf00      	nop
 802975a:	370c      	adds	r7, #12
 802975c:	46bd      	mov	sp, r7
 802975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029762:	4770      	bx	lr

08029764 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8029764:	b480      	push	{r7}
 8029766:	b083      	sub	sp, #12
 8029768:	af00      	add	r7, sp, #0
 802976a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 802976c:	bf00      	nop
 802976e:	370c      	adds	r7, #12
 8029770:	46bd      	mov	sp, r7
 8029772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029776:	4770      	bx	lr

08029778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8029778:	b580      	push	{r7, lr}
 802977a:	b082      	sub	sp, #8
 802977c:	af00      	add	r7, sp, #0
 802977e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8029780:	687b      	ldr	r3, [r7, #4]
 8029782:	2b00      	cmp	r3, #0
 8029784:	d101      	bne.n	802978a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8029786:	2301      	movs	r3, #1
 8029788:	e042      	b.n	8029810 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802978a:	687b      	ldr	r3, [r7, #4]
 802978c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8029790:	2b00      	cmp	r3, #0
 8029792:	d106      	bne.n	80297a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8029794:	687b      	ldr	r3, [r7, #4]
 8029796:	2200      	movs	r2, #0
 8029798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802979c:	6878      	ldr	r0, [r7, #4]
 802979e:	f7fa f995 	bl	8023acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80297a2:	687b      	ldr	r3, [r7, #4]
 80297a4:	2224      	movs	r2, #36	; 0x24
 80297a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80297aa:	687b      	ldr	r3, [r7, #4]
 80297ac:	681b      	ldr	r3, [r3, #0]
 80297ae:	681a      	ldr	r2, [r3, #0]
 80297b0:	687b      	ldr	r3, [r7, #4]
 80297b2:	681b      	ldr	r3, [r3, #0]
 80297b4:	f022 0201 	bic.w	r2, r2, #1
 80297b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80297ba:	6878      	ldr	r0, [r7, #4]
 80297bc:	f000 f82c 	bl	8029818 <UART_SetConfig>
 80297c0:	4603      	mov	r3, r0
 80297c2:	2b01      	cmp	r3, #1
 80297c4:	d101      	bne.n	80297ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80297c6:	2301      	movs	r3, #1
 80297c8:	e022      	b.n	8029810 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80297ca:	687b      	ldr	r3, [r7, #4]
 80297cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80297ce:	2b00      	cmp	r3, #0
 80297d0:	d002      	beq.n	80297d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80297d2:	6878      	ldr	r0, [r7, #4]
 80297d4:	f000 fb1c 	bl	8029e10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80297d8:	687b      	ldr	r3, [r7, #4]
 80297da:	681b      	ldr	r3, [r3, #0]
 80297dc:	685a      	ldr	r2, [r3, #4]
 80297de:	687b      	ldr	r3, [r7, #4]
 80297e0:	681b      	ldr	r3, [r3, #0]
 80297e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80297e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80297e8:	687b      	ldr	r3, [r7, #4]
 80297ea:	681b      	ldr	r3, [r3, #0]
 80297ec:	689a      	ldr	r2, [r3, #8]
 80297ee:	687b      	ldr	r3, [r7, #4]
 80297f0:	681b      	ldr	r3, [r3, #0]
 80297f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80297f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80297f8:	687b      	ldr	r3, [r7, #4]
 80297fa:	681b      	ldr	r3, [r3, #0]
 80297fc:	681a      	ldr	r2, [r3, #0]
 80297fe:	687b      	ldr	r3, [r7, #4]
 8029800:	681b      	ldr	r3, [r3, #0]
 8029802:	f042 0201 	orr.w	r2, r2, #1
 8029806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8029808:	6878      	ldr	r0, [r7, #4]
 802980a:	f000 fba3 	bl	8029f54 <UART_CheckIdleState>
 802980e:	4603      	mov	r3, r0
}
 8029810:	4618      	mov	r0, r3
 8029812:	3708      	adds	r7, #8
 8029814:	46bd      	mov	sp, r7
 8029816:	bd80      	pop	{r7, pc}

08029818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8029818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802981c:	b08c      	sub	sp, #48	; 0x30
 802981e:	af00      	add	r7, sp, #0
 8029820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8029822:	2300      	movs	r3, #0
 8029824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8029828:	697b      	ldr	r3, [r7, #20]
 802982a:	689a      	ldr	r2, [r3, #8]
 802982c:	697b      	ldr	r3, [r7, #20]
 802982e:	691b      	ldr	r3, [r3, #16]
 8029830:	431a      	orrs	r2, r3
 8029832:	697b      	ldr	r3, [r7, #20]
 8029834:	695b      	ldr	r3, [r3, #20]
 8029836:	431a      	orrs	r2, r3
 8029838:	697b      	ldr	r3, [r7, #20]
 802983a:	69db      	ldr	r3, [r3, #28]
 802983c:	4313      	orrs	r3, r2
 802983e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8029840:	697b      	ldr	r3, [r7, #20]
 8029842:	681b      	ldr	r3, [r3, #0]
 8029844:	681a      	ldr	r2, [r3, #0]
 8029846:	4baa      	ldr	r3, [pc, #680]	; (8029af0 <UART_SetConfig+0x2d8>)
 8029848:	4013      	ands	r3, r2
 802984a:	697a      	ldr	r2, [r7, #20]
 802984c:	6812      	ldr	r2, [r2, #0]
 802984e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029850:	430b      	orrs	r3, r1
 8029852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8029854:	697b      	ldr	r3, [r7, #20]
 8029856:	681b      	ldr	r3, [r3, #0]
 8029858:	685b      	ldr	r3, [r3, #4]
 802985a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802985e:	697b      	ldr	r3, [r7, #20]
 8029860:	68da      	ldr	r2, [r3, #12]
 8029862:	697b      	ldr	r3, [r7, #20]
 8029864:	681b      	ldr	r3, [r3, #0]
 8029866:	430a      	orrs	r2, r1
 8029868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802986a:	697b      	ldr	r3, [r7, #20]
 802986c:	699b      	ldr	r3, [r3, #24]
 802986e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8029870:	697b      	ldr	r3, [r7, #20]
 8029872:	681b      	ldr	r3, [r3, #0]
 8029874:	4a9f      	ldr	r2, [pc, #636]	; (8029af4 <UART_SetConfig+0x2dc>)
 8029876:	4293      	cmp	r3, r2
 8029878:	d004      	beq.n	8029884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802987a:	697b      	ldr	r3, [r7, #20]
 802987c:	6a1b      	ldr	r3, [r3, #32]
 802987e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029880:	4313      	orrs	r3, r2
 8029882:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8029884:	697b      	ldr	r3, [r7, #20]
 8029886:	681b      	ldr	r3, [r3, #0]
 8029888:	689b      	ldr	r3, [r3, #8]
 802988a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 802988e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8029892:	697a      	ldr	r2, [r7, #20]
 8029894:	6812      	ldr	r2, [r2, #0]
 8029896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029898:	430b      	orrs	r3, r1
 802989a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 802989c:	697b      	ldr	r3, [r7, #20]
 802989e:	681b      	ldr	r3, [r3, #0]
 80298a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80298a2:	f023 010f 	bic.w	r1, r3, #15
 80298a6:	697b      	ldr	r3, [r7, #20]
 80298a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80298aa:	697b      	ldr	r3, [r7, #20]
 80298ac:	681b      	ldr	r3, [r3, #0]
 80298ae:	430a      	orrs	r2, r1
 80298b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80298b2:	697b      	ldr	r3, [r7, #20]
 80298b4:	681b      	ldr	r3, [r3, #0]
 80298b6:	4a90      	ldr	r2, [pc, #576]	; (8029af8 <UART_SetConfig+0x2e0>)
 80298b8:	4293      	cmp	r3, r2
 80298ba:	d125      	bne.n	8029908 <UART_SetConfig+0xf0>
 80298bc:	4b8f      	ldr	r3, [pc, #572]	; (8029afc <UART_SetConfig+0x2e4>)
 80298be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80298c2:	f003 0303 	and.w	r3, r3, #3
 80298c6:	2b03      	cmp	r3, #3
 80298c8:	d81a      	bhi.n	8029900 <UART_SetConfig+0xe8>
 80298ca:	a201      	add	r2, pc, #4	; (adr r2, 80298d0 <UART_SetConfig+0xb8>)
 80298cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80298d0:	080298e1 	.word	0x080298e1
 80298d4:	080298f1 	.word	0x080298f1
 80298d8:	080298e9 	.word	0x080298e9
 80298dc:	080298f9 	.word	0x080298f9
 80298e0:	2301      	movs	r3, #1
 80298e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80298e6:	e116      	b.n	8029b16 <UART_SetConfig+0x2fe>
 80298e8:	2302      	movs	r3, #2
 80298ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80298ee:	e112      	b.n	8029b16 <UART_SetConfig+0x2fe>
 80298f0:	2304      	movs	r3, #4
 80298f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80298f6:	e10e      	b.n	8029b16 <UART_SetConfig+0x2fe>
 80298f8:	2308      	movs	r3, #8
 80298fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80298fe:	e10a      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029900:	2310      	movs	r3, #16
 8029902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029906:	e106      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029908:	697b      	ldr	r3, [r7, #20]
 802990a:	681b      	ldr	r3, [r3, #0]
 802990c:	4a7c      	ldr	r2, [pc, #496]	; (8029b00 <UART_SetConfig+0x2e8>)
 802990e:	4293      	cmp	r3, r2
 8029910:	d138      	bne.n	8029984 <UART_SetConfig+0x16c>
 8029912:	4b7a      	ldr	r3, [pc, #488]	; (8029afc <UART_SetConfig+0x2e4>)
 8029914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8029918:	f003 030c 	and.w	r3, r3, #12
 802991c:	2b0c      	cmp	r3, #12
 802991e:	d82d      	bhi.n	802997c <UART_SetConfig+0x164>
 8029920:	a201      	add	r2, pc, #4	; (adr r2, 8029928 <UART_SetConfig+0x110>)
 8029922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029926:	bf00      	nop
 8029928:	0802995d 	.word	0x0802995d
 802992c:	0802997d 	.word	0x0802997d
 8029930:	0802997d 	.word	0x0802997d
 8029934:	0802997d 	.word	0x0802997d
 8029938:	0802996d 	.word	0x0802996d
 802993c:	0802997d 	.word	0x0802997d
 8029940:	0802997d 	.word	0x0802997d
 8029944:	0802997d 	.word	0x0802997d
 8029948:	08029965 	.word	0x08029965
 802994c:	0802997d 	.word	0x0802997d
 8029950:	0802997d 	.word	0x0802997d
 8029954:	0802997d 	.word	0x0802997d
 8029958:	08029975 	.word	0x08029975
 802995c:	2300      	movs	r3, #0
 802995e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029962:	e0d8      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029964:	2302      	movs	r3, #2
 8029966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802996a:	e0d4      	b.n	8029b16 <UART_SetConfig+0x2fe>
 802996c:	2304      	movs	r3, #4
 802996e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029972:	e0d0      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029974:	2308      	movs	r3, #8
 8029976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802997a:	e0cc      	b.n	8029b16 <UART_SetConfig+0x2fe>
 802997c:	2310      	movs	r3, #16
 802997e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029982:	e0c8      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029984:	697b      	ldr	r3, [r7, #20]
 8029986:	681b      	ldr	r3, [r3, #0]
 8029988:	4a5e      	ldr	r2, [pc, #376]	; (8029b04 <UART_SetConfig+0x2ec>)
 802998a:	4293      	cmp	r3, r2
 802998c:	d125      	bne.n	80299da <UART_SetConfig+0x1c2>
 802998e:	4b5b      	ldr	r3, [pc, #364]	; (8029afc <UART_SetConfig+0x2e4>)
 8029990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8029994:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8029998:	2b30      	cmp	r3, #48	; 0x30
 802999a:	d016      	beq.n	80299ca <UART_SetConfig+0x1b2>
 802999c:	2b30      	cmp	r3, #48	; 0x30
 802999e:	d818      	bhi.n	80299d2 <UART_SetConfig+0x1ba>
 80299a0:	2b20      	cmp	r3, #32
 80299a2:	d00a      	beq.n	80299ba <UART_SetConfig+0x1a2>
 80299a4:	2b20      	cmp	r3, #32
 80299a6:	d814      	bhi.n	80299d2 <UART_SetConfig+0x1ba>
 80299a8:	2b00      	cmp	r3, #0
 80299aa:	d002      	beq.n	80299b2 <UART_SetConfig+0x19a>
 80299ac:	2b10      	cmp	r3, #16
 80299ae:	d008      	beq.n	80299c2 <UART_SetConfig+0x1aa>
 80299b0:	e00f      	b.n	80299d2 <UART_SetConfig+0x1ba>
 80299b2:	2300      	movs	r3, #0
 80299b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299b8:	e0ad      	b.n	8029b16 <UART_SetConfig+0x2fe>
 80299ba:	2302      	movs	r3, #2
 80299bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299c0:	e0a9      	b.n	8029b16 <UART_SetConfig+0x2fe>
 80299c2:	2304      	movs	r3, #4
 80299c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299c8:	e0a5      	b.n	8029b16 <UART_SetConfig+0x2fe>
 80299ca:	2308      	movs	r3, #8
 80299cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299d0:	e0a1      	b.n	8029b16 <UART_SetConfig+0x2fe>
 80299d2:	2310      	movs	r3, #16
 80299d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299d8:	e09d      	b.n	8029b16 <UART_SetConfig+0x2fe>
 80299da:	697b      	ldr	r3, [r7, #20]
 80299dc:	681b      	ldr	r3, [r3, #0]
 80299de:	4a4a      	ldr	r2, [pc, #296]	; (8029b08 <UART_SetConfig+0x2f0>)
 80299e0:	4293      	cmp	r3, r2
 80299e2:	d125      	bne.n	8029a30 <UART_SetConfig+0x218>
 80299e4:	4b45      	ldr	r3, [pc, #276]	; (8029afc <UART_SetConfig+0x2e4>)
 80299e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80299ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80299ee:	2bc0      	cmp	r3, #192	; 0xc0
 80299f0:	d016      	beq.n	8029a20 <UART_SetConfig+0x208>
 80299f2:	2bc0      	cmp	r3, #192	; 0xc0
 80299f4:	d818      	bhi.n	8029a28 <UART_SetConfig+0x210>
 80299f6:	2b80      	cmp	r3, #128	; 0x80
 80299f8:	d00a      	beq.n	8029a10 <UART_SetConfig+0x1f8>
 80299fa:	2b80      	cmp	r3, #128	; 0x80
 80299fc:	d814      	bhi.n	8029a28 <UART_SetConfig+0x210>
 80299fe:	2b00      	cmp	r3, #0
 8029a00:	d002      	beq.n	8029a08 <UART_SetConfig+0x1f0>
 8029a02:	2b40      	cmp	r3, #64	; 0x40
 8029a04:	d008      	beq.n	8029a18 <UART_SetConfig+0x200>
 8029a06:	e00f      	b.n	8029a28 <UART_SetConfig+0x210>
 8029a08:	2300      	movs	r3, #0
 8029a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a0e:	e082      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a10:	2302      	movs	r3, #2
 8029a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a16:	e07e      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a18:	2304      	movs	r3, #4
 8029a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a1e:	e07a      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a20:	2308      	movs	r3, #8
 8029a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a26:	e076      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a28:	2310      	movs	r3, #16
 8029a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a2e:	e072      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a30:	697b      	ldr	r3, [r7, #20]
 8029a32:	681b      	ldr	r3, [r3, #0]
 8029a34:	4a35      	ldr	r2, [pc, #212]	; (8029b0c <UART_SetConfig+0x2f4>)
 8029a36:	4293      	cmp	r3, r2
 8029a38:	d12a      	bne.n	8029a90 <UART_SetConfig+0x278>
 8029a3a:	4b30      	ldr	r3, [pc, #192]	; (8029afc <UART_SetConfig+0x2e4>)
 8029a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8029a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8029a48:	d01a      	beq.n	8029a80 <UART_SetConfig+0x268>
 8029a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8029a4e:	d81b      	bhi.n	8029a88 <UART_SetConfig+0x270>
 8029a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029a54:	d00c      	beq.n	8029a70 <UART_SetConfig+0x258>
 8029a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029a5a:	d815      	bhi.n	8029a88 <UART_SetConfig+0x270>
 8029a5c:	2b00      	cmp	r3, #0
 8029a5e:	d003      	beq.n	8029a68 <UART_SetConfig+0x250>
 8029a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029a64:	d008      	beq.n	8029a78 <UART_SetConfig+0x260>
 8029a66:	e00f      	b.n	8029a88 <UART_SetConfig+0x270>
 8029a68:	2300      	movs	r3, #0
 8029a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a6e:	e052      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a70:	2302      	movs	r3, #2
 8029a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a76:	e04e      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a78:	2304      	movs	r3, #4
 8029a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a7e:	e04a      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a80:	2308      	movs	r3, #8
 8029a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a86:	e046      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a88:	2310      	movs	r3, #16
 8029a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a8e:	e042      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029a90:	697b      	ldr	r3, [r7, #20]
 8029a92:	681b      	ldr	r3, [r3, #0]
 8029a94:	4a17      	ldr	r2, [pc, #92]	; (8029af4 <UART_SetConfig+0x2dc>)
 8029a96:	4293      	cmp	r3, r2
 8029a98:	d13a      	bne.n	8029b10 <UART_SetConfig+0x2f8>
 8029a9a:	4b18      	ldr	r3, [pc, #96]	; (8029afc <UART_SetConfig+0x2e4>)
 8029a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8029aa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8029aa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8029aa8:	d01a      	beq.n	8029ae0 <UART_SetConfig+0x2c8>
 8029aaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8029aae:	d81b      	bhi.n	8029ae8 <UART_SetConfig+0x2d0>
 8029ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029ab4:	d00c      	beq.n	8029ad0 <UART_SetConfig+0x2b8>
 8029ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029aba:	d815      	bhi.n	8029ae8 <UART_SetConfig+0x2d0>
 8029abc:	2b00      	cmp	r3, #0
 8029abe:	d003      	beq.n	8029ac8 <UART_SetConfig+0x2b0>
 8029ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029ac4:	d008      	beq.n	8029ad8 <UART_SetConfig+0x2c0>
 8029ac6:	e00f      	b.n	8029ae8 <UART_SetConfig+0x2d0>
 8029ac8:	2300      	movs	r3, #0
 8029aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029ace:	e022      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029ad0:	2302      	movs	r3, #2
 8029ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029ad6:	e01e      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029ad8:	2304      	movs	r3, #4
 8029ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029ade:	e01a      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029ae0:	2308      	movs	r3, #8
 8029ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029ae6:	e016      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029ae8:	2310      	movs	r3, #16
 8029aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029aee:	e012      	b.n	8029b16 <UART_SetConfig+0x2fe>
 8029af0:	cfff69f3 	.word	0xcfff69f3
 8029af4:	40008000 	.word	0x40008000
 8029af8:	40013800 	.word	0x40013800
 8029afc:	40021000 	.word	0x40021000
 8029b00:	40004400 	.word	0x40004400
 8029b04:	40004800 	.word	0x40004800
 8029b08:	40004c00 	.word	0x40004c00
 8029b0c:	40005000 	.word	0x40005000
 8029b10:	2310      	movs	r3, #16
 8029b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8029b16:	697b      	ldr	r3, [r7, #20]
 8029b18:	681b      	ldr	r3, [r3, #0]
 8029b1a:	4aae      	ldr	r2, [pc, #696]	; (8029dd4 <UART_SetConfig+0x5bc>)
 8029b1c:	4293      	cmp	r3, r2
 8029b1e:	f040 8097 	bne.w	8029c50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8029b22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029b26:	2b08      	cmp	r3, #8
 8029b28:	d823      	bhi.n	8029b72 <UART_SetConfig+0x35a>
 8029b2a:	a201      	add	r2, pc, #4	; (adr r2, 8029b30 <UART_SetConfig+0x318>)
 8029b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029b30:	08029b55 	.word	0x08029b55
 8029b34:	08029b73 	.word	0x08029b73
 8029b38:	08029b5d 	.word	0x08029b5d
 8029b3c:	08029b73 	.word	0x08029b73
 8029b40:	08029b63 	.word	0x08029b63
 8029b44:	08029b73 	.word	0x08029b73
 8029b48:	08029b73 	.word	0x08029b73
 8029b4c:	08029b73 	.word	0x08029b73
 8029b50:	08029b6b 	.word	0x08029b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8029b54:	f7fe fb5a 	bl	802820c <HAL_RCC_GetPCLK1Freq>
 8029b58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029b5a:	e010      	b.n	8029b7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8029b5c:	4b9e      	ldr	r3, [pc, #632]	; (8029dd8 <UART_SetConfig+0x5c0>)
 8029b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029b60:	e00d      	b.n	8029b7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8029b62:	f7fe fabb 	bl	80280dc <HAL_RCC_GetSysClockFreq>
 8029b66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029b68:	e009      	b.n	8029b7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8029b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029b6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029b70:	e005      	b.n	8029b7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8029b72:	2300      	movs	r3, #0
 8029b74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8029b76:	2301      	movs	r3, #1
 8029b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8029b7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8029b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029b80:	2b00      	cmp	r3, #0
 8029b82:	f000 8130 	beq.w	8029de6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8029b86:	697b      	ldr	r3, [r7, #20]
 8029b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029b8a:	4a94      	ldr	r2, [pc, #592]	; (8029ddc <UART_SetConfig+0x5c4>)
 8029b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8029b90:	461a      	mov	r2, r3
 8029b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8029b98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8029b9a:	697b      	ldr	r3, [r7, #20]
 8029b9c:	685a      	ldr	r2, [r3, #4]
 8029b9e:	4613      	mov	r3, r2
 8029ba0:	005b      	lsls	r3, r3, #1
 8029ba2:	4413      	add	r3, r2
 8029ba4:	69ba      	ldr	r2, [r7, #24]
 8029ba6:	429a      	cmp	r2, r3
 8029ba8:	d305      	bcc.n	8029bb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8029baa:	697b      	ldr	r3, [r7, #20]
 8029bac:	685b      	ldr	r3, [r3, #4]
 8029bae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8029bb0:	69ba      	ldr	r2, [r7, #24]
 8029bb2:	429a      	cmp	r2, r3
 8029bb4:	d903      	bls.n	8029bbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8029bb6:	2301      	movs	r3, #1
 8029bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8029bbc:	e113      	b.n	8029de6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8029bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029bc0:	2200      	movs	r2, #0
 8029bc2:	60bb      	str	r3, [r7, #8]
 8029bc4:	60fa      	str	r2, [r7, #12]
 8029bc6:	697b      	ldr	r3, [r7, #20]
 8029bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029bca:	4a84      	ldr	r2, [pc, #528]	; (8029ddc <UART_SetConfig+0x5c4>)
 8029bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8029bd0:	b29b      	uxth	r3, r3
 8029bd2:	2200      	movs	r2, #0
 8029bd4:	603b      	str	r3, [r7, #0]
 8029bd6:	607a      	str	r2, [r7, #4]
 8029bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8029bdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8029be0:	f7f6 ff92 	bl	8020b08 <__aeabi_uldivmod>
 8029be4:	4602      	mov	r2, r0
 8029be6:	460b      	mov	r3, r1
 8029be8:	4610      	mov	r0, r2
 8029bea:	4619      	mov	r1, r3
 8029bec:	f04f 0200 	mov.w	r2, #0
 8029bf0:	f04f 0300 	mov.w	r3, #0
 8029bf4:	020b      	lsls	r3, r1, #8
 8029bf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8029bfa:	0202      	lsls	r2, r0, #8
 8029bfc:	6979      	ldr	r1, [r7, #20]
 8029bfe:	6849      	ldr	r1, [r1, #4]
 8029c00:	0849      	lsrs	r1, r1, #1
 8029c02:	2000      	movs	r0, #0
 8029c04:	460c      	mov	r4, r1
 8029c06:	4605      	mov	r5, r0
 8029c08:	eb12 0804 	adds.w	r8, r2, r4
 8029c0c:	eb43 0905 	adc.w	r9, r3, r5
 8029c10:	697b      	ldr	r3, [r7, #20]
 8029c12:	685b      	ldr	r3, [r3, #4]
 8029c14:	2200      	movs	r2, #0
 8029c16:	469a      	mov	sl, r3
 8029c18:	4693      	mov	fp, r2
 8029c1a:	4652      	mov	r2, sl
 8029c1c:	465b      	mov	r3, fp
 8029c1e:	4640      	mov	r0, r8
 8029c20:	4649      	mov	r1, r9
 8029c22:	f7f6 ff71 	bl	8020b08 <__aeabi_uldivmod>
 8029c26:	4602      	mov	r2, r0
 8029c28:	460b      	mov	r3, r1
 8029c2a:	4613      	mov	r3, r2
 8029c2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8029c2e:	6a3b      	ldr	r3, [r7, #32]
 8029c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8029c34:	d308      	bcc.n	8029c48 <UART_SetConfig+0x430>
 8029c36:	6a3b      	ldr	r3, [r7, #32]
 8029c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8029c3c:	d204      	bcs.n	8029c48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8029c3e:	697b      	ldr	r3, [r7, #20]
 8029c40:	681b      	ldr	r3, [r3, #0]
 8029c42:	6a3a      	ldr	r2, [r7, #32]
 8029c44:	60da      	str	r2, [r3, #12]
 8029c46:	e0ce      	b.n	8029de6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8029c48:	2301      	movs	r3, #1
 8029c4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8029c4e:	e0ca      	b.n	8029de6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8029c50:	697b      	ldr	r3, [r7, #20]
 8029c52:	69db      	ldr	r3, [r3, #28]
 8029c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029c58:	d166      	bne.n	8029d28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8029c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029c5e:	2b08      	cmp	r3, #8
 8029c60:	d827      	bhi.n	8029cb2 <UART_SetConfig+0x49a>
 8029c62:	a201      	add	r2, pc, #4	; (adr r2, 8029c68 <UART_SetConfig+0x450>)
 8029c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029c68:	08029c8d 	.word	0x08029c8d
 8029c6c:	08029c95 	.word	0x08029c95
 8029c70:	08029c9d 	.word	0x08029c9d
 8029c74:	08029cb3 	.word	0x08029cb3
 8029c78:	08029ca3 	.word	0x08029ca3
 8029c7c:	08029cb3 	.word	0x08029cb3
 8029c80:	08029cb3 	.word	0x08029cb3
 8029c84:	08029cb3 	.word	0x08029cb3
 8029c88:	08029cab 	.word	0x08029cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8029c8c:	f7fe fabe 	bl	802820c <HAL_RCC_GetPCLK1Freq>
 8029c90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029c92:	e014      	b.n	8029cbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8029c94:	f7fe fad0 	bl	8028238 <HAL_RCC_GetPCLK2Freq>
 8029c98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029c9a:	e010      	b.n	8029cbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8029c9c:	4b4e      	ldr	r3, [pc, #312]	; (8029dd8 <UART_SetConfig+0x5c0>)
 8029c9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029ca0:	e00d      	b.n	8029cbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8029ca2:	f7fe fa1b 	bl	80280dc <HAL_RCC_GetSysClockFreq>
 8029ca6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029ca8:	e009      	b.n	8029cbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8029caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029cae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029cb0:	e005      	b.n	8029cbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8029cb2:	2300      	movs	r3, #0
 8029cb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8029cb6:	2301      	movs	r3, #1
 8029cb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8029cbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8029cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029cc0:	2b00      	cmp	r3, #0
 8029cc2:	f000 8090 	beq.w	8029de6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8029cc6:	697b      	ldr	r3, [r7, #20]
 8029cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029cca:	4a44      	ldr	r2, [pc, #272]	; (8029ddc <UART_SetConfig+0x5c4>)
 8029ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8029cd0:	461a      	mov	r2, r3
 8029cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8029cd8:	005a      	lsls	r2, r3, #1
 8029cda:	697b      	ldr	r3, [r7, #20]
 8029cdc:	685b      	ldr	r3, [r3, #4]
 8029cde:	085b      	lsrs	r3, r3, #1
 8029ce0:	441a      	add	r2, r3
 8029ce2:	697b      	ldr	r3, [r7, #20]
 8029ce4:	685b      	ldr	r3, [r3, #4]
 8029ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8029cea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8029cec:	6a3b      	ldr	r3, [r7, #32]
 8029cee:	2b0f      	cmp	r3, #15
 8029cf0:	d916      	bls.n	8029d20 <UART_SetConfig+0x508>
 8029cf2:	6a3b      	ldr	r3, [r7, #32]
 8029cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029cf8:	d212      	bcs.n	8029d20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8029cfa:	6a3b      	ldr	r3, [r7, #32]
 8029cfc:	b29b      	uxth	r3, r3
 8029cfe:	f023 030f 	bic.w	r3, r3, #15
 8029d02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8029d04:	6a3b      	ldr	r3, [r7, #32]
 8029d06:	085b      	lsrs	r3, r3, #1
 8029d08:	b29b      	uxth	r3, r3
 8029d0a:	f003 0307 	and.w	r3, r3, #7
 8029d0e:	b29a      	uxth	r2, r3
 8029d10:	8bfb      	ldrh	r3, [r7, #30]
 8029d12:	4313      	orrs	r3, r2
 8029d14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8029d16:	697b      	ldr	r3, [r7, #20]
 8029d18:	681b      	ldr	r3, [r3, #0]
 8029d1a:	8bfa      	ldrh	r2, [r7, #30]
 8029d1c:	60da      	str	r2, [r3, #12]
 8029d1e:	e062      	b.n	8029de6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8029d20:	2301      	movs	r3, #1
 8029d22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8029d26:	e05e      	b.n	8029de6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8029d28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029d2c:	2b08      	cmp	r3, #8
 8029d2e:	d828      	bhi.n	8029d82 <UART_SetConfig+0x56a>
 8029d30:	a201      	add	r2, pc, #4	; (adr r2, 8029d38 <UART_SetConfig+0x520>)
 8029d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029d36:	bf00      	nop
 8029d38:	08029d5d 	.word	0x08029d5d
 8029d3c:	08029d65 	.word	0x08029d65
 8029d40:	08029d6d 	.word	0x08029d6d
 8029d44:	08029d83 	.word	0x08029d83
 8029d48:	08029d73 	.word	0x08029d73
 8029d4c:	08029d83 	.word	0x08029d83
 8029d50:	08029d83 	.word	0x08029d83
 8029d54:	08029d83 	.word	0x08029d83
 8029d58:	08029d7b 	.word	0x08029d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8029d5c:	f7fe fa56 	bl	802820c <HAL_RCC_GetPCLK1Freq>
 8029d60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029d62:	e014      	b.n	8029d8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8029d64:	f7fe fa68 	bl	8028238 <HAL_RCC_GetPCLK2Freq>
 8029d68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029d6a:	e010      	b.n	8029d8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8029d6c:	4b1a      	ldr	r3, [pc, #104]	; (8029dd8 <UART_SetConfig+0x5c0>)
 8029d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029d70:	e00d      	b.n	8029d8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8029d72:	f7fe f9b3 	bl	80280dc <HAL_RCC_GetSysClockFreq>
 8029d76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029d78:	e009      	b.n	8029d8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8029d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029d7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029d80:	e005      	b.n	8029d8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8029d82:	2300      	movs	r3, #0
 8029d84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8029d86:	2301      	movs	r3, #1
 8029d88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8029d8c:	bf00      	nop
    }

    if (pclk != 0U)
 8029d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029d90:	2b00      	cmp	r3, #0
 8029d92:	d028      	beq.n	8029de6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8029d94:	697b      	ldr	r3, [r7, #20]
 8029d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d98:	4a10      	ldr	r2, [pc, #64]	; (8029ddc <UART_SetConfig+0x5c4>)
 8029d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8029d9e:	461a      	mov	r2, r3
 8029da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029da2:	fbb3 f2f2 	udiv	r2, r3, r2
 8029da6:	697b      	ldr	r3, [r7, #20]
 8029da8:	685b      	ldr	r3, [r3, #4]
 8029daa:	085b      	lsrs	r3, r3, #1
 8029dac:	441a      	add	r2, r3
 8029dae:	697b      	ldr	r3, [r7, #20]
 8029db0:	685b      	ldr	r3, [r3, #4]
 8029db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8029db6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8029db8:	6a3b      	ldr	r3, [r7, #32]
 8029dba:	2b0f      	cmp	r3, #15
 8029dbc:	d910      	bls.n	8029de0 <UART_SetConfig+0x5c8>
 8029dbe:	6a3b      	ldr	r3, [r7, #32]
 8029dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029dc4:	d20c      	bcs.n	8029de0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8029dc6:	6a3b      	ldr	r3, [r7, #32]
 8029dc8:	b29a      	uxth	r2, r3
 8029dca:	697b      	ldr	r3, [r7, #20]
 8029dcc:	681b      	ldr	r3, [r3, #0]
 8029dce:	60da      	str	r2, [r3, #12]
 8029dd0:	e009      	b.n	8029de6 <UART_SetConfig+0x5ce>
 8029dd2:	bf00      	nop
 8029dd4:	40008000 	.word	0x40008000
 8029dd8:	00f42400 	.word	0x00f42400
 8029ddc:	08078028 	.word	0x08078028
      }
      else
      {
        ret = HAL_ERROR;
 8029de0:	2301      	movs	r3, #1
 8029de2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8029de6:	697b      	ldr	r3, [r7, #20]
 8029de8:	2201      	movs	r2, #1
 8029dea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8029dee:	697b      	ldr	r3, [r7, #20]
 8029df0:	2201      	movs	r2, #1
 8029df2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8029df6:	697b      	ldr	r3, [r7, #20]
 8029df8:	2200      	movs	r2, #0
 8029dfa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8029dfc:	697b      	ldr	r3, [r7, #20]
 8029dfe:	2200      	movs	r2, #0
 8029e00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8029e02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8029e06:	4618      	mov	r0, r3
 8029e08:	3730      	adds	r7, #48	; 0x30
 8029e0a:	46bd      	mov	sp, r7
 8029e0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08029e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8029e10:	b480      	push	{r7}
 8029e12:	b083      	sub	sp, #12
 8029e14:	af00      	add	r7, sp, #0
 8029e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8029e18:	687b      	ldr	r3, [r7, #4]
 8029e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e1c:	f003 0301 	and.w	r3, r3, #1
 8029e20:	2b00      	cmp	r3, #0
 8029e22:	d00a      	beq.n	8029e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8029e24:	687b      	ldr	r3, [r7, #4]
 8029e26:	681b      	ldr	r3, [r3, #0]
 8029e28:	685b      	ldr	r3, [r3, #4]
 8029e2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8029e2e:	687b      	ldr	r3, [r7, #4]
 8029e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029e32:	687b      	ldr	r3, [r7, #4]
 8029e34:	681b      	ldr	r3, [r3, #0]
 8029e36:	430a      	orrs	r2, r1
 8029e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8029e3a:	687b      	ldr	r3, [r7, #4]
 8029e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e3e:	f003 0302 	and.w	r3, r3, #2
 8029e42:	2b00      	cmp	r3, #0
 8029e44:	d00a      	beq.n	8029e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8029e46:	687b      	ldr	r3, [r7, #4]
 8029e48:	681b      	ldr	r3, [r3, #0]
 8029e4a:	685b      	ldr	r3, [r3, #4]
 8029e4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8029e50:	687b      	ldr	r3, [r7, #4]
 8029e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029e54:	687b      	ldr	r3, [r7, #4]
 8029e56:	681b      	ldr	r3, [r3, #0]
 8029e58:	430a      	orrs	r2, r1
 8029e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8029e5c:	687b      	ldr	r3, [r7, #4]
 8029e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e60:	f003 0304 	and.w	r3, r3, #4
 8029e64:	2b00      	cmp	r3, #0
 8029e66:	d00a      	beq.n	8029e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8029e68:	687b      	ldr	r3, [r7, #4]
 8029e6a:	681b      	ldr	r3, [r3, #0]
 8029e6c:	685b      	ldr	r3, [r3, #4]
 8029e6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8029e72:	687b      	ldr	r3, [r7, #4]
 8029e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8029e76:	687b      	ldr	r3, [r7, #4]
 8029e78:	681b      	ldr	r3, [r3, #0]
 8029e7a:	430a      	orrs	r2, r1
 8029e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8029e7e:	687b      	ldr	r3, [r7, #4]
 8029e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e82:	f003 0308 	and.w	r3, r3, #8
 8029e86:	2b00      	cmp	r3, #0
 8029e88:	d00a      	beq.n	8029ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8029e8a:	687b      	ldr	r3, [r7, #4]
 8029e8c:	681b      	ldr	r3, [r3, #0]
 8029e8e:	685b      	ldr	r3, [r3, #4]
 8029e90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8029e94:	687b      	ldr	r3, [r7, #4]
 8029e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8029e98:	687b      	ldr	r3, [r7, #4]
 8029e9a:	681b      	ldr	r3, [r3, #0]
 8029e9c:	430a      	orrs	r2, r1
 8029e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8029ea0:	687b      	ldr	r3, [r7, #4]
 8029ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029ea4:	f003 0310 	and.w	r3, r3, #16
 8029ea8:	2b00      	cmp	r3, #0
 8029eaa:	d00a      	beq.n	8029ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8029eac:	687b      	ldr	r3, [r7, #4]
 8029eae:	681b      	ldr	r3, [r3, #0]
 8029eb0:	689b      	ldr	r3, [r3, #8]
 8029eb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8029eb6:	687b      	ldr	r3, [r7, #4]
 8029eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8029eba:	687b      	ldr	r3, [r7, #4]
 8029ebc:	681b      	ldr	r3, [r3, #0]
 8029ebe:	430a      	orrs	r2, r1
 8029ec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8029ec2:	687b      	ldr	r3, [r7, #4]
 8029ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029ec6:	f003 0320 	and.w	r3, r3, #32
 8029eca:	2b00      	cmp	r3, #0
 8029ecc:	d00a      	beq.n	8029ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8029ece:	687b      	ldr	r3, [r7, #4]
 8029ed0:	681b      	ldr	r3, [r3, #0]
 8029ed2:	689b      	ldr	r3, [r3, #8]
 8029ed4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8029ed8:	687b      	ldr	r3, [r7, #4]
 8029eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8029edc:	687b      	ldr	r3, [r7, #4]
 8029ede:	681b      	ldr	r3, [r3, #0]
 8029ee0:	430a      	orrs	r2, r1
 8029ee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029eec:	2b00      	cmp	r3, #0
 8029eee:	d01a      	beq.n	8029f26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8029ef0:	687b      	ldr	r3, [r7, #4]
 8029ef2:	681b      	ldr	r3, [r3, #0]
 8029ef4:	685b      	ldr	r3, [r3, #4]
 8029ef6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8029efa:	687b      	ldr	r3, [r7, #4]
 8029efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029efe:	687b      	ldr	r3, [r7, #4]
 8029f00:	681b      	ldr	r3, [r3, #0]
 8029f02:	430a      	orrs	r2, r1
 8029f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8029f06:	687b      	ldr	r3, [r7, #4]
 8029f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8029f0e:	d10a      	bne.n	8029f26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8029f10:	687b      	ldr	r3, [r7, #4]
 8029f12:	681b      	ldr	r3, [r3, #0]
 8029f14:	685b      	ldr	r3, [r3, #4]
 8029f16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8029f1a:	687b      	ldr	r3, [r7, #4]
 8029f1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8029f1e:	687b      	ldr	r3, [r7, #4]
 8029f20:	681b      	ldr	r3, [r3, #0]
 8029f22:	430a      	orrs	r2, r1
 8029f24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8029f26:	687b      	ldr	r3, [r7, #4]
 8029f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029f2e:	2b00      	cmp	r3, #0
 8029f30:	d00a      	beq.n	8029f48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8029f32:	687b      	ldr	r3, [r7, #4]
 8029f34:	681b      	ldr	r3, [r3, #0]
 8029f36:	685b      	ldr	r3, [r3, #4]
 8029f38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8029f3c:	687b      	ldr	r3, [r7, #4]
 8029f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8029f40:	687b      	ldr	r3, [r7, #4]
 8029f42:	681b      	ldr	r3, [r3, #0]
 8029f44:	430a      	orrs	r2, r1
 8029f46:	605a      	str	r2, [r3, #4]
  }
}
 8029f48:	bf00      	nop
 8029f4a:	370c      	adds	r7, #12
 8029f4c:	46bd      	mov	sp, r7
 8029f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f52:	4770      	bx	lr

08029f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8029f54:	b580      	push	{r7, lr}
 8029f56:	b086      	sub	sp, #24
 8029f58:	af02      	add	r7, sp, #8
 8029f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029f5c:	687b      	ldr	r3, [r7, #4]
 8029f5e:	2200      	movs	r2, #0
 8029f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8029f64:	f7fa f9e2 	bl	802432c <HAL_GetTick>
 8029f68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8029f6a:	687b      	ldr	r3, [r7, #4]
 8029f6c:	681b      	ldr	r3, [r3, #0]
 8029f6e:	681b      	ldr	r3, [r3, #0]
 8029f70:	f003 0308 	and.w	r3, r3, #8
 8029f74:	2b08      	cmp	r3, #8
 8029f76:	d10e      	bne.n	8029f96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8029f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8029f7c:	9300      	str	r3, [sp, #0]
 8029f7e:	68fb      	ldr	r3, [r7, #12]
 8029f80:	2200      	movs	r2, #0
 8029f82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8029f86:	6878      	ldr	r0, [r7, #4]
 8029f88:	f000 f82f 	bl	8029fea <UART_WaitOnFlagUntilTimeout>
 8029f8c:	4603      	mov	r3, r0
 8029f8e:	2b00      	cmp	r3, #0
 8029f90:	d001      	beq.n	8029f96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8029f92:	2303      	movs	r3, #3
 8029f94:	e025      	b.n	8029fe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8029f96:	687b      	ldr	r3, [r7, #4]
 8029f98:	681b      	ldr	r3, [r3, #0]
 8029f9a:	681b      	ldr	r3, [r3, #0]
 8029f9c:	f003 0304 	and.w	r3, r3, #4
 8029fa0:	2b04      	cmp	r3, #4
 8029fa2:	d10e      	bne.n	8029fc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8029fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8029fa8:	9300      	str	r3, [sp, #0]
 8029faa:	68fb      	ldr	r3, [r7, #12]
 8029fac:	2200      	movs	r2, #0
 8029fae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8029fb2:	6878      	ldr	r0, [r7, #4]
 8029fb4:	f000 f819 	bl	8029fea <UART_WaitOnFlagUntilTimeout>
 8029fb8:	4603      	mov	r3, r0
 8029fba:	2b00      	cmp	r3, #0
 8029fbc:	d001      	beq.n	8029fc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8029fbe:	2303      	movs	r3, #3
 8029fc0:	e00f      	b.n	8029fe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8029fc2:	687b      	ldr	r3, [r7, #4]
 8029fc4:	2220      	movs	r2, #32
 8029fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8029fca:	687b      	ldr	r3, [r7, #4]
 8029fcc:	2220      	movs	r2, #32
 8029fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029fd2:	687b      	ldr	r3, [r7, #4]
 8029fd4:	2200      	movs	r2, #0
 8029fd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8029fd8:	687b      	ldr	r3, [r7, #4]
 8029fda:	2200      	movs	r2, #0
 8029fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8029fe0:	2300      	movs	r3, #0
}
 8029fe2:	4618      	mov	r0, r3
 8029fe4:	3710      	adds	r7, #16
 8029fe6:	46bd      	mov	sp, r7
 8029fe8:	bd80      	pop	{r7, pc}

08029fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8029fea:	b580      	push	{r7, lr}
 8029fec:	b09c      	sub	sp, #112	; 0x70
 8029fee:	af00      	add	r7, sp, #0
 8029ff0:	60f8      	str	r0, [r7, #12]
 8029ff2:	60b9      	str	r1, [r7, #8]
 8029ff4:	603b      	str	r3, [r7, #0]
 8029ff6:	4613      	mov	r3, r2
 8029ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029ffa:	e0a9      	b.n	802a150 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a002:	f000 80a5 	beq.w	802a150 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802a006:	f7fa f991 	bl	802432c <HAL_GetTick>
 802a00a:	4602      	mov	r2, r0
 802a00c:	683b      	ldr	r3, [r7, #0]
 802a00e:	1ad3      	subs	r3, r2, r3
 802a010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802a012:	429a      	cmp	r2, r3
 802a014:	d302      	bcc.n	802a01c <UART_WaitOnFlagUntilTimeout+0x32>
 802a016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802a018:	2b00      	cmp	r3, #0
 802a01a:	d140      	bne.n	802a09e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802a01c:	68fb      	ldr	r3, [r7, #12]
 802a01e:	681b      	ldr	r3, [r3, #0]
 802a020:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802a024:	e853 3f00 	ldrex	r3, [r3]
 802a028:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802a02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a02c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802a030:	667b      	str	r3, [r7, #100]	; 0x64
 802a032:	68fb      	ldr	r3, [r7, #12]
 802a034:	681b      	ldr	r3, [r3, #0]
 802a036:	461a      	mov	r2, r3
 802a038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802a03a:	65fb      	str	r3, [r7, #92]	; 0x5c
 802a03c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a03e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802a040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802a042:	e841 2300 	strex	r3, r2, [r1]
 802a046:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 802a048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802a04a:	2b00      	cmp	r3, #0
 802a04c:	d1e6      	bne.n	802a01c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802a04e:	68fb      	ldr	r3, [r7, #12]
 802a050:	681b      	ldr	r3, [r3, #0]
 802a052:	3308      	adds	r3, #8
 802a054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a058:	e853 3f00 	ldrex	r3, [r3]
 802a05c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a060:	f023 0301 	bic.w	r3, r3, #1
 802a064:	663b      	str	r3, [r7, #96]	; 0x60
 802a066:	68fb      	ldr	r3, [r7, #12]
 802a068:	681b      	ldr	r3, [r3, #0]
 802a06a:	3308      	adds	r3, #8
 802a06c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802a06e:	64ba      	str	r2, [r7, #72]	; 0x48
 802a070:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802a074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802a076:	e841 2300 	strex	r3, r2, [r1]
 802a07a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 802a07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a07e:	2b00      	cmp	r3, #0
 802a080:	d1e5      	bne.n	802a04e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 802a082:	68fb      	ldr	r3, [r7, #12]
 802a084:	2220      	movs	r2, #32
 802a086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 802a08a:	68fb      	ldr	r3, [r7, #12]
 802a08c:	2220      	movs	r2, #32
 802a08e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 802a092:	68fb      	ldr	r3, [r7, #12]
 802a094:	2200      	movs	r2, #0
 802a096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 802a09a:	2303      	movs	r3, #3
 802a09c:	e069      	b.n	802a172 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 802a09e:	68fb      	ldr	r3, [r7, #12]
 802a0a0:	681b      	ldr	r3, [r3, #0]
 802a0a2:	681b      	ldr	r3, [r3, #0]
 802a0a4:	f003 0304 	and.w	r3, r3, #4
 802a0a8:	2b00      	cmp	r3, #0
 802a0aa:	d051      	beq.n	802a150 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802a0ac:	68fb      	ldr	r3, [r7, #12]
 802a0ae:	681b      	ldr	r3, [r3, #0]
 802a0b0:	69db      	ldr	r3, [r3, #28]
 802a0b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802a0b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802a0ba:	d149      	bne.n	802a150 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802a0bc:	68fb      	ldr	r3, [r7, #12]
 802a0be:	681b      	ldr	r3, [r3, #0]
 802a0c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802a0c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802a0c6:	68fb      	ldr	r3, [r7, #12]
 802a0c8:	681b      	ldr	r3, [r3, #0]
 802a0ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a0ce:	e853 3f00 	ldrex	r3, [r3]
 802a0d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802a0da:	66fb      	str	r3, [r7, #108]	; 0x6c
 802a0dc:	68fb      	ldr	r3, [r7, #12]
 802a0de:	681b      	ldr	r3, [r3, #0]
 802a0e0:	461a      	mov	r2, r3
 802a0e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802a0e4:	637b      	str	r3, [r7, #52]	; 0x34
 802a0e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a0e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802a0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802a0ec:	e841 2300 	strex	r3, r2, [r1]
 802a0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a0f4:	2b00      	cmp	r3, #0
 802a0f6:	d1e6      	bne.n	802a0c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802a0f8:	68fb      	ldr	r3, [r7, #12]
 802a0fa:	681b      	ldr	r3, [r3, #0]
 802a0fc:	3308      	adds	r3, #8
 802a0fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a100:	697b      	ldr	r3, [r7, #20]
 802a102:	e853 3f00 	ldrex	r3, [r3]
 802a106:	613b      	str	r3, [r7, #16]
   return(result);
 802a108:	693b      	ldr	r3, [r7, #16]
 802a10a:	f023 0301 	bic.w	r3, r3, #1
 802a10e:	66bb      	str	r3, [r7, #104]	; 0x68
 802a110:	68fb      	ldr	r3, [r7, #12]
 802a112:	681b      	ldr	r3, [r3, #0]
 802a114:	3308      	adds	r3, #8
 802a116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802a118:	623a      	str	r2, [r7, #32]
 802a11a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a11c:	69f9      	ldr	r1, [r7, #28]
 802a11e:	6a3a      	ldr	r2, [r7, #32]
 802a120:	e841 2300 	strex	r3, r2, [r1]
 802a124:	61bb      	str	r3, [r7, #24]
   return(result);
 802a126:	69bb      	ldr	r3, [r7, #24]
 802a128:	2b00      	cmp	r3, #0
 802a12a:	d1e5      	bne.n	802a0f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 802a12c:	68fb      	ldr	r3, [r7, #12]
 802a12e:	2220      	movs	r2, #32
 802a130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 802a134:	68fb      	ldr	r3, [r7, #12]
 802a136:	2220      	movs	r2, #32
 802a138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802a13c:	68fb      	ldr	r3, [r7, #12]
 802a13e:	2220      	movs	r2, #32
 802a140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802a144:	68fb      	ldr	r3, [r7, #12]
 802a146:	2200      	movs	r2, #0
 802a148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 802a14c:	2303      	movs	r3, #3
 802a14e:	e010      	b.n	802a172 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802a150:	68fb      	ldr	r3, [r7, #12]
 802a152:	681b      	ldr	r3, [r3, #0]
 802a154:	69da      	ldr	r2, [r3, #28]
 802a156:	68bb      	ldr	r3, [r7, #8]
 802a158:	4013      	ands	r3, r2
 802a15a:	68ba      	ldr	r2, [r7, #8]
 802a15c:	429a      	cmp	r2, r3
 802a15e:	bf0c      	ite	eq
 802a160:	2301      	moveq	r3, #1
 802a162:	2300      	movne	r3, #0
 802a164:	b2db      	uxtb	r3, r3
 802a166:	461a      	mov	r2, r3
 802a168:	79fb      	ldrb	r3, [r7, #7]
 802a16a:	429a      	cmp	r2, r3
 802a16c:	f43f af46 	beq.w	8029ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802a170:	2300      	movs	r3, #0
}
 802a172:	4618      	mov	r0, r3
 802a174:	3770      	adds	r7, #112	; 0x70
 802a176:	46bd      	mov	sp, r7
 802a178:	bd80      	pop	{r7, pc}

0802a17a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802a17a:	b480      	push	{r7}
 802a17c:	b085      	sub	sp, #20
 802a17e:	af00      	add	r7, sp, #0
 802a180:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802a182:	687b      	ldr	r3, [r7, #4]
 802a184:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802a188:	2b01      	cmp	r3, #1
 802a18a:	d101      	bne.n	802a190 <HAL_UARTEx_DisableFifoMode+0x16>
 802a18c:	2302      	movs	r3, #2
 802a18e:	e027      	b.n	802a1e0 <HAL_UARTEx_DisableFifoMode+0x66>
 802a190:	687b      	ldr	r3, [r7, #4]
 802a192:	2201      	movs	r2, #1
 802a194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802a198:	687b      	ldr	r3, [r7, #4]
 802a19a:	2224      	movs	r2, #36	; 0x24
 802a19c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802a1a0:	687b      	ldr	r3, [r7, #4]
 802a1a2:	681b      	ldr	r3, [r3, #0]
 802a1a4:	681b      	ldr	r3, [r3, #0]
 802a1a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802a1a8:	687b      	ldr	r3, [r7, #4]
 802a1aa:	681b      	ldr	r3, [r3, #0]
 802a1ac:	681a      	ldr	r2, [r3, #0]
 802a1ae:	687b      	ldr	r3, [r7, #4]
 802a1b0:	681b      	ldr	r3, [r3, #0]
 802a1b2:	f022 0201 	bic.w	r2, r2, #1
 802a1b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802a1b8:	68fb      	ldr	r3, [r7, #12]
 802a1ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802a1be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802a1c0:	687b      	ldr	r3, [r7, #4]
 802a1c2:	2200      	movs	r2, #0
 802a1c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802a1c6:	687b      	ldr	r3, [r7, #4]
 802a1c8:	681b      	ldr	r3, [r3, #0]
 802a1ca:	68fa      	ldr	r2, [r7, #12]
 802a1cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802a1ce:	687b      	ldr	r3, [r7, #4]
 802a1d0:	2220      	movs	r2, #32
 802a1d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802a1d6:	687b      	ldr	r3, [r7, #4]
 802a1d8:	2200      	movs	r2, #0
 802a1da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802a1de:	2300      	movs	r3, #0
}
 802a1e0:	4618      	mov	r0, r3
 802a1e2:	3714      	adds	r7, #20
 802a1e4:	46bd      	mov	sp, r7
 802a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1ea:	4770      	bx	lr

0802a1ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802a1ec:	b580      	push	{r7, lr}
 802a1ee:	b084      	sub	sp, #16
 802a1f0:	af00      	add	r7, sp, #0
 802a1f2:	6078      	str	r0, [r7, #4]
 802a1f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802a1f6:	687b      	ldr	r3, [r7, #4]
 802a1f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802a1fc:	2b01      	cmp	r3, #1
 802a1fe:	d101      	bne.n	802a204 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802a200:	2302      	movs	r3, #2
 802a202:	e02d      	b.n	802a260 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802a204:	687b      	ldr	r3, [r7, #4]
 802a206:	2201      	movs	r2, #1
 802a208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802a20c:	687b      	ldr	r3, [r7, #4]
 802a20e:	2224      	movs	r2, #36	; 0x24
 802a210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802a214:	687b      	ldr	r3, [r7, #4]
 802a216:	681b      	ldr	r3, [r3, #0]
 802a218:	681b      	ldr	r3, [r3, #0]
 802a21a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802a21c:	687b      	ldr	r3, [r7, #4]
 802a21e:	681b      	ldr	r3, [r3, #0]
 802a220:	681a      	ldr	r2, [r3, #0]
 802a222:	687b      	ldr	r3, [r7, #4]
 802a224:	681b      	ldr	r3, [r3, #0]
 802a226:	f022 0201 	bic.w	r2, r2, #1
 802a22a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802a22c:	687b      	ldr	r3, [r7, #4]
 802a22e:	681b      	ldr	r3, [r3, #0]
 802a230:	689b      	ldr	r3, [r3, #8]
 802a232:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 802a236:	687b      	ldr	r3, [r7, #4]
 802a238:	681b      	ldr	r3, [r3, #0]
 802a23a:	683a      	ldr	r2, [r7, #0]
 802a23c:	430a      	orrs	r2, r1
 802a23e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802a240:	6878      	ldr	r0, [r7, #4]
 802a242:	f000 f84f 	bl	802a2e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802a246:	687b      	ldr	r3, [r7, #4]
 802a248:	681b      	ldr	r3, [r3, #0]
 802a24a:	68fa      	ldr	r2, [r7, #12]
 802a24c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802a24e:	687b      	ldr	r3, [r7, #4]
 802a250:	2220      	movs	r2, #32
 802a252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802a256:	687b      	ldr	r3, [r7, #4]
 802a258:	2200      	movs	r2, #0
 802a25a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802a25e:	2300      	movs	r3, #0
}
 802a260:	4618      	mov	r0, r3
 802a262:	3710      	adds	r7, #16
 802a264:	46bd      	mov	sp, r7
 802a266:	bd80      	pop	{r7, pc}

0802a268 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802a268:	b580      	push	{r7, lr}
 802a26a:	b084      	sub	sp, #16
 802a26c:	af00      	add	r7, sp, #0
 802a26e:	6078      	str	r0, [r7, #4]
 802a270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802a272:	687b      	ldr	r3, [r7, #4]
 802a274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802a278:	2b01      	cmp	r3, #1
 802a27a:	d101      	bne.n	802a280 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802a27c:	2302      	movs	r3, #2
 802a27e:	e02d      	b.n	802a2dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802a280:	687b      	ldr	r3, [r7, #4]
 802a282:	2201      	movs	r2, #1
 802a284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802a288:	687b      	ldr	r3, [r7, #4]
 802a28a:	2224      	movs	r2, #36	; 0x24
 802a28c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802a290:	687b      	ldr	r3, [r7, #4]
 802a292:	681b      	ldr	r3, [r3, #0]
 802a294:	681b      	ldr	r3, [r3, #0]
 802a296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802a298:	687b      	ldr	r3, [r7, #4]
 802a29a:	681b      	ldr	r3, [r3, #0]
 802a29c:	681a      	ldr	r2, [r3, #0]
 802a29e:	687b      	ldr	r3, [r7, #4]
 802a2a0:	681b      	ldr	r3, [r3, #0]
 802a2a2:	f022 0201 	bic.w	r2, r2, #1
 802a2a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802a2a8:	687b      	ldr	r3, [r7, #4]
 802a2aa:	681b      	ldr	r3, [r3, #0]
 802a2ac:	689b      	ldr	r3, [r3, #8]
 802a2ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 802a2b2:	687b      	ldr	r3, [r7, #4]
 802a2b4:	681b      	ldr	r3, [r3, #0]
 802a2b6:	683a      	ldr	r2, [r7, #0]
 802a2b8:	430a      	orrs	r2, r1
 802a2ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802a2bc:	6878      	ldr	r0, [r7, #4]
 802a2be:	f000 f811 	bl	802a2e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802a2c2:	687b      	ldr	r3, [r7, #4]
 802a2c4:	681b      	ldr	r3, [r3, #0]
 802a2c6:	68fa      	ldr	r2, [r7, #12]
 802a2c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802a2ca:	687b      	ldr	r3, [r7, #4]
 802a2cc:	2220      	movs	r2, #32
 802a2ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802a2d2:	687b      	ldr	r3, [r7, #4]
 802a2d4:	2200      	movs	r2, #0
 802a2d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802a2da:	2300      	movs	r3, #0
}
 802a2dc:	4618      	mov	r0, r3
 802a2de:	3710      	adds	r7, #16
 802a2e0:	46bd      	mov	sp, r7
 802a2e2:	bd80      	pop	{r7, pc}

0802a2e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802a2e4:	b480      	push	{r7}
 802a2e6:	b085      	sub	sp, #20
 802a2e8:	af00      	add	r7, sp, #0
 802a2ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 802a2ec:	687b      	ldr	r3, [r7, #4]
 802a2ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802a2f0:	2b00      	cmp	r3, #0
 802a2f2:	d108      	bne.n	802a306 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802a2f4:	687b      	ldr	r3, [r7, #4]
 802a2f6:	2201      	movs	r2, #1
 802a2f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 802a2fc:	687b      	ldr	r3, [r7, #4]
 802a2fe:	2201      	movs	r2, #1
 802a300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802a304:	e031      	b.n	802a36a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802a306:	2308      	movs	r3, #8
 802a308:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802a30a:	2308      	movs	r3, #8
 802a30c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802a30e:	687b      	ldr	r3, [r7, #4]
 802a310:	681b      	ldr	r3, [r3, #0]
 802a312:	689b      	ldr	r3, [r3, #8]
 802a314:	0e5b      	lsrs	r3, r3, #25
 802a316:	b2db      	uxtb	r3, r3
 802a318:	f003 0307 	and.w	r3, r3, #7
 802a31c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802a31e:	687b      	ldr	r3, [r7, #4]
 802a320:	681b      	ldr	r3, [r3, #0]
 802a322:	689b      	ldr	r3, [r3, #8]
 802a324:	0f5b      	lsrs	r3, r3, #29
 802a326:	b2db      	uxtb	r3, r3
 802a328:	f003 0307 	and.w	r3, r3, #7
 802a32c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802a32e:	7bbb      	ldrb	r3, [r7, #14]
 802a330:	7b3a      	ldrb	r2, [r7, #12]
 802a332:	4911      	ldr	r1, [pc, #68]	; (802a378 <UARTEx_SetNbDataToProcess+0x94>)
 802a334:	5c8a      	ldrb	r2, [r1, r2]
 802a336:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802a33a:	7b3a      	ldrb	r2, [r7, #12]
 802a33c:	490f      	ldr	r1, [pc, #60]	; (802a37c <UARTEx_SetNbDataToProcess+0x98>)
 802a33e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802a340:	fb93 f3f2 	sdiv	r3, r3, r2
 802a344:	b29a      	uxth	r2, r3
 802a346:	687b      	ldr	r3, [r7, #4]
 802a348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802a34c:	7bfb      	ldrb	r3, [r7, #15]
 802a34e:	7b7a      	ldrb	r2, [r7, #13]
 802a350:	4909      	ldr	r1, [pc, #36]	; (802a378 <UARTEx_SetNbDataToProcess+0x94>)
 802a352:	5c8a      	ldrb	r2, [r1, r2]
 802a354:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802a358:	7b7a      	ldrb	r2, [r7, #13]
 802a35a:	4908      	ldr	r1, [pc, #32]	; (802a37c <UARTEx_SetNbDataToProcess+0x98>)
 802a35c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802a35e:	fb93 f3f2 	sdiv	r3, r3, r2
 802a362:	b29a      	uxth	r2, r3
 802a364:	687b      	ldr	r3, [r7, #4]
 802a366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 802a36a:	bf00      	nop
 802a36c:	3714      	adds	r7, #20
 802a36e:	46bd      	mov	sp, r7
 802a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a374:	4770      	bx	lr
 802a376:	bf00      	nop
 802a378:	08078040 	.word	0x08078040
 802a37c:	08078048 	.word	0x08078048

0802a380 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 802a380:	b480      	push	{r7}
 802a382:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 802a384:	bf00      	nop
 802a386:	46bd      	mov	sp, r7
 802a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a38c:	4770      	bx	lr
	...

0802a390 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 802a390:	b580      	push	{r7, lr}
 802a392:	b086      	sub	sp, #24
 802a394:	af04      	add	r7, sp, #16
 802a396:	4603      	mov	r3, r0
 802a398:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 802a39a:	f04f 33ff 	mov.w	r3, #4294967295
 802a39e:	9302      	str	r3, [sp, #8]
 802a3a0:	2301      	movs	r3, #1
 802a3a2:	9301      	str	r3, [sp, #4]
 802a3a4:	1dfb      	adds	r3, r7, #7
 802a3a6:	9300      	str	r3, [sp, #0]
 802a3a8:	2301      	movs	r3, #1
 802a3aa:	2200      	movs	r2, #0
 802a3ac:	2178      	movs	r1, #120	; 0x78
 802a3ae:	4803      	ldr	r0, [pc, #12]	; (802a3bc <ssd1306_WriteCommand+0x2c>)
 802a3b0:	f7fb fa94 	bl	80258dc <HAL_I2C_Mem_Write>
}
 802a3b4:	bf00      	nop
 802a3b6:	3708      	adds	r7, #8
 802a3b8:	46bd      	mov	sp, r7
 802a3ba:	bd80      	pop	{r7, pc}
 802a3bc:	2000054c 	.word	0x2000054c

0802a3c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 802a3c0:	b580      	push	{r7, lr}
 802a3c2:	b086      	sub	sp, #24
 802a3c4:	af04      	add	r7, sp, #16
 802a3c6:	6078      	str	r0, [r7, #4]
 802a3c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 802a3ca:	683b      	ldr	r3, [r7, #0]
 802a3cc:	b29b      	uxth	r3, r3
 802a3ce:	f04f 32ff 	mov.w	r2, #4294967295
 802a3d2:	9202      	str	r2, [sp, #8]
 802a3d4:	9301      	str	r3, [sp, #4]
 802a3d6:	687b      	ldr	r3, [r7, #4]
 802a3d8:	9300      	str	r3, [sp, #0]
 802a3da:	2301      	movs	r3, #1
 802a3dc:	2240      	movs	r2, #64	; 0x40
 802a3de:	2178      	movs	r1, #120	; 0x78
 802a3e0:	4803      	ldr	r0, [pc, #12]	; (802a3f0 <ssd1306_WriteData+0x30>)
 802a3e2:	f7fb fa7b 	bl	80258dc <HAL_I2C_Mem_Write>
}
 802a3e6:	bf00      	nop
 802a3e8:	3708      	adds	r7, #8
 802a3ea:	46bd      	mov	sp, r7
 802a3ec:	bd80      	pop	{r7, pc}
 802a3ee:	bf00      	nop
 802a3f0:	2000054c 	.word	0x2000054c

0802a3f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 802a3f4:	b580      	push	{r7, lr}
 802a3f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 802a3f8:	f7ff ffc2 	bl	802a380 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 802a3fc:	2064      	movs	r0, #100	; 0x64
 802a3fe:	f7f9 ffa1 	bl	8024344 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 802a402:	2000      	movs	r0, #0
 802a404:	f000 fa60 	bl	802a8c8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 802a408:	2020      	movs	r0, #32
 802a40a:	f7ff ffc1 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 802a40e:	2000      	movs	r0, #0
 802a410:	f7ff ffbe 	bl	802a390 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 802a414:	20b0      	movs	r0, #176	; 0xb0
 802a416:	f7ff ffbb 	bl	802a390 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 802a41a:	20c8      	movs	r0, #200	; 0xc8
 802a41c:	f7ff ffb8 	bl	802a390 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 802a420:	2000      	movs	r0, #0
 802a422:	f7ff ffb5 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 802a426:	2010      	movs	r0, #16
 802a428:	f7ff ffb2 	bl	802a390 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 802a42c:	2040      	movs	r0, #64	; 0x40
 802a42e:	f7ff ffaf 	bl	802a390 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 802a432:	20ff      	movs	r0, #255	; 0xff
 802a434:	f000 fa35 	bl	802a8a2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 802a438:	20a1      	movs	r0, #161	; 0xa1
 802a43a:	f7ff ffa9 	bl	802a390 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 802a43e:	20a6      	movs	r0, #166	; 0xa6
 802a440:	f7ff ffa6 	bl	802a390 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 802a444:	20a8      	movs	r0, #168	; 0xa8
 802a446:	f7ff ffa3 	bl	802a390 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 802a44a:	203f      	movs	r0, #63	; 0x3f
 802a44c:	f7ff ffa0 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 802a450:	20a4      	movs	r0, #164	; 0xa4
 802a452:	f7ff ff9d 	bl	802a390 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 802a456:	20d3      	movs	r0, #211	; 0xd3
 802a458:	f7ff ff9a 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 802a45c:	2000      	movs	r0, #0
 802a45e:	f7ff ff97 	bl	802a390 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 802a462:	20d5      	movs	r0, #213	; 0xd5
 802a464:	f7ff ff94 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 802a468:	20f0      	movs	r0, #240	; 0xf0
 802a46a:	f7ff ff91 	bl	802a390 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 802a46e:	20d9      	movs	r0, #217	; 0xd9
 802a470:	f7ff ff8e 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 802a474:	2022      	movs	r0, #34	; 0x22
 802a476:	f7ff ff8b 	bl	802a390 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 802a47a:	20da      	movs	r0, #218	; 0xda
 802a47c:	f7ff ff88 	bl	802a390 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 802a480:	2012      	movs	r0, #18
 802a482:	f7ff ff85 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 802a486:	20db      	movs	r0, #219	; 0xdb
 802a488:	f7ff ff82 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 802a48c:	2020      	movs	r0, #32
 802a48e:	f7ff ff7f 	bl	802a390 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 802a492:	208d      	movs	r0, #141	; 0x8d
 802a494:	f7ff ff7c 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 802a498:	2014      	movs	r0, #20
 802a49a:	f7ff ff79 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 802a49e:	2001      	movs	r0, #1
 802a4a0:	f000 fa12 	bl	802a8c8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 802a4a4:	2000      	movs	r0, #0
 802a4a6:	f000 f80f 	bl	802a4c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 802a4aa:	f000 f831 	bl	802a510 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 802a4ae:	4b05      	ldr	r3, [pc, #20]	; (802a4c4 <ssd1306_Init+0xd0>)
 802a4b0:	2200      	movs	r2, #0
 802a4b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 802a4b4:	4b03      	ldr	r3, [pc, #12]	; (802a4c4 <ssd1306_Init+0xd0>)
 802a4b6:	2200      	movs	r2, #0
 802a4b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 802a4ba:	4b02      	ldr	r3, [pc, #8]	; (802a4c4 <ssd1306_Init+0xd0>)
 802a4bc:	2201      	movs	r2, #1
 802a4be:	711a      	strb	r2, [r3, #4]
}
 802a4c0:	bf00      	nop
 802a4c2:	bd80      	pop	{r7, pc}
 802a4c4:	20002d0c 	.word	0x20002d0c

0802a4c8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 802a4c8:	b480      	push	{r7}
 802a4ca:	b085      	sub	sp, #20
 802a4cc:	af00      	add	r7, sp, #0
 802a4ce:	4603      	mov	r3, r0
 802a4d0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 802a4d2:	2300      	movs	r3, #0
 802a4d4:	60fb      	str	r3, [r7, #12]
 802a4d6:	e00d      	b.n	802a4f4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 802a4d8:	79fb      	ldrb	r3, [r7, #7]
 802a4da:	2b00      	cmp	r3, #0
 802a4dc:	d101      	bne.n	802a4e2 <ssd1306_Fill+0x1a>
 802a4de:	2100      	movs	r1, #0
 802a4e0:	e000      	b.n	802a4e4 <ssd1306_Fill+0x1c>
 802a4e2:	21ff      	movs	r1, #255	; 0xff
 802a4e4:	4a09      	ldr	r2, [pc, #36]	; (802a50c <ssd1306_Fill+0x44>)
 802a4e6:	68fb      	ldr	r3, [r7, #12]
 802a4e8:	4413      	add	r3, r2
 802a4ea:	460a      	mov	r2, r1
 802a4ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 802a4ee:	68fb      	ldr	r3, [r7, #12]
 802a4f0:	3301      	adds	r3, #1
 802a4f2:	60fb      	str	r3, [r7, #12]
 802a4f4:	68fb      	ldr	r3, [r7, #12]
 802a4f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802a4fa:	d3ed      	bcc.n	802a4d8 <ssd1306_Fill+0x10>
    }
}
 802a4fc:	bf00      	nop
 802a4fe:	bf00      	nop
 802a500:	3714      	adds	r7, #20
 802a502:	46bd      	mov	sp, r7
 802a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a508:	4770      	bx	lr
 802a50a:	bf00      	nop
 802a50c:	2000290c 	.word	0x2000290c

0802a510 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 802a510:	b580      	push	{r7, lr}
 802a512:	b082      	sub	sp, #8
 802a514:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 802a516:	2300      	movs	r3, #0
 802a518:	71fb      	strb	r3, [r7, #7]
 802a51a:	e016      	b.n	802a54a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 802a51c:	79fb      	ldrb	r3, [r7, #7]
 802a51e:	3b50      	subs	r3, #80	; 0x50
 802a520:	b2db      	uxtb	r3, r3
 802a522:	4618      	mov	r0, r3
 802a524:	f7ff ff34 	bl	802a390 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 802a528:	2000      	movs	r0, #0
 802a52a:	f7ff ff31 	bl	802a390 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 802a52e:	2010      	movs	r0, #16
 802a530:	f7ff ff2e 	bl	802a390 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 802a534:	79fb      	ldrb	r3, [r7, #7]
 802a536:	01db      	lsls	r3, r3, #7
 802a538:	4a08      	ldr	r2, [pc, #32]	; (802a55c <ssd1306_UpdateScreen+0x4c>)
 802a53a:	4413      	add	r3, r2
 802a53c:	2180      	movs	r1, #128	; 0x80
 802a53e:	4618      	mov	r0, r3
 802a540:	f7ff ff3e 	bl	802a3c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 802a544:	79fb      	ldrb	r3, [r7, #7]
 802a546:	3301      	adds	r3, #1
 802a548:	71fb      	strb	r3, [r7, #7]
 802a54a:	79fb      	ldrb	r3, [r7, #7]
 802a54c:	2b07      	cmp	r3, #7
 802a54e:	d9e5      	bls.n	802a51c <ssd1306_UpdateScreen+0xc>
    }
}
 802a550:	bf00      	nop
 802a552:	bf00      	nop
 802a554:	3708      	adds	r7, #8
 802a556:	46bd      	mov	sp, r7
 802a558:	bd80      	pop	{r7, pc}
 802a55a:	bf00      	nop
 802a55c:	2000290c 	.word	0x2000290c

0802a560 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 802a560:	b480      	push	{r7}
 802a562:	b083      	sub	sp, #12
 802a564:	af00      	add	r7, sp, #0
 802a566:	4603      	mov	r3, r0
 802a568:	71fb      	strb	r3, [r7, #7]
 802a56a:	460b      	mov	r3, r1
 802a56c:	71bb      	strb	r3, [r7, #6]
 802a56e:	4613      	mov	r3, r2
 802a570:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 802a572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a576:	2b00      	cmp	r3, #0
 802a578:	db3d      	blt.n	802a5f6 <ssd1306_DrawPixel+0x96>
 802a57a:	79bb      	ldrb	r3, [r7, #6]
 802a57c:	2b3f      	cmp	r3, #63	; 0x3f
 802a57e:	d83a      	bhi.n	802a5f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 802a580:	797b      	ldrb	r3, [r7, #5]
 802a582:	2b01      	cmp	r3, #1
 802a584:	d11a      	bne.n	802a5bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 802a586:	79fa      	ldrb	r2, [r7, #7]
 802a588:	79bb      	ldrb	r3, [r7, #6]
 802a58a:	08db      	lsrs	r3, r3, #3
 802a58c:	b2d8      	uxtb	r0, r3
 802a58e:	4603      	mov	r3, r0
 802a590:	01db      	lsls	r3, r3, #7
 802a592:	4413      	add	r3, r2
 802a594:	4a1b      	ldr	r2, [pc, #108]	; (802a604 <ssd1306_DrawPixel+0xa4>)
 802a596:	5cd3      	ldrb	r3, [r2, r3]
 802a598:	b25a      	sxtb	r2, r3
 802a59a:	79bb      	ldrb	r3, [r7, #6]
 802a59c:	f003 0307 	and.w	r3, r3, #7
 802a5a0:	2101      	movs	r1, #1
 802a5a2:	fa01 f303 	lsl.w	r3, r1, r3
 802a5a6:	b25b      	sxtb	r3, r3
 802a5a8:	4313      	orrs	r3, r2
 802a5aa:	b259      	sxtb	r1, r3
 802a5ac:	79fa      	ldrb	r2, [r7, #7]
 802a5ae:	4603      	mov	r3, r0
 802a5b0:	01db      	lsls	r3, r3, #7
 802a5b2:	4413      	add	r3, r2
 802a5b4:	b2c9      	uxtb	r1, r1
 802a5b6:	4a13      	ldr	r2, [pc, #76]	; (802a604 <ssd1306_DrawPixel+0xa4>)
 802a5b8:	54d1      	strb	r1, [r2, r3]
 802a5ba:	e01d      	b.n	802a5f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 802a5bc:	79fa      	ldrb	r2, [r7, #7]
 802a5be:	79bb      	ldrb	r3, [r7, #6]
 802a5c0:	08db      	lsrs	r3, r3, #3
 802a5c2:	b2d8      	uxtb	r0, r3
 802a5c4:	4603      	mov	r3, r0
 802a5c6:	01db      	lsls	r3, r3, #7
 802a5c8:	4413      	add	r3, r2
 802a5ca:	4a0e      	ldr	r2, [pc, #56]	; (802a604 <ssd1306_DrawPixel+0xa4>)
 802a5cc:	5cd3      	ldrb	r3, [r2, r3]
 802a5ce:	b25a      	sxtb	r2, r3
 802a5d0:	79bb      	ldrb	r3, [r7, #6]
 802a5d2:	f003 0307 	and.w	r3, r3, #7
 802a5d6:	2101      	movs	r1, #1
 802a5d8:	fa01 f303 	lsl.w	r3, r1, r3
 802a5dc:	b25b      	sxtb	r3, r3
 802a5de:	43db      	mvns	r3, r3
 802a5e0:	b25b      	sxtb	r3, r3
 802a5e2:	4013      	ands	r3, r2
 802a5e4:	b259      	sxtb	r1, r3
 802a5e6:	79fa      	ldrb	r2, [r7, #7]
 802a5e8:	4603      	mov	r3, r0
 802a5ea:	01db      	lsls	r3, r3, #7
 802a5ec:	4413      	add	r3, r2
 802a5ee:	b2c9      	uxtb	r1, r1
 802a5f0:	4a04      	ldr	r2, [pc, #16]	; (802a604 <ssd1306_DrawPixel+0xa4>)
 802a5f2:	54d1      	strb	r1, [r2, r3]
 802a5f4:	e000      	b.n	802a5f8 <ssd1306_DrawPixel+0x98>
        return;
 802a5f6:	bf00      	nop
    }
}
 802a5f8:	370c      	adds	r7, #12
 802a5fa:	46bd      	mov	sp, r7
 802a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a600:	4770      	bx	lr
 802a602:	bf00      	nop
 802a604:	2000290c 	.word	0x2000290c

0802a608 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 802a608:	b590      	push	{r4, r7, lr}
 802a60a:	b089      	sub	sp, #36	; 0x24
 802a60c:	af00      	add	r7, sp, #0
 802a60e:	4604      	mov	r4, r0
 802a610:	1d38      	adds	r0, r7, #4
 802a612:	e880 0006 	stmia.w	r0, {r1, r2}
 802a616:	461a      	mov	r2, r3
 802a618:	4623      	mov	r3, r4
 802a61a:	73fb      	strb	r3, [r7, #15]
 802a61c:	4613      	mov	r3, r2
 802a61e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 802a620:	7bfb      	ldrb	r3, [r7, #15]
 802a622:	2b1f      	cmp	r3, #31
 802a624:	d902      	bls.n	802a62c <ssd1306_WriteChar+0x24>
 802a626:	7bfb      	ldrb	r3, [r7, #15]
 802a628:	2b7e      	cmp	r3, #126	; 0x7e
 802a62a:	d901      	bls.n	802a630 <ssd1306_WriteChar+0x28>
        return 0;
 802a62c:	2300      	movs	r3, #0
 802a62e:	e06d      	b.n	802a70c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 802a630:	4b38      	ldr	r3, [pc, #224]	; (802a714 <ssd1306_WriteChar+0x10c>)
 802a632:	881b      	ldrh	r3, [r3, #0]
 802a634:	461a      	mov	r2, r3
 802a636:	793b      	ldrb	r3, [r7, #4]
 802a638:	4413      	add	r3, r2
 802a63a:	2b80      	cmp	r3, #128	; 0x80
 802a63c:	dc06      	bgt.n	802a64c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 802a63e:	4b35      	ldr	r3, [pc, #212]	; (802a714 <ssd1306_WriteChar+0x10c>)
 802a640:	885b      	ldrh	r3, [r3, #2]
 802a642:	461a      	mov	r2, r3
 802a644:	797b      	ldrb	r3, [r7, #5]
 802a646:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 802a648:	2b40      	cmp	r3, #64	; 0x40
 802a64a:	dd01      	ble.n	802a650 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 802a64c:	2300      	movs	r3, #0
 802a64e:	e05d      	b.n	802a70c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 802a650:	2300      	movs	r3, #0
 802a652:	61fb      	str	r3, [r7, #28]
 802a654:	e04c      	b.n	802a6f0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 802a656:	68ba      	ldr	r2, [r7, #8]
 802a658:	7bfb      	ldrb	r3, [r7, #15]
 802a65a:	3b20      	subs	r3, #32
 802a65c:	7979      	ldrb	r1, [r7, #5]
 802a65e:	fb01 f303 	mul.w	r3, r1, r3
 802a662:	4619      	mov	r1, r3
 802a664:	69fb      	ldr	r3, [r7, #28]
 802a666:	440b      	add	r3, r1
 802a668:	005b      	lsls	r3, r3, #1
 802a66a:	4413      	add	r3, r2
 802a66c:	881b      	ldrh	r3, [r3, #0]
 802a66e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 802a670:	2300      	movs	r3, #0
 802a672:	61bb      	str	r3, [r7, #24]
 802a674:	e034      	b.n	802a6e0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 802a676:	697a      	ldr	r2, [r7, #20]
 802a678:	69bb      	ldr	r3, [r7, #24]
 802a67a:	fa02 f303 	lsl.w	r3, r2, r3
 802a67e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a682:	2b00      	cmp	r3, #0
 802a684:	d012      	beq.n	802a6ac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 802a686:	4b23      	ldr	r3, [pc, #140]	; (802a714 <ssd1306_WriteChar+0x10c>)
 802a688:	881b      	ldrh	r3, [r3, #0]
 802a68a:	b2da      	uxtb	r2, r3
 802a68c:	69bb      	ldr	r3, [r7, #24]
 802a68e:	b2db      	uxtb	r3, r3
 802a690:	4413      	add	r3, r2
 802a692:	b2d8      	uxtb	r0, r3
 802a694:	4b1f      	ldr	r3, [pc, #124]	; (802a714 <ssd1306_WriteChar+0x10c>)
 802a696:	885b      	ldrh	r3, [r3, #2]
 802a698:	b2da      	uxtb	r2, r3
 802a69a:	69fb      	ldr	r3, [r7, #28]
 802a69c:	b2db      	uxtb	r3, r3
 802a69e:	4413      	add	r3, r2
 802a6a0:	b2db      	uxtb	r3, r3
 802a6a2:	7bba      	ldrb	r2, [r7, #14]
 802a6a4:	4619      	mov	r1, r3
 802a6a6:	f7ff ff5b 	bl	802a560 <ssd1306_DrawPixel>
 802a6aa:	e016      	b.n	802a6da <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 802a6ac:	4b19      	ldr	r3, [pc, #100]	; (802a714 <ssd1306_WriteChar+0x10c>)
 802a6ae:	881b      	ldrh	r3, [r3, #0]
 802a6b0:	b2da      	uxtb	r2, r3
 802a6b2:	69bb      	ldr	r3, [r7, #24]
 802a6b4:	b2db      	uxtb	r3, r3
 802a6b6:	4413      	add	r3, r2
 802a6b8:	b2d8      	uxtb	r0, r3
 802a6ba:	4b16      	ldr	r3, [pc, #88]	; (802a714 <ssd1306_WriteChar+0x10c>)
 802a6bc:	885b      	ldrh	r3, [r3, #2]
 802a6be:	b2da      	uxtb	r2, r3
 802a6c0:	69fb      	ldr	r3, [r7, #28]
 802a6c2:	b2db      	uxtb	r3, r3
 802a6c4:	4413      	add	r3, r2
 802a6c6:	b2d9      	uxtb	r1, r3
 802a6c8:	7bbb      	ldrb	r3, [r7, #14]
 802a6ca:	2b00      	cmp	r3, #0
 802a6cc:	bf0c      	ite	eq
 802a6ce:	2301      	moveq	r3, #1
 802a6d0:	2300      	movne	r3, #0
 802a6d2:	b2db      	uxtb	r3, r3
 802a6d4:	461a      	mov	r2, r3
 802a6d6:	f7ff ff43 	bl	802a560 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 802a6da:	69bb      	ldr	r3, [r7, #24]
 802a6dc:	3301      	adds	r3, #1
 802a6de:	61bb      	str	r3, [r7, #24]
 802a6e0:	793b      	ldrb	r3, [r7, #4]
 802a6e2:	461a      	mov	r2, r3
 802a6e4:	69bb      	ldr	r3, [r7, #24]
 802a6e6:	4293      	cmp	r3, r2
 802a6e8:	d3c5      	bcc.n	802a676 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 802a6ea:	69fb      	ldr	r3, [r7, #28]
 802a6ec:	3301      	adds	r3, #1
 802a6ee:	61fb      	str	r3, [r7, #28]
 802a6f0:	797b      	ldrb	r3, [r7, #5]
 802a6f2:	461a      	mov	r2, r3
 802a6f4:	69fb      	ldr	r3, [r7, #28]
 802a6f6:	4293      	cmp	r3, r2
 802a6f8:	d3ad      	bcc.n	802a656 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 802a6fa:	4b06      	ldr	r3, [pc, #24]	; (802a714 <ssd1306_WriteChar+0x10c>)
 802a6fc:	881a      	ldrh	r2, [r3, #0]
 802a6fe:	793b      	ldrb	r3, [r7, #4]
 802a700:	b29b      	uxth	r3, r3
 802a702:	4413      	add	r3, r2
 802a704:	b29a      	uxth	r2, r3
 802a706:	4b03      	ldr	r3, [pc, #12]	; (802a714 <ssd1306_WriteChar+0x10c>)
 802a708:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 802a70a:	7bfb      	ldrb	r3, [r7, #15]
}
 802a70c:	4618      	mov	r0, r3
 802a70e:	3724      	adds	r7, #36	; 0x24
 802a710:	46bd      	mov	sp, r7
 802a712:	bd90      	pop	{r4, r7, pc}
 802a714:	20002d0c 	.word	0x20002d0c

0802a718 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 802a718:	b580      	push	{r7, lr}
 802a71a:	b084      	sub	sp, #16
 802a71c:	af00      	add	r7, sp, #0
 802a71e:	60f8      	str	r0, [r7, #12]
 802a720:	1d38      	adds	r0, r7, #4
 802a722:	e880 0006 	stmia.w	r0, {r1, r2}
 802a726:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 802a728:	e012      	b.n	802a750 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 802a72a:	68fb      	ldr	r3, [r7, #12]
 802a72c:	7818      	ldrb	r0, [r3, #0]
 802a72e:	78fb      	ldrb	r3, [r7, #3]
 802a730:	1d3a      	adds	r2, r7, #4
 802a732:	ca06      	ldmia	r2, {r1, r2}
 802a734:	f7ff ff68 	bl	802a608 <ssd1306_WriteChar>
 802a738:	4603      	mov	r3, r0
 802a73a:	461a      	mov	r2, r3
 802a73c:	68fb      	ldr	r3, [r7, #12]
 802a73e:	781b      	ldrb	r3, [r3, #0]
 802a740:	429a      	cmp	r2, r3
 802a742:	d002      	beq.n	802a74a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 802a744:	68fb      	ldr	r3, [r7, #12]
 802a746:	781b      	ldrb	r3, [r3, #0]
 802a748:	e008      	b.n	802a75c <ssd1306_WriteString+0x44>
        }
        str++;
 802a74a:	68fb      	ldr	r3, [r7, #12]
 802a74c:	3301      	adds	r3, #1
 802a74e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 802a750:	68fb      	ldr	r3, [r7, #12]
 802a752:	781b      	ldrb	r3, [r3, #0]
 802a754:	2b00      	cmp	r3, #0
 802a756:	d1e8      	bne.n	802a72a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 802a758:	68fb      	ldr	r3, [r7, #12]
 802a75a:	781b      	ldrb	r3, [r3, #0]
}
 802a75c:	4618      	mov	r0, r3
 802a75e:	3710      	adds	r7, #16
 802a760:	46bd      	mov	sp, r7
 802a762:	bd80      	pop	{r7, pc}

0802a764 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 802a764:	b480      	push	{r7}
 802a766:	b083      	sub	sp, #12
 802a768:	af00      	add	r7, sp, #0
 802a76a:	4603      	mov	r3, r0
 802a76c:	460a      	mov	r2, r1
 802a76e:	71fb      	strb	r3, [r7, #7]
 802a770:	4613      	mov	r3, r2
 802a772:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 802a774:	79fb      	ldrb	r3, [r7, #7]
 802a776:	b29a      	uxth	r2, r3
 802a778:	4b05      	ldr	r3, [pc, #20]	; (802a790 <ssd1306_SetCursor+0x2c>)
 802a77a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 802a77c:	79bb      	ldrb	r3, [r7, #6]
 802a77e:	b29a      	uxth	r2, r3
 802a780:	4b03      	ldr	r3, [pc, #12]	; (802a790 <ssd1306_SetCursor+0x2c>)
 802a782:	805a      	strh	r2, [r3, #2]
}
 802a784:	bf00      	nop
 802a786:	370c      	adds	r7, #12
 802a788:	46bd      	mov	sp, r7
 802a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a78e:	4770      	bx	lr
 802a790:	20002d0c 	.word	0x20002d0c

0802a794 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 802a794:	b590      	push	{r4, r7, lr}
 802a796:	b087      	sub	sp, #28
 802a798:	af00      	add	r7, sp, #0
 802a79a:	4604      	mov	r4, r0
 802a79c:	4608      	mov	r0, r1
 802a79e:	4611      	mov	r1, r2
 802a7a0:	461a      	mov	r2, r3
 802a7a2:	4623      	mov	r3, r4
 802a7a4:	71fb      	strb	r3, [r7, #7]
 802a7a6:	4603      	mov	r3, r0
 802a7a8:	71bb      	strb	r3, [r7, #6]
 802a7aa:	460b      	mov	r3, r1
 802a7ac:	717b      	strb	r3, [r7, #5]
 802a7ae:	4613      	mov	r3, r2
 802a7b0:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 802a7b2:	797b      	ldrb	r3, [r7, #5]
 802a7b4:	425b      	negs	r3, r3
 802a7b6:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 802a7b8:	2300      	movs	r3, #0
 802a7ba:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 802a7bc:	797b      	ldrb	r3, [r7, #5]
 802a7be:	f1c3 0301 	rsb	r3, r3, #1
 802a7c2:	005b      	lsls	r3, r3, #1
 802a7c4:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 802a7c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a7ca:	2b00      	cmp	r3, #0
 802a7cc:	db65      	blt.n	802a89a <ssd1306_DrawCircle+0x106>
 802a7ce:	79bb      	ldrb	r3, [r7, #6]
 802a7d0:	2b3f      	cmp	r3, #63	; 0x3f
 802a7d2:	d862      	bhi.n	802a89a <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 802a7d4:	697b      	ldr	r3, [r7, #20]
 802a7d6:	b2db      	uxtb	r3, r3
 802a7d8:	79fa      	ldrb	r2, [r7, #7]
 802a7da:	1ad3      	subs	r3, r2, r3
 802a7dc:	b2d8      	uxtb	r0, r3
 802a7de:	693b      	ldr	r3, [r7, #16]
 802a7e0:	b2da      	uxtb	r2, r3
 802a7e2:	79bb      	ldrb	r3, [r7, #6]
 802a7e4:	4413      	add	r3, r2
 802a7e6:	b2db      	uxtb	r3, r3
 802a7e8:	793a      	ldrb	r2, [r7, #4]
 802a7ea:	4619      	mov	r1, r3
 802a7ec:	f7ff feb8 	bl	802a560 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 802a7f0:	697b      	ldr	r3, [r7, #20]
 802a7f2:	b2da      	uxtb	r2, r3
 802a7f4:	79fb      	ldrb	r3, [r7, #7]
 802a7f6:	4413      	add	r3, r2
 802a7f8:	b2d8      	uxtb	r0, r3
 802a7fa:	693b      	ldr	r3, [r7, #16]
 802a7fc:	b2da      	uxtb	r2, r3
 802a7fe:	79bb      	ldrb	r3, [r7, #6]
 802a800:	4413      	add	r3, r2
 802a802:	b2db      	uxtb	r3, r3
 802a804:	793a      	ldrb	r2, [r7, #4]
 802a806:	4619      	mov	r1, r3
 802a808:	f7ff feaa 	bl	802a560 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 802a80c:	697b      	ldr	r3, [r7, #20]
 802a80e:	b2da      	uxtb	r2, r3
 802a810:	79fb      	ldrb	r3, [r7, #7]
 802a812:	4413      	add	r3, r2
 802a814:	b2d8      	uxtb	r0, r3
 802a816:	693b      	ldr	r3, [r7, #16]
 802a818:	b2db      	uxtb	r3, r3
 802a81a:	79ba      	ldrb	r2, [r7, #6]
 802a81c:	1ad3      	subs	r3, r2, r3
 802a81e:	b2db      	uxtb	r3, r3
 802a820:	793a      	ldrb	r2, [r7, #4]
 802a822:	4619      	mov	r1, r3
 802a824:	f7ff fe9c 	bl	802a560 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 802a828:	697b      	ldr	r3, [r7, #20]
 802a82a:	b2db      	uxtb	r3, r3
 802a82c:	79fa      	ldrb	r2, [r7, #7]
 802a82e:	1ad3      	subs	r3, r2, r3
 802a830:	b2d8      	uxtb	r0, r3
 802a832:	693b      	ldr	r3, [r7, #16]
 802a834:	b2db      	uxtb	r3, r3
 802a836:	79ba      	ldrb	r2, [r7, #6]
 802a838:	1ad3      	subs	r3, r2, r3
 802a83a:	b2db      	uxtb	r3, r3
 802a83c:	793a      	ldrb	r2, [r7, #4]
 802a83e:	4619      	mov	r1, r3
 802a840:	f7ff fe8e 	bl	802a560 <ssd1306_DrawPixel>
        e2 = err;
 802a844:	68fb      	ldr	r3, [r7, #12]
 802a846:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 802a848:	68ba      	ldr	r2, [r7, #8]
 802a84a:	693b      	ldr	r3, [r7, #16]
 802a84c:	429a      	cmp	r2, r3
 802a84e:	dc13      	bgt.n	802a878 <ssd1306_DrawCircle+0xe4>
            y++;
 802a850:	693b      	ldr	r3, [r7, #16]
 802a852:	3301      	adds	r3, #1
 802a854:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 802a856:	693b      	ldr	r3, [r7, #16]
 802a858:	005b      	lsls	r3, r3, #1
 802a85a:	3301      	adds	r3, #1
 802a85c:	68fa      	ldr	r2, [r7, #12]
 802a85e:	4413      	add	r3, r2
 802a860:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 802a862:	697b      	ldr	r3, [r7, #20]
 802a864:	425b      	negs	r3, r3
 802a866:	693a      	ldr	r2, [r7, #16]
 802a868:	429a      	cmp	r2, r3
 802a86a:	d105      	bne.n	802a878 <ssd1306_DrawCircle+0xe4>
 802a86c:	68ba      	ldr	r2, [r7, #8]
 802a86e:	697b      	ldr	r3, [r7, #20]
 802a870:	429a      	cmp	r2, r3
 802a872:	dc01      	bgt.n	802a878 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 802a874:	2300      	movs	r3, #0
 802a876:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 802a878:	68ba      	ldr	r2, [r7, #8]
 802a87a:	697b      	ldr	r3, [r7, #20]
 802a87c:	429a      	cmp	r2, r3
 802a87e:	dd08      	ble.n	802a892 <ssd1306_DrawCircle+0xfe>
            x++;
 802a880:	697b      	ldr	r3, [r7, #20]
 802a882:	3301      	adds	r3, #1
 802a884:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 802a886:	697b      	ldr	r3, [r7, #20]
 802a888:	005b      	lsls	r3, r3, #1
 802a88a:	3301      	adds	r3, #1
 802a88c:	68fa      	ldr	r2, [r7, #12]
 802a88e:	4413      	add	r3, r2
 802a890:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 802a892:	697b      	ldr	r3, [r7, #20]
 802a894:	2b00      	cmp	r3, #0
 802a896:	dd9d      	ble.n	802a7d4 <ssd1306_DrawCircle+0x40>

    return;
 802a898:	e000      	b.n	802a89c <ssd1306_DrawCircle+0x108>
        return;
 802a89a:	bf00      	nop
}
 802a89c:	371c      	adds	r7, #28
 802a89e:	46bd      	mov	sp, r7
 802a8a0:	bd90      	pop	{r4, r7, pc}

0802a8a2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 802a8a2:	b580      	push	{r7, lr}
 802a8a4:	b084      	sub	sp, #16
 802a8a6:	af00      	add	r7, sp, #0
 802a8a8:	4603      	mov	r3, r0
 802a8aa:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 802a8ac:	2381      	movs	r3, #129	; 0x81
 802a8ae:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 802a8b0:	7bfb      	ldrb	r3, [r7, #15]
 802a8b2:	4618      	mov	r0, r3
 802a8b4:	f7ff fd6c 	bl	802a390 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 802a8b8:	79fb      	ldrb	r3, [r7, #7]
 802a8ba:	4618      	mov	r0, r3
 802a8bc:	f7ff fd68 	bl	802a390 <ssd1306_WriteCommand>
}
 802a8c0:	bf00      	nop
 802a8c2:	3710      	adds	r7, #16
 802a8c4:	46bd      	mov	sp, r7
 802a8c6:	bd80      	pop	{r7, pc}

0802a8c8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 802a8c8:	b580      	push	{r7, lr}
 802a8ca:	b084      	sub	sp, #16
 802a8cc:	af00      	add	r7, sp, #0
 802a8ce:	4603      	mov	r3, r0
 802a8d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 802a8d2:	79fb      	ldrb	r3, [r7, #7]
 802a8d4:	2b00      	cmp	r3, #0
 802a8d6:	d005      	beq.n	802a8e4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 802a8d8:	23af      	movs	r3, #175	; 0xaf
 802a8da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 802a8dc:	4b08      	ldr	r3, [pc, #32]	; (802a900 <ssd1306_SetDisplayOn+0x38>)
 802a8de:	2201      	movs	r2, #1
 802a8e0:	715a      	strb	r2, [r3, #5]
 802a8e2:	e004      	b.n	802a8ee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 802a8e4:	23ae      	movs	r3, #174	; 0xae
 802a8e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 802a8e8:	4b05      	ldr	r3, [pc, #20]	; (802a900 <ssd1306_SetDisplayOn+0x38>)
 802a8ea:	2200      	movs	r2, #0
 802a8ec:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 802a8ee:	7bfb      	ldrb	r3, [r7, #15]
 802a8f0:	4618      	mov	r0, r3
 802a8f2:	f7ff fd4d 	bl	802a390 <ssd1306_WriteCommand>
}
 802a8f6:	bf00      	nop
 802a8f8:	3710      	adds	r7, #16
 802a8fa:	46bd      	mov	sp, r7
 802a8fc:	bd80      	pop	{r7, pc}
 802a8fe:	bf00      	nop
 802a900:	20002d0c 	.word	0x20002d0c

0802a904 <arm_sin_f32>:
 802a904:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802a984 <arm_sin_f32+0x80>
 802a908:	ee20 0a27 	vmul.f32	s0, s0, s15
 802a90c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a914:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802a918:	d504      	bpl.n	802a924 <arm_sin_f32+0x20>
 802a91a:	ee17 3a90 	vmov	r3, s15
 802a91e:	3b01      	subs	r3, #1
 802a920:	ee07 3a90 	vmov	s15, r3
 802a924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802a928:	ed9f 7a17 	vldr	s14, [pc, #92]	; 802a988 <arm_sin_f32+0x84>
 802a92c:	ee30 0a67 	vsub.f32	s0, s0, s15
 802a930:	ee20 0a07 	vmul.f32	s0, s0, s14
 802a934:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 802a938:	ee17 3a90 	vmov	r3, s15
 802a93c:	b29b      	uxth	r3, r3
 802a93e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a942:	d21a      	bcs.n	802a97a <arm_sin_f32+0x76>
 802a944:	ee07 3a90 	vmov	s15, r3
 802a948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a94c:	1c59      	adds	r1, r3, #1
 802a94e:	ee30 0a67 	vsub.f32	s0, s0, s15
 802a952:	4a0e      	ldr	r2, [pc, #56]	; (802a98c <arm_sin_f32+0x88>)
 802a954:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802a958:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a95c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 802a960:	ed93 7a00 	vldr	s14, [r3]
 802a964:	edd2 6a00 	vldr	s13, [r2]
 802a968:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802a96c:	ee20 0a26 	vmul.f32	s0, s0, s13
 802a970:	ee67 7a87 	vmul.f32	s15, s15, s14
 802a974:	ee37 0a80 	vadd.f32	s0, s15, s0
 802a978:	4770      	bx	lr
 802a97a:	ee30 0a47 	vsub.f32	s0, s0, s14
 802a97e:	2101      	movs	r1, #1
 802a980:	2300      	movs	r3, #0
 802a982:	e7e6      	b.n	802a952 <arm_sin_f32+0x4e>
 802a984:	3e22f983 	.word	0x3e22f983
 802a988:	44000000 	.word	0x44000000
 802a98c:	0807939c 	.word	0x0807939c

0802a990 <__errno>:
 802a990:	4b01      	ldr	r3, [pc, #4]	; (802a998 <__errno+0x8>)
 802a992:	6818      	ldr	r0, [r3, #0]
 802a994:	4770      	bx	lr
 802a996:	bf00      	nop
 802a998:	200002ac 	.word	0x200002ac

0802a99c <__libc_init_array>:
 802a99c:	b570      	push	{r4, r5, r6, lr}
 802a99e:	4d0d      	ldr	r5, [pc, #52]	; (802a9d4 <__libc_init_array+0x38>)
 802a9a0:	4c0d      	ldr	r4, [pc, #52]	; (802a9d8 <__libc_init_array+0x3c>)
 802a9a2:	1b64      	subs	r4, r4, r5
 802a9a4:	10a4      	asrs	r4, r4, #2
 802a9a6:	2600      	movs	r6, #0
 802a9a8:	42a6      	cmp	r6, r4
 802a9aa:	d109      	bne.n	802a9c0 <__libc_init_array+0x24>
 802a9ac:	4d0b      	ldr	r5, [pc, #44]	; (802a9dc <__libc_init_array+0x40>)
 802a9ae:	4c0c      	ldr	r4, [pc, #48]	; (802a9e0 <__libc_init_array+0x44>)
 802a9b0:	f003 faf8 	bl	802dfa4 <_init>
 802a9b4:	1b64      	subs	r4, r4, r5
 802a9b6:	10a4      	asrs	r4, r4, #2
 802a9b8:	2600      	movs	r6, #0
 802a9ba:	42a6      	cmp	r6, r4
 802a9bc:	d105      	bne.n	802a9ca <__libc_init_array+0x2e>
 802a9be:	bd70      	pop	{r4, r5, r6, pc}
 802a9c0:	f855 3b04 	ldr.w	r3, [r5], #4
 802a9c4:	4798      	blx	r3
 802a9c6:	3601      	adds	r6, #1
 802a9c8:	e7ee      	b.n	802a9a8 <__libc_init_array+0xc>
 802a9ca:	f855 3b04 	ldr.w	r3, [r5], #4
 802a9ce:	4798      	blx	r3
 802a9d0:	3601      	adds	r6, #1
 802a9d2:	e7f2      	b.n	802a9ba <__libc_init_array+0x1e>
 802a9d4:	0807a058 	.word	0x0807a058
 802a9d8:	0807a058 	.word	0x0807a058
 802a9dc:	0807a058 	.word	0x0807a058
 802a9e0:	0807a05c 	.word	0x0807a05c

0802a9e4 <memcpy>:
 802a9e4:	440a      	add	r2, r1
 802a9e6:	4291      	cmp	r1, r2
 802a9e8:	f100 33ff 	add.w	r3, r0, #4294967295
 802a9ec:	d100      	bne.n	802a9f0 <memcpy+0xc>
 802a9ee:	4770      	bx	lr
 802a9f0:	b510      	push	{r4, lr}
 802a9f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a9f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a9fa:	4291      	cmp	r1, r2
 802a9fc:	d1f9      	bne.n	802a9f2 <memcpy+0xe>
 802a9fe:	bd10      	pop	{r4, pc}

0802aa00 <memmove>:
 802aa00:	4288      	cmp	r0, r1
 802aa02:	b510      	push	{r4, lr}
 802aa04:	eb01 0402 	add.w	r4, r1, r2
 802aa08:	d902      	bls.n	802aa10 <memmove+0x10>
 802aa0a:	4284      	cmp	r4, r0
 802aa0c:	4623      	mov	r3, r4
 802aa0e:	d807      	bhi.n	802aa20 <memmove+0x20>
 802aa10:	1e43      	subs	r3, r0, #1
 802aa12:	42a1      	cmp	r1, r4
 802aa14:	d008      	beq.n	802aa28 <memmove+0x28>
 802aa16:	f811 2b01 	ldrb.w	r2, [r1], #1
 802aa1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802aa1e:	e7f8      	b.n	802aa12 <memmove+0x12>
 802aa20:	4402      	add	r2, r0
 802aa22:	4601      	mov	r1, r0
 802aa24:	428a      	cmp	r2, r1
 802aa26:	d100      	bne.n	802aa2a <memmove+0x2a>
 802aa28:	bd10      	pop	{r4, pc}
 802aa2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802aa2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802aa32:	e7f7      	b.n	802aa24 <memmove+0x24>

0802aa34 <memset>:
 802aa34:	4402      	add	r2, r0
 802aa36:	4603      	mov	r3, r0
 802aa38:	4293      	cmp	r3, r2
 802aa3a:	d100      	bne.n	802aa3e <memset+0xa>
 802aa3c:	4770      	bx	lr
 802aa3e:	f803 1b01 	strb.w	r1, [r3], #1
 802aa42:	e7f9      	b.n	802aa38 <memset+0x4>

0802aa44 <__cvt>:
 802aa44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802aa48:	ec55 4b10 	vmov	r4, r5, d0
 802aa4c:	2d00      	cmp	r5, #0
 802aa4e:	460e      	mov	r6, r1
 802aa50:	4619      	mov	r1, r3
 802aa52:	462b      	mov	r3, r5
 802aa54:	bfbb      	ittet	lt
 802aa56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802aa5a:	461d      	movlt	r5, r3
 802aa5c:	2300      	movge	r3, #0
 802aa5e:	232d      	movlt	r3, #45	; 0x2d
 802aa60:	700b      	strb	r3, [r1, #0]
 802aa62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802aa64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802aa68:	4691      	mov	r9, r2
 802aa6a:	f023 0820 	bic.w	r8, r3, #32
 802aa6e:	bfbc      	itt	lt
 802aa70:	4622      	movlt	r2, r4
 802aa72:	4614      	movlt	r4, r2
 802aa74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802aa78:	d005      	beq.n	802aa86 <__cvt+0x42>
 802aa7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802aa7e:	d100      	bne.n	802aa82 <__cvt+0x3e>
 802aa80:	3601      	adds	r6, #1
 802aa82:	2102      	movs	r1, #2
 802aa84:	e000      	b.n	802aa88 <__cvt+0x44>
 802aa86:	2103      	movs	r1, #3
 802aa88:	ab03      	add	r3, sp, #12
 802aa8a:	9301      	str	r3, [sp, #4]
 802aa8c:	ab02      	add	r3, sp, #8
 802aa8e:	9300      	str	r3, [sp, #0]
 802aa90:	ec45 4b10 	vmov	d0, r4, r5
 802aa94:	4653      	mov	r3, sl
 802aa96:	4632      	mov	r2, r6
 802aa98:	f000 fd8e 	bl	802b5b8 <_dtoa_r>
 802aa9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802aaa0:	4607      	mov	r7, r0
 802aaa2:	d102      	bne.n	802aaaa <__cvt+0x66>
 802aaa4:	f019 0f01 	tst.w	r9, #1
 802aaa8:	d022      	beq.n	802aaf0 <__cvt+0xac>
 802aaaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802aaae:	eb07 0906 	add.w	r9, r7, r6
 802aab2:	d110      	bne.n	802aad6 <__cvt+0x92>
 802aab4:	783b      	ldrb	r3, [r7, #0]
 802aab6:	2b30      	cmp	r3, #48	; 0x30
 802aab8:	d10a      	bne.n	802aad0 <__cvt+0x8c>
 802aaba:	2200      	movs	r2, #0
 802aabc:	2300      	movs	r3, #0
 802aabe:	4620      	mov	r0, r4
 802aac0:	4629      	mov	r1, r5
 802aac2:	f7f5 ff61 	bl	8020988 <__aeabi_dcmpeq>
 802aac6:	b918      	cbnz	r0, 802aad0 <__cvt+0x8c>
 802aac8:	f1c6 0601 	rsb	r6, r6, #1
 802aacc:	f8ca 6000 	str.w	r6, [sl]
 802aad0:	f8da 3000 	ldr.w	r3, [sl]
 802aad4:	4499      	add	r9, r3
 802aad6:	2200      	movs	r2, #0
 802aad8:	2300      	movs	r3, #0
 802aada:	4620      	mov	r0, r4
 802aadc:	4629      	mov	r1, r5
 802aade:	f7f5 ff53 	bl	8020988 <__aeabi_dcmpeq>
 802aae2:	b108      	cbz	r0, 802aae8 <__cvt+0xa4>
 802aae4:	f8cd 900c 	str.w	r9, [sp, #12]
 802aae8:	2230      	movs	r2, #48	; 0x30
 802aaea:	9b03      	ldr	r3, [sp, #12]
 802aaec:	454b      	cmp	r3, r9
 802aaee:	d307      	bcc.n	802ab00 <__cvt+0xbc>
 802aaf0:	9b03      	ldr	r3, [sp, #12]
 802aaf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802aaf4:	1bdb      	subs	r3, r3, r7
 802aaf6:	4638      	mov	r0, r7
 802aaf8:	6013      	str	r3, [r2, #0]
 802aafa:	b004      	add	sp, #16
 802aafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ab00:	1c59      	adds	r1, r3, #1
 802ab02:	9103      	str	r1, [sp, #12]
 802ab04:	701a      	strb	r2, [r3, #0]
 802ab06:	e7f0      	b.n	802aaea <__cvt+0xa6>

0802ab08 <__exponent>:
 802ab08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802ab0a:	4603      	mov	r3, r0
 802ab0c:	2900      	cmp	r1, #0
 802ab0e:	bfb8      	it	lt
 802ab10:	4249      	neglt	r1, r1
 802ab12:	f803 2b02 	strb.w	r2, [r3], #2
 802ab16:	bfb4      	ite	lt
 802ab18:	222d      	movlt	r2, #45	; 0x2d
 802ab1a:	222b      	movge	r2, #43	; 0x2b
 802ab1c:	2909      	cmp	r1, #9
 802ab1e:	7042      	strb	r2, [r0, #1]
 802ab20:	dd2a      	ble.n	802ab78 <__exponent+0x70>
 802ab22:	f10d 0407 	add.w	r4, sp, #7
 802ab26:	46a4      	mov	ip, r4
 802ab28:	270a      	movs	r7, #10
 802ab2a:	46a6      	mov	lr, r4
 802ab2c:	460a      	mov	r2, r1
 802ab2e:	fb91 f6f7 	sdiv	r6, r1, r7
 802ab32:	fb07 1516 	mls	r5, r7, r6, r1
 802ab36:	3530      	adds	r5, #48	; 0x30
 802ab38:	2a63      	cmp	r2, #99	; 0x63
 802ab3a:	f104 34ff 	add.w	r4, r4, #4294967295
 802ab3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802ab42:	4631      	mov	r1, r6
 802ab44:	dcf1      	bgt.n	802ab2a <__exponent+0x22>
 802ab46:	3130      	adds	r1, #48	; 0x30
 802ab48:	f1ae 0502 	sub.w	r5, lr, #2
 802ab4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 802ab50:	1c44      	adds	r4, r0, #1
 802ab52:	4629      	mov	r1, r5
 802ab54:	4561      	cmp	r1, ip
 802ab56:	d30a      	bcc.n	802ab6e <__exponent+0x66>
 802ab58:	f10d 0209 	add.w	r2, sp, #9
 802ab5c:	eba2 020e 	sub.w	r2, r2, lr
 802ab60:	4565      	cmp	r5, ip
 802ab62:	bf88      	it	hi
 802ab64:	2200      	movhi	r2, #0
 802ab66:	4413      	add	r3, r2
 802ab68:	1a18      	subs	r0, r3, r0
 802ab6a:	b003      	add	sp, #12
 802ab6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ab6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ab72:	f804 2f01 	strb.w	r2, [r4, #1]!
 802ab76:	e7ed      	b.n	802ab54 <__exponent+0x4c>
 802ab78:	2330      	movs	r3, #48	; 0x30
 802ab7a:	3130      	adds	r1, #48	; 0x30
 802ab7c:	7083      	strb	r3, [r0, #2]
 802ab7e:	70c1      	strb	r1, [r0, #3]
 802ab80:	1d03      	adds	r3, r0, #4
 802ab82:	e7f1      	b.n	802ab68 <__exponent+0x60>

0802ab84 <_printf_float>:
 802ab84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab88:	ed2d 8b02 	vpush	{d8}
 802ab8c:	b08d      	sub	sp, #52	; 0x34
 802ab8e:	460c      	mov	r4, r1
 802ab90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802ab94:	4616      	mov	r6, r2
 802ab96:	461f      	mov	r7, r3
 802ab98:	4605      	mov	r5, r0
 802ab9a:	f001 fb1f 	bl	802c1dc <_localeconv_r>
 802ab9e:	f8d0 a000 	ldr.w	sl, [r0]
 802aba2:	4650      	mov	r0, sl
 802aba4:	f7f5 fa74 	bl	8020090 <strlen>
 802aba8:	2300      	movs	r3, #0
 802abaa:	930a      	str	r3, [sp, #40]	; 0x28
 802abac:	6823      	ldr	r3, [r4, #0]
 802abae:	9305      	str	r3, [sp, #20]
 802abb0:	f8d8 3000 	ldr.w	r3, [r8]
 802abb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 802abb8:	3307      	adds	r3, #7
 802abba:	f023 0307 	bic.w	r3, r3, #7
 802abbe:	f103 0208 	add.w	r2, r3, #8
 802abc2:	f8c8 2000 	str.w	r2, [r8]
 802abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802abca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802abce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802abd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802abd6:	9307      	str	r3, [sp, #28]
 802abd8:	f8cd 8018 	str.w	r8, [sp, #24]
 802abdc:	ee08 0a10 	vmov	s16, r0
 802abe0:	4b9f      	ldr	r3, [pc, #636]	; (802ae60 <_printf_float+0x2dc>)
 802abe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802abe6:	f04f 32ff 	mov.w	r2, #4294967295
 802abea:	f7f5 feff 	bl	80209ec <__aeabi_dcmpun>
 802abee:	bb88      	cbnz	r0, 802ac54 <_printf_float+0xd0>
 802abf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802abf4:	4b9a      	ldr	r3, [pc, #616]	; (802ae60 <_printf_float+0x2dc>)
 802abf6:	f04f 32ff 	mov.w	r2, #4294967295
 802abfa:	f7f5 fed9 	bl	80209b0 <__aeabi_dcmple>
 802abfe:	bb48      	cbnz	r0, 802ac54 <_printf_float+0xd0>
 802ac00:	2200      	movs	r2, #0
 802ac02:	2300      	movs	r3, #0
 802ac04:	4640      	mov	r0, r8
 802ac06:	4649      	mov	r1, r9
 802ac08:	f7f5 fec8 	bl	802099c <__aeabi_dcmplt>
 802ac0c:	b110      	cbz	r0, 802ac14 <_printf_float+0x90>
 802ac0e:	232d      	movs	r3, #45	; 0x2d
 802ac10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ac14:	4b93      	ldr	r3, [pc, #588]	; (802ae64 <_printf_float+0x2e0>)
 802ac16:	4894      	ldr	r0, [pc, #592]	; (802ae68 <_printf_float+0x2e4>)
 802ac18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802ac1c:	bf94      	ite	ls
 802ac1e:	4698      	movls	r8, r3
 802ac20:	4680      	movhi	r8, r0
 802ac22:	2303      	movs	r3, #3
 802ac24:	6123      	str	r3, [r4, #16]
 802ac26:	9b05      	ldr	r3, [sp, #20]
 802ac28:	f023 0204 	bic.w	r2, r3, #4
 802ac2c:	6022      	str	r2, [r4, #0]
 802ac2e:	f04f 0900 	mov.w	r9, #0
 802ac32:	9700      	str	r7, [sp, #0]
 802ac34:	4633      	mov	r3, r6
 802ac36:	aa0b      	add	r2, sp, #44	; 0x2c
 802ac38:	4621      	mov	r1, r4
 802ac3a:	4628      	mov	r0, r5
 802ac3c:	f000 f9d8 	bl	802aff0 <_printf_common>
 802ac40:	3001      	adds	r0, #1
 802ac42:	f040 8090 	bne.w	802ad66 <_printf_float+0x1e2>
 802ac46:	f04f 30ff 	mov.w	r0, #4294967295
 802ac4a:	b00d      	add	sp, #52	; 0x34
 802ac4c:	ecbd 8b02 	vpop	{d8}
 802ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ac54:	4642      	mov	r2, r8
 802ac56:	464b      	mov	r3, r9
 802ac58:	4640      	mov	r0, r8
 802ac5a:	4649      	mov	r1, r9
 802ac5c:	f7f5 fec6 	bl	80209ec <__aeabi_dcmpun>
 802ac60:	b140      	cbz	r0, 802ac74 <_printf_float+0xf0>
 802ac62:	464b      	mov	r3, r9
 802ac64:	2b00      	cmp	r3, #0
 802ac66:	bfbc      	itt	lt
 802ac68:	232d      	movlt	r3, #45	; 0x2d
 802ac6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802ac6e:	487f      	ldr	r0, [pc, #508]	; (802ae6c <_printf_float+0x2e8>)
 802ac70:	4b7f      	ldr	r3, [pc, #508]	; (802ae70 <_printf_float+0x2ec>)
 802ac72:	e7d1      	b.n	802ac18 <_printf_float+0x94>
 802ac74:	6863      	ldr	r3, [r4, #4]
 802ac76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802ac7a:	9206      	str	r2, [sp, #24]
 802ac7c:	1c5a      	adds	r2, r3, #1
 802ac7e:	d13f      	bne.n	802ad00 <_printf_float+0x17c>
 802ac80:	2306      	movs	r3, #6
 802ac82:	6063      	str	r3, [r4, #4]
 802ac84:	9b05      	ldr	r3, [sp, #20]
 802ac86:	6861      	ldr	r1, [r4, #4]
 802ac88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802ac8c:	2300      	movs	r3, #0
 802ac8e:	9303      	str	r3, [sp, #12]
 802ac90:	ab0a      	add	r3, sp, #40	; 0x28
 802ac92:	e9cd b301 	strd	fp, r3, [sp, #4]
 802ac96:	ab09      	add	r3, sp, #36	; 0x24
 802ac98:	ec49 8b10 	vmov	d0, r8, r9
 802ac9c:	9300      	str	r3, [sp, #0]
 802ac9e:	6022      	str	r2, [r4, #0]
 802aca0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802aca4:	4628      	mov	r0, r5
 802aca6:	f7ff fecd 	bl	802aa44 <__cvt>
 802acaa:	9b06      	ldr	r3, [sp, #24]
 802acac:	9909      	ldr	r1, [sp, #36]	; 0x24
 802acae:	2b47      	cmp	r3, #71	; 0x47
 802acb0:	4680      	mov	r8, r0
 802acb2:	d108      	bne.n	802acc6 <_printf_float+0x142>
 802acb4:	1cc8      	adds	r0, r1, #3
 802acb6:	db02      	blt.n	802acbe <_printf_float+0x13a>
 802acb8:	6863      	ldr	r3, [r4, #4]
 802acba:	4299      	cmp	r1, r3
 802acbc:	dd41      	ble.n	802ad42 <_printf_float+0x1be>
 802acbe:	f1ab 0b02 	sub.w	fp, fp, #2
 802acc2:	fa5f fb8b 	uxtb.w	fp, fp
 802acc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802acca:	d820      	bhi.n	802ad0e <_printf_float+0x18a>
 802accc:	3901      	subs	r1, #1
 802acce:	465a      	mov	r2, fp
 802acd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802acd4:	9109      	str	r1, [sp, #36]	; 0x24
 802acd6:	f7ff ff17 	bl	802ab08 <__exponent>
 802acda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802acdc:	1813      	adds	r3, r2, r0
 802acde:	2a01      	cmp	r2, #1
 802ace0:	4681      	mov	r9, r0
 802ace2:	6123      	str	r3, [r4, #16]
 802ace4:	dc02      	bgt.n	802acec <_printf_float+0x168>
 802ace6:	6822      	ldr	r2, [r4, #0]
 802ace8:	07d2      	lsls	r2, r2, #31
 802acea:	d501      	bpl.n	802acf0 <_printf_float+0x16c>
 802acec:	3301      	adds	r3, #1
 802acee:	6123      	str	r3, [r4, #16]
 802acf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802acf4:	2b00      	cmp	r3, #0
 802acf6:	d09c      	beq.n	802ac32 <_printf_float+0xae>
 802acf8:	232d      	movs	r3, #45	; 0x2d
 802acfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802acfe:	e798      	b.n	802ac32 <_printf_float+0xae>
 802ad00:	9a06      	ldr	r2, [sp, #24]
 802ad02:	2a47      	cmp	r2, #71	; 0x47
 802ad04:	d1be      	bne.n	802ac84 <_printf_float+0x100>
 802ad06:	2b00      	cmp	r3, #0
 802ad08:	d1bc      	bne.n	802ac84 <_printf_float+0x100>
 802ad0a:	2301      	movs	r3, #1
 802ad0c:	e7b9      	b.n	802ac82 <_printf_float+0xfe>
 802ad0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802ad12:	d118      	bne.n	802ad46 <_printf_float+0x1c2>
 802ad14:	2900      	cmp	r1, #0
 802ad16:	6863      	ldr	r3, [r4, #4]
 802ad18:	dd0b      	ble.n	802ad32 <_printf_float+0x1ae>
 802ad1a:	6121      	str	r1, [r4, #16]
 802ad1c:	b913      	cbnz	r3, 802ad24 <_printf_float+0x1a0>
 802ad1e:	6822      	ldr	r2, [r4, #0]
 802ad20:	07d0      	lsls	r0, r2, #31
 802ad22:	d502      	bpl.n	802ad2a <_printf_float+0x1a6>
 802ad24:	3301      	adds	r3, #1
 802ad26:	440b      	add	r3, r1
 802ad28:	6123      	str	r3, [r4, #16]
 802ad2a:	65a1      	str	r1, [r4, #88]	; 0x58
 802ad2c:	f04f 0900 	mov.w	r9, #0
 802ad30:	e7de      	b.n	802acf0 <_printf_float+0x16c>
 802ad32:	b913      	cbnz	r3, 802ad3a <_printf_float+0x1b6>
 802ad34:	6822      	ldr	r2, [r4, #0]
 802ad36:	07d2      	lsls	r2, r2, #31
 802ad38:	d501      	bpl.n	802ad3e <_printf_float+0x1ba>
 802ad3a:	3302      	adds	r3, #2
 802ad3c:	e7f4      	b.n	802ad28 <_printf_float+0x1a4>
 802ad3e:	2301      	movs	r3, #1
 802ad40:	e7f2      	b.n	802ad28 <_printf_float+0x1a4>
 802ad42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802ad46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ad48:	4299      	cmp	r1, r3
 802ad4a:	db05      	blt.n	802ad58 <_printf_float+0x1d4>
 802ad4c:	6823      	ldr	r3, [r4, #0]
 802ad4e:	6121      	str	r1, [r4, #16]
 802ad50:	07d8      	lsls	r0, r3, #31
 802ad52:	d5ea      	bpl.n	802ad2a <_printf_float+0x1a6>
 802ad54:	1c4b      	adds	r3, r1, #1
 802ad56:	e7e7      	b.n	802ad28 <_printf_float+0x1a4>
 802ad58:	2900      	cmp	r1, #0
 802ad5a:	bfd4      	ite	le
 802ad5c:	f1c1 0202 	rsble	r2, r1, #2
 802ad60:	2201      	movgt	r2, #1
 802ad62:	4413      	add	r3, r2
 802ad64:	e7e0      	b.n	802ad28 <_printf_float+0x1a4>
 802ad66:	6823      	ldr	r3, [r4, #0]
 802ad68:	055a      	lsls	r2, r3, #21
 802ad6a:	d407      	bmi.n	802ad7c <_printf_float+0x1f8>
 802ad6c:	6923      	ldr	r3, [r4, #16]
 802ad6e:	4642      	mov	r2, r8
 802ad70:	4631      	mov	r1, r6
 802ad72:	4628      	mov	r0, r5
 802ad74:	47b8      	blx	r7
 802ad76:	3001      	adds	r0, #1
 802ad78:	d12c      	bne.n	802add4 <_printf_float+0x250>
 802ad7a:	e764      	b.n	802ac46 <_printf_float+0xc2>
 802ad7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802ad80:	f240 80e0 	bls.w	802af44 <_printf_float+0x3c0>
 802ad84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802ad88:	2200      	movs	r2, #0
 802ad8a:	2300      	movs	r3, #0
 802ad8c:	f7f5 fdfc 	bl	8020988 <__aeabi_dcmpeq>
 802ad90:	2800      	cmp	r0, #0
 802ad92:	d034      	beq.n	802adfe <_printf_float+0x27a>
 802ad94:	4a37      	ldr	r2, [pc, #220]	; (802ae74 <_printf_float+0x2f0>)
 802ad96:	2301      	movs	r3, #1
 802ad98:	4631      	mov	r1, r6
 802ad9a:	4628      	mov	r0, r5
 802ad9c:	47b8      	blx	r7
 802ad9e:	3001      	adds	r0, #1
 802ada0:	f43f af51 	beq.w	802ac46 <_printf_float+0xc2>
 802ada4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802ada8:	429a      	cmp	r2, r3
 802adaa:	db02      	blt.n	802adb2 <_printf_float+0x22e>
 802adac:	6823      	ldr	r3, [r4, #0]
 802adae:	07d8      	lsls	r0, r3, #31
 802adb0:	d510      	bpl.n	802add4 <_printf_float+0x250>
 802adb2:	ee18 3a10 	vmov	r3, s16
 802adb6:	4652      	mov	r2, sl
 802adb8:	4631      	mov	r1, r6
 802adba:	4628      	mov	r0, r5
 802adbc:	47b8      	blx	r7
 802adbe:	3001      	adds	r0, #1
 802adc0:	f43f af41 	beq.w	802ac46 <_printf_float+0xc2>
 802adc4:	f04f 0800 	mov.w	r8, #0
 802adc8:	f104 091a 	add.w	r9, r4, #26
 802adcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802adce:	3b01      	subs	r3, #1
 802add0:	4543      	cmp	r3, r8
 802add2:	dc09      	bgt.n	802ade8 <_printf_float+0x264>
 802add4:	6823      	ldr	r3, [r4, #0]
 802add6:	079b      	lsls	r3, r3, #30
 802add8:	f100 8105 	bmi.w	802afe6 <_printf_float+0x462>
 802addc:	68e0      	ldr	r0, [r4, #12]
 802adde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ade0:	4298      	cmp	r0, r3
 802ade2:	bfb8      	it	lt
 802ade4:	4618      	movlt	r0, r3
 802ade6:	e730      	b.n	802ac4a <_printf_float+0xc6>
 802ade8:	2301      	movs	r3, #1
 802adea:	464a      	mov	r2, r9
 802adec:	4631      	mov	r1, r6
 802adee:	4628      	mov	r0, r5
 802adf0:	47b8      	blx	r7
 802adf2:	3001      	adds	r0, #1
 802adf4:	f43f af27 	beq.w	802ac46 <_printf_float+0xc2>
 802adf8:	f108 0801 	add.w	r8, r8, #1
 802adfc:	e7e6      	b.n	802adcc <_printf_float+0x248>
 802adfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ae00:	2b00      	cmp	r3, #0
 802ae02:	dc39      	bgt.n	802ae78 <_printf_float+0x2f4>
 802ae04:	4a1b      	ldr	r2, [pc, #108]	; (802ae74 <_printf_float+0x2f0>)
 802ae06:	2301      	movs	r3, #1
 802ae08:	4631      	mov	r1, r6
 802ae0a:	4628      	mov	r0, r5
 802ae0c:	47b8      	blx	r7
 802ae0e:	3001      	adds	r0, #1
 802ae10:	f43f af19 	beq.w	802ac46 <_printf_float+0xc2>
 802ae14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802ae18:	4313      	orrs	r3, r2
 802ae1a:	d102      	bne.n	802ae22 <_printf_float+0x29e>
 802ae1c:	6823      	ldr	r3, [r4, #0]
 802ae1e:	07d9      	lsls	r1, r3, #31
 802ae20:	d5d8      	bpl.n	802add4 <_printf_float+0x250>
 802ae22:	ee18 3a10 	vmov	r3, s16
 802ae26:	4652      	mov	r2, sl
 802ae28:	4631      	mov	r1, r6
 802ae2a:	4628      	mov	r0, r5
 802ae2c:	47b8      	blx	r7
 802ae2e:	3001      	adds	r0, #1
 802ae30:	f43f af09 	beq.w	802ac46 <_printf_float+0xc2>
 802ae34:	f04f 0900 	mov.w	r9, #0
 802ae38:	f104 0a1a 	add.w	sl, r4, #26
 802ae3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ae3e:	425b      	negs	r3, r3
 802ae40:	454b      	cmp	r3, r9
 802ae42:	dc01      	bgt.n	802ae48 <_printf_float+0x2c4>
 802ae44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ae46:	e792      	b.n	802ad6e <_printf_float+0x1ea>
 802ae48:	2301      	movs	r3, #1
 802ae4a:	4652      	mov	r2, sl
 802ae4c:	4631      	mov	r1, r6
 802ae4e:	4628      	mov	r0, r5
 802ae50:	47b8      	blx	r7
 802ae52:	3001      	adds	r0, #1
 802ae54:	f43f aef7 	beq.w	802ac46 <_printf_float+0xc2>
 802ae58:	f109 0901 	add.w	r9, r9, #1
 802ae5c:	e7ee      	b.n	802ae3c <_printf_float+0x2b8>
 802ae5e:	bf00      	nop
 802ae60:	7fefffff 	.word	0x7fefffff
 802ae64:	08079ba4 	.word	0x08079ba4
 802ae68:	08079ba8 	.word	0x08079ba8
 802ae6c:	08079bb0 	.word	0x08079bb0
 802ae70:	08079bac 	.word	0x08079bac
 802ae74:	08079bb4 	.word	0x08079bb4
 802ae78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ae7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802ae7c:	429a      	cmp	r2, r3
 802ae7e:	bfa8      	it	ge
 802ae80:	461a      	movge	r2, r3
 802ae82:	2a00      	cmp	r2, #0
 802ae84:	4691      	mov	r9, r2
 802ae86:	dc37      	bgt.n	802aef8 <_printf_float+0x374>
 802ae88:	f04f 0b00 	mov.w	fp, #0
 802ae8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802ae90:	f104 021a 	add.w	r2, r4, #26
 802ae94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802ae96:	9305      	str	r3, [sp, #20]
 802ae98:	eba3 0309 	sub.w	r3, r3, r9
 802ae9c:	455b      	cmp	r3, fp
 802ae9e:	dc33      	bgt.n	802af08 <_printf_float+0x384>
 802aea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802aea4:	429a      	cmp	r2, r3
 802aea6:	db3b      	blt.n	802af20 <_printf_float+0x39c>
 802aea8:	6823      	ldr	r3, [r4, #0]
 802aeaa:	07da      	lsls	r2, r3, #31
 802aeac:	d438      	bmi.n	802af20 <_printf_float+0x39c>
 802aeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802aeb0:	9a05      	ldr	r2, [sp, #20]
 802aeb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 802aeb4:	1a9a      	subs	r2, r3, r2
 802aeb6:	eba3 0901 	sub.w	r9, r3, r1
 802aeba:	4591      	cmp	r9, r2
 802aebc:	bfa8      	it	ge
 802aebe:	4691      	movge	r9, r2
 802aec0:	f1b9 0f00 	cmp.w	r9, #0
 802aec4:	dc35      	bgt.n	802af32 <_printf_float+0x3ae>
 802aec6:	f04f 0800 	mov.w	r8, #0
 802aeca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802aece:	f104 0a1a 	add.w	sl, r4, #26
 802aed2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802aed6:	1a9b      	subs	r3, r3, r2
 802aed8:	eba3 0309 	sub.w	r3, r3, r9
 802aedc:	4543      	cmp	r3, r8
 802aede:	f77f af79 	ble.w	802add4 <_printf_float+0x250>
 802aee2:	2301      	movs	r3, #1
 802aee4:	4652      	mov	r2, sl
 802aee6:	4631      	mov	r1, r6
 802aee8:	4628      	mov	r0, r5
 802aeea:	47b8      	blx	r7
 802aeec:	3001      	adds	r0, #1
 802aeee:	f43f aeaa 	beq.w	802ac46 <_printf_float+0xc2>
 802aef2:	f108 0801 	add.w	r8, r8, #1
 802aef6:	e7ec      	b.n	802aed2 <_printf_float+0x34e>
 802aef8:	4613      	mov	r3, r2
 802aefa:	4631      	mov	r1, r6
 802aefc:	4642      	mov	r2, r8
 802aefe:	4628      	mov	r0, r5
 802af00:	47b8      	blx	r7
 802af02:	3001      	adds	r0, #1
 802af04:	d1c0      	bne.n	802ae88 <_printf_float+0x304>
 802af06:	e69e      	b.n	802ac46 <_printf_float+0xc2>
 802af08:	2301      	movs	r3, #1
 802af0a:	4631      	mov	r1, r6
 802af0c:	4628      	mov	r0, r5
 802af0e:	9205      	str	r2, [sp, #20]
 802af10:	47b8      	blx	r7
 802af12:	3001      	adds	r0, #1
 802af14:	f43f ae97 	beq.w	802ac46 <_printf_float+0xc2>
 802af18:	9a05      	ldr	r2, [sp, #20]
 802af1a:	f10b 0b01 	add.w	fp, fp, #1
 802af1e:	e7b9      	b.n	802ae94 <_printf_float+0x310>
 802af20:	ee18 3a10 	vmov	r3, s16
 802af24:	4652      	mov	r2, sl
 802af26:	4631      	mov	r1, r6
 802af28:	4628      	mov	r0, r5
 802af2a:	47b8      	blx	r7
 802af2c:	3001      	adds	r0, #1
 802af2e:	d1be      	bne.n	802aeae <_printf_float+0x32a>
 802af30:	e689      	b.n	802ac46 <_printf_float+0xc2>
 802af32:	9a05      	ldr	r2, [sp, #20]
 802af34:	464b      	mov	r3, r9
 802af36:	4442      	add	r2, r8
 802af38:	4631      	mov	r1, r6
 802af3a:	4628      	mov	r0, r5
 802af3c:	47b8      	blx	r7
 802af3e:	3001      	adds	r0, #1
 802af40:	d1c1      	bne.n	802aec6 <_printf_float+0x342>
 802af42:	e680      	b.n	802ac46 <_printf_float+0xc2>
 802af44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802af46:	2a01      	cmp	r2, #1
 802af48:	dc01      	bgt.n	802af4e <_printf_float+0x3ca>
 802af4a:	07db      	lsls	r3, r3, #31
 802af4c:	d538      	bpl.n	802afc0 <_printf_float+0x43c>
 802af4e:	2301      	movs	r3, #1
 802af50:	4642      	mov	r2, r8
 802af52:	4631      	mov	r1, r6
 802af54:	4628      	mov	r0, r5
 802af56:	47b8      	blx	r7
 802af58:	3001      	adds	r0, #1
 802af5a:	f43f ae74 	beq.w	802ac46 <_printf_float+0xc2>
 802af5e:	ee18 3a10 	vmov	r3, s16
 802af62:	4652      	mov	r2, sl
 802af64:	4631      	mov	r1, r6
 802af66:	4628      	mov	r0, r5
 802af68:	47b8      	blx	r7
 802af6a:	3001      	adds	r0, #1
 802af6c:	f43f ae6b 	beq.w	802ac46 <_printf_float+0xc2>
 802af70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802af74:	2200      	movs	r2, #0
 802af76:	2300      	movs	r3, #0
 802af78:	f7f5 fd06 	bl	8020988 <__aeabi_dcmpeq>
 802af7c:	b9d8      	cbnz	r0, 802afb6 <_printf_float+0x432>
 802af7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802af80:	f108 0201 	add.w	r2, r8, #1
 802af84:	3b01      	subs	r3, #1
 802af86:	4631      	mov	r1, r6
 802af88:	4628      	mov	r0, r5
 802af8a:	47b8      	blx	r7
 802af8c:	3001      	adds	r0, #1
 802af8e:	d10e      	bne.n	802afae <_printf_float+0x42a>
 802af90:	e659      	b.n	802ac46 <_printf_float+0xc2>
 802af92:	2301      	movs	r3, #1
 802af94:	4652      	mov	r2, sl
 802af96:	4631      	mov	r1, r6
 802af98:	4628      	mov	r0, r5
 802af9a:	47b8      	blx	r7
 802af9c:	3001      	adds	r0, #1
 802af9e:	f43f ae52 	beq.w	802ac46 <_printf_float+0xc2>
 802afa2:	f108 0801 	add.w	r8, r8, #1
 802afa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802afa8:	3b01      	subs	r3, #1
 802afaa:	4543      	cmp	r3, r8
 802afac:	dcf1      	bgt.n	802af92 <_printf_float+0x40e>
 802afae:	464b      	mov	r3, r9
 802afb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802afb4:	e6dc      	b.n	802ad70 <_printf_float+0x1ec>
 802afb6:	f04f 0800 	mov.w	r8, #0
 802afba:	f104 0a1a 	add.w	sl, r4, #26
 802afbe:	e7f2      	b.n	802afa6 <_printf_float+0x422>
 802afc0:	2301      	movs	r3, #1
 802afc2:	4642      	mov	r2, r8
 802afc4:	e7df      	b.n	802af86 <_printf_float+0x402>
 802afc6:	2301      	movs	r3, #1
 802afc8:	464a      	mov	r2, r9
 802afca:	4631      	mov	r1, r6
 802afcc:	4628      	mov	r0, r5
 802afce:	47b8      	blx	r7
 802afd0:	3001      	adds	r0, #1
 802afd2:	f43f ae38 	beq.w	802ac46 <_printf_float+0xc2>
 802afd6:	f108 0801 	add.w	r8, r8, #1
 802afda:	68e3      	ldr	r3, [r4, #12]
 802afdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802afde:	1a5b      	subs	r3, r3, r1
 802afe0:	4543      	cmp	r3, r8
 802afe2:	dcf0      	bgt.n	802afc6 <_printf_float+0x442>
 802afe4:	e6fa      	b.n	802addc <_printf_float+0x258>
 802afe6:	f04f 0800 	mov.w	r8, #0
 802afea:	f104 0919 	add.w	r9, r4, #25
 802afee:	e7f4      	b.n	802afda <_printf_float+0x456>

0802aff0 <_printf_common>:
 802aff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aff4:	4616      	mov	r6, r2
 802aff6:	4699      	mov	r9, r3
 802aff8:	688a      	ldr	r2, [r1, #8]
 802affa:	690b      	ldr	r3, [r1, #16]
 802affc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b000:	4293      	cmp	r3, r2
 802b002:	bfb8      	it	lt
 802b004:	4613      	movlt	r3, r2
 802b006:	6033      	str	r3, [r6, #0]
 802b008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b00c:	4607      	mov	r7, r0
 802b00e:	460c      	mov	r4, r1
 802b010:	b10a      	cbz	r2, 802b016 <_printf_common+0x26>
 802b012:	3301      	adds	r3, #1
 802b014:	6033      	str	r3, [r6, #0]
 802b016:	6823      	ldr	r3, [r4, #0]
 802b018:	0699      	lsls	r1, r3, #26
 802b01a:	bf42      	ittt	mi
 802b01c:	6833      	ldrmi	r3, [r6, #0]
 802b01e:	3302      	addmi	r3, #2
 802b020:	6033      	strmi	r3, [r6, #0]
 802b022:	6825      	ldr	r5, [r4, #0]
 802b024:	f015 0506 	ands.w	r5, r5, #6
 802b028:	d106      	bne.n	802b038 <_printf_common+0x48>
 802b02a:	f104 0a19 	add.w	sl, r4, #25
 802b02e:	68e3      	ldr	r3, [r4, #12]
 802b030:	6832      	ldr	r2, [r6, #0]
 802b032:	1a9b      	subs	r3, r3, r2
 802b034:	42ab      	cmp	r3, r5
 802b036:	dc26      	bgt.n	802b086 <_printf_common+0x96>
 802b038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802b03c:	1e13      	subs	r3, r2, #0
 802b03e:	6822      	ldr	r2, [r4, #0]
 802b040:	bf18      	it	ne
 802b042:	2301      	movne	r3, #1
 802b044:	0692      	lsls	r2, r2, #26
 802b046:	d42b      	bmi.n	802b0a0 <_printf_common+0xb0>
 802b048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b04c:	4649      	mov	r1, r9
 802b04e:	4638      	mov	r0, r7
 802b050:	47c0      	blx	r8
 802b052:	3001      	adds	r0, #1
 802b054:	d01e      	beq.n	802b094 <_printf_common+0xa4>
 802b056:	6823      	ldr	r3, [r4, #0]
 802b058:	68e5      	ldr	r5, [r4, #12]
 802b05a:	6832      	ldr	r2, [r6, #0]
 802b05c:	f003 0306 	and.w	r3, r3, #6
 802b060:	2b04      	cmp	r3, #4
 802b062:	bf08      	it	eq
 802b064:	1aad      	subeq	r5, r5, r2
 802b066:	68a3      	ldr	r3, [r4, #8]
 802b068:	6922      	ldr	r2, [r4, #16]
 802b06a:	bf0c      	ite	eq
 802b06c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b070:	2500      	movne	r5, #0
 802b072:	4293      	cmp	r3, r2
 802b074:	bfc4      	itt	gt
 802b076:	1a9b      	subgt	r3, r3, r2
 802b078:	18ed      	addgt	r5, r5, r3
 802b07a:	2600      	movs	r6, #0
 802b07c:	341a      	adds	r4, #26
 802b07e:	42b5      	cmp	r5, r6
 802b080:	d11a      	bne.n	802b0b8 <_printf_common+0xc8>
 802b082:	2000      	movs	r0, #0
 802b084:	e008      	b.n	802b098 <_printf_common+0xa8>
 802b086:	2301      	movs	r3, #1
 802b088:	4652      	mov	r2, sl
 802b08a:	4649      	mov	r1, r9
 802b08c:	4638      	mov	r0, r7
 802b08e:	47c0      	blx	r8
 802b090:	3001      	adds	r0, #1
 802b092:	d103      	bne.n	802b09c <_printf_common+0xac>
 802b094:	f04f 30ff 	mov.w	r0, #4294967295
 802b098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b09c:	3501      	adds	r5, #1
 802b09e:	e7c6      	b.n	802b02e <_printf_common+0x3e>
 802b0a0:	18e1      	adds	r1, r4, r3
 802b0a2:	1c5a      	adds	r2, r3, #1
 802b0a4:	2030      	movs	r0, #48	; 0x30
 802b0a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b0aa:	4422      	add	r2, r4
 802b0ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b0b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b0b4:	3302      	adds	r3, #2
 802b0b6:	e7c7      	b.n	802b048 <_printf_common+0x58>
 802b0b8:	2301      	movs	r3, #1
 802b0ba:	4622      	mov	r2, r4
 802b0bc:	4649      	mov	r1, r9
 802b0be:	4638      	mov	r0, r7
 802b0c0:	47c0      	blx	r8
 802b0c2:	3001      	adds	r0, #1
 802b0c4:	d0e6      	beq.n	802b094 <_printf_common+0xa4>
 802b0c6:	3601      	adds	r6, #1
 802b0c8:	e7d9      	b.n	802b07e <_printf_common+0x8e>
	...

0802b0cc <_printf_i>:
 802b0cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b0d0:	7e0f      	ldrb	r7, [r1, #24]
 802b0d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b0d4:	2f78      	cmp	r7, #120	; 0x78
 802b0d6:	4691      	mov	r9, r2
 802b0d8:	4680      	mov	r8, r0
 802b0da:	460c      	mov	r4, r1
 802b0dc:	469a      	mov	sl, r3
 802b0de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802b0e2:	d807      	bhi.n	802b0f4 <_printf_i+0x28>
 802b0e4:	2f62      	cmp	r7, #98	; 0x62
 802b0e6:	d80a      	bhi.n	802b0fe <_printf_i+0x32>
 802b0e8:	2f00      	cmp	r7, #0
 802b0ea:	f000 80d8 	beq.w	802b29e <_printf_i+0x1d2>
 802b0ee:	2f58      	cmp	r7, #88	; 0x58
 802b0f0:	f000 80a3 	beq.w	802b23a <_printf_i+0x16e>
 802b0f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b0f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802b0fc:	e03a      	b.n	802b174 <_printf_i+0xa8>
 802b0fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802b102:	2b15      	cmp	r3, #21
 802b104:	d8f6      	bhi.n	802b0f4 <_printf_i+0x28>
 802b106:	a101      	add	r1, pc, #4	; (adr r1, 802b10c <_printf_i+0x40>)
 802b108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b10c:	0802b165 	.word	0x0802b165
 802b110:	0802b179 	.word	0x0802b179
 802b114:	0802b0f5 	.word	0x0802b0f5
 802b118:	0802b0f5 	.word	0x0802b0f5
 802b11c:	0802b0f5 	.word	0x0802b0f5
 802b120:	0802b0f5 	.word	0x0802b0f5
 802b124:	0802b179 	.word	0x0802b179
 802b128:	0802b0f5 	.word	0x0802b0f5
 802b12c:	0802b0f5 	.word	0x0802b0f5
 802b130:	0802b0f5 	.word	0x0802b0f5
 802b134:	0802b0f5 	.word	0x0802b0f5
 802b138:	0802b285 	.word	0x0802b285
 802b13c:	0802b1a9 	.word	0x0802b1a9
 802b140:	0802b267 	.word	0x0802b267
 802b144:	0802b0f5 	.word	0x0802b0f5
 802b148:	0802b0f5 	.word	0x0802b0f5
 802b14c:	0802b2a7 	.word	0x0802b2a7
 802b150:	0802b0f5 	.word	0x0802b0f5
 802b154:	0802b1a9 	.word	0x0802b1a9
 802b158:	0802b0f5 	.word	0x0802b0f5
 802b15c:	0802b0f5 	.word	0x0802b0f5
 802b160:	0802b26f 	.word	0x0802b26f
 802b164:	682b      	ldr	r3, [r5, #0]
 802b166:	1d1a      	adds	r2, r3, #4
 802b168:	681b      	ldr	r3, [r3, #0]
 802b16a:	602a      	str	r2, [r5, #0]
 802b16c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b174:	2301      	movs	r3, #1
 802b176:	e0a3      	b.n	802b2c0 <_printf_i+0x1f4>
 802b178:	6820      	ldr	r0, [r4, #0]
 802b17a:	6829      	ldr	r1, [r5, #0]
 802b17c:	0606      	lsls	r6, r0, #24
 802b17e:	f101 0304 	add.w	r3, r1, #4
 802b182:	d50a      	bpl.n	802b19a <_printf_i+0xce>
 802b184:	680e      	ldr	r6, [r1, #0]
 802b186:	602b      	str	r3, [r5, #0]
 802b188:	2e00      	cmp	r6, #0
 802b18a:	da03      	bge.n	802b194 <_printf_i+0xc8>
 802b18c:	232d      	movs	r3, #45	; 0x2d
 802b18e:	4276      	negs	r6, r6
 802b190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b194:	485e      	ldr	r0, [pc, #376]	; (802b310 <_printf_i+0x244>)
 802b196:	230a      	movs	r3, #10
 802b198:	e019      	b.n	802b1ce <_printf_i+0x102>
 802b19a:	680e      	ldr	r6, [r1, #0]
 802b19c:	602b      	str	r3, [r5, #0]
 802b19e:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b1a2:	bf18      	it	ne
 802b1a4:	b236      	sxthne	r6, r6
 802b1a6:	e7ef      	b.n	802b188 <_printf_i+0xbc>
 802b1a8:	682b      	ldr	r3, [r5, #0]
 802b1aa:	6820      	ldr	r0, [r4, #0]
 802b1ac:	1d19      	adds	r1, r3, #4
 802b1ae:	6029      	str	r1, [r5, #0]
 802b1b0:	0601      	lsls	r1, r0, #24
 802b1b2:	d501      	bpl.n	802b1b8 <_printf_i+0xec>
 802b1b4:	681e      	ldr	r6, [r3, #0]
 802b1b6:	e002      	b.n	802b1be <_printf_i+0xf2>
 802b1b8:	0646      	lsls	r6, r0, #25
 802b1ba:	d5fb      	bpl.n	802b1b4 <_printf_i+0xe8>
 802b1bc:	881e      	ldrh	r6, [r3, #0]
 802b1be:	4854      	ldr	r0, [pc, #336]	; (802b310 <_printf_i+0x244>)
 802b1c0:	2f6f      	cmp	r7, #111	; 0x6f
 802b1c2:	bf0c      	ite	eq
 802b1c4:	2308      	moveq	r3, #8
 802b1c6:	230a      	movne	r3, #10
 802b1c8:	2100      	movs	r1, #0
 802b1ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b1ce:	6865      	ldr	r5, [r4, #4]
 802b1d0:	60a5      	str	r5, [r4, #8]
 802b1d2:	2d00      	cmp	r5, #0
 802b1d4:	bfa2      	ittt	ge
 802b1d6:	6821      	ldrge	r1, [r4, #0]
 802b1d8:	f021 0104 	bicge.w	r1, r1, #4
 802b1dc:	6021      	strge	r1, [r4, #0]
 802b1de:	b90e      	cbnz	r6, 802b1e4 <_printf_i+0x118>
 802b1e0:	2d00      	cmp	r5, #0
 802b1e2:	d04d      	beq.n	802b280 <_printf_i+0x1b4>
 802b1e4:	4615      	mov	r5, r2
 802b1e6:	fbb6 f1f3 	udiv	r1, r6, r3
 802b1ea:	fb03 6711 	mls	r7, r3, r1, r6
 802b1ee:	5dc7      	ldrb	r7, [r0, r7]
 802b1f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802b1f4:	4637      	mov	r7, r6
 802b1f6:	42bb      	cmp	r3, r7
 802b1f8:	460e      	mov	r6, r1
 802b1fa:	d9f4      	bls.n	802b1e6 <_printf_i+0x11a>
 802b1fc:	2b08      	cmp	r3, #8
 802b1fe:	d10b      	bne.n	802b218 <_printf_i+0x14c>
 802b200:	6823      	ldr	r3, [r4, #0]
 802b202:	07de      	lsls	r6, r3, #31
 802b204:	d508      	bpl.n	802b218 <_printf_i+0x14c>
 802b206:	6923      	ldr	r3, [r4, #16]
 802b208:	6861      	ldr	r1, [r4, #4]
 802b20a:	4299      	cmp	r1, r3
 802b20c:	bfde      	ittt	le
 802b20e:	2330      	movle	r3, #48	; 0x30
 802b210:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b214:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b218:	1b52      	subs	r2, r2, r5
 802b21a:	6122      	str	r2, [r4, #16]
 802b21c:	f8cd a000 	str.w	sl, [sp]
 802b220:	464b      	mov	r3, r9
 802b222:	aa03      	add	r2, sp, #12
 802b224:	4621      	mov	r1, r4
 802b226:	4640      	mov	r0, r8
 802b228:	f7ff fee2 	bl	802aff0 <_printf_common>
 802b22c:	3001      	adds	r0, #1
 802b22e:	d14c      	bne.n	802b2ca <_printf_i+0x1fe>
 802b230:	f04f 30ff 	mov.w	r0, #4294967295
 802b234:	b004      	add	sp, #16
 802b236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b23a:	4835      	ldr	r0, [pc, #212]	; (802b310 <_printf_i+0x244>)
 802b23c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802b240:	6829      	ldr	r1, [r5, #0]
 802b242:	6823      	ldr	r3, [r4, #0]
 802b244:	f851 6b04 	ldr.w	r6, [r1], #4
 802b248:	6029      	str	r1, [r5, #0]
 802b24a:	061d      	lsls	r5, r3, #24
 802b24c:	d514      	bpl.n	802b278 <_printf_i+0x1ac>
 802b24e:	07df      	lsls	r7, r3, #31
 802b250:	bf44      	itt	mi
 802b252:	f043 0320 	orrmi.w	r3, r3, #32
 802b256:	6023      	strmi	r3, [r4, #0]
 802b258:	b91e      	cbnz	r6, 802b262 <_printf_i+0x196>
 802b25a:	6823      	ldr	r3, [r4, #0]
 802b25c:	f023 0320 	bic.w	r3, r3, #32
 802b260:	6023      	str	r3, [r4, #0]
 802b262:	2310      	movs	r3, #16
 802b264:	e7b0      	b.n	802b1c8 <_printf_i+0xfc>
 802b266:	6823      	ldr	r3, [r4, #0]
 802b268:	f043 0320 	orr.w	r3, r3, #32
 802b26c:	6023      	str	r3, [r4, #0]
 802b26e:	2378      	movs	r3, #120	; 0x78
 802b270:	4828      	ldr	r0, [pc, #160]	; (802b314 <_printf_i+0x248>)
 802b272:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802b276:	e7e3      	b.n	802b240 <_printf_i+0x174>
 802b278:	0659      	lsls	r1, r3, #25
 802b27a:	bf48      	it	mi
 802b27c:	b2b6      	uxthmi	r6, r6
 802b27e:	e7e6      	b.n	802b24e <_printf_i+0x182>
 802b280:	4615      	mov	r5, r2
 802b282:	e7bb      	b.n	802b1fc <_printf_i+0x130>
 802b284:	682b      	ldr	r3, [r5, #0]
 802b286:	6826      	ldr	r6, [r4, #0]
 802b288:	6961      	ldr	r1, [r4, #20]
 802b28a:	1d18      	adds	r0, r3, #4
 802b28c:	6028      	str	r0, [r5, #0]
 802b28e:	0635      	lsls	r5, r6, #24
 802b290:	681b      	ldr	r3, [r3, #0]
 802b292:	d501      	bpl.n	802b298 <_printf_i+0x1cc>
 802b294:	6019      	str	r1, [r3, #0]
 802b296:	e002      	b.n	802b29e <_printf_i+0x1d2>
 802b298:	0670      	lsls	r0, r6, #25
 802b29a:	d5fb      	bpl.n	802b294 <_printf_i+0x1c8>
 802b29c:	8019      	strh	r1, [r3, #0]
 802b29e:	2300      	movs	r3, #0
 802b2a0:	6123      	str	r3, [r4, #16]
 802b2a2:	4615      	mov	r5, r2
 802b2a4:	e7ba      	b.n	802b21c <_printf_i+0x150>
 802b2a6:	682b      	ldr	r3, [r5, #0]
 802b2a8:	1d1a      	adds	r2, r3, #4
 802b2aa:	602a      	str	r2, [r5, #0]
 802b2ac:	681d      	ldr	r5, [r3, #0]
 802b2ae:	6862      	ldr	r2, [r4, #4]
 802b2b0:	2100      	movs	r1, #0
 802b2b2:	4628      	mov	r0, r5
 802b2b4:	f7f4 fef4 	bl	80200a0 <memchr>
 802b2b8:	b108      	cbz	r0, 802b2be <_printf_i+0x1f2>
 802b2ba:	1b40      	subs	r0, r0, r5
 802b2bc:	6060      	str	r0, [r4, #4]
 802b2be:	6863      	ldr	r3, [r4, #4]
 802b2c0:	6123      	str	r3, [r4, #16]
 802b2c2:	2300      	movs	r3, #0
 802b2c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b2c8:	e7a8      	b.n	802b21c <_printf_i+0x150>
 802b2ca:	6923      	ldr	r3, [r4, #16]
 802b2cc:	462a      	mov	r2, r5
 802b2ce:	4649      	mov	r1, r9
 802b2d0:	4640      	mov	r0, r8
 802b2d2:	47d0      	blx	sl
 802b2d4:	3001      	adds	r0, #1
 802b2d6:	d0ab      	beq.n	802b230 <_printf_i+0x164>
 802b2d8:	6823      	ldr	r3, [r4, #0]
 802b2da:	079b      	lsls	r3, r3, #30
 802b2dc:	d413      	bmi.n	802b306 <_printf_i+0x23a>
 802b2de:	68e0      	ldr	r0, [r4, #12]
 802b2e0:	9b03      	ldr	r3, [sp, #12]
 802b2e2:	4298      	cmp	r0, r3
 802b2e4:	bfb8      	it	lt
 802b2e6:	4618      	movlt	r0, r3
 802b2e8:	e7a4      	b.n	802b234 <_printf_i+0x168>
 802b2ea:	2301      	movs	r3, #1
 802b2ec:	4632      	mov	r2, r6
 802b2ee:	4649      	mov	r1, r9
 802b2f0:	4640      	mov	r0, r8
 802b2f2:	47d0      	blx	sl
 802b2f4:	3001      	adds	r0, #1
 802b2f6:	d09b      	beq.n	802b230 <_printf_i+0x164>
 802b2f8:	3501      	adds	r5, #1
 802b2fa:	68e3      	ldr	r3, [r4, #12]
 802b2fc:	9903      	ldr	r1, [sp, #12]
 802b2fe:	1a5b      	subs	r3, r3, r1
 802b300:	42ab      	cmp	r3, r5
 802b302:	dcf2      	bgt.n	802b2ea <_printf_i+0x21e>
 802b304:	e7eb      	b.n	802b2de <_printf_i+0x212>
 802b306:	2500      	movs	r5, #0
 802b308:	f104 0619 	add.w	r6, r4, #25
 802b30c:	e7f5      	b.n	802b2fa <_printf_i+0x22e>
 802b30e:	bf00      	nop
 802b310:	08079bb6 	.word	0x08079bb6
 802b314:	08079bc7 	.word	0x08079bc7

0802b318 <srand>:
 802b318:	b538      	push	{r3, r4, r5, lr}
 802b31a:	4b10      	ldr	r3, [pc, #64]	; (802b35c <srand+0x44>)
 802b31c:	681d      	ldr	r5, [r3, #0]
 802b31e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802b320:	4604      	mov	r4, r0
 802b322:	b9b3      	cbnz	r3, 802b352 <srand+0x3a>
 802b324:	2018      	movs	r0, #24
 802b326:	f000 ff5d 	bl	802c1e4 <malloc>
 802b32a:	4602      	mov	r2, r0
 802b32c:	63a8      	str	r0, [r5, #56]	; 0x38
 802b32e:	b920      	cbnz	r0, 802b33a <srand+0x22>
 802b330:	4b0b      	ldr	r3, [pc, #44]	; (802b360 <srand+0x48>)
 802b332:	480c      	ldr	r0, [pc, #48]	; (802b364 <srand+0x4c>)
 802b334:	2142      	movs	r1, #66	; 0x42
 802b336:	f000 f895 	bl	802b464 <__assert_func>
 802b33a:	490b      	ldr	r1, [pc, #44]	; (802b368 <srand+0x50>)
 802b33c:	4b0b      	ldr	r3, [pc, #44]	; (802b36c <srand+0x54>)
 802b33e:	e9c0 1300 	strd	r1, r3, [r0]
 802b342:	4b0b      	ldr	r3, [pc, #44]	; (802b370 <srand+0x58>)
 802b344:	6083      	str	r3, [r0, #8]
 802b346:	230b      	movs	r3, #11
 802b348:	8183      	strh	r3, [r0, #12]
 802b34a:	2100      	movs	r1, #0
 802b34c:	2001      	movs	r0, #1
 802b34e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802b352:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802b354:	2200      	movs	r2, #0
 802b356:	611c      	str	r4, [r3, #16]
 802b358:	615a      	str	r2, [r3, #20]
 802b35a:	bd38      	pop	{r3, r4, r5, pc}
 802b35c:	200002ac 	.word	0x200002ac
 802b360:	08079bd8 	.word	0x08079bd8
 802b364:	08079bef 	.word	0x08079bef
 802b368:	abcd330e 	.word	0xabcd330e
 802b36c:	e66d1234 	.word	0xe66d1234
 802b370:	0005deec 	.word	0x0005deec

0802b374 <rand>:
 802b374:	4b16      	ldr	r3, [pc, #88]	; (802b3d0 <rand+0x5c>)
 802b376:	b510      	push	{r4, lr}
 802b378:	681c      	ldr	r4, [r3, #0]
 802b37a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b37c:	b9b3      	cbnz	r3, 802b3ac <rand+0x38>
 802b37e:	2018      	movs	r0, #24
 802b380:	f000 ff30 	bl	802c1e4 <malloc>
 802b384:	63a0      	str	r0, [r4, #56]	; 0x38
 802b386:	b928      	cbnz	r0, 802b394 <rand+0x20>
 802b388:	4602      	mov	r2, r0
 802b38a:	4b12      	ldr	r3, [pc, #72]	; (802b3d4 <rand+0x60>)
 802b38c:	4812      	ldr	r0, [pc, #72]	; (802b3d8 <rand+0x64>)
 802b38e:	214e      	movs	r1, #78	; 0x4e
 802b390:	f000 f868 	bl	802b464 <__assert_func>
 802b394:	4a11      	ldr	r2, [pc, #68]	; (802b3dc <rand+0x68>)
 802b396:	4b12      	ldr	r3, [pc, #72]	; (802b3e0 <rand+0x6c>)
 802b398:	e9c0 2300 	strd	r2, r3, [r0]
 802b39c:	4b11      	ldr	r3, [pc, #68]	; (802b3e4 <rand+0x70>)
 802b39e:	6083      	str	r3, [r0, #8]
 802b3a0:	230b      	movs	r3, #11
 802b3a2:	8183      	strh	r3, [r0, #12]
 802b3a4:	2201      	movs	r2, #1
 802b3a6:	2300      	movs	r3, #0
 802b3a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802b3ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802b3ae:	4a0e      	ldr	r2, [pc, #56]	; (802b3e8 <rand+0x74>)
 802b3b0:	6920      	ldr	r0, [r4, #16]
 802b3b2:	6963      	ldr	r3, [r4, #20]
 802b3b4:	490d      	ldr	r1, [pc, #52]	; (802b3ec <rand+0x78>)
 802b3b6:	4342      	muls	r2, r0
 802b3b8:	fb01 2203 	mla	r2, r1, r3, r2
 802b3bc:	fba0 0101 	umull	r0, r1, r0, r1
 802b3c0:	1c43      	adds	r3, r0, #1
 802b3c2:	eb42 0001 	adc.w	r0, r2, r1
 802b3c6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802b3ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802b3ce:	bd10      	pop	{r4, pc}
 802b3d0:	200002ac 	.word	0x200002ac
 802b3d4:	08079bd8 	.word	0x08079bd8
 802b3d8:	08079bef 	.word	0x08079bef
 802b3dc:	abcd330e 	.word	0xabcd330e
 802b3e0:	e66d1234 	.word	0xe66d1234
 802b3e4:	0005deec 	.word	0x0005deec
 802b3e8:	5851f42d 	.word	0x5851f42d
 802b3ec:	4c957f2d 	.word	0x4c957f2d

0802b3f0 <siprintf>:
 802b3f0:	b40e      	push	{r1, r2, r3}
 802b3f2:	b500      	push	{lr}
 802b3f4:	b09c      	sub	sp, #112	; 0x70
 802b3f6:	ab1d      	add	r3, sp, #116	; 0x74
 802b3f8:	9002      	str	r0, [sp, #8]
 802b3fa:	9006      	str	r0, [sp, #24]
 802b3fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802b400:	4809      	ldr	r0, [pc, #36]	; (802b428 <siprintf+0x38>)
 802b402:	9107      	str	r1, [sp, #28]
 802b404:	9104      	str	r1, [sp, #16]
 802b406:	4909      	ldr	r1, [pc, #36]	; (802b42c <siprintf+0x3c>)
 802b408:	f853 2b04 	ldr.w	r2, [r3], #4
 802b40c:	9105      	str	r1, [sp, #20]
 802b40e:	6800      	ldr	r0, [r0, #0]
 802b410:	9301      	str	r3, [sp, #4]
 802b412:	a902      	add	r1, sp, #8
 802b414:	f001 fbc4 	bl	802cba0 <_svfiprintf_r>
 802b418:	9b02      	ldr	r3, [sp, #8]
 802b41a:	2200      	movs	r2, #0
 802b41c:	701a      	strb	r2, [r3, #0]
 802b41e:	b01c      	add	sp, #112	; 0x70
 802b420:	f85d eb04 	ldr.w	lr, [sp], #4
 802b424:	b003      	add	sp, #12
 802b426:	4770      	bx	lr
 802b428:	200002ac 	.word	0x200002ac
 802b42c:	ffff0208 	.word	0xffff0208

0802b430 <time>:
 802b430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b432:	4b0b      	ldr	r3, [pc, #44]	; (802b460 <time+0x30>)
 802b434:	2200      	movs	r2, #0
 802b436:	4669      	mov	r1, sp
 802b438:	4604      	mov	r4, r0
 802b43a:	6818      	ldr	r0, [r3, #0]
 802b43c:	f000 febc 	bl	802c1b8 <_gettimeofday_r>
 802b440:	2800      	cmp	r0, #0
 802b442:	bfbe      	ittt	lt
 802b444:	f04f 32ff 	movlt.w	r2, #4294967295
 802b448:	f04f 33ff 	movlt.w	r3, #4294967295
 802b44c:	e9cd 2300 	strdlt	r2, r3, [sp]
 802b450:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b454:	b10c      	cbz	r4, 802b45a <time+0x2a>
 802b456:	e9c4 0100 	strd	r0, r1, [r4]
 802b45a:	b004      	add	sp, #16
 802b45c:	bd10      	pop	{r4, pc}
 802b45e:	bf00      	nop
 802b460:	200002ac 	.word	0x200002ac

0802b464 <__assert_func>:
 802b464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b466:	4614      	mov	r4, r2
 802b468:	461a      	mov	r2, r3
 802b46a:	4b09      	ldr	r3, [pc, #36]	; (802b490 <__assert_func+0x2c>)
 802b46c:	681b      	ldr	r3, [r3, #0]
 802b46e:	4605      	mov	r5, r0
 802b470:	68d8      	ldr	r0, [r3, #12]
 802b472:	b14c      	cbz	r4, 802b488 <__assert_func+0x24>
 802b474:	4b07      	ldr	r3, [pc, #28]	; (802b494 <__assert_func+0x30>)
 802b476:	9100      	str	r1, [sp, #0]
 802b478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b47c:	4906      	ldr	r1, [pc, #24]	; (802b498 <__assert_func+0x34>)
 802b47e:	462b      	mov	r3, r5
 802b480:	f000 fe88 	bl	802c194 <fiprintf>
 802b484:	f001 feb6 	bl	802d1f4 <abort>
 802b488:	4b04      	ldr	r3, [pc, #16]	; (802b49c <__assert_func+0x38>)
 802b48a:	461c      	mov	r4, r3
 802b48c:	e7f3      	b.n	802b476 <__assert_func+0x12>
 802b48e:	bf00      	nop
 802b490:	200002ac 	.word	0x200002ac
 802b494:	08079c4a 	.word	0x08079c4a
 802b498:	08079c57 	.word	0x08079c57
 802b49c:	08079c85 	.word	0x08079c85

0802b4a0 <quorem>:
 802b4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b4a4:	6903      	ldr	r3, [r0, #16]
 802b4a6:	690c      	ldr	r4, [r1, #16]
 802b4a8:	42a3      	cmp	r3, r4
 802b4aa:	4607      	mov	r7, r0
 802b4ac:	f2c0 8081 	blt.w	802b5b2 <quorem+0x112>
 802b4b0:	3c01      	subs	r4, #1
 802b4b2:	f101 0814 	add.w	r8, r1, #20
 802b4b6:	f100 0514 	add.w	r5, r0, #20
 802b4ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b4be:	9301      	str	r3, [sp, #4]
 802b4c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802b4c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b4c8:	3301      	adds	r3, #1
 802b4ca:	429a      	cmp	r2, r3
 802b4cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802b4d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802b4d4:	fbb2 f6f3 	udiv	r6, r2, r3
 802b4d8:	d331      	bcc.n	802b53e <quorem+0x9e>
 802b4da:	f04f 0e00 	mov.w	lr, #0
 802b4de:	4640      	mov	r0, r8
 802b4e0:	46ac      	mov	ip, r5
 802b4e2:	46f2      	mov	sl, lr
 802b4e4:	f850 2b04 	ldr.w	r2, [r0], #4
 802b4e8:	b293      	uxth	r3, r2
 802b4ea:	fb06 e303 	mla	r3, r6, r3, lr
 802b4ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802b4f2:	b29b      	uxth	r3, r3
 802b4f4:	ebaa 0303 	sub.w	r3, sl, r3
 802b4f8:	f8dc a000 	ldr.w	sl, [ip]
 802b4fc:	0c12      	lsrs	r2, r2, #16
 802b4fe:	fa13 f38a 	uxtah	r3, r3, sl
 802b502:	fb06 e202 	mla	r2, r6, r2, lr
 802b506:	9300      	str	r3, [sp, #0]
 802b508:	9b00      	ldr	r3, [sp, #0]
 802b50a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802b50e:	b292      	uxth	r2, r2
 802b510:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802b514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b518:	f8bd 3000 	ldrh.w	r3, [sp]
 802b51c:	4581      	cmp	r9, r0
 802b51e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b522:	f84c 3b04 	str.w	r3, [ip], #4
 802b526:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802b52a:	d2db      	bcs.n	802b4e4 <quorem+0x44>
 802b52c:	f855 300b 	ldr.w	r3, [r5, fp]
 802b530:	b92b      	cbnz	r3, 802b53e <quorem+0x9e>
 802b532:	9b01      	ldr	r3, [sp, #4]
 802b534:	3b04      	subs	r3, #4
 802b536:	429d      	cmp	r5, r3
 802b538:	461a      	mov	r2, r3
 802b53a:	d32e      	bcc.n	802b59a <quorem+0xfa>
 802b53c:	613c      	str	r4, [r7, #16]
 802b53e:	4638      	mov	r0, r7
 802b540:	f001 f8da 	bl	802c6f8 <__mcmp>
 802b544:	2800      	cmp	r0, #0
 802b546:	db24      	blt.n	802b592 <quorem+0xf2>
 802b548:	3601      	adds	r6, #1
 802b54a:	4628      	mov	r0, r5
 802b54c:	f04f 0c00 	mov.w	ip, #0
 802b550:	f858 2b04 	ldr.w	r2, [r8], #4
 802b554:	f8d0 e000 	ldr.w	lr, [r0]
 802b558:	b293      	uxth	r3, r2
 802b55a:	ebac 0303 	sub.w	r3, ip, r3
 802b55e:	0c12      	lsrs	r2, r2, #16
 802b560:	fa13 f38e 	uxtah	r3, r3, lr
 802b564:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802b568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b56c:	b29b      	uxth	r3, r3
 802b56e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b572:	45c1      	cmp	r9, r8
 802b574:	f840 3b04 	str.w	r3, [r0], #4
 802b578:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802b57c:	d2e8      	bcs.n	802b550 <quorem+0xb0>
 802b57e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b586:	b922      	cbnz	r2, 802b592 <quorem+0xf2>
 802b588:	3b04      	subs	r3, #4
 802b58a:	429d      	cmp	r5, r3
 802b58c:	461a      	mov	r2, r3
 802b58e:	d30a      	bcc.n	802b5a6 <quorem+0x106>
 802b590:	613c      	str	r4, [r7, #16]
 802b592:	4630      	mov	r0, r6
 802b594:	b003      	add	sp, #12
 802b596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b59a:	6812      	ldr	r2, [r2, #0]
 802b59c:	3b04      	subs	r3, #4
 802b59e:	2a00      	cmp	r2, #0
 802b5a0:	d1cc      	bne.n	802b53c <quorem+0x9c>
 802b5a2:	3c01      	subs	r4, #1
 802b5a4:	e7c7      	b.n	802b536 <quorem+0x96>
 802b5a6:	6812      	ldr	r2, [r2, #0]
 802b5a8:	3b04      	subs	r3, #4
 802b5aa:	2a00      	cmp	r2, #0
 802b5ac:	d1f0      	bne.n	802b590 <quorem+0xf0>
 802b5ae:	3c01      	subs	r4, #1
 802b5b0:	e7eb      	b.n	802b58a <quorem+0xea>
 802b5b2:	2000      	movs	r0, #0
 802b5b4:	e7ee      	b.n	802b594 <quorem+0xf4>
	...

0802b5b8 <_dtoa_r>:
 802b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b5bc:	ed2d 8b04 	vpush	{d8-d9}
 802b5c0:	ec57 6b10 	vmov	r6, r7, d0
 802b5c4:	b093      	sub	sp, #76	; 0x4c
 802b5c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802b5c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802b5cc:	9106      	str	r1, [sp, #24]
 802b5ce:	ee10 aa10 	vmov	sl, s0
 802b5d2:	4604      	mov	r4, r0
 802b5d4:	9209      	str	r2, [sp, #36]	; 0x24
 802b5d6:	930c      	str	r3, [sp, #48]	; 0x30
 802b5d8:	46bb      	mov	fp, r7
 802b5da:	b975      	cbnz	r5, 802b5fa <_dtoa_r+0x42>
 802b5dc:	2010      	movs	r0, #16
 802b5de:	f000 fe01 	bl	802c1e4 <malloc>
 802b5e2:	4602      	mov	r2, r0
 802b5e4:	6260      	str	r0, [r4, #36]	; 0x24
 802b5e6:	b920      	cbnz	r0, 802b5f2 <_dtoa_r+0x3a>
 802b5e8:	4ba7      	ldr	r3, [pc, #668]	; (802b888 <_dtoa_r+0x2d0>)
 802b5ea:	21ea      	movs	r1, #234	; 0xea
 802b5ec:	48a7      	ldr	r0, [pc, #668]	; (802b88c <_dtoa_r+0x2d4>)
 802b5ee:	f7ff ff39 	bl	802b464 <__assert_func>
 802b5f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802b5f6:	6005      	str	r5, [r0, #0]
 802b5f8:	60c5      	str	r5, [r0, #12]
 802b5fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b5fc:	6819      	ldr	r1, [r3, #0]
 802b5fe:	b151      	cbz	r1, 802b616 <_dtoa_r+0x5e>
 802b600:	685a      	ldr	r2, [r3, #4]
 802b602:	604a      	str	r2, [r1, #4]
 802b604:	2301      	movs	r3, #1
 802b606:	4093      	lsls	r3, r2
 802b608:	608b      	str	r3, [r1, #8]
 802b60a:	4620      	mov	r0, r4
 802b60c:	f000 fe32 	bl	802c274 <_Bfree>
 802b610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b612:	2200      	movs	r2, #0
 802b614:	601a      	str	r2, [r3, #0]
 802b616:	1e3b      	subs	r3, r7, #0
 802b618:	bfaa      	itet	ge
 802b61a:	2300      	movge	r3, #0
 802b61c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 802b620:	f8c8 3000 	strge.w	r3, [r8]
 802b624:	4b9a      	ldr	r3, [pc, #616]	; (802b890 <_dtoa_r+0x2d8>)
 802b626:	bfbc      	itt	lt
 802b628:	2201      	movlt	r2, #1
 802b62a:	f8c8 2000 	strlt.w	r2, [r8]
 802b62e:	ea33 030b 	bics.w	r3, r3, fp
 802b632:	d11b      	bne.n	802b66c <_dtoa_r+0xb4>
 802b634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b636:	f242 730f 	movw	r3, #9999	; 0x270f
 802b63a:	6013      	str	r3, [r2, #0]
 802b63c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802b640:	4333      	orrs	r3, r6
 802b642:	f000 8592 	beq.w	802c16a <_dtoa_r+0xbb2>
 802b646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b648:	b963      	cbnz	r3, 802b664 <_dtoa_r+0xac>
 802b64a:	4b92      	ldr	r3, [pc, #584]	; (802b894 <_dtoa_r+0x2dc>)
 802b64c:	e022      	b.n	802b694 <_dtoa_r+0xdc>
 802b64e:	4b92      	ldr	r3, [pc, #584]	; (802b898 <_dtoa_r+0x2e0>)
 802b650:	9301      	str	r3, [sp, #4]
 802b652:	3308      	adds	r3, #8
 802b654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802b656:	6013      	str	r3, [r2, #0]
 802b658:	9801      	ldr	r0, [sp, #4]
 802b65a:	b013      	add	sp, #76	; 0x4c
 802b65c:	ecbd 8b04 	vpop	{d8-d9}
 802b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b664:	4b8b      	ldr	r3, [pc, #556]	; (802b894 <_dtoa_r+0x2dc>)
 802b666:	9301      	str	r3, [sp, #4]
 802b668:	3303      	adds	r3, #3
 802b66a:	e7f3      	b.n	802b654 <_dtoa_r+0x9c>
 802b66c:	2200      	movs	r2, #0
 802b66e:	2300      	movs	r3, #0
 802b670:	4650      	mov	r0, sl
 802b672:	4659      	mov	r1, fp
 802b674:	f7f5 f988 	bl	8020988 <__aeabi_dcmpeq>
 802b678:	ec4b ab19 	vmov	d9, sl, fp
 802b67c:	4680      	mov	r8, r0
 802b67e:	b158      	cbz	r0, 802b698 <_dtoa_r+0xe0>
 802b680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b682:	2301      	movs	r3, #1
 802b684:	6013      	str	r3, [r2, #0]
 802b686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b688:	2b00      	cmp	r3, #0
 802b68a:	f000 856b 	beq.w	802c164 <_dtoa_r+0xbac>
 802b68e:	4883      	ldr	r0, [pc, #524]	; (802b89c <_dtoa_r+0x2e4>)
 802b690:	6018      	str	r0, [r3, #0]
 802b692:	1e43      	subs	r3, r0, #1
 802b694:	9301      	str	r3, [sp, #4]
 802b696:	e7df      	b.n	802b658 <_dtoa_r+0xa0>
 802b698:	ec4b ab10 	vmov	d0, sl, fp
 802b69c:	aa10      	add	r2, sp, #64	; 0x40
 802b69e:	a911      	add	r1, sp, #68	; 0x44
 802b6a0:	4620      	mov	r0, r4
 802b6a2:	f001 f8cf 	bl	802c844 <__d2b>
 802b6a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 802b6aa:	ee08 0a10 	vmov	s16, r0
 802b6ae:	2d00      	cmp	r5, #0
 802b6b0:	f000 8084 	beq.w	802b7bc <_dtoa_r+0x204>
 802b6b4:	ee19 3a90 	vmov	r3, s19
 802b6b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b6bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802b6c0:	4656      	mov	r6, sl
 802b6c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802b6c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802b6ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802b6ce:	4b74      	ldr	r3, [pc, #464]	; (802b8a0 <_dtoa_r+0x2e8>)
 802b6d0:	2200      	movs	r2, #0
 802b6d2:	4630      	mov	r0, r6
 802b6d4:	4639      	mov	r1, r7
 802b6d6:	f7f4 fd37 	bl	8020148 <__aeabi_dsub>
 802b6da:	a365      	add	r3, pc, #404	; (adr r3, 802b870 <_dtoa_r+0x2b8>)
 802b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b6e0:	f7f4 feea 	bl	80204b8 <__aeabi_dmul>
 802b6e4:	a364      	add	r3, pc, #400	; (adr r3, 802b878 <_dtoa_r+0x2c0>)
 802b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b6ea:	f7f4 fd2f 	bl	802014c <__adddf3>
 802b6ee:	4606      	mov	r6, r0
 802b6f0:	4628      	mov	r0, r5
 802b6f2:	460f      	mov	r7, r1
 802b6f4:	f7f4 fe76 	bl	80203e4 <__aeabi_i2d>
 802b6f8:	a361      	add	r3, pc, #388	; (adr r3, 802b880 <_dtoa_r+0x2c8>)
 802b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b6fe:	f7f4 fedb 	bl	80204b8 <__aeabi_dmul>
 802b702:	4602      	mov	r2, r0
 802b704:	460b      	mov	r3, r1
 802b706:	4630      	mov	r0, r6
 802b708:	4639      	mov	r1, r7
 802b70a:	f7f4 fd1f 	bl	802014c <__adddf3>
 802b70e:	4606      	mov	r6, r0
 802b710:	460f      	mov	r7, r1
 802b712:	f7f5 f981 	bl	8020a18 <__aeabi_d2iz>
 802b716:	2200      	movs	r2, #0
 802b718:	9000      	str	r0, [sp, #0]
 802b71a:	2300      	movs	r3, #0
 802b71c:	4630      	mov	r0, r6
 802b71e:	4639      	mov	r1, r7
 802b720:	f7f5 f93c 	bl	802099c <__aeabi_dcmplt>
 802b724:	b150      	cbz	r0, 802b73c <_dtoa_r+0x184>
 802b726:	9800      	ldr	r0, [sp, #0]
 802b728:	f7f4 fe5c 	bl	80203e4 <__aeabi_i2d>
 802b72c:	4632      	mov	r2, r6
 802b72e:	463b      	mov	r3, r7
 802b730:	f7f5 f92a 	bl	8020988 <__aeabi_dcmpeq>
 802b734:	b910      	cbnz	r0, 802b73c <_dtoa_r+0x184>
 802b736:	9b00      	ldr	r3, [sp, #0]
 802b738:	3b01      	subs	r3, #1
 802b73a:	9300      	str	r3, [sp, #0]
 802b73c:	9b00      	ldr	r3, [sp, #0]
 802b73e:	2b16      	cmp	r3, #22
 802b740:	d85a      	bhi.n	802b7f8 <_dtoa_r+0x240>
 802b742:	9a00      	ldr	r2, [sp, #0]
 802b744:	4b57      	ldr	r3, [pc, #348]	; (802b8a4 <_dtoa_r+0x2ec>)
 802b746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b74e:	ec51 0b19 	vmov	r0, r1, d9
 802b752:	f7f5 f923 	bl	802099c <__aeabi_dcmplt>
 802b756:	2800      	cmp	r0, #0
 802b758:	d050      	beq.n	802b7fc <_dtoa_r+0x244>
 802b75a:	9b00      	ldr	r3, [sp, #0]
 802b75c:	3b01      	subs	r3, #1
 802b75e:	9300      	str	r3, [sp, #0]
 802b760:	2300      	movs	r3, #0
 802b762:	930b      	str	r3, [sp, #44]	; 0x2c
 802b764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802b766:	1b5d      	subs	r5, r3, r5
 802b768:	1e6b      	subs	r3, r5, #1
 802b76a:	9305      	str	r3, [sp, #20]
 802b76c:	bf45      	ittet	mi
 802b76e:	f1c5 0301 	rsbmi	r3, r5, #1
 802b772:	9304      	strmi	r3, [sp, #16]
 802b774:	2300      	movpl	r3, #0
 802b776:	2300      	movmi	r3, #0
 802b778:	bf4c      	ite	mi
 802b77a:	9305      	strmi	r3, [sp, #20]
 802b77c:	9304      	strpl	r3, [sp, #16]
 802b77e:	9b00      	ldr	r3, [sp, #0]
 802b780:	2b00      	cmp	r3, #0
 802b782:	db3d      	blt.n	802b800 <_dtoa_r+0x248>
 802b784:	9b05      	ldr	r3, [sp, #20]
 802b786:	9a00      	ldr	r2, [sp, #0]
 802b788:	920a      	str	r2, [sp, #40]	; 0x28
 802b78a:	4413      	add	r3, r2
 802b78c:	9305      	str	r3, [sp, #20]
 802b78e:	2300      	movs	r3, #0
 802b790:	9307      	str	r3, [sp, #28]
 802b792:	9b06      	ldr	r3, [sp, #24]
 802b794:	2b09      	cmp	r3, #9
 802b796:	f200 8089 	bhi.w	802b8ac <_dtoa_r+0x2f4>
 802b79a:	2b05      	cmp	r3, #5
 802b79c:	bfc4      	itt	gt
 802b79e:	3b04      	subgt	r3, #4
 802b7a0:	9306      	strgt	r3, [sp, #24]
 802b7a2:	9b06      	ldr	r3, [sp, #24]
 802b7a4:	f1a3 0302 	sub.w	r3, r3, #2
 802b7a8:	bfcc      	ite	gt
 802b7aa:	2500      	movgt	r5, #0
 802b7ac:	2501      	movle	r5, #1
 802b7ae:	2b03      	cmp	r3, #3
 802b7b0:	f200 8087 	bhi.w	802b8c2 <_dtoa_r+0x30a>
 802b7b4:	e8df f003 	tbb	[pc, r3]
 802b7b8:	59383a2d 	.word	0x59383a2d
 802b7bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802b7c0:	441d      	add	r5, r3
 802b7c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802b7c6:	2b20      	cmp	r3, #32
 802b7c8:	bfc1      	itttt	gt
 802b7ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802b7ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 802b7d2:	fa0b f303 	lslgt.w	r3, fp, r3
 802b7d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 802b7da:	bfda      	itte	le
 802b7dc:	f1c3 0320 	rsble	r3, r3, #32
 802b7e0:	fa06 f003 	lslle.w	r0, r6, r3
 802b7e4:	4318      	orrgt	r0, r3
 802b7e6:	f7f4 fded 	bl	80203c4 <__aeabi_ui2d>
 802b7ea:	2301      	movs	r3, #1
 802b7ec:	4606      	mov	r6, r0
 802b7ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 802b7f2:	3d01      	subs	r5, #1
 802b7f4:	930e      	str	r3, [sp, #56]	; 0x38
 802b7f6:	e76a      	b.n	802b6ce <_dtoa_r+0x116>
 802b7f8:	2301      	movs	r3, #1
 802b7fa:	e7b2      	b.n	802b762 <_dtoa_r+0x1aa>
 802b7fc:	900b      	str	r0, [sp, #44]	; 0x2c
 802b7fe:	e7b1      	b.n	802b764 <_dtoa_r+0x1ac>
 802b800:	9b04      	ldr	r3, [sp, #16]
 802b802:	9a00      	ldr	r2, [sp, #0]
 802b804:	1a9b      	subs	r3, r3, r2
 802b806:	9304      	str	r3, [sp, #16]
 802b808:	4253      	negs	r3, r2
 802b80a:	9307      	str	r3, [sp, #28]
 802b80c:	2300      	movs	r3, #0
 802b80e:	930a      	str	r3, [sp, #40]	; 0x28
 802b810:	e7bf      	b.n	802b792 <_dtoa_r+0x1da>
 802b812:	2300      	movs	r3, #0
 802b814:	9308      	str	r3, [sp, #32]
 802b816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b818:	2b00      	cmp	r3, #0
 802b81a:	dc55      	bgt.n	802b8c8 <_dtoa_r+0x310>
 802b81c:	2301      	movs	r3, #1
 802b81e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802b822:	461a      	mov	r2, r3
 802b824:	9209      	str	r2, [sp, #36]	; 0x24
 802b826:	e00c      	b.n	802b842 <_dtoa_r+0x28a>
 802b828:	2301      	movs	r3, #1
 802b82a:	e7f3      	b.n	802b814 <_dtoa_r+0x25c>
 802b82c:	2300      	movs	r3, #0
 802b82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b830:	9308      	str	r3, [sp, #32]
 802b832:	9b00      	ldr	r3, [sp, #0]
 802b834:	4413      	add	r3, r2
 802b836:	9302      	str	r3, [sp, #8]
 802b838:	3301      	adds	r3, #1
 802b83a:	2b01      	cmp	r3, #1
 802b83c:	9303      	str	r3, [sp, #12]
 802b83e:	bfb8      	it	lt
 802b840:	2301      	movlt	r3, #1
 802b842:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802b844:	2200      	movs	r2, #0
 802b846:	6042      	str	r2, [r0, #4]
 802b848:	2204      	movs	r2, #4
 802b84a:	f102 0614 	add.w	r6, r2, #20
 802b84e:	429e      	cmp	r6, r3
 802b850:	6841      	ldr	r1, [r0, #4]
 802b852:	d93d      	bls.n	802b8d0 <_dtoa_r+0x318>
 802b854:	4620      	mov	r0, r4
 802b856:	f000 fccd 	bl	802c1f4 <_Balloc>
 802b85a:	9001      	str	r0, [sp, #4]
 802b85c:	2800      	cmp	r0, #0
 802b85e:	d13b      	bne.n	802b8d8 <_dtoa_r+0x320>
 802b860:	4b11      	ldr	r3, [pc, #68]	; (802b8a8 <_dtoa_r+0x2f0>)
 802b862:	4602      	mov	r2, r0
 802b864:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802b868:	e6c0      	b.n	802b5ec <_dtoa_r+0x34>
 802b86a:	2301      	movs	r3, #1
 802b86c:	e7df      	b.n	802b82e <_dtoa_r+0x276>
 802b86e:	bf00      	nop
 802b870:	636f4361 	.word	0x636f4361
 802b874:	3fd287a7 	.word	0x3fd287a7
 802b878:	8b60c8b3 	.word	0x8b60c8b3
 802b87c:	3fc68a28 	.word	0x3fc68a28
 802b880:	509f79fb 	.word	0x509f79fb
 802b884:	3fd34413 	.word	0x3fd34413
 802b888:	08079bd8 	.word	0x08079bd8
 802b88c:	08079c93 	.word	0x08079c93
 802b890:	7ff00000 	.word	0x7ff00000
 802b894:	08079c8f 	.word	0x08079c8f
 802b898:	08079c86 	.word	0x08079c86
 802b89c:	08079bb5 	.word	0x08079bb5
 802b8a0:	3ff80000 	.word	0x3ff80000
 802b8a4:	08079d88 	.word	0x08079d88
 802b8a8:	08079cee 	.word	0x08079cee
 802b8ac:	2501      	movs	r5, #1
 802b8ae:	2300      	movs	r3, #0
 802b8b0:	9306      	str	r3, [sp, #24]
 802b8b2:	9508      	str	r5, [sp, #32]
 802b8b4:	f04f 33ff 	mov.w	r3, #4294967295
 802b8b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802b8bc:	2200      	movs	r2, #0
 802b8be:	2312      	movs	r3, #18
 802b8c0:	e7b0      	b.n	802b824 <_dtoa_r+0x26c>
 802b8c2:	2301      	movs	r3, #1
 802b8c4:	9308      	str	r3, [sp, #32]
 802b8c6:	e7f5      	b.n	802b8b4 <_dtoa_r+0x2fc>
 802b8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b8ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802b8ce:	e7b8      	b.n	802b842 <_dtoa_r+0x28a>
 802b8d0:	3101      	adds	r1, #1
 802b8d2:	6041      	str	r1, [r0, #4]
 802b8d4:	0052      	lsls	r2, r2, #1
 802b8d6:	e7b8      	b.n	802b84a <_dtoa_r+0x292>
 802b8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b8da:	9a01      	ldr	r2, [sp, #4]
 802b8dc:	601a      	str	r2, [r3, #0]
 802b8de:	9b03      	ldr	r3, [sp, #12]
 802b8e0:	2b0e      	cmp	r3, #14
 802b8e2:	f200 809d 	bhi.w	802ba20 <_dtoa_r+0x468>
 802b8e6:	2d00      	cmp	r5, #0
 802b8e8:	f000 809a 	beq.w	802ba20 <_dtoa_r+0x468>
 802b8ec:	9b00      	ldr	r3, [sp, #0]
 802b8ee:	2b00      	cmp	r3, #0
 802b8f0:	dd32      	ble.n	802b958 <_dtoa_r+0x3a0>
 802b8f2:	4ab7      	ldr	r2, [pc, #732]	; (802bbd0 <_dtoa_r+0x618>)
 802b8f4:	f003 030f 	and.w	r3, r3, #15
 802b8f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802b8fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 802b900:	9b00      	ldr	r3, [sp, #0]
 802b902:	05d8      	lsls	r0, r3, #23
 802b904:	ea4f 1723 	mov.w	r7, r3, asr #4
 802b908:	d516      	bpl.n	802b938 <_dtoa_r+0x380>
 802b90a:	4bb2      	ldr	r3, [pc, #712]	; (802bbd4 <_dtoa_r+0x61c>)
 802b90c:	ec51 0b19 	vmov	r0, r1, d9
 802b910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802b914:	f7f4 fefa 	bl	802070c <__aeabi_ddiv>
 802b918:	f007 070f 	and.w	r7, r7, #15
 802b91c:	4682      	mov	sl, r0
 802b91e:	468b      	mov	fp, r1
 802b920:	2503      	movs	r5, #3
 802b922:	4eac      	ldr	r6, [pc, #688]	; (802bbd4 <_dtoa_r+0x61c>)
 802b924:	b957      	cbnz	r7, 802b93c <_dtoa_r+0x384>
 802b926:	4642      	mov	r2, r8
 802b928:	464b      	mov	r3, r9
 802b92a:	4650      	mov	r0, sl
 802b92c:	4659      	mov	r1, fp
 802b92e:	f7f4 feed 	bl	802070c <__aeabi_ddiv>
 802b932:	4682      	mov	sl, r0
 802b934:	468b      	mov	fp, r1
 802b936:	e028      	b.n	802b98a <_dtoa_r+0x3d2>
 802b938:	2502      	movs	r5, #2
 802b93a:	e7f2      	b.n	802b922 <_dtoa_r+0x36a>
 802b93c:	07f9      	lsls	r1, r7, #31
 802b93e:	d508      	bpl.n	802b952 <_dtoa_r+0x39a>
 802b940:	4640      	mov	r0, r8
 802b942:	4649      	mov	r1, r9
 802b944:	e9d6 2300 	ldrd	r2, r3, [r6]
 802b948:	f7f4 fdb6 	bl	80204b8 <__aeabi_dmul>
 802b94c:	3501      	adds	r5, #1
 802b94e:	4680      	mov	r8, r0
 802b950:	4689      	mov	r9, r1
 802b952:	107f      	asrs	r7, r7, #1
 802b954:	3608      	adds	r6, #8
 802b956:	e7e5      	b.n	802b924 <_dtoa_r+0x36c>
 802b958:	f000 809b 	beq.w	802ba92 <_dtoa_r+0x4da>
 802b95c:	9b00      	ldr	r3, [sp, #0]
 802b95e:	4f9d      	ldr	r7, [pc, #628]	; (802bbd4 <_dtoa_r+0x61c>)
 802b960:	425e      	negs	r6, r3
 802b962:	4b9b      	ldr	r3, [pc, #620]	; (802bbd0 <_dtoa_r+0x618>)
 802b964:	f006 020f 	and.w	r2, r6, #15
 802b968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b970:	ec51 0b19 	vmov	r0, r1, d9
 802b974:	f7f4 fda0 	bl	80204b8 <__aeabi_dmul>
 802b978:	1136      	asrs	r6, r6, #4
 802b97a:	4682      	mov	sl, r0
 802b97c:	468b      	mov	fp, r1
 802b97e:	2300      	movs	r3, #0
 802b980:	2502      	movs	r5, #2
 802b982:	2e00      	cmp	r6, #0
 802b984:	d17a      	bne.n	802ba7c <_dtoa_r+0x4c4>
 802b986:	2b00      	cmp	r3, #0
 802b988:	d1d3      	bne.n	802b932 <_dtoa_r+0x37a>
 802b98a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b98c:	2b00      	cmp	r3, #0
 802b98e:	f000 8082 	beq.w	802ba96 <_dtoa_r+0x4de>
 802b992:	4b91      	ldr	r3, [pc, #580]	; (802bbd8 <_dtoa_r+0x620>)
 802b994:	2200      	movs	r2, #0
 802b996:	4650      	mov	r0, sl
 802b998:	4659      	mov	r1, fp
 802b99a:	f7f4 ffff 	bl	802099c <__aeabi_dcmplt>
 802b99e:	2800      	cmp	r0, #0
 802b9a0:	d079      	beq.n	802ba96 <_dtoa_r+0x4de>
 802b9a2:	9b03      	ldr	r3, [sp, #12]
 802b9a4:	2b00      	cmp	r3, #0
 802b9a6:	d076      	beq.n	802ba96 <_dtoa_r+0x4de>
 802b9a8:	9b02      	ldr	r3, [sp, #8]
 802b9aa:	2b00      	cmp	r3, #0
 802b9ac:	dd36      	ble.n	802ba1c <_dtoa_r+0x464>
 802b9ae:	9b00      	ldr	r3, [sp, #0]
 802b9b0:	4650      	mov	r0, sl
 802b9b2:	4659      	mov	r1, fp
 802b9b4:	1e5f      	subs	r7, r3, #1
 802b9b6:	2200      	movs	r2, #0
 802b9b8:	4b88      	ldr	r3, [pc, #544]	; (802bbdc <_dtoa_r+0x624>)
 802b9ba:	f7f4 fd7d 	bl	80204b8 <__aeabi_dmul>
 802b9be:	9e02      	ldr	r6, [sp, #8]
 802b9c0:	4682      	mov	sl, r0
 802b9c2:	468b      	mov	fp, r1
 802b9c4:	3501      	adds	r5, #1
 802b9c6:	4628      	mov	r0, r5
 802b9c8:	f7f4 fd0c 	bl	80203e4 <__aeabi_i2d>
 802b9cc:	4652      	mov	r2, sl
 802b9ce:	465b      	mov	r3, fp
 802b9d0:	f7f4 fd72 	bl	80204b8 <__aeabi_dmul>
 802b9d4:	4b82      	ldr	r3, [pc, #520]	; (802bbe0 <_dtoa_r+0x628>)
 802b9d6:	2200      	movs	r2, #0
 802b9d8:	f7f4 fbb8 	bl	802014c <__adddf3>
 802b9dc:	46d0      	mov	r8, sl
 802b9de:	46d9      	mov	r9, fp
 802b9e0:	4682      	mov	sl, r0
 802b9e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802b9e6:	2e00      	cmp	r6, #0
 802b9e8:	d158      	bne.n	802ba9c <_dtoa_r+0x4e4>
 802b9ea:	4b7e      	ldr	r3, [pc, #504]	; (802bbe4 <_dtoa_r+0x62c>)
 802b9ec:	2200      	movs	r2, #0
 802b9ee:	4640      	mov	r0, r8
 802b9f0:	4649      	mov	r1, r9
 802b9f2:	f7f4 fba9 	bl	8020148 <__aeabi_dsub>
 802b9f6:	4652      	mov	r2, sl
 802b9f8:	465b      	mov	r3, fp
 802b9fa:	4680      	mov	r8, r0
 802b9fc:	4689      	mov	r9, r1
 802b9fe:	f7f4 ffeb 	bl	80209d8 <__aeabi_dcmpgt>
 802ba02:	2800      	cmp	r0, #0
 802ba04:	f040 8295 	bne.w	802bf32 <_dtoa_r+0x97a>
 802ba08:	4652      	mov	r2, sl
 802ba0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802ba0e:	4640      	mov	r0, r8
 802ba10:	4649      	mov	r1, r9
 802ba12:	f7f4 ffc3 	bl	802099c <__aeabi_dcmplt>
 802ba16:	2800      	cmp	r0, #0
 802ba18:	f040 8289 	bne.w	802bf2e <_dtoa_r+0x976>
 802ba1c:	ec5b ab19 	vmov	sl, fp, d9
 802ba20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802ba22:	2b00      	cmp	r3, #0
 802ba24:	f2c0 8148 	blt.w	802bcb8 <_dtoa_r+0x700>
 802ba28:	9a00      	ldr	r2, [sp, #0]
 802ba2a:	2a0e      	cmp	r2, #14
 802ba2c:	f300 8144 	bgt.w	802bcb8 <_dtoa_r+0x700>
 802ba30:	4b67      	ldr	r3, [pc, #412]	; (802bbd0 <_dtoa_r+0x618>)
 802ba32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ba36:	e9d3 8900 	ldrd	r8, r9, [r3]
 802ba3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ba3c:	2b00      	cmp	r3, #0
 802ba3e:	f280 80d5 	bge.w	802bbec <_dtoa_r+0x634>
 802ba42:	9b03      	ldr	r3, [sp, #12]
 802ba44:	2b00      	cmp	r3, #0
 802ba46:	f300 80d1 	bgt.w	802bbec <_dtoa_r+0x634>
 802ba4a:	f040 826f 	bne.w	802bf2c <_dtoa_r+0x974>
 802ba4e:	4b65      	ldr	r3, [pc, #404]	; (802bbe4 <_dtoa_r+0x62c>)
 802ba50:	2200      	movs	r2, #0
 802ba52:	4640      	mov	r0, r8
 802ba54:	4649      	mov	r1, r9
 802ba56:	f7f4 fd2f 	bl	80204b8 <__aeabi_dmul>
 802ba5a:	4652      	mov	r2, sl
 802ba5c:	465b      	mov	r3, fp
 802ba5e:	f7f4 ffb1 	bl	80209c4 <__aeabi_dcmpge>
 802ba62:	9e03      	ldr	r6, [sp, #12]
 802ba64:	4637      	mov	r7, r6
 802ba66:	2800      	cmp	r0, #0
 802ba68:	f040 8245 	bne.w	802bef6 <_dtoa_r+0x93e>
 802ba6c:	9d01      	ldr	r5, [sp, #4]
 802ba6e:	2331      	movs	r3, #49	; 0x31
 802ba70:	f805 3b01 	strb.w	r3, [r5], #1
 802ba74:	9b00      	ldr	r3, [sp, #0]
 802ba76:	3301      	adds	r3, #1
 802ba78:	9300      	str	r3, [sp, #0]
 802ba7a:	e240      	b.n	802befe <_dtoa_r+0x946>
 802ba7c:	07f2      	lsls	r2, r6, #31
 802ba7e:	d505      	bpl.n	802ba8c <_dtoa_r+0x4d4>
 802ba80:	e9d7 2300 	ldrd	r2, r3, [r7]
 802ba84:	f7f4 fd18 	bl	80204b8 <__aeabi_dmul>
 802ba88:	3501      	adds	r5, #1
 802ba8a:	2301      	movs	r3, #1
 802ba8c:	1076      	asrs	r6, r6, #1
 802ba8e:	3708      	adds	r7, #8
 802ba90:	e777      	b.n	802b982 <_dtoa_r+0x3ca>
 802ba92:	2502      	movs	r5, #2
 802ba94:	e779      	b.n	802b98a <_dtoa_r+0x3d2>
 802ba96:	9f00      	ldr	r7, [sp, #0]
 802ba98:	9e03      	ldr	r6, [sp, #12]
 802ba9a:	e794      	b.n	802b9c6 <_dtoa_r+0x40e>
 802ba9c:	9901      	ldr	r1, [sp, #4]
 802ba9e:	4b4c      	ldr	r3, [pc, #304]	; (802bbd0 <_dtoa_r+0x618>)
 802baa0:	4431      	add	r1, r6
 802baa2:	910d      	str	r1, [sp, #52]	; 0x34
 802baa4:	9908      	ldr	r1, [sp, #32]
 802baa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802baaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802baae:	2900      	cmp	r1, #0
 802bab0:	d043      	beq.n	802bb3a <_dtoa_r+0x582>
 802bab2:	494d      	ldr	r1, [pc, #308]	; (802bbe8 <_dtoa_r+0x630>)
 802bab4:	2000      	movs	r0, #0
 802bab6:	f7f4 fe29 	bl	802070c <__aeabi_ddiv>
 802baba:	4652      	mov	r2, sl
 802babc:	465b      	mov	r3, fp
 802babe:	f7f4 fb43 	bl	8020148 <__aeabi_dsub>
 802bac2:	9d01      	ldr	r5, [sp, #4]
 802bac4:	4682      	mov	sl, r0
 802bac6:	468b      	mov	fp, r1
 802bac8:	4649      	mov	r1, r9
 802baca:	4640      	mov	r0, r8
 802bacc:	f7f4 ffa4 	bl	8020a18 <__aeabi_d2iz>
 802bad0:	4606      	mov	r6, r0
 802bad2:	f7f4 fc87 	bl	80203e4 <__aeabi_i2d>
 802bad6:	4602      	mov	r2, r0
 802bad8:	460b      	mov	r3, r1
 802bada:	4640      	mov	r0, r8
 802badc:	4649      	mov	r1, r9
 802bade:	f7f4 fb33 	bl	8020148 <__aeabi_dsub>
 802bae2:	3630      	adds	r6, #48	; 0x30
 802bae4:	f805 6b01 	strb.w	r6, [r5], #1
 802bae8:	4652      	mov	r2, sl
 802baea:	465b      	mov	r3, fp
 802baec:	4680      	mov	r8, r0
 802baee:	4689      	mov	r9, r1
 802baf0:	f7f4 ff54 	bl	802099c <__aeabi_dcmplt>
 802baf4:	2800      	cmp	r0, #0
 802baf6:	d163      	bne.n	802bbc0 <_dtoa_r+0x608>
 802baf8:	4642      	mov	r2, r8
 802bafa:	464b      	mov	r3, r9
 802bafc:	4936      	ldr	r1, [pc, #216]	; (802bbd8 <_dtoa_r+0x620>)
 802bafe:	2000      	movs	r0, #0
 802bb00:	f7f4 fb22 	bl	8020148 <__aeabi_dsub>
 802bb04:	4652      	mov	r2, sl
 802bb06:	465b      	mov	r3, fp
 802bb08:	f7f4 ff48 	bl	802099c <__aeabi_dcmplt>
 802bb0c:	2800      	cmp	r0, #0
 802bb0e:	f040 80b5 	bne.w	802bc7c <_dtoa_r+0x6c4>
 802bb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802bb14:	429d      	cmp	r5, r3
 802bb16:	d081      	beq.n	802ba1c <_dtoa_r+0x464>
 802bb18:	4b30      	ldr	r3, [pc, #192]	; (802bbdc <_dtoa_r+0x624>)
 802bb1a:	2200      	movs	r2, #0
 802bb1c:	4650      	mov	r0, sl
 802bb1e:	4659      	mov	r1, fp
 802bb20:	f7f4 fcca 	bl	80204b8 <__aeabi_dmul>
 802bb24:	4b2d      	ldr	r3, [pc, #180]	; (802bbdc <_dtoa_r+0x624>)
 802bb26:	4682      	mov	sl, r0
 802bb28:	468b      	mov	fp, r1
 802bb2a:	4640      	mov	r0, r8
 802bb2c:	4649      	mov	r1, r9
 802bb2e:	2200      	movs	r2, #0
 802bb30:	f7f4 fcc2 	bl	80204b8 <__aeabi_dmul>
 802bb34:	4680      	mov	r8, r0
 802bb36:	4689      	mov	r9, r1
 802bb38:	e7c6      	b.n	802bac8 <_dtoa_r+0x510>
 802bb3a:	4650      	mov	r0, sl
 802bb3c:	4659      	mov	r1, fp
 802bb3e:	f7f4 fcbb 	bl	80204b8 <__aeabi_dmul>
 802bb42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802bb44:	9d01      	ldr	r5, [sp, #4]
 802bb46:	930f      	str	r3, [sp, #60]	; 0x3c
 802bb48:	4682      	mov	sl, r0
 802bb4a:	468b      	mov	fp, r1
 802bb4c:	4649      	mov	r1, r9
 802bb4e:	4640      	mov	r0, r8
 802bb50:	f7f4 ff62 	bl	8020a18 <__aeabi_d2iz>
 802bb54:	4606      	mov	r6, r0
 802bb56:	f7f4 fc45 	bl	80203e4 <__aeabi_i2d>
 802bb5a:	3630      	adds	r6, #48	; 0x30
 802bb5c:	4602      	mov	r2, r0
 802bb5e:	460b      	mov	r3, r1
 802bb60:	4640      	mov	r0, r8
 802bb62:	4649      	mov	r1, r9
 802bb64:	f7f4 faf0 	bl	8020148 <__aeabi_dsub>
 802bb68:	f805 6b01 	strb.w	r6, [r5], #1
 802bb6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802bb6e:	429d      	cmp	r5, r3
 802bb70:	4680      	mov	r8, r0
 802bb72:	4689      	mov	r9, r1
 802bb74:	f04f 0200 	mov.w	r2, #0
 802bb78:	d124      	bne.n	802bbc4 <_dtoa_r+0x60c>
 802bb7a:	4b1b      	ldr	r3, [pc, #108]	; (802bbe8 <_dtoa_r+0x630>)
 802bb7c:	4650      	mov	r0, sl
 802bb7e:	4659      	mov	r1, fp
 802bb80:	f7f4 fae4 	bl	802014c <__adddf3>
 802bb84:	4602      	mov	r2, r0
 802bb86:	460b      	mov	r3, r1
 802bb88:	4640      	mov	r0, r8
 802bb8a:	4649      	mov	r1, r9
 802bb8c:	f7f4 ff24 	bl	80209d8 <__aeabi_dcmpgt>
 802bb90:	2800      	cmp	r0, #0
 802bb92:	d173      	bne.n	802bc7c <_dtoa_r+0x6c4>
 802bb94:	4652      	mov	r2, sl
 802bb96:	465b      	mov	r3, fp
 802bb98:	4913      	ldr	r1, [pc, #76]	; (802bbe8 <_dtoa_r+0x630>)
 802bb9a:	2000      	movs	r0, #0
 802bb9c:	f7f4 fad4 	bl	8020148 <__aeabi_dsub>
 802bba0:	4602      	mov	r2, r0
 802bba2:	460b      	mov	r3, r1
 802bba4:	4640      	mov	r0, r8
 802bba6:	4649      	mov	r1, r9
 802bba8:	f7f4 fef8 	bl	802099c <__aeabi_dcmplt>
 802bbac:	2800      	cmp	r0, #0
 802bbae:	f43f af35 	beq.w	802ba1c <_dtoa_r+0x464>
 802bbb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802bbb4:	1e6b      	subs	r3, r5, #1
 802bbb6:	930f      	str	r3, [sp, #60]	; 0x3c
 802bbb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802bbbc:	2b30      	cmp	r3, #48	; 0x30
 802bbbe:	d0f8      	beq.n	802bbb2 <_dtoa_r+0x5fa>
 802bbc0:	9700      	str	r7, [sp, #0]
 802bbc2:	e049      	b.n	802bc58 <_dtoa_r+0x6a0>
 802bbc4:	4b05      	ldr	r3, [pc, #20]	; (802bbdc <_dtoa_r+0x624>)
 802bbc6:	f7f4 fc77 	bl	80204b8 <__aeabi_dmul>
 802bbca:	4680      	mov	r8, r0
 802bbcc:	4689      	mov	r9, r1
 802bbce:	e7bd      	b.n	802bb4c <_dtoa_r+0x594>
 802bbd0:	08079d88 	.word	0x08079d88
 802bbd4:	08079d60 	.word	0x08079d60
 802bbd8:	3ff00000 	.word	0x3ff00000
 802bbdc:	40240000 	.word	0x40240000
 802bbe0:	401c0000 	.word	0x401c0000
 802bbe4:	40140000 	.word	0x40140000
 802bbe8:	3fe00000 	.word	0x3fe00000
 802bbec:	9d01      	ldr	r5, [sp, #4]
 802bbee:	4656      	mov	r6, sl
 802bbf0:	465f      	mov	r7, fp
 802bbf2:	4642      	mov	r2, r8
 802bbf4:	464b      	mov	r3, r9
 802bbf6:	4630      	mov	r0, r6
 802bbf8:	4639      	mov	r1, r7
 802bbfa:	f7f4 fd87 	bl	802070c <__aeabi_ddiv>
 802bbfe:	f7f4 ff0b 	bl	8020a18 <__aeabi_d2iz>
 802bc02:	4682      	mov	sl, r0
 802bc04:	f7f4 fbee 	bl	80203e4 <__aeabi_i2d>
 802bc08:	4642      	mov	r2, r8
 802bc0a:	464b      	mov	r3, r9
 802bc0c:	f7f4 fc54 	bl	80204b8 <__aeabi_dmul>
 802bc10:	4602      	mov	r2, r0
 802bc12:	460b      	mov	r3, r1
 802bc14:	4630      	mov	r0, r6
 802bc16:	4639      	mov	r1, r7
 802bc18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802bc1c:	f7f4 fa94 	bl	8020148 <__aeabi_dsub>
 802bc20:	f805 6b01 	strb.w	r6, [r5], #1
 802bc24:	9e01      	ldr	r6, [sp, #4]
 802bc26:	9f03      	ldr	r7, [sp, #12]
 802bc28:	1bae      	subs	r6, r5, r6
 802bc2a:	42b7      	cmp	r7, r6
 802bc2c:	4602      	mov	r2, r0
 802bc2e:	460b      	mov	r3, r1
 802bc30:	d135      	bne.n	802bc9e <_dtoa_r+0x6e6>
 802bc32:	f7f4 fa8b 	bl	802014c <__adddf3>
 802bc36:	4642      	mov	r2, r8
 802bc38:	464b      	mov	r3, r9
 802bc3a:	4606      	mov	r6, r0
 802bc3c:	460f      	mov	r7, r1
 802bc3e:	f7f4 fecb 	bl	80209d8 <__aeabi_dcmpgt>
 802bc42:	b9d0      	cbnz	r0, 802bc7a <_dtoa_r+0x6c2>
 802bc44:	4642      	mov	r2, r8
 802bc46:	464b      	mov	r3, r9
 802bc48:	4630      	mov	r0, r6
 802bc4a:	4639      	mov	r1, r7
 802bc4c:	f7f4 fe9c 	bl	8020988 <__aeabi_dcmpeq>
 802bc50:	b110      	cbz	r0, 802bc58 <_dtoa_r+0x6a0>
 802bc52:	f01a 0f01 	tst.w	sl, #1
 802bc56:	d110      	bne.n	802bc7a <_dtoa_r+0x6c2>
 802bc58:	4620      	mov	r0, r4
 802bc5a:	ee18 1a10 	vmov	r1, s16
 802bc5e:	f000 fb09 	bl	802c274 <_Bfree>
 802bc62:	2300      	movs	r3, #0
 802bc64:	9800      	ldr	r0, [sp, #0]
 802bc66:	702b      	strb	r3, [r5, #0]
 802bc68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802bc6a:	3001      	adds	r0, #1
 802bc6c:	6018      	str	r0, [r3, #0]
 802bc6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802bc70:	2b00      	cmp	r3, #0
 802bc72:	f43f acf1 	beq.w	802b658 <_dtoa_r+0xa0>
 802bc76:	601d      	str	r5, [r3, #0]
 802bc78:	e4ee      	b.n	802b658 <_dtoa_r+0xa0>
 802bc7a:	9f00      	ldr	r7, [sp, #0]
 802bc7c:	462b      	mov	r3, r5
 802bc7e:	461d      	mov	r5, r3
 802bc80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802bc84:	2a39      	cmp	r2, #57	; 0x39
 802bc86:	d106      	bne.n	802bc96 <_dtoa_r+0x6de>
 802bc88:	9a01      	ldr	r2, [sp, #4]
 802bc8a:	429a      	cmp	r2, r3
 802bc8c:	d1f7      	bne.n	802bc7e <_dtoa_r+0x6c6>
 802bc8e:	9901      	ldr	r1, [sp, #4]
 802bc90:	2230      	movs	r2, #48	; 0x30
 802bc92:	3701      	adds	r7, #1
 802bc94:	700a      	strb	r2, [r1, #0]
 802bc96:	781a      	ldrb	r2, [r3, #0]
 802bc98:	3201      	adds	r2, #1
 802bc9a:	701a      	strb	r2, [r3, #0]
 802bc9c:	e790      	b.n	802bbc0 <_dtoa_r+0x608>
 802bc9e:	4ba6      	ldr	r3, [pc, #664]	; (802bf38 <_dtoa_r+0x980>)
 802bca0:	2200      	movs	r2, #0
 802bca2:	f7f4 fc09 	bl	80204b8 <__aeabi_dmul>
 802bca6:	2200      	movs	r2, #0
 802bca8:	2300      	movs	r3, #0
 802bcaa:	4606      	mov	r6, r0
 802bcac:	460f      	mov	r7, r1
 802bcae:	f7f4 fe6b 	bl	8020988 <__aeabi_dcmpeq>
 802bcb2:	2800      	cmp	r0, #0
 802bcb4:	d09d      	beq.n	802bbf2 <_dtoa_r+0x63a>
 802bcb6:	e7cf      	b.n	802bc58 <_dtoa_r+0x6a0>
 802bcb8:	9a08      	ldr	r2, [sp, #32]
 802bcba:	2a00      	cmp	r2, #0
 802bcbc:	f000 80d7 	beq.w	802be6e <_dtoa_r+0x8b6>
 802bcc0:	9a06      	ldr	r2, [sp, #24]
 802bcc2:	2a01      	cmp	r2, #1
 802bcc4:	f300 80ba 	bgt.w	802be3c <_dtoa_r+0x884>
 802bcc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802bcca:	2a00      	cmp	r2, #0
 802bccc:	f000 80b2 	beq.w	802be34 <_dtoa_r+0x87c>
 802bcd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802bcd4:	9e07      	ldr	r6, [sp, #28]
 802bcd6:	9d04      	ldr	r5, [sp, #16]
 802bcd8:	9a04      	ldr	r2, [sp, #16]
 802bcda:	441a      	add	r2, r3
 802bcdc:	9204      	str	r2, [sp, #16]
 802bcde:	9a05      	ldr	r2, [sp, #20]
 802bce0:	2101      	movs	r1, #1
 802bce2:	441a      	add	r2, r3
 802bce4:	4620      	mov	r0, r4
 802bce6:	9205      	str	r2, [sp, #20]
 802bce8:	f000 fb7c 	bl	802c3e4 <__i2b>
 802bcec:	4607      	mov	r7, r0
 802bcee:	2d00      	cmp	r5, #0
 802bcf0:	dd0c      	ble.n	802bd0c <_dtoa_r+0x754>
 802bcf2:	9b05      	ldr	r3, [sp, #20]
 802bcf4:	2b00      	cmp	r3, #0
 802bcf6:	dd09      	ble.n	802bd0c <_dtoa_r+0x754>
 802bcf8:	42ab      	cmp	r3, r5
 802bcfa:	9a04      	ldr	r2, [sp, #16]
 802bcfc:	bfa8      	it	ge
 802bcfe:	462b      	movge	r3, r5
 802bd00:	1ad2      	subs	r2, r2, r3
 802bd02:	9204      	str	r2, [sp, #16]
 802bd04:	9a05      	ldr	r2, [sp, #20]
 802bd06:	1aed      	subs	r5, r5, r3
 802bd08:	1ad3      	subs	r3, r2, r3
 802bd0a:	9305      	str	r3, [sp, #20]
 802bd0c:	9b07      	ldr	r3, [sp, #28]
 802bd0e:	b31b      	cbz	r3, 802bd58 <_dtoa_r+0x7a0>
 802bd10:	9b08      	ldr	r3, [sp, #32]
 802bd12:	2b00      	cmp	r3, #0
 802bd14:	f000 80af 	beq.w	802be76 <_dtoa_r+0x8be>
 802bd18:	2e00      	cmp	r6, #0
 802bd1a:	dd13      	ble.n	802bd44 <_dtoa_r+0x78c>
 802bd1c:	4639      	mov	r1, r7
 802bd1e:	4632      	mov	r2, r6
 802bd20:	4620      	mov	r0, r4
 802bd22:	f000 fc1f 	bl	802c564 <__pow5mult>
 802bd26:	ee18 2a10 	vmov	r2, s16
 802bd2a:	4601      	mov	r1, r0
 802bd2c:	4607      	mov	r7, r0
 802bd2e:	4620      	mov	r0, r4
 802bd30:	f000 fb6e 	bl	802c410 <__multiply>
 802bd34:	ee18 1a10 	vmov	r1, s16
 802bd38:	4680      	mov	r8, r0
 802bd3a:	4620      	mov	r0, r4
 802bd3c:	f000 fa9a 	bl	802c274 <_Bfree>
 802bd40:	ee08 8a10 	vmov	s16, r8
 802bd44:	9b07      	ldr	r3, [sp, #28]
 802bd46:	1b9a      	subs	r2, r3, r6
 802bd48:	d006      	beq.n	802bd58 <_dtoa_r+0x7a0>
 802bd4a:	ee18 1a10 	vmov	r1, s16
 802bd4e:	4620      	mov	r0, r4
 802bd50:	f000 fc08 	bl	802c564 <__pow5mult>
 802bd54:	ee08 0a10 	vmov	s16, r0
 802bd58:	2101      	movs	r1, #1
 802bd5a:	4620      	mov	r0, r4
 802bd5c:	f000 fb42 	bl	802c3e4 <__i2b>
 802bd60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802bd62:	2b00      	cmp	r3, #0
 802bd64:	4606      	mov	r6, r0
 802bd66:	f340 8088 	ble.w	802be7a <_dtoa_r+0x8c2>
 802bd6a:	461a      	mov	r2, r3
 802bd6c:	4601      	mov	r1, r0
 802bd6e:	4620      	mov	r0, r4
 802bd70:	f000 fbf8 	bl	802c564 <__pow5mult>
 802bd74:	9b06      	ldr	r3, [sp, #24]
 802bd76:	2b01      	cmp	r3, #1
 802bd78:	4606      	mov	r6, r0
 802bd7a:	f340 8081 	ble.w	802be80 <_dtoa_r+0x8c8>
 802bd7e:	f04f 0800 	mov.w	r8, #0
 802bd82:	6933      	ldr	r3, [r6, #16]
 802bd84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802bd88:	6918      	ldr	r0, [r3, #16]
 802bd8a:	f000 fadb 	bl	802c344 <__hi0bits>
 802bd8e:	f1c0 0020 	rsb	r0, r0, #32
 802bd92:	9b05      	ldr	r3, [sp, #20]
 802bd94:	4418      	add	r0, r3
 802bd96:	f010 001f 	ands.w	r0, r0, #31
 802bd9a:	f000 8092 	beq.w	802bec2 <_dtoa_r+0x90a>
 802bd9e:	f1c0 0320 	rsb	r3, r0, #32
 802bda2:	2b04      	cmp	r3, #4
 802bda4:	f340 808a 	ble.w	802bebc <_dtoa_r+0x904>
 802bda8:	f1c0 001c 	rsb	r0, r0, #28
 802bdac:	9b04      	ldr	r3, [sp, #16]
 802bdae:	4403      	add	r3, r0
 802bdb0:	9304      	str	r3, [sp, #16]
 802bdb2:	9b05      	ldr	r3, [sp, #20]
 802bdb4:	4403      	add	r3, r0
 802bdb6:	4405      	add	r5, r0
 802bdb8:	9305      	str	r3, [sp, #20]
 802bdba:	9b04      	ldr	r3, [sp, #16]
 802bdbc:	2b00      	cmp	r3, #0
 802bdbe:	dd07      	ble.n	802bdd0 <_dtoa_r+0x818>
 802bdc0:	ee18 1a10 	vmov	r1, s16
 802bdc4:	461a      	mov	r2, r3
 802bdc6:	4620      	mov	r0, r4
 802bdc8:	f000 fc26 	bl	802c618 <__lshift>
 802bdcc:	ee08 0a10 	vmov	s16, r0
 802bdd0:	9b05      	ldr	r3, [sp, #20]
 802bdd2:	2b00      	cmp	r3, #0
 802bdd4:	dd05      	ble.n	802bde2 <_dtoa_r+0x82a>
 802bdd6:	4631      	mov	r1, r6
 802bdd8:	461a      	mov	r2, r3
 802bdda:	4620      	mov	r0, r4
 802bddc:	f000 fc1c 	bl	802c618 <__lshift>
 802bde0:	4606      	mov	r6, r0
 802bde2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802bde4:	2b00      	cmp	r3, #0
 802bde6:	d06e      	beq.n	802bec6 <_dtoa_r+0x90e>
 802bde8:	ee18 0a10 	vmov	r0, s16
 802bdec:	4631      	mov	r1, r6
 802bdee:	f000 fc83 	bl	802c6f8 <__mcmp>
 802bdf2:	2800      	cmp	r0, #0
 802bdf4:	da67      	bge.n	802bec6 <_dtoa_r+0x90e>
 802bdf6:	9b00      	ldr	r3, [sp, #0]
 802bdf8:	3b01      	subs	r3, #1
 802bdfa:	ee18 1a10 	vmov	r1, s16
 802bdfe:	9300      	str	r3, [sp, #0]
 802be00:	220a      	movs	r2, #10
 802be02:	2300      	movs	r3, #0
 802be04:	4620      	mov	r0, r4
 802be06:	f000 fa57 	bl	802c2b8 <__multadd>
 802be0a:	9b08      	ldr	r3, [sp, #32]
 802be0c:	ee08 0a10 	vmov	s16, r0
 802be10:	2b00      	cmp	r3, #0
 802be12:	f000 81b1 	beq.w	802c178 <_dtoa_r+0xbc0>
 802be16:	2300      	movs	r3, #0
 802be18:	4639      	mov	r1, r7
 802be1a:	220a      	movs	r2, #10
 802be1c:	4620      	mov	r0, r4
 802be1e:	f000 fa4b 	bl	802c2b8 <__multadd>
 802be22:	9b02      	ldr	r3, [sp, #8]
 802be24:	2b00      	cmp	r3, #0
 802be26:	4607      	mov	r7, r0
 802be28:	f300 808e 	bgt.w	802bf48 <_dtoa_r+0x990>
 802be2c:	9b06      	ldr	r3, [sp, #24]
 802be2e:	2b02      	cmp	r3, #2
 802be30:	dc51      	bgt.n	802bed6 <_dtoa_r+0x91e>
 802be32:	e089      	b.n	802bf48 <_dtoa_r+0x990>
 802be34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802be36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802be3a:	e74b      	b.n	802bcd4 <_dtoa_r+0x71c>
 802be3c:	9b03      	ldr	r3, [sp, #12]
 802be3e:	1e5e      	subs	r6, r3, #1
 802be40:	9b07      	ldr	r3, [sp, #28]
 802be42:	42b3      	cmp	r3, r6
 802be44:	bfbf      	itttt	lt
 802be46:	9b07      	ldrlt	r3, [sp, #28]
 802be48:	9607      	strlt	r6, [sp, #28]
 802be4a:	1af2      	sublt	r2, r6, r3
 802be4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802be4e:	bfb6      	itet	lt
 802be50:	189b      	addlt	r3, r3, r2
 802be52:	1b9e      	subge	r6, r3, r6
 802be54:	930a      	strlt	r3, [sp, #40]	; 0x28
 802be56:	9b03      	ldr	r3, [sp, #12]
 802be58:	bfb8      	it	lt
 802be5a:	2600      	movlt	r6, #0
 802be5c:	2b00      	cmp	r3, #0
 802be5e:	bfb7      	itett	lt
 802be60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802be64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 802be68:	1a9d      	sublt	r5, r3, r2
 802be6a:	2300      	movlt	r3, #0
 802be6c:	e734      	b.n	802bcd8 <_dtoa_r+0x720>
 802be6e:	9e07      	ldr	r6, [sp, #28]
 802be70:	9d04      	ldr	r5, [sp, #16]
 802be72:	9f08      	ldr	r7, [sp, #32]
 802be74:	e73b      	b.n	802bcee <_dtoa_r+0x736>
 802be76:	9a07      	ldr	r2, [sp, #28]
 802be78:	e767      	b.n	802bd4a <_dtoa_r+0x792>
 802be7a:	9b06      	ldr	r3, [sp, #24]
 802be7c:	2b01      	cmp	r3, #1
 802be7e:	dc18      	bgt.n	802beb2 <_dtoa_r+0x8fa>
 802be80:	f1ba 0f00 	cmp.w	sl, #0
 802be84:	d115      	bne.n	802beb2 <_dtoa_r+0x8fa>
 802be86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802be8a:	b993      	cbnz	r3, 802beb2 <_dtoa_r+0x8fa>
 802be8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802be90:	0d1b      	lsrs	r3, r3, #20
 802be92:	051b      	lsls	r3, r3, #20
 802be94:	b183      	cbz	r3, 802beb8 <_dtoa_r+0x900>
 802be96:	9b04      	ldr	r3, [sp, #16]
 802be98:	3301      	adds	r3, #1
 802be9a:	9304      	str	r3, [sp, #16]
 802be9c:	9b05      	ldr	r3, [sp, #20]
 802be9e:	3301      	adds	r3, #1
 802bea0:	9305      	str	r3, [sp, #20]
 802bea2:	f04f 0801 	mov.w	r8, #1
 802bea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802bea8:	2b00      	cmp	r3, #0
 802beaa:	f47f af6a 	bne.w	802bd82 <_dtoa_r+0x7ca>
 802beae:	2001      	movs	r0, #1
 802beb0:	e76f      	b.n	802bd92 <_dtoa_r+0x7da>
 802beb2:	f04f 0800 	mov.w	r8, #0
 802beb6:	e7f6      	b.n	802bea6 <_dtoa_r+0x8ee>
 802beb8:	4698      	mov	r8, r3
 802beba:	e7f4      	b.n	802bea6 <_dtoa_r+0x8ee>
 802bebc:	f43f af7d 	beq.w	802bdba <_dtoa_r+0x802>
 802bec0:	4618      	mov	r0, r3
 802bec2:	301c      	adds	r0, #28
 802bec4:	e772      	b.n	802bdac <_dtoa_r+0x7f4>
 802bec6:	9b03      	ldr	r3, [sp, #12]
 802bec8:	2b00      	cmp	r3, #0
 802beca:	dc37      	bgt.n	802bf3c <_dtoa_r+0x984>
 802becc:	9b06      	ldr	r3, [sp, #24]
 802bece:	2b02      	cmp	r3, #2
 802bed0:	dd34      	ble.n	802bf3c <_dtoa_r+0x984>
 802bed2:	9b03      	ldr	r3, [sp, #12]
 802bed4:	9302      	str	r3, [sp, #8]
 802bed6:	9b02      	ldr	r3, [sp, #8]
 802bed8:	b96b      	cbnz	r3, 802bef6 <_dtoa_r+0x93e>
 802beda:	4631      	mov	r1, r6
 802bedc:	2205      	movs	r2, #5
 802bede:	4620      	mov	r0, r4
 802bee0:	f000 f9ea 	bl	802c2b8 <__multadd>
 802bee4:	4601      	mov	r1, r0
 802bee6:	4606      	mov	r6, r0
 802bee8:	ee18 0a10 	vmov	r0, s16
 802beec:	f000 fc04 	bl	802c6f8 <__mcmp>
 802bef0:	2800      	cmp	r0, #0
 802bef2:	f73f adbb 	bgt.w	802ba6c <_dtoa_r+0x4b4>
 802bef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bef8:	9d01      	ldr	r5, [sp, #4]
 802befa:	43db      	mvns	r3, r3
 802befc:	9300      	str	r3, [sp, #0]
 802befe:	f04f 0800 	mov.w	r8, #0
 802bf02:	4631      	mov	r1, r6
 802bf04:	4620      	mov	r0, r4
 802bf06:	f000 f9b5 	bl	802c274 <_Bfree>
 802bf0a:	2f00      	cmp	r7, #0
 802bf0c:	f43f aea4 	beq.w	802bc58 <_dtoa_r+0x6a0>
 802bf10:	f1b8 0f00 	cmp.w	r8, #0
 802bf14:	d005      	beq.n	802bf22 <_dtoa_r+0x96a>
 802bf16:	45b8      	cmp	r8, r7
 802bf18:	d003      	beq.n	802bf22 <_dtoa_r+0x96a>
 802bf1a:	4641      	mov	r1, r8
 802bf1c:	4620      	mov	r0, r4
 802bf1e:	f000 f9a9 	bl	802c274 <_Bfree>
 802bf22:	4639      	mov	r1, r7
 802bf24:	4620      	mov	r0, r4
 802bf26:	f000 f9a5 	bl	802c274 <_Bfree>
 802bf2a:	e695      	b.n	802bc58 <_dtoa_r+0x6a0>
 802bf2c:	2600      	movs	r6, #0
 802bf2e:	4637      	mov	r7, r6
 802bf30:	e7e1      	b.n	802bef6 <_dtoa_r+0x93e>
 802bf32:	9700      	str	r7, [sp, #0]
 802bf34:	4637      	mov	r7, r6
 802bf36:	e599      	b.n	802ba6c <_dtoa_r+0x4b4>
 802bf38:	40240000 	.word	0x40240000
 802bf3c:	9b08      	ldr	r3, [sp, #32]
 802bf3e:	2b00      	cmp	r3, #0
 802bf40:	f000 80ca 	beq.w	802c0d8 <_dtoa_r+0xb20>
 802bf44:	9b03      	ldr	r3, [sp, #12]
 802bf46:	9302      	str	r3, [sp, #8]
 802bf48:	2d00      	cmp	r5, #0
 802bf4a:	dd05      	ble.n	802bf58 <_dtoa_r+0x9a0>
 802bf4c:	4639      	mov	r1, r7
 802bf4e:	462a      	mov	r2, r5
 802bf50:	4620      	mov	r0, r4
 802bf52:	f000 fb61 	bl	802c618 <__lshift>
 802bf56:	4607      	mov	r7, r0
 802bf58:	f1b8 0f00 	cmp.w	r8, #0
 802bf5c:	d05b      	beq.n	802c016 <_dtoa_r+0xa5e>
 802bf5e:	6879      	ldr	r1, [r7, #4]
 802bf60:	4620      	mov	r0, r4
 802bf62:	f000 f947 	bl	802c1f4 <_Balloc>
 802bf66:	4605      	mov	r5, r0
 802bf68:	b928      	cbnz	r0, 802bf76 <_dtoa_r+0x9be>
 802bf6a:	4b87      	ldr	r3, [pc, #540]	; (802c188 <_dtoa_r+0xbd0>)
 802bf6c:	4602      	mov	r2, r0
 802bf6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 802bf72:	f7ff bb3b 	b.w	802b5ec <_dtoa_r+0x34>
 802bf76:	693a      	ldr	r2, [r7, #16]
 802bf78:	3202      	adds	r2, #2
 802bf7a:	0092      	lsls	r2, r2, #2
 802bf7c:	f107 010c 	add.w	r1, r7, #12
 802bf80:	300c      	adds	r0, #12
 802bf82:	f7fe fd2f 	bl	802a9e4 <memcpy>
 802bf86:	2201      	movs	r2, #1
 802bf88:	4629      	mov	r1, r5
 802bf8a:	4620      	mov	r0, r4
 802bf8c:	f000 fb44 	bl	802c618 <__lshift>
 802bf90:	9b01      	ldr	r3, [sp, #4]
 802bf92:	f103 0901 	add.w	r9, r3, #1
 802bf96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802bf9a:	4413      	add	r3, r2
 802bf9c:	9305      	str	r3, [sp, #20]
 802bf9e:	f00a 0301 	and.w	r3, sl, #1
 802bfa2:	46b8      	mov	r8, r7
 802bfa4:	9304      	str	r3, [sp, #16]
 802bfa6:	4607      	mov	r7, r0
 802bfa8:	4631      	mov	r1, r6
 802bfaa:	ee18 0a10 	vmov	r0, s16
 802bfae:	f7ff fa77 	bl	802b4a0 <quorem>
 802bfb2:	4641      	mov	r1, r8
 802bfb4:	9002      	str	r0, [sp, #8]
 802bfb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802bfba:	ee18 0a10 	vmov	r0, s16
 802bfbe:	f000 fb9b 	bl	802c6f8 <__mcmp>
 802bfc2:	463a      	mov	r2, r7
 802bfc4:	9003      	str	r0, [sp, #12]
 802bfc6:	4631      	mov	r1, r6
 802bfc8:	4620      	mov	r0, r4
 802bfca:	f000 fbb1 	bl	802c730 <__mdiff>
 802bfce:	68c2      	ldr	r2, [r0, #12]
 802bfd0:	f109 3bff 	add.w	fp, r9, #4294967295
 802bfd4:	4605      	mov	r5, r0
 802bfd6:	bb02      	cbnz	r2, 802c01a <_dtoa_r+0xa62>
 802bfd8:	4601      	mov	r1, r0
 802bfda:	ee18 0a10 	vmov	r0, s16
 802bfde:	f000 fb8b 	bl	802c6f8 <__mcmp>
 802bfe2:	4602      	mov	r2, r0
 802bfe4:	4629      	mov	r1, r5
 802bfe6:	4620      	mov	r0, r4
 802bfe8:	9207      	str	r2, [sp, #28]
 802bfea:	f000 f943 	bl	802c274 <_Bfree>
 802bfee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802bff2:	ea43 0102 	orr.w	r1, r3, r2
 802bff6:	9b04      	ldr	r3, [sp, #16]
 802bff8:	430b      	orrs	r3, r1
 802bffa:	464d      	mov	r5, r9
 802bffc:	d10f      	bne.n	802c01e <_dtoa_r+0xa66>
 802bffe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802c002:	d02a      	beq.n	802c05a <_dtoa_r+0xaa2>
 802c004:	9b03      	ldr	r3, [sp, #12]
 802c006:	2b00      	cmp	r3, #0
 802c008:	dd02      	ble.n	802c010 <_dtoa_r+0xa58>
 802c00a:	9b02      	ldr	r3, [sp, #8]
 802c00c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 802c010:	f88b a000 	strb.w	sl, [fp]
 802c014:	e775      	b.n	802bf02 <_dtoa_r+0x94a>
 802c016:	4638      	mov	r0, r7
 802c018:	e7ba      	b.n	802bf90 <_dtoa_r+0x9d8>
 802c01a:	2201      	movs	r2, #1
 802c01c:	e7e2      	b.n	802bfe4 <_dtoa_r+0xa2c>
 802c01e:	9b03      	ldr	r3, [sp, #12]
 802c020:	2b00      	cmp	r3, #0
 802c022:	db04      	blt.n	802c02e <_dtoa_r+0xa76>
 802c024:	9906      	ldr	r1, [sp, #24]
 802c026:	430b      	orrs	r3, r1
 802c028:	9904      	ldr	r1, [sp, #16]
 802c02a:	430b      	orrs	r3, r1
 802c02c:	d122      	bne.n	802c074 <_dtoa_r+0xabc>
 802c02e:	2a00      	cmp	r2, #0
 802c030:	ddee      	ble.n	802c010 <_dtoa_r+0xa58>
 802c032:	ee18 1a10 	vmov	r1, s16
 802c036:	2201      	movs	r2, #1
 802c038:	4620      	mov	r0, r4
 802c03a:	f000 faed 	bl	802c618 <__lshift>
 802c03e:	4631      	mov	r1, r6
 802c040:	ee08 0a10 	vmov	s16, r0
 802c044:	f000 fb58 	bl	802c6f8 <__mcmp>
 802c048:	2800      	cmp	r0, #0
 802c04a:	dc03      	bgt.n	802c054 <_dtoa_r+0xa9c>
 802c04c:	d1e0      	bne.n	802c010 <_dtoa_r+0xa58>
 802c04e:	f01a 0f01 	tst.w	sl, #1
 802c052:	d0dd      	beq.n	802c010 <_dtoa_r+0xa58>
 802c054:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802c058:	d1d7      	bne.n	802c00a <_dtoa_r+0xa52>
 802c05a:	2339      	movs	r3, #57	; 0x39
 802c05c:	f88b 3000 	strb.w	r3, [fp]
 802c060:	462b      	mov	r3, r5
 802c062:	461d      	mov	r5, r3
 802c064:	3b01      	subs	r3, #1
 802c066:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802c06a:	2a39      	cmp	r2, #57	; 0x39
 802c06c:	d071      	beq.n	802c152 <_dtoa_r+0xb9a>
 802c06e:	3201      	adds	r2, #1
 802c070:	701a      	strb	r2, [r3, #0]
 802c072:	e746      	b.n	802bf02 <_dtoa_r+0x94a>
 802c074:	2a00      	cmp	r2, #0
 802c076:	dd07      	ble.n	802c088 <_dtoa_r+0xad0>
 802c078:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802c07c:	d0ed      	beq.n	802c05a <_dtoa_r+0xaa2>
 802c07e:	f10a 0301 	add.w	r3, sl, #1
 802c082:	f88b 3000 	strb.w	r3, [fp]
 802c086:	e73c      	b.n	802bf02 <_dtoa_r+0x94a>
 802c088:	9b05      	ldr	r3, [sp, #20]
 802c08a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802c08e:	4599      	cmp	r9, r3
 802c090:	d047      	beq.n	802c122 <_dtoa_r+0xb6a>
 802c092:	ee18 1a10 	vmov	r1, s16
 802c096:	2300      	movs	r3, #0
 802c098:	220a      	movs	r2, #10
 802c09a:	4620      	mov	r0, r4
 802c09c:	f000 f90c 	bl	802c2b8 <__multadd>
 802c0a0:	45b8      	cmp	r8, r7
 802c0a2:	ee08 0a10 	vmov	s16, r0
 802c0a6:	f04f 0300 	mov.w	r3, #0
 802c0aa:	f04f 020a 	mov.w	r2, #10
 802c0ae:	4641      	mov	r1, r8
 802c0b0:	4620      	mov	r0, r4
 802c0b2:	d106      	bne.n	802c0c2 <_dtoa_r+0xb0a>
 802c0b4:	f000 f900 	bl	802c2b8 <__multadd>
 802c0b8:	4680      	mov	r8, r0
 802c0ba:	4607      	mov	r7, r0
 802c0bc:	f109 0901 	add.w	r9, r9, #1
 802c0c0:	e772      	b.n	802bfa8 <_dtoa_r+0x9f0>
 802c0c2:	f000 f8f9 	bl	802c2b8 <__multadd>
 802c0c6:	4639      	mov	r1, r7
 802c0c8:	4680      	mov	r8, r0
 802c0ca:	2300      	movs	r3, #0
 802c0cc:	220a      	movs	r2, #10
 802c0ce:	4620      	mov	r0, r4
 802c0d0:	f000 f8f2 	bl	802c2b8 <__multadd>
 802c0d4:	4607      	mov	r7, r0
 802c0d6:	e7f1      	b.n	802c0bc <_dtoa_r+0xb04>
 802c0d8:	9b03      	ldr	r3, [sp, #12]
 802c0da:	9302      	str	r3, [sp, #8]
 802c0dc:	9d01      	ldr	r5, [sp, #4]
 802c0de:	ee18 0a10 	vmov	r0, s16
 802c0e2:	4631      	mov	r1, r6
 802c0e4:	f7ff f9dc 	bl	802b4a0 <quorem>
 802c0e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802c0ec:	9b01      	ldr	r3, [sp, #4]
 802c0ee:	f805 ab01 	strb.w	sl, [r5], #1
 802c0f2:	1aea      	subs	r2, r5, r3
 802c0f4:	9b02      	ldr	r3, [sp, #8]
 802c0f6:	4293      	cmp	r3, r2
 802c0f8:	dd09      	ble.n	802c10e <_dtoa_r+0xb56>
 802c0fa:	ee18 1a10 	vmov	r1, s16
 802c0fe:	2300      	movs	r3, #0
 802c100:	220a      	movs	r2, #10
 802c102:	4620      	mov	r0, r4
 802c104:	f000 f8d8 	bl	802c2b8 <__multadd>
 802c108:	ee08 0a10 	vmov	s16, r0
 802c10c:	e7e7      	b.n	802c0de <_dtoa_r+0xb26>
 802c10e:	9b02      	ldr	r3, [sp, #8]
 802c110:	2b00      	cmp	r3, #0
 802c112:	bfc8      	it	gt
 802c114:	461d      	movgt	r5, r3
 802c116:	9b01      	ldr	r3, [sp, #4]
 802c118:	bfd8      	it	le
 802c11a:	2501      	movle	r5, #1
 802c11c:	441d      	add	r5, r3
 802c11e:	f04f 0800 	mov.w	r8, #0
 802c122:	ee18 1a10 	vmov	r1, s16
 802c126:	2201      	movs	r2, #1
 802c128:	4620      	mov	r0, r4
 802c12a:	f000 fa75 	bl	802c618 <__lshift>
 802c12e:	4631      	mov	r1, r6
 802c130:	ee08 0a10 	vmov	s16, r0
 802c134:	f000 fae0 	bl	802c6f8 <__mcmp>
 802c138:	2800      	cmp	r0, #0
 802c13a:	dc91      	bgt.n	802c060 <_dtoa_r+0xaa8>
 802c13c:	d102      	bne.n	802c144 <_dtoa_r+0xb8c>
 802c13e:	f01a 0f01 	tst.w	sl, #1
 802c142:	d18d      	bne.n	802c060 <_dtoa_r+0xaa8>
 802c144:	462b      	mov	r3, r5
 802c146:	461d      	mov	r5, r3
 802c148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802c14c:	2a30      	cmp	r2, #48	; 0x30
 802c14e:	d0fa      	beq.n	802c146 <_dtoa_r+0xb8e>
 802c150:	e6d7      	b.n	802bf02 <_dtoa_r+0x94a>
 802c152:	9a01      	ldr	r2, [sp, #4]
 802c154:	429a      	cmp	r2, r3
 802c156:	d184      	bne.n	802c062 <_dtoa_r+0xaaa>
 802c158:	9b00      	ldr	r3, [sp, #0]
 802c15a:	3301      	adds	r3, #1
 802c15c:	9300      	str	r3, [sp, #0]
 802c15e:	2331      	movs	r3, #49	; 0x31
 802c160:	7013      	strb	r3, [r2, #0]
 802c162:	e6ce      	b.n	802bf02 <_dtoa_r+0x94a>
 802c164:	4b09      	ldr	r3, [pc, #36]	; (802c18c <_dtoa_r+0xbd4>)
 802c166:	f7ff ba95 	b.w	802b694 <_dtoa_r+0xdc>
 802c16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802c16c:	2b00      	cmp	r3, #0
 802c16e:	f47f aa6e 	bne.w	802b64e <_dtoa_r+0x96>
 802c172:	4b07      	ldr	r3, [pc, #28]	; (802c190 <_dtoa_r+0xbd8>)
 802c174:	f7ff ba8e 	b.w	802b694 <_dtoa_r+0xdc>
 802c178:	9b02      	ldr	r3, [sp, #8]
 802c17a:	2b00      	cmp	r3, #0
 802c17c:	dcae      	bgt.n	802c0dc <_dtoa_r+0xb24>
 802c17e:	9b06      	ldr	r3, [sp, #24]
 802c180:	2b02      	cmp	r3, #2
 802c182:	f73f aea8 	bgt.w	802bed6 <_dtoa_r+0x91e>
 802c186:	e7a9      	b.n	802c0dc <_dtoa_r+0xb24>
 802c188:	08079cee 	.word	0x08079cee
 802c18c:	08079bb4 	.word	0x08079bb4
 802c190:	08079c86 	.word	0x08079c86

0802c194 <fiprintf>:
 802c194:	b40e      	push	{r1, r2, r3}
 802c196:	b503      	push	{r0, r1, lr}
 802c198:	4601      	mov	r1, r0
 802c19a:	ab03      	add	r3, sp, #12
 802c19c:	4805      	ldr	r0, [pc, #20]	; (802c1b4 <fiprintf+0x20>)
 802c19e:	f853 2b04 	ldr.w	r2, [r3], #4
 802c1a2:	6800      	ldr	r0, [r0, #0]
 802c1a4:	9301      	str	r3, [sp, #4]
 802c1a6:	f000 fe25 	bl	802cdf4 <_vfiprintf_r>
 802c1aa:	b002      	add	sp, #8
 802c1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 802c1b0:	b003      	add	sp, #12
 802c1b2:	4770      	bx	lr
 802c1b4:	200002ac 	.word	0x200002ac

0802c1b8 <_gettimeofday_r>:
 802c1b8:	b538      	push	{r3, r4, r5, lr}
 802c1ba:	4d07      	ldr	r5, [pc, #28]	; (802c1d8 <_gettimeofday_r+0x20>)
 802c1bc:	2300      	movs	r3, #0
 802c1be:	4604      	mov	r4, r0
 802c1c0:	4608      	mov	r0, r1
 802c1c2:	4611      	mov	r1, r2
 802c1c4:	602b      	str	r3, [r5, #0]
 802c1c6:	f001 fee5 	bl	802df94 <_gettimeofday>
 802c1ca:	1c43      	adds	r3, r0, #1
 802c1cc:	d102      	bne.n	802c1d4 <_gettimeofday_r+0x1c>
 802c1ce:	682b      	ldr	r3, [r5, #0]
 802c1d0:	b103      	cbz	r3, 802c1d4 <_gettimeofday_r+0x1c>
 802c1d2:	6023      	str	r3, [r4, #0]
 802c1d4:	bd38      	pop	{r3, r4, r5, pc}
 802c1d6:	bf00      	nop
 802c1d8:	20002d1c 	.word	0x20002d1c

0802c1dc <_localeconv_r>:
 802c1dc:	4800      	ldr	r0, [pc, #0]	; (802c1e0 <_localeconv_r+0x4>)
 802c1de:	4770      	bx	lr
 802c1e0:	20000400 	.word	0x20000400

0802c1e4 <malloc>:
 802c1e4:	4b02      	ldr	r3, [pc, #8]	; (802c1f0 <malloc+0xc>)
 802c1e6:	4601      	mov	r1, r0
 802c1e8:	6818      	ldr	r0, [r3, #0]
 802c1ea:	f000 bc09 	b.w	802ca00 <_malloc_r>
 802c1ee:	bf00      	nop
 802c1f0:	200002ac 	.word	0x200002ac

0802c1f4 <_Balloc>:
 802c1f4:	b570      	push	{r4, r5, r6, lr}
 802c1f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802c1f8:	4604      	mov	r4, r0
 802c1fa:	460d      	mov	r5, r1
 802c1fc:	b976      	cbnz	r6, 802c21c <_Balloc+0x28>
 802c1fe:	2010      	movs	r0, #16
 802c200:	f7ff fff0 	bl	802c1e4 <malloc>
 802c204:	4602      	mov	r2, r0
 802c206:	6260      	str	r0, [r4, #36]	; 0x24
 802c208:	b920      	cbnz	r0, 802c214 <_Balloc+0x20>
 802c20a:	4b18      	ldr	r3, [pc, #96]	; (802c26c <_Balloc+0x78>)
 802c20c:	4818      	ldr	r0, [pc, #96]	; (802c270 <_Balloc+0x7c>)
 802c20e:	2166      	movs	r1, #102	; 0x66
 802c210:	f7ff f928 	bl	802b464 <__assert_func>
 802c214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c218:	6006      	str	r6, [r0, #0]
 802c21a:	60c6      	str	r6, [r0, #12]
 802c21c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802c21e:	68f3      	ldr	r3, [r6, #12]
 802c220:	b183      	cbz	r3, 802c244 <_Balloc+0x50>
 802c222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c224:	68db      	ldr	r3, [r3, #12]
 802c226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802c22a:	b9b8      	cbnz	r0, 802c25c <_Balloc+0x68>
 802c22c:	2101      	movs	r1, #1
 802c22e:	fa01 f605 	lsl.w	r6, r1, r5
 802c232:	1d72      	adds	r2, r6, #5
 802c234:	0092      	lsls	r2, r2, #2
 802c236:	4620      	mov	r0, r4
 802c238:	f000 fb60 	bl	802c8fc <_calloc_r>
 802c23c:	b160      	cbz	r0, 802c258 <_Balloc+0x64>
 802c23e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802c242:	e00e      	b.n	802c262 <_Balloc+0x6e>
 802c244:	2221      	movs	r2, #33	; 0x21
 802c246:	2104      	movs	r1, #4
 802c248:	4620      	mov	r0, r4
 802c24a:	f000 fb57 	bl	802c8fc <_calloc_r>
 802c24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c250:	60f0      	str	r0, [r6, #12]
 802c252:	68db      	ldr	r3, [r3, #12]
 802c254:	2b00      	cmp	r3, #0
 802c256:	d1e4      	bne.n	802c222 <_Balloc+0x2e>
 802c258:	2000      	movs	r0, #0
 802c25a:	bd70      	pop	{r4, r5, r6, pc}
 802c25c:	6802      	ldr	r2, [r0, #0]
 802c25e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802c262:	2300      	movs	r3, #0
 802c264:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c268:	e7f7      	b.n	802c25a <_Balloc+0x66>
 802c26a:	bf00      	nop
 802c26c:	08079bd8 	.word	0x08079bd8
 802c270:	08079cff 	.word	0x08079cff

0802c274 <_Bfree>:
 802c274:	b570      	push	{r4, r5, r6, lr}
 802c276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802c278:	4605      	mov	r5, r0
 802c27a:	460c      	mov	r4, r1
 802c27c:	b976      	cbnz	r6, 802c29c <_Bfree+0x28>
 802c27e:	2010      	movs	r0, #16
 802c280:	f7ff ffb0 	bl	802c1e4 <malloc>
 802c284:	4602      	mov	r2, r0
 802c286:	6268      	str	r0, [r5, #36]	; 0x24
 802c288:	b920      	cbnz	r0, 802c294 <_Bfree+0x20>
 802c28a:	4b09      	ldr	r3, [pc, #36]	; (802c2b0 <_Bfree+0x3c>)
 802c28c:	4809      	ldr	r0, [pc, #36]	; (802c2b4 <_Bfree+0x40>)
 802c28e:	218a      	movs	r1, #138	; 0x8a
 802c290:	f7ff f8e8 	bl	802b464 <__assert_func>
 802c294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c298:	6006      	str	r6, [r0, #0]
 802c29a:	60c6      	str	r6, [r0, #12]
 802c29c:	b13c      	cbz	r4, 802c2ae <_Bfree+0x3a>
 802c29e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802c2a0:	6862      	ldr	r2, [r4, #4]
 802c2a2:	68db      	ldr	r3, [r3, #12]
 802c2a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802c2a8:	6021      	str	r1, [r4, #0]
 802c2aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802c2ae:	bd70      	pop	{r4, r5, r6, pc}
 802c2b0:	08079bd8 	.word	0x08079bd8
 802c2b4:	08079cff 	.word	0x08079cff

0802c2b8 <__multadd>:
 802c2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c2bc:	690d      	ldr	r5, [r1, #16]
 802c2be:	4607      	mov	r7, r0
 802c2c0:	460c      	mov	r4, r1
 802c2c2:	461e      	mov	r6, r3
 802c2c4:	f101 0c14 	add.w	ip, r1, #20
 802c2c8:	2000      	movs	r0, #0
 802c2ca:	f8dc 3000 	ldr.w	r3, [ip]
 802c2ce:	b299      	uxth	r1, r3
 802c2d0:	fb02 6101 	mla	r1, r2, r1, r6
 802c2d4:	0c1e      	lsrs	r6, r3, #16
 802c2d6:	0c0b      	lsrs	r3, r1, #16
 802c2d8:	fb02 3306 	mla	r3, r2, r6, r3
 802c2dc:	b289      	uxth	r1, r1
 802c2de:	3001      	adds	r0, #1
 802c2e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c2e4:	4285      	cmp	r5, r0
 802c2e6:	f84c 1b04 	str.w	r1, [ip], #4
 802c2ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802c2ee:	dcec      	bgt.n	802c2ca <__multadd+0x12>
 802c2f0:	b30e      	cbz	r6, 802c336 <__multadd+0x7e>
 802c2f2:	68a3      	ldr	r3, [r4, #8]
 802c2f4:	42ab      	cmp	r3, r5
 802c2f6:	dc19      	bgt.n	802c32c <__multadd+0x74>
 802c2f8:	6861      	ldr	r1, [r4, #4]
 802c2fa:	4638      	mov	r0, r7
 802c2fc:	3101      	adds	r1, #1
 802c2fe:	f7ff ff79 	bl	802c1f4 <_Balloc>
 802c302:	4680      	mov	r8, r0
 802c304:	b928      	cbnz	r0, 802c312 <__multadd+0x5a>
 802c306:	4602      	mov	r2, r0
 802c308:	4b0c      	ldr	r3, [pc, #48]	; (802c33c <__multadd+0x84>)
 802c30a:	480d      	ldr	r0, [pc, #52]	; (802c340 <__multadd+0x88>)
 802c30c:	21b5      	movs	r1, #181	; 0xb5
 802c30e:	f7ff f8a9 	bl	802b464 <__assert_func>
 802c312:	6922      	ldr	r2, [r4, #16]
 802c314:	3202      	adds	r2, #2
 802c316:	f104 010c 	add.w	r1, r4, #12
 802c31a:	0092      	lsls	r2, r2, #2
 802c31c:	300c      	adds	r0, #12
 802c31e:	f7fe fb61 	bl	802a9e4 <memcpy>
 802c322:	4621      	mov	r1, r4
 802c324:	4638      	mov	r0, r7
 802c326:	f7ff ffa5 	bl	802c274 <_Bfree>
 802c32a:	4644      	mov	r4, r8
 802c32c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c330:	3501      	adds	r5, #1
 802c332:	615e      	str	r6, [r3, #20]
 802c334:	6125      	str	r5, [r4, #16]
 802c336:	4620      	mov	r0, r4
 802c338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c33c:	08079cee 	.word	0x08079cee
 802c340:	08079cff 	.word	0x08079cff

0802c344 <__hi0bits>:
 802c344:	0c03      	lsrs	r3, r0, #16
 802c346:	041b      	lsls	r3, r3, #16
 802c348:	b9d3      	cbnz	r3, 802c380 <__hi0bits+0x3c>
 802c34a:	0400      	lsls	r0, r0, #16
 802c34c:	2310      	movs	r3, #16
 802c34e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802c352:	bf04      	itt	eq
 802c354:	0200      	lsleq	r0, r0, #8
 802c356:	3308      	addeq	r3, #8
 802c358:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802c35c:	bf04      	itt	eq
 802c35e:	0100      	lsleq	r0, r0, #4
 802c360:	3304      	addeq	r3, #4
 802c362:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802c366:	bf04      	itt	eq
 802c368:	0080      	lsleq	r0, r0, #2
 802c36a:	3302      	addeq	r3, #2
 802c36c:	2800      	cmp	r0, #0
 802c36e:	db05      	blt.n	802c37c <__hi0bits+0x38>
 802c370:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802c374:	f103 0301 	add.w	r3, r3, #1
 802c378:	bf08      	it	eq
 802c37a:	2320      	moveq	r3, #32
 802c37c:	4618      	mov	r0, r3
 802c37e:	4770      	bx	lr
 802c380:	2300      	movs	r3, #0
 802c382:	e7e4      	b.n	802c34e <__hi0bits+0xa>

0802c384 <__lo0bits>:
 802c384:	6803      	ldr	r3, [r0, #0]
 802c386:	f013 0207 	ands.w	r2, r3, #7
 802c38a:	4601      	mov	r1, r0
 802c38c:	d00b      	beq.n	802c3a6 <__lo0bits+0x22>
 802c38e:	07da      	lsls	r2, r3, #31
 802c390:	d423      	bmi.n	802c3da <__lo0bits+0x56>
 802c392:	0798      	lsls	r0, r3, #30
 802c394:	bf49      	itett	mi
 802c396:	085b      	lsrmi	r3, r3, #1
 802c398:	089b      	lsrpl	r3, r3, #2
 802c39a:	2001      	movmi	r0, #1
 802c39c:	600b      	strmi	r3, [r1, #0]
 802c39e:	bf5c      	itt	pl
 802c3a0:	600b      	strpl	r3, [r1, #0]
 802c3a2:	2002      	movpl	r0, #2
 802c3a4:	4770      	bx	lr
 802c3a6:	b298      	uxth	r0, r3
 802c3a8:	b9a8      	cbnz	r0, 802c3d6 <__lo0bits+0x52>
 802c3aa:	0c1b      	lsrs	r3, r3, #16
 802c3ac:	2010      	movs	r0, #16
 802c3ae:	b2da      	uxtb	r2, r3
 802c3b0:	b90a      	cbnz	r2, 802c3b6 <__lo0bits+0x32>
 802c3b2:	3008      	adds	r0, #8
 802c3b4:	0a1b      	lsrs	r3, r3, #8
 802c3b6:	071a      	lsls	r2, r3, #28
 802c3b8:	bf04      	itt	eq
 802c3ba:	091b      	lsreq	r3, r3, #4
 802c3bc:	3004      	addeq	r0, #4
 802c3be:	079a      	lsls	r2, r3, #30
 802c3c0:	bf04      	itt	eq
 802c3c2:	089b      	lsreq	r3, r3, #2
 802c3c4:	3002      	addeq	r0, #2
 802c3c6:	07da      	lsls	r2, r3, #31
 802c3c8:	d403      	bmi.n	802c3d2 <__lo0bits+0x4e>
 802c3ca:	085b      	lsrs	r3, r3, #1
 802c3cc:	f100 0001 	add.w	r0, r0, #1
 802c3d0:	d005      	beq.n	802c3de <__lo0bits+0x5a>
 802c3d2:	600b      	str	r3, [r1, #0]
 802c3d4:	4770      	bx	lr
 802c3d6:	4610      	mov	r0, r2
 802c3d8:	e7e9      	b.n	802c3ae <__lo0bits+0x2a>
 802c3da:	2000      	movs	r0, #0
 802c3dc:	4770      	bx	lr
 802c3de:	2020      	movs	r0, #32
 802c3e0:	4770      	bx	lr
	...

0802c3e4 <__i2b>:
 802c3e4:	b510      	push	{r4, lr}
 802c3e6:	460c      	mov	r4, r1
 802c3e8:	2101      	movs	r1, #1
 802c3ea:	f7ff ff03 	bl	802c1f4 <_Balloc>
 802c3ee:	4602      	mov	r2, r0
 802c3f0:	b928      	cbnz	r0, 802c3fe <__i2b+0x1a>
 802c3f2:	4b05      	ldr	r3, [pc, #20]	; (802c408 <__i2b+0x24>)
 802c3f4:	4805      	ldr	r0, [pc, #20]	; (802c40c <__i2b+0x28>)
 802c3f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802c3fa:	f7ff f833 	bl	802b464 <__assert_func>
 802c3fe:	2301      	movs	r3, #1
 802c400:	6144      	str	r4, [r0, #20]
 802c402:	6103      	str	r3, [r0, #16]
 802c404:	bd10      	pop	{r4, pc}
 802c406:	bf00      	nop
 802c408:	08079cee 	.word	0x08079cee
 802c40c:	08079cff 	.word	0x08079cff

0802c410 <__multiply>:
 802c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c414:	4691      	mov	r9, r2
 802c416:	690a      	ldr	r2, [r1, #16]
 802c418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802c41c:	429a      	cmp	r2, r3
 802c41e:	bfb8      	it	lt
 802c420:	460b      	movlt	r3, r1
 802c422:	460c      	mov	r4, r1
 802c424:	bfbc      	itt	lt
 802c426:	464c      	movlt	r4, r9
 802c428:	4699      	movlt	r9, r3
 802c42a:	6927      	ldr	r7, [r4, #16]
 802c42c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802c430:	68a3      	ldr	r3, [r4, #8]
 802c432:	6861      	ldr	r1, [r4, #4]
 802c434:	eb07 060a 	add.w	r6, r7, sl
 802c438:	42b3      	cmp	r3, r6
 802c43a:	b085      	sub	sp, #20
 802c43c:	bfb8      	it	lt
 802c43e:	3101      	addlt	r1, #1
 802c440:	f7ff fed8 	bl	802c1f4 <_Balloc>
 802c444:	b930      	cbnz	r0, 802c454 <__multiply+0x44>
 802c446:	4602      	mov	r2, r0
 802c448:	4b44      	ldr	r3, [pc, #272]	; (802c55c <__multiply+0x14c>)
 802c44a:	4845      	ldr	r0, [pc, #276]	; (802c560 <__multiply+0x150>)
 802c44c:	f240 115d 	movw	r1, #349	; 0x15d
 802c450:	f7ff f808 	bl	802b464 <__assert_func>
 802c454:	f100 0514 	add.w	r5, r0, #20
 802c458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802c45c:	462b      	mov	r3, r5
 802c45e:	2200      	movs	r2, #0
 802c460:	4543      	cmp	r3, r8
 802c462:	d321      	bcc.n	802c4a8 <__multiply+0x98>
 802c464:	f104 0314 	add.w	r3, r4, #20
 802c468:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802c46c:	f109 0314 	add.w	r3, r9, #20
 802c470:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802c474:	9202      	str	r2, [sp, #8]
 802c476:	1b3a      	subs	r2, r7, r4
 802c478:	3a15      	subs	r2, #21
 802c47a:	f022 0203 	bic.w	r2, r2, #3
 802c47e:	3204      	adds	r2, #4
 802c480:	f104 0115 	add.w	r1, r4, #21
 802c484:	428f      	cmp	r7, r1
 802c486:	bf38      	it	cc
 802c488:	2204      	movcc	r2, #4
 802c48a:	9201      	str	r2, [sp, #4]
 802c48c:	9a02      	ldr	r2, [sp, #8]
 802c48e:	9303      	str	r3, [sp, #12]
 802c490:	429a      	cmp	r2, r3
 802c492:	d80c      	bhi.n	802c4ae <__multiply+0x9e>
 802c494:	2e00      	cmp	r6, #0
 802c496:	dd03      	ble.n	802c4a0 <__multiply+0x90>
 802c498:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802c49c:	2b00      	cmp	r3, #0
 802c49e:	d05a      	beq.n	802c556 <__multiply+0x146>
 802c4a0:	6106      	str	r6, [r0, #16]
 802c4a2:	b005      	add	sp, #20
 802c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c4a8:	f843 2b04 	str.w	r2, [r3], #4
 802c4ac:	e7d8      	b.n	802c460 <__multiply+0x50>
 802c4ae:	f8b3 a000 	ldrh.w	sl, [r3]
 802c4b2:	f1ba 0f00 	cmp.w	sl, #0
 802c4b6:	d024      	beq.n	802c502 <__multiply+0xf2>
 802c4b8:	f104 0e14 	add.w	lr, r4, #20
 802c4bc:	46a9      	mov	r9, r5
 802c4be:	f04f 0c00 	mov.w	ip, #0
 802c4c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 802c4c6:	f8d9 1000 	ldr.w	r1, [r9]
 802c4ca:	fa1f fb82 	uxth.w	fp, r2
 802c4ce:	b289      	uxth	r1, r1
 802c4d0:	fb0a 110b 	mla	r1, sl, fp, r1
 802c4d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802c4d8:	f8d9 2000 	ldr.w	r2, [r9]
 802c4dc:	4461      	add	r1, ip
 802c4de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802c4e2:	fb0a c20b 	mla	r2, sl, fp, ip
 802c4e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802c4ea:	b289      	uxth	r1, r1
 802c4ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802c4f0:	4577      	cmp	r7, lr
 802c4f2:	f849 1b04 	str.w	r1, [r9], #4
 802c4f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802c4fa:	d8e2      	bhi.n	802c4c2 <__multiply+0xb2>
 802c4fc:	9a01      	ldr	r2, [sp, #4]
 802c4fe:	f845 c002 	str.w	ip, [r5, r2]
 802c502:	9a03      	ldr	r2, [sp, #12]
 802c504:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802c508:	3304      	adds	r3, #4
 802c50a:	f1b9 0f00 	cmp.w	r9, #0
 802c50e:	d020      	beq.n	802c552 <__multiply+0x142>
 802c510:	6829      	ldr	r1, [r5, #0]
 802c512:	f104 0c14 	add.w	ip, r4, #20
 802c516:	46ae      	mov	lr, r5
 802c518:	f04f 0a00 	mov.w	sl, #0
 802c51c:	f8bc b000 	ldrh.w	fp, [ip]
 802c520:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802c524:	fb09 220b 	mla	r2, r9, fp, r2
 802c528:	4492      	add	sl, r2
 802c52a:	b289      	uxth	r1, r1
 802c52c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802c530:	f84e 1b04 	str.w	r1, [lr], #4
 802c534:	f85c 2b04 	ldr.w	r2, [ip], #4
 802c538:	f8be 1000 	ldrh.w	r1, [lr]
 802c53c:	0c12      	lsrs	r2, r2, #16
 802c53e:	fb09 1102 	mla	r1, r9, r2, r1
 802c542:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802c546:	4567      	cmp	r7, ip
 802c548:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802c54c:	d8e6      	bhi.n	802c51c <__multiply+0x10c>
 802c54e:	9a01      	ldr	r2, [sp, #4]
 802c550:	50a9      	str	r1, [r5, r2]
 802c552:	3504      	adds	r5, #4
 802c554:	e79a      	b.n	802c48c <__multiply+0x7c>
 802c556:	3e01      	subs	r6, #1
 802c558:	e79c      	b.n	802c494 <__multiply+0x84>
 802c55a:	bf00      	nop
 802c55c:	08079cee 	.word	0x08079cee
 802c560:	08079cff 	.word	0x08079cff

0802c564 <__pow5mult>:
 802c564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c568:	4615      	mov	r5, r2
 802c56a:	f012 0203 	ands.w	r2, r2, #3
 802c56e:	4606      	mov	r6, r0
 802c570:	460f      	mov	r7, r1
 802c572:	d007      	beq.n	802c584 <__pow5mult+0x20>
 802c574:	4c25      	ldr	r4, [pc, #148]	; (802c60c <__pow5mult+0xa8>)
 802c576:	3a01      	subs	r2, #1
 802c578:	2300      	movs	r3, #0
 802c57a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c57e:	f7ff fe9b 	bl	802c2b8 <__multadd>
 802c582:	4607      	mov	r7, r0
 802c584:	10ad      	asrs	r5, r5, #2
 802c586:	d03d      	beq.n	802c604 <__pow5mult+0xa0>
 802c588:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802c58a:	b97c      	cbnz	r4, 802c5ac <__pow5mult+0x48>
 802c58c:	2010      	movs	r0, #16
 802c58e:	f7ff fe29 	bl	802c1e4 <malloc>
 802c592:	4602      	mov	r2, r0
 802c594:	6270      	str	r0, [r6, #36]	; 0x24
 802c596:	b928      	cbnz	r0, 802c5a4 <__pow5mult+0x40>
 802c598:	4b1d      	ldr	r3, [pc, #116]	; (802c610 <__pow5mult+0xac>)
 802c59a:	481e      	ldr	r0, [pc, #120]	; (802c614 <__pow5mult+0xb0>)
 802c59c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802c5a0:	f7fe ff60 	bl	802b464 <__assert_func>
 802c5a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c5a8:	6004      	str	r4, [r0, #0]
 802c5aa:	60c4      	str	r4, [r0, #12]
 802c5ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802c5b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802c5b4:	b94c      	cbnz	r4, 802c5ca <__pow5mult+0x66>
 802c5b6:	f240 2171 	movw	r1, #625	; 0x271
 802c5ba:	4630      	mov	r0, r6
 802c5bc:	f7ff ff12 	bl	802c3e4 <__i2b>
 802c5c0:	2300      	movs	r3, #0
 802c5c2:	f8c8 0008 	str.w	r0, [r8, #8]
 802c5c6:	4604      	mov	r4, r0
 802c5c8:	6003      	str	r3, [r0, #0]
 802c5ca:	f04f 0900 	mov.w	r9, #0
 802c5ce:	07eb      	lsls	r3, r5, #31
 802c5d0:	d50a      	bpl.n	802c5e8 <__pow5mult+0x84>
 802c5d2:	4639      	mov	r1, r7
 802c5d4:	4622      	mov	r2, r4
 802c5d6:	4630      	mov	r0, r6
 802c5d8:	f7ff ff1a 	bl	802c410 <__multiply>
 802c5dc:	4639      	mov	r1, r7
 802c5de:	4680      	mov	r8, r0
 802c5e0:	4630      	mov	r0, r6
 802c5e2:	f7ff fe47 	bl	802c274 <_Bfree>
 802c5e6:	4647      	mov	r7, r8
 802c5e8:	106d      	asrs	r5, r5, #1
 802c5ea:	d00b      	beq.n	802c604 <__pow5mult+0xa0>
 802c5ec:	6820      	ldr	r0, [r4, #0]
 802c5ee:	b938      	cbnz	r0, 802c600 <__pow5mult+0x9c>
 802c5f0:	4622      	mov	r2, r4
 802c5f2:	4621      	mov	r1, r4
 802c5f4:	4630      	mov	r0, r6
 802c5f6:	f7ff ff0b 	bl	802c410 <__multiply>
 802c5fa:	6020      	str	r0, [r4, #0]
 802c5fc:	f8c0 9000 	str.w	r9, [r0]
 802c600:	4604      	mov	r4, r0
 802c602:	e7e4      	b.n	802c5ce <__pow5mult+0x6a>
 802c604:	4638      	mov	r0, r7
 802c606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c60a:	bf00      	nop
 802c60c:	08079e50 	.word	0x08079e50
 802c610:	08079bd8 	.word	0x08079bd8
 802c614:	08079cff 	.word	0x08079cff

0802c618 <__lshift>:
 802c618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c61c:	460c      	mov	r4, r1
 802c61e:	6849      	ldr	r1, [r1, #4]
 802c620:	6923      	ldr	r3, [r4, #16]
 802c622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802c626:	68a3      	ldr	r3, [r4, #8]
 802c628:	4607      	mov	r7, r0
 802c62a:	4691      	mov	r9, r2
 802c62c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c630:	f108 0601 	add.w	r6, r8, #1
 802c634:	42b3      	cmp	r3, r6
 802c636:	db0b      	blt.n	802c650 <__lshift+0x38>
 802c638:	4638      	mov	r0, r7
 802c63a:	f7ff fddb 	bl	802c1f4 <_Balloc>
 802c63e:	4605      	mov	r5, r0
 802c640:	b948      	cbnz	r0, 802c656 <__lshift+0x3e>
 802c642:	4602      	mov	r2, r0
 802c644:	4b2a      	ldr	r3, [pc, #168]	; (802c6f0 <__lshift+0xd8>)
 802c646:	482b      	ldr	r0, [pc, #172]	; (802c6f4 <__lshift+0xdc>)
 802c648:	f240 11d9 	movw	r1, #473	; 0x1d9
 802c64c:	f7fe ff0a 	bl	802b464 <__assert_func>
 802c650:	3101      	adds	r1, #1
 802c652:	005b      	lsls	r3, r3, #1
 802c654:	e7ee      	b.n	802c634 <__lshift+0x1c>
 802c656:	2300      	movs	r3, #0
 802c658:	f100 0114 	add.w	r1, r0, #20
 802c65c:	f100 0210 	add.w	r2, r0, #16
 802c660:	4618      	mov	r0, r3
 802c662:	4553      	cmp	r3, sl
 802c664:	db37      	blt.n	802c6d6 <__lshift+0xbe>
 802c666:	6920      	ldr	r0, [r4, #16]
 802c668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802c66c:	f104 0314 	add.w	r3, r4, #20
 802c670:	f019 091f 	ands.w	r9, r9, #31
 802c674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c678:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802c67c:	d02f      	beq.n	802c6de <__lshift+0xc6>
 802c67e:	f1c9 0e20 	rsb	lr, r9, #32
 802c682:	468a      	mov	sl, r1
 802c684:	f04f 0c00 	mov.w	ip, #0
 802c688:	681a      	ldr	r2, [r3, #0]
 802c68a:	fa02 f209 	lsl.w	r2, r2, r9
 802c68e:	ea42 020c 	orr.w	r2, r2, ip
 802c692:	f84a 2b04 	str.w	r2, [sl], #4
 802c696:	f853 2b04 	ldr.w	r2, [r3], #4
 802c69a:	4298      	cmp	r0, r3
 802c69c:	fa22 fc0e 	lsr.w	ip, r2, lr
 802c6a0:	d8f2      	bhi.n	802c688 <__lshift+0x70>
 802c6a2:	1b03      	subs	r3, r0, r4
 802c6a4:	3b15      	subs	r3, #21
 802c6a6:	f023 0303 	bic.w	r3, r3, #3
 802c6aa:	3304      	adds	r3, #4
 802c6ac:	f104 0215 	add.w	r2, r4, #21
 802c6b0:	4290      	cmp	r0, r2
 802c6b2:	bf38      	it	cc
 802c6b4:	2304      	movcc	r3, #4
 802c6b6:	f841 c003 	str.w	ip, [r1, r3]
 802c6ba:	f1bc 0f00 	cmp.w	ip, #0
 802c6be:	d001      	beq.n	802c6c4 <__lshift+0xac>
 802c6c0:	f108 0602 	add.w	r6, r8, #2
 802c6c4:	3e01      	subs	r6, #1
 802c6c6:	4638      	mov	r0, r7
 802c6c8:	612e      	str	r6, [r5, #16]
 802c6ca:	4621      	mov	r1, r4
 802c6cc:	f7ff fdd2 	bl	802c274 <_Bfree>
 802c6d0:	4628      	mov	r0, r5
 802c6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c6d6:	f842 0f04 	str.w	r0, [r2, #4]!
 802c6da:	3301      	adds	r3, #1
 802c6dc:	e7c1      	b.n	802c662 <__lshift+0x4a>
 802c6de:	3904      	subs	r1, #4
 802c6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 802c6e4:	f841 2f04 	str.w	r2, [r1, #4]!
 802c6e8:	4298      	cmp	r0, r3
 802c6ea:	d8f9      	bhi.n	802c6e0 <__lshift+0xc8>
 802c6ec:	e7ea      	b.n	802c6c4 <__lshift+0xac>
 802c6ee:	bf00      	nop
 802c6f0:	08079cee 	.word	0x08079cee
 802c6f4:	08079cff 	.word	0x08079cff

0802c6f8 <__mcmp>:
 802c6f8:	b530      	push	{r4, r5, lr}
 802c6fa:	6902      	ldr	r2, [r0, #16]
 802c6fc:	690c      	ldr	r4, [r1, #16]
 802c6fe:	1b12      	subs	r2, r2, r4
 802c700:	d10e      	bne.n	802c720 <__mcmp+0x28>
 802c702:	f100 0314 	add.w	r3, r0, #20
 802c706:	3114      	adds	r1, #20
 802c708:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802c70c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802c710:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802c714:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802c718:	42a5      	cmp	r5, r4
 802c71a:	d003      	beq.n	802c724 <__mcmp+0x2c>
 802c71c:	d305      	bcc.n	802c72a <__mcmp+0x32>
 802c71e:	2201      	movs	r2, #1
 802c720:	4610      	mov	r0, r2
 802c722:	bd30      	pop	{r4, r5, pc}
 802c724:	4283      	cmp	r3, r0
 802c726:	d3f3      	bcc.n	802c710 <__mcmp+0x18>
 802c728:	e7fa      	b.n	802c720 <__mcmp+0x28>
 802c72a:	f04f 32ff 	mov.w	r2, #4294967295
 802c72e:	e7f7      	b.n	802c720 <__mcmp+0x28>

0802c730 <__mdiff>:
 802c730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c734:	460c      	mov	r4, r1
 802c736:	4606      	mov	r6, r0
 802c738:	4611      	mov	r1, r2
 802c73a:	4620      	mov	r0, r4
 802c73c:	4690      	mov	r8, r2
 802c73e:	f7ff ffdb 	bl	802c6f8 <__mcmp>
 802c742:	1e05      	subs	r5, r0, #0
 802c744:	d110      	bne.n	802c768 <__mdiff+0x38>
 802c746:	4629      	mov	r1, r5
 802c748:	4630      	mov	r0, r6
 802c74a:	f7ff fd53 	bl	802c1f4 <_Balloc>
 802c74e:	b930      	cbnz	r0, 802c75e <__mdiff+0x2e>
 802c750:	4b3a      	ldr	r3, [pc, #232]	; (802c83c <__mdiff+0x10c>)
 802c752:	4602      	mov	r2, r0
 802c754:	f240 2132 	movw	r1, #562	; 0x232
 802c758:	4839      	ldr	r0, [pc, #228]	; (802c840 <__mdiff+0x110>)
 802c75a:	f7fe fe83 	bl	802b464 <__assert_func>
 802c75e:	2301      	movs	r3, #1
 802c760:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802c764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c768:	bfa4      	itt	ge
 802c76a:	4643      	movge	r3, r8
 802c76c:	46a0      	movge	r8, r4
 802c76e:	4630      	mov	r0, r6
 802c770:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802c774:	bfa6      	itte	ge
 802c776:	461c      	movge	r4, r3
 802c778:	2500      	movge	r5, #0
 802c77a:	2501      	movlt	r5, #1
 802c77c:	f7ff fd3a 	bl	802c1f4 <_Balloc>
 802c780:	b920      	cbnz	r0, 802c78c <__mdiff+0x5c>
 802c782:	4b2e      	ldr	r3, [pc, #184]	; (802c83c <__mdiff+0x10c>)
 802c784:	4602      	mov	r2, r0
 802c786:	f44f 7110 	mov.w	r1, #576	; 0x240
 802c78a:	e7e5      	b.n	802c758 <__mdiff+0x28>
 802c78c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802c790:	6926      	ldr	r6, [r4, #16]
 802c792:	60c5      	str	r5, [r0, #12]
 802c794:	f104 0914 	add.w	r9, r4, #20
 802c798:	f108 0514 	add.w	r5, r8, #20
 802c79c:	f100 0e14 	add.w	lr, r0, #20
 802c7a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802c7a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802c7a8:	f108 0210 	add.w	r2, r8, #16
 802c7ac:	46f2      	mov	sl, lr
 802c7ae:	2100      	movs	r1, #0
 802c7b0:	f859 3b04 	ldr.w	r3, [r9], #4
 802c7b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802c7b8:	fa1f f883 	uxth.w	r8, r3
 802c7bc:	fa11 f18b 	uxtah	r1, r1, fp
 802c7c0:	0c1b      	lsrs	r3, r3, #16
 802c7c2:	eba1 0808 	sub.w	r8, r1, r8
 802c7c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802c7ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802c7ce:	fa1f f888 	uxth.w	r8, r8
 802c7d2:	1419      	asrs	r1, r3, #16
 802c7d4:	454e      	cmp	r6, r9
 802c7d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802c7da:	f84a 3b04 	str.w	r3, [sl], #4
 802c7de:	d8e7      	bhi.n	802c7b0 <__mdiff+0x80>
 802c7e0:	1b33      	subs	r3, r6, r4
 802c7e2:	3b15      	subs	r3, #21
 802c7e4:	f023 0303 	bic.w	r3, r3, #3
 802c7e8:	3304      	adds	r3, #4
 802c7ea:	3415      	adds	r4, #21
 802c7ec:	42a6      	cmp	r6, r4
 802c7ee:	bf38      	it	cc
 802c7f0:	2304      	movcc	r3, #4
 802c7f2:	441d      	add	r5, r3
 802c7f4:	4473      	add	r3, lr
 802c7f6:	469e      	mov	lr, r3
 802c7f8:	462e      	mov	r6, r5
 802c7fa:	4566      	cmp	r6, ip
 802c7fc:	d30e      	bcc.n	802c81c <__mdiff+0xec>
 802c7fe:	f10c 0203 	add.w	r2, ip, #3
 802c802:	1b52      	subs	r2, r2, r5
 802c804:	f022 0203 	bic.w	r2, r2, #3
 802c808:	3d03      	subs	r5, #3
 802c80a:	45ac      	cmp	ip, r5
 802c80c:	bf38      	it	cc
 802c80e:	2200      	movcc	r2, #0
 802c810:	441a      	add	r2, r3
 802c812:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802c816:	b17b      	cbz	r3, 802c838 <__mdiff+0x108>
 802c818:	6107      	str	r7, [r0, #16]
 802c81a:	e7a3      	b.n	802c764 <__mdiff+0x34>
 802c81c:	f856 8b04 	ldr.w	r8, [r6], #4
 802c820:	fa11 f288 	uxtah	r2, r1, r8
 802c824:	1414      	asrs	r4, r2, #16
 802c826:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802c82a:	b292      	uxth	r2, r2
 802c82c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802c830:	f84e 2b04 	str.w	r2, [lr], #4
 802c834:	1421      	asrs	r1, r4, #16
 802c836:	e7e0      	b.n	802c7fa <__mdiff+0xca>
 802c838:	3f01      	subs	r7, #1
 802c83a:	e7ea      	b.n	802c812 <__mdiff+0xe2>
 802c83c:	08079cee 	.word	0x08079cee
 802c840:	08079cff 	.word	0x08079cff

0802c844 <__d2b>:
 802c844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c848:	4689      	mov	r9, r1
 802c84a:	2101      	movs	r1, #1
 802c84c:	ec57 6b10 	vmov	r6, r7, d0
 802c850:	4690      	mov	r8, r2
 802c852:	f7ff fccf 	bl	802c1f4 <_Balloc>
 802c856:	4604      	mov	r4, r0
 802c858:	b930      	cbnz	r0, 802c868 <__d2b+0x24>
 802c85a:	4602      	mov	r2, r0
 802c85c:	4b25      	ldr	r3, [pc, #148]	; (802c8f4 <__d2b+0xb0>)
 802c85e:	4826      	ldr	r0, [pc, #152]	; (802c8f8 <__d2b+0xb4>)
 802c860:	f240 310a 	movw	r1, #778	; 0x30a
 802c864:	f7fe fdfe 	bl	802b464 <__assert_func>
 802c868:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802c86c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802c870:	bb35      	cbnz	r5, 802c8c0 <__d2b+0x7c>
 802c872:	2e00      	cmp	r6, #0
 802c874:	9301      	str	r3, [sp, #4]
 802c876:	d028      	beq.n	802c8ca <__d2b+0x86>
 802c878:	4668      	mov	r0, sp
 802c87a:	9600      	str	r6, [sp, #0]
 802c87c:	f7ff fd82 	bl	802c384 <__lo0bits>
 802c880:	9900      	ldr	r1, [sp, #0]
 802c882:	b300      	cbz	r0, 802c8c6 <__d2b+0x82>
 802c884:	9a01      	ldr	r2, [sp, #4]
 802c886:	f1c0 0320 	rsb	r3, r0, #32
 802c88a:	fa02 f303 	lsl.w	r3, r2, r3
 802c88e:	430b      	orrs	r3, r1
 802c890:	40c2      	lsrs	r2, r0
 802c892:	6163      	str	r3, [r4, #20]
 802c894:	9201      	str	r2, [sp, #4]
 802c896:	9b01      	ldr	r3, [sp, #4]
 802c898:	61a3      	str	r3, [r4, #24]
 802c89a:	2b00      	cmp	r3, #0
 802c89c:	bf14      	ite	ne
 802c89e:	2202      	movne	r2, #2
 802c8a0:	2201      	moveq	r2, #1
 802c8a2:	6122      	str	r2, [r4, #16]
 802c8a4:	b1d5      	cbz	r5, 802c8dc <__d2b+0x98>
 802c8a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802c8aa:	4405      	add	r5, r0
 802c8ac:	f8c9 5000 	str.w	r5, [r9]
 802c8b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802c8b4:	f8c8 0000 	str.w	r0, [r8]
 802c8b8:	4620      	mov	r0, r4
 802c8ba:	b003      	add	sp, #12
 802c8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c8c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802c8c4:	e7d5      	b.n	802c872 <__d2b+0x2e>
 802c8c6:	6161      	str	r1, [r4, #20]
 802c8c8:	e7e5      	b.n	802c896 <__d2b+0x52>
 802c8ca:	a801      	add	r0, sp, #4
 802c8cc:	f7ff fd5a 	bl	802c384 <__lo0bits>
 802c8d0:	9b01      	ldr	r3, [sp, #4]
 802c8d2:	6163      	str	r3, [r4, #20]
 802c8d4:	2201      	movs	r2, #1
 802c8d6:	6122      	str	r2, [r4, #16]
 802c8d8:	3020      	adds	r0, #32
 802c8da:	e7e3      	b.n	802c8a4 <__d2b+0x60>
 802c8dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802c8e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802c8e4:	f8c9 0000 	str.w	r0, [r9]
 802c8e8:	6918      	ldr	r0, [r3, #16]
 802c8ea:	f7ff fd2b 	bl	802c344 <__hi0bits>
 802c8ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802c8f2:	e7df      	b.n	802c8b4 <__d2b+0x70>
 802c8f4:	08079cee 	.word	0x08079cee
 802c8f8:	08079cff 	.word	0x08079cff

0802c8fc <_calloc_r>:
 802c8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c8fe:	fba1 2402 	umull	r2, r4, r1, r2
 802c902:	b94c      	cbnz	r4, 802c918 <_calloc_r+0x1c>
 802c904:	4611      	mov	r1, r2
 802c906:	9201      	str	r2, [sp, #4]
 802c908:	f000 f87a 	bl	802ca00 <_malloc_r>
 802c90c:	9a01      	ldr	r2, [sp, #4]
 802c90e:	4605      	mov	r5, r0
 802c910:	b930      	cbnz	r0, 802c920 <_calloc_r+0x24>
 802c912:	4628      	mov	r0, r5
 802c914:	b003      	add	sp, #12
 802c916:	bd30      	pop	{r4, r5, pc}
 802c918:	220c      	movs	r2, #12
 802c91a:	6002      	str	r2, [r0, #0]
 802c91c:	2500      	movs	r5, #0
 802c91e:	e7f8      	b.n	802c912 <_calloc_r+0x16>
 802c920:	4621      	mov	r1, r4
 802c922:	f7fe f887 	bl	802aa34 <memset>
 802c926:	e7f4      	b.n	802c912 <_calloc_r+0x16>

0802c928 <_free_r>:
 802c928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c92a:	2900      	cmp	r1, #0
 802c92c:	d044      	beq.n	802c9b8 <_free_r+0x90>
 802c92e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c932:	9001      	str	r0, [sp, #4]
 802c934:	2b00      	cmp	r3, #0
 802c936:	f1a1 0404 	sub.w	r4, r1, #4
 802c93a:	bfb8      	it	lt
 802c93c:	18e4      	addlt	r4, r4, r3
 802c93e:	f000 fe93 	bl	802d668 <__malloc_lock>
 802c942:	4a1e      	ldr	r2, [pc, #120]	; (802c9bc <_free_r+0x94>)
 802c944:	9801      	ldr	r0, [sp, #4]
 802c946:	6813      	ldr	r3, [r2, #0]
 802c948:	b933      	cbnz	r3, 802c958 <_free_r+0x30>
 802c94a:	6063      	str	r3, [r4, #4]
 802c94c:	6014      	str	r4, [r2, #0]
 802c94e:	b003      	add	sp, #12
 802c950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c954:	f000 be8e 	b.w	802d674 <__malloc_unlock>
 802c958:	42a3      	cmp	r3, r4
 802c95a:	d908      	bls.n	802c96e <_free_r+0x46>
 802c95c:	6825      	ldr	r5, [r4, #0]
 802c95e:	1961      	adds	r1, r4, r5
 802c960:	428b      	cmp	r3, r1
 802c962:	bf01      	itttt	eq
 802c964:	6819      	ldreq	r1, [r3, #0]
 802c966:	685b      	ldreq	r3, [r3, #4]
 802c968:	1949      	addeq	r1, r1, r5
 802c96a:	6021      	streq	r1, [r4, #0]
 802c96c:	e7ed      	b.n	802c94a <_free_r+0x22>
 802c96e:	461a      	mov	r2, r3
 802c970:	685b      	ldr	r3, [r3, #4]
 802c972:	b10b      	cbz	r3, 802c978 <_free_r+0x50>
 802c974:	42a3      	cmp	r3, r4
 802c976:	d9fa      	bls.n	802c96e <_free_r+0x46>
 802c978:	6811      	ldr	r1, [r2, #0]
 802c97a:	1855      	adds	r5, r2, r1
 802c97c:	42a5      	cmp	r5, r4
 802c97e:	d10b      	bne.n	802c998 <_free_r+0x70>
 802c980:	6824      	ldr	r4, [r4, #0]
 802c982:	4421      	add	r1, r4
 802c984:	1854      	adds	r4, r2, r1
 802c986:	42a3      	cmp	r3, r4
 802c988:	6011      	str	r1, [r2, #0]
 802c98a:	d1e0      	bne.n	802c94e <_free_r+0x26>
 802c98c:	681c      	ldr	r4, [r3, #0]
 802c98e:	685b      	ldr	r3, [r3, #4]
 802c990:	6053      	str	r3, [r2, #4]
 802c992:	4421      	add	r1, r4
 802c994:	6011      	str	r1, [r2, #0]
 802c996:	e7da      	b.n	802c94e <_free_r+0x26>
 802c998:	d902      	bls.n	802c9a0 <_free_r+0x78>
 802c99a:	230c      	movs	r3, #12
 802c99c:	6003      	str	r3, [r0, #0]
 802c99e:	e7d6      	b.n	802c94e <_free_r+0x26>
 802c9a0:	6825      	ldr	r5, [r4, #0]
 802c9a2:	1961      	adds	r1, r4, r5
 802c9a4:	428b      	cmp	r3, r1
 802c9a6:	bf04      	itt	eq
 802c9a8:	6819      	ldreq	r1, [r3, #0]
 802c9aa:	685b      	ldreq	r3, [r3, #4]
 802c9ac:	6063      	str	r3, [r4, #4]
 802c9ae:	bf04      	itt	eq
 802c9b0:	1949      	addeq	r1, r1, r5
 802c9b2:	6021      	streq	r1, [r4, #0]
 802c9b4:	6054      	str	r4, [r2, #4]
 802c9b6:	e7ca      	b.n	802c94e <_free_r+0x26>
 802c9b8:	b003      	add	sp, #12
 802c9ba:	bd30      	pop	{r4, r5, pc}
 802c9bc:	20002d14 	.word	0x20002d14

0802c9c0 <sbrk_aligned>:
 802c9c0:	b570      	push	{r4, r5, r6, lr}
 802c9c2:	4e0e      	ldr	r6, [pc, #56]	; (802c9fc <sbrk_aligned+0x3c>)
 802c9c4:	460c      	mov	r4, r1
 802c9c6:	6831      	ldr	r1, [r6, #0]
 802c9c8:	4605      	mov	r5, r0
 802c9ca:	b911      	cbnz	r1, 802c9d2 <sbrk_aligned+0x12>
 802c9cc:	f000 fb42 	bl	802d054 <_sbrk_r>
 802c9d0:	6030      	str	r0, [r6, #0]
 802c9d2:	4621      	mov	r1, r4
 802c9d4:	4628      	mov	r0, r5
 802c9d6:	f000 fb3d 	bl	802d054 <_sbrk_r>
 802c9da:	1c43      	adds	r3, r0, #1
 802c9dc:	d00a      	beq.n	802c9f4 <sbrk_aligned+0x34>
 802c9de:	1cc4      	adds	r4, r0, #3
 802c9e0:	f024 0403 	bic.w	r4, r4, #3
 802c9e4:	42a0      	cmp	r0, r4
 802c9e6:	d007      	beq.n	802c9f8 <sbrk_aligned+0x38>
 802c9e8:	1a21      	subs	r1, r4, r0
 802c9ea:	4628      	mov	r0, r5
 802c9ec:	f000 fb32 	bl	802d054 <_sbrk_r>
 802c9f0:	3001      	adds	r0, #1
 802c9f2:	d101      	bne.n	802c9f8 <sbrk_aligned+0x38>
 802c9f4:	f04f 34ff 	mov.w	r4, #4294967295
 802c9f8:	4620      	mov	r0, r4
 802c9fa:	bd70      	pop	{r4, r5, r6, pc}
 802c9fc:	20002d18 	.word	0x20002d18

0802ca00 <_malloc_r>:
 802ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca04:	1ccd      	adds	r5, r1, #3
 802ca06:	f025 0503 	bic.w	r5, r5, #3
 802ca0a:	3508      	adds	r5, #8
 802ca0c:	2d0c      	cmp	r5, #12
 802ca0e:	bf38      	it	cc
 802ca10:	250c      	movcc	r5, #12
 802ca12:	2d00      	cmp	r5, #0
 802ca14:	4607      	mov	r7, r0
 802ca16:	db01      	blt.n	802ca1c <_malloc_r+0x1c>
 802ca18:	42a9      	cmp	r1, r5
 802ca1a:	d905      	bls.n	802ca28 <_malloc_r+0x28>
 802ca1c:	230c      	movs	r3, #12
 802ca1e:	603b      	str	r3, [r7, #0]
 802ca20:	2600      	movs	r6, #0
 802ca22:	4630      	mov	r0, r6
 802ca24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ca28:	4e2e      	ldr	r6, [pc, #184]	; (802cae4 <_malloc_r+0xe4>)
 802ca2a:	f000 fe1d 	bl	802d668 <__malloc_lock>
 802ca2e:	6833      	ldr	r3, [r6, #0]
 802ca30:	461c      	mov	r4, r3
 802ca32:	bb34      	cbnz	r4, 802ca82 <_malloc_r+0x82>
 802ca34:	4629      	mov	r1, r5
 802ca36:	4638      	mov	r0, r7
 802ca38:	f7ff ffc2 	bl	802c9c0 <sbrk_aligned>
 802ca3c:	1c43      	adds	r3, r0, #1
 802ca3e:	4604      	mov	r4, r0
 802ca40:	d14d      	bne.n	802cade <_malloc_r+0xde>
 802ca42:	6834      	ldr	r4, [r6, #0]
 802ca44:	4626      	mov	r6, r4
 802ca46:	2e00      	cmp	r6, #0
 802ca48:	d140      	bne.n	802cacc <_malloc_r+0xcc>
 802ca4a:	6823      	ldr	r3, [r4, #0]
 802ca4c:	4631      	mov	r1, r6
 802ca4e:	4638      	mov	r0, r7
 802ca50:	eb04 0803 	add.w	r8, r4, r3
 802ca54:	f000 fafe 	bl	802d054 <_sbrk_r>
 802ca58:	4580      	cmp	r8, r0
 802ca5a:	d13a      	bne.n	802cad2 <_malloc_r+0xd2>
 802ca5c:	6821      	ldr	r1, [r4, #0]
 802ca5e:	3503      	adds	r5, #3
 802ca60:	1a6d      	subs	r5, r5, r1
 802ca62:	f025 0503 	bic.w	r5, r5, #3
 802ca66:	3508      	adds	r5, #8
 802ca68:	2d0c      	cmp	r5, #12
 802ca6a:	bf38      	it	cc
 802ca6c:	250c      	movcc	r5, #12
 802ca6e:	4629      	mov	r1, r5
 802ca70:	4638      	mov	r0, r7
 802ca72:	f7ff ffa5 	bl	802c9c0 <sbrk_aligned>
 802ca76:	3001      	adds	r0, #1
 802ca78:	d02b      	beq.n	802cad2 <_malloc_r+0xd2>
 802ca7a:	6823      	ldr	r3, [r4, #0]
 802ca7c:	442b      	add	r3, r5
 802ca7e:	6023      	str	r3, [r4, #0]
 802ca80:	e00e      	b.n	802caa0 <_malloc_r+0xa0>
 802ca82:	6822      	ldr	r2, [r4, #0]
 802ca84:	1b52      	subs	r2, r2, r5
 802ca86:	d41e      	bmi.n	802cac6 <_malloc_r+0xc6>
 802ca88:	2a0b      	cmp	r2, #11
 802ca8a:	d916      	bls.n	802caba <_malloc_r+0xba>
 802ca8c:	1961      	adds	r1, r4, r5
 802ca8e:	42a3      	cmp	r3, r4
 802ca90:	6025      	str	r5, [r4, #0]
 802ca92:	bf18      	it	ne
 802ca94:	6059      	strne	r1, [r3, #4]
 802ca96:	6863      	ldr	r3, [r4, #4]
 802ca98:	bf08      	it	eq
 802ca9a:	6031      	streq	r1, [r6, #0]
 802ca9c:	5162      	str	r2, [r4, r5]
 802ca9e:	604b      	str	r3, [r1, #4]
 802caa0:	4638      	mov	r0, r7
 802caa2:	f104 060b 	add.w	r6, r4, #11
 802caa6:	f000 fde5 	bl	802d674 <__malloc_unlock>
 802caaa:	f026 0607 	bic.w	r6, r6, #7
 802caae:	1d23      	adds	r3, r4, #4
 802cab0:	1af2      	subs	r2, r6, r3
 802cab2:	d0b6      	beq.n	802ca22 <_malloc_r+0x22>
 802cab4:	1b9b      	subs	r3, r3, r6
 802cab6:	50a3      	str	r3, [r4, r2]
 802cab8:	e7b3      	b.n	802ca22 <_malloc_r+0x22>
 802caba:	6862      	ldr	r2, [r4, #4]
 802cabc:	42a3      	cmp	r3, r4
 802cabe:	bf0c      	ite	eq
 802cac0:	6032      	streq	r2, [r6, #0]
 802cac2:	605a      	strne	r2, [r3, #4]
 802cac4:	e7ec      	b.n	802caa0 <_malloc_r+0xa0>
 802cac6:	4623      	mov	r3, r4
 802cac8:	6864      	ldr	r4, [r4, #4]
 802caca:	e7b2      	b.n	802ca32 <_malloc_r+0x32>
 802cacc:	4634      	mov	r4, r6
 802cace:	6876      	ldr	r6, [r6, #4]
 802cad0:	e7b9      	b.n	802ca46 <_malloc_r+0x46>
 802cad2:	230c      	movs	r3, #12
 802cad4:	603b      	str	r3, [r7, #0]
 802cad6:	4638      	mov	r0, r7
 802cad8:	f000 fdcc 	bl	802d674 <__malloc_unlock>
 802cadc:	e7a1      	b.n	802ca22 <_malloc_r+0x22>
 802cade:	6025      	str	r5, [r4, #0]
 802cae0:	e7de      	b.n	802caa0 <_malloc_r+0xa0>
 802cae2:	bf00      	nop
 802cae4:	20002d14 	.word	0x20002d14

0802cae8 <__ssputs_r>:
 802cae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802caec:	688e      	ldr	r6, [r1, #8]
 802caee:	429e      	cmp	r6, r3
 802caf0:	4682      	mov	sl, r0
 802caf2:	460c      	mov	r4, r1
 802caf4:	4690      	mov	r8, r2
 802caf6:	461f      	mov	r7, r3
 802caf8:	d838      	bhi.n	802cb6c <__ssputs_r+0x84>
 802cafa:	898a      	ldrh	r2, [r1, #12]
 802cafc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802cb00:	d032      	beq.n	802cb68 <__ssputs_r+0x80>
 802cb02:	6825      	ldr	r5, [r4, #0]
 802cb04:	6909      	ldr	r1, [r1, #16]
 802cb06:	eba5 0901 	sub.w	r9, r5, r1
 802cb0a:	6965      	ldr	r5, [r4, #20]
 802cb0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802cb10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802cb14:	3301      	adds	r3, #1
 802cb16:	444b      	add	r3, r9
 802cb18:	106d      	asrs	r5, r5, #1
 802cb1a:	429d      	cmp	r5, r3
 802cb1c:	bf38      	it	cc
 802cb1e:	461d      	movcc	r5, r3
 802cb20:	0553      	lsls	r3, r2, #21
 802cb22:	d531      	bpl.n	802cb88 <__ssputs_r+0xa0>
 802cb24:	4629      	mov	r1, r5
 802cb26:	f7ff ff6b 	bl	802ca00 <_malloc_r>
 802cb2a:	4606      	mov	r6, r0
 802cb2c:	b950      	cbnz	r0, 802cb44 <__ssputs_r+0x5c>
 802cb2e:	230c      	movs	r3, #12
 802cb30:	f8ca 3000 	str.w	r3, [sl]
 802cb34:	89a3      	ldrh	r3, [r4, #12]
 802cb36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802cb3a:	81a3      	strh	r3, [r4, #12]
 802cb3c:	f04f 30ff 	mov.w	r0, #4294967295
 802cb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cb44:	6921      	ldr	r1, [r4, #16]
 802cb46:	464a      	mov	r2, r9
 802cb48:	f7fd ff4c 	bl	802a9e4 <memcpy>
 802cb4c:	89a3      	ldrh	r3, [r4, #12]
 802cb4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802cb52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802cb56:	81a3      	strh	r3, [r4, #12]
 802cb58:	6126      	str	r6, [r4, #16]
 802cb5a:	6165      	str	r5, [r4, #20]
 802cb5c:	444e      	add	r6, r9
 802cb5e:	eba5 0509 	sub.w	r5, r5, r9
 802cb62:	6026      	str	r6, [r4, #0]
 802cb64:	60a5      	str	r5, [r4, #8]
 802cb66:	463e      	mov	r6, r7
 802cb68:	42be      	cmp	r6, r7
 802cb6a:	d900      	bls.n	802cb6e <__ssputs_r+0x86>
 802cb6c:	463e      	mov	r6, r7
 802cb6e:	6820      	ldr	r0, [r4, #0]
 802cb70:	4632      	mov	r2, r6
 802cb72:	4641      	mov	r1, r8
 802cb74:	f7fd ff44 	bl	802aa00 <memmove>
 802cb78:	68a3      	ldr	r3, [r4, #8]
 802cb7a:	1b9b      	subs	r3, r3, r6
 802cb7c:	60a3      	str	r3, [r4, #8]
 802cb7e:	6823      	ldr	r3, [r4, #0]
 802cb80:	4433      	add	r3, r6
 802cb82:	6023      	str	r3, [r4, #0]
 802cb84:	2000      	movs	r0, #0
 802cb86:	e7db      	b.n	802cb40 <__ssputs_r+0x58>
 802cb88:	462a      	mov	r2, r5
 802cb8a:	f000 fd79 	bl	802d680 <_realloc_r>
 802cb8e:	4606      	mov	r6, r0
 802cb90:	2800      	cmp	r0, #0
 802cb92:	d1e1      	bne.n	802cb58 <__ssputs_r+0x70>
 802cb94:	6921      	ldr	r1, [r4, #16]
 802cb96:	4650      	mov	r0, sl
 802cb98:	f7ff fec6 	bl	802c928 <_free_r>
 802cb9c:	e7c7      	b.n	802cb2e <__ssputs_r+0x46>
	...

0802cba0 <_svfiprintf_r>:
 802cba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cba4:	4698      	mov	r8, r3
 802cba6:	898b      	ldrh	r3, [r1, #12]
 802cba8:	061b      	lsls	r3, r3, #24
 802cbaa:	b09d      	sub	sp, #116	; 0x74
 802cbac:	4607      	mov	r7, r0
 802cbae:	460d      	mov	r5, r1
 802cbb0:	4614      	mov	r4, r2
 802cbb2:	d50e      	bpl.n	802cbd2 <_svfiprintf_r+0x32>
 802cbb4:	690b      	ldr	r3, [r1, #16]
 802cbb6:	b963      	cbnz	r3, 802cbd2 <_svfiprintf_r+0x32>
 802cbb8:	2140      	movs	r1, #64	; 0x40
 802cbba:	f7ff ff21 	bl	802ca00 <_malloc_r>
 802cbbe:	6028      	str	r0, [r5, #0]
 802cbc0:	6128      	str	r0, [r5, #16]
 802cbc2:	b920      	cbnz	r0, 802cbce <_svfiprintf_r+0x2e>
 802cbc4:	230c      	movs	r3, #12
 802cbc6:	603b      	str	r3, [r7, #0]
 802cbc8:	f04f 30ff 	mov.w	r0, #4294967295
 802cbcc:	e0d1      	b.n	802cd72 <_svfiprintf_r+0x1d2>
 802cbce:	2340      	movs	r3, #64	; 0x40
 802cbd0:	616b      	str	r3, [r5, #20]
 802cbd2:	2300      	movs	r3, #0
 802cbd4:	9309      	str	r3, [sp, #36]	; 0x24
 802cbd6:	2320      	movs	r3, #32
 802cbd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802cbdc:	f8cd 800c 	str.w	r8, [sp, #12]
 802cbe0:	2330      	movs	r3, #48	; 0x30
 802cbe2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802cd8c <_svfiprintf_r+0x1ec>
 802cbe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802cbea:	f04f 0901 	mov.w	r9, #1
 802cbee:	4623      	mov	r3, r4
 802cbf0:	469a      	mov	sl, r3
 802cbf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cbf6:	b10a      	cbz	r2, 802cbfc <_svfiprintf_r+0x5c>
 802cbf8:	2a25      	cmp	r2, #37	; 0x25
 802cbfa:	d1f9      	bne.n	802cbf0 <_svfiprintf_r+0x50>
 802cbfc:	ebba 0b04 	subs.w	fp, sl, r4
 802cc00:	d00b      	beq.n	802cc1a <_svfiprintf_r+0x7a>
 802cc02:	465b      	mov	r3, fp
 802cc04:	4622      	mov	r2, r4
 802cc06:	4629      	mov	r1, r5
 802cc08:	4638      	mov	r0, r7
 802cc0a:	f7ff ff6d 	bl	802cae8 <__ssputs_r>
 802cc0e:	3001      	adds	r0, #1
 802cc10:	f000 80aa 	beq.w	802cd68 <_svfiprintf_r+0x1c8>
 802cc14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cc16:	445a      	add	r2, fp
 802cc18:	9209      	str	r2, [sp, #36]	; 0x24
 802cc1a:	f89a 3000 	ldrb.w	r3, [sl]
 802cc1e:	2b00      	cmp	r3, #0
 802cc20:	f000 80a2 	beq.w	802cd68 <_svfiprintf_r+0x1c8>
 802cc24:	2300      	movs	r3, #0
 802cc26:	f04f 32ff 	mov.w	r2, #4294967295
 802cc2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cc2e:	f10a 0a01 	add.w	sl, sl, #1
 802cc32:	9304      	str	r3, [sp, #16]
 802cc34:	9307      	str	r3, [sp, #28]
 802cc36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802cc3a:	931a      	str	r3, [sp, #104]	; 0x68
 802cc3c:	4654      	mov	r4, sl
 802cc3e:	2205      	movs	r2, #5
 802cc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cc44:	4851      	ldr	r0, [pc, #324]	; (802cd8c <_svfiprintf_r+0x1ec>)
 802cc46:	f7f3 fa2b 	bl	80200a0 <memchr>
 802cc4a:	9a04      	ldr	r2, [sp, #16]
 802cc4c:	b9d8      	cbnz	r0, 802cc86 <_svfiprintf_r+0xe6>
 802cc4e:	06d0      	lsls	r0, r2, #27
 802cc50:	bf44      	itt	mi
 802cc52:	2320      	movmi	r3, #32
 802cc54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cc58:	0711      	lsls	r1, r2, #28
 802cc5a:	bf44      	itt	mi
 802cc5c:	232b      	movmi	r3, #43	; 0x2b
 802cc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cc62:	f89a 3000 	ldrb.w	r3, [sl]
 802cc66:	2b2a      	cmp	r3, #42	; 0x2a
 802cc68:	d015      	beq.n	802cc96 <_svfiprintf_r+0xf6>
 802cc6a:	9a07      	ldr	r2, [sp, #28]
 802cc6c:	4654      	mov	r4, sl
 802cc6e:	2000      	movs	r0, #0
 802cc70:	f04f 0c0a 	mov.w	ip, #10
 802cc74:	4621      	mov	r1, r4
 802cc76:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cc7a:	3b30      	subs	r3, #48	; 0x30
 802cc7c:	2b09      	cmp	r3, #9
 802cc7e:	d94e      	bls.n	802cd1e <_svfiprintf_r+0x17e>
 802cc80:	b1b0      	cbz	r0, 802ccb0 <_svfiprintf_r+0x110>
 802cc82:	9207      	str	r2, [sp, #28]
 802cc84:	e014      	b.n	802ccb0 <_svfiprintf_r+0x110>
 802cc86:	eba0 0308 	sub.w	r3, r0, r8
 802cc8a:	fa09 f303 	lsl.w	r3, r9, r3
 802cc8e:	4313      	orrs	r3, r2
 802cc90:	9304      	str	r3, [sp, #16]
 802cc92:	46a2      	mov	sl, r4
 802cc94:	e7d2      	b.n	802cc3c <_svfiprintf_r+0x9c>
 802cc96:	9b03      	ldr	r3, [sp, #12]
 802cc98:	1d19      	adds	r1, r3, #4
 802cc9a:	681b      	ldr	r3, [r3, #0]
 802cc9c:	9103      	str	r1, [sp, #12]
 802cc9e:	2b00      	cmp	r3, #0
 802cca0:	bfbb      	ittet	lt
 802cca2:	425b      	neglt	r3, r3
 802cca4:	f042 0202 	orrlt.w	r2, r2, #2
 802cca8:	9307      	strge	r3, [sp, #28]
 802ccaa:	9307      	strlt	r3, [sp, #28]
 802ccac:	bfb8      	it	lt
 802ccae:	9204      	strlt	r2, [sp, #16]
 802ccb0:	7823      	ldrb	r3, [r4, #0]
 802ccb2:	2b2e      	cmp	r3, #46	; 0x2e
 802ccb4:	d10c      	bne.n	802ccd0 <_svfiprintf_r+0x130>
 802ccb6:	7863      	ldrb	r3, [r4, #1]
 802ccb8:	2b2a      	cmp	r3, #42	; 0x2a
 802ccba:	d135      	bne.n	802cd28 <_svfiprintf_r+0x188>
 802ccbc:	9b03      	ldr	r3, [sp, #12]
 802ccbe:	1d1a      	adds	r2, r3, #4
 802ccc0:	681b      	ldr	r3, [r3, #0]
 802ccc2:	9203      	str	r2, [sp, #12]
 802ccc4:	2b00      	cmp	r3, #0
 802ccc6:	bfb8      	it	lt
 802ccc8:	f04f 33ff 	movlt.w	r3, #4294967295
 802cccc:	3402      	adds	r4, #2
 802ccce:	9305      	str	r3, [sp, #20]
 802ccd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802cd9c <_svfiprintf_r+0x1fc>
 802ccd4:	7821      	ldrb	r1, [r4, #0]
 802ccd6:	2203      	movs	r2, #3
 802ccd8:	4650      	mov	r0, sl
 802ccda:	f7f3 f9e1 	bl	80200a0 <memchr>
 802ccde:	b140      	cbz	r0, 802ccf2 <_svfiprintf_r+0x152>
 802cce0:	2340      	movs	r3, #64	; 0x40
 802cce2:	eba0 000a 	sub.w	r0, r0, sl
 802cce6:	fa03 f000 	lsl.w	r0, r3, r0
 802ccea:	9b04      	ldr	r3, [sp, #16]
 802ccec:	4303      	orrs	r3, r0
 802ccee:	3401      	adds	r4, #1
 802ccf0:	9304      	str	r3, [sp, #16]
 802ccf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ccf6:	4826      	ldr	r0, [pc, #152]	; (802cd90 <_svfiprintf_r+0x1f0>)
 802ccf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ccfc:	2206      	movs	r2, #6
 802ccfe:	f7f3 f9cf 	bl	80200a0 <memchr>
 802cd02:	2800      	cmp	r0, #0
 802cd04:	d038      	beq.n	802cd78 <_svfiprintf_r+0x1d8>
 802cd06:	4b23      	ldr	r3, [pc, #140]	; (802cd94 <_svfiprintf_r+0x1f4>)
 802cd08:	bb1b      	cbnz	r3, 802cd52 <_svfiprintf_r+0x1b2>
 802cd0a:	9b03      	ldr	r3, [sp, #12]
 802cd0c:	3307      	adds	r3, #7
 802cd0e:	f023 0307 	bic.w	r3, r3, #7
 802cd12:	3308      	adds	r3, #8
 802cd14:	9303      	str	r3, [sp, #12]
 802cd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cd18:	4433      	add	r3, r6
 802cd1a:	9309      	str	r3, [sp, #36]	; 0x24
 802cd1c:	e767      	b.n	802cbee <_svfiprintf_r+0x4e>
 802cd1e:	fb0c 3202 	mla	r2, ip, r2, r3
 802cd22:	460c      	mov	r4, r1
 802cd24:	2001      	movs	r0, #1
 802cd26:	e7a5      	b.n	802cc74 <_svfiprintf_r+0xd4>
 802cd28:	2300      	movs	r3, #0
 802cd2a:	3401      	adds	r4, #1
 802cd2c:	9305      	str	r3, [sp, #20]
 802cd2e:	4619      	mov	r1, r3
 802cd30:	f04f 0c0a 	mov.w	ip, #10
 802cd34:	4620      	mov	r0, r4
 802cd36:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cd3a:	3a30      	subs	r2, #48	; 0x30
 802cd3c:	2a09      	cmp	r2, #9
 802cd3e:	d903      	bls.n	802cd48 <_svfiprintf_r+0x1a8>
 802cd40:	2b00      	cmp	r3, #0
 802cd42:	d0c5      	beq.n	802ccd0 <_svfiprintf_r+0x130>
 802cd44:	9105      	str	r1, [sp, #20]
 802cd46:	e7c3      	b.n	802ccd0 <_svfiprintf_r+0x130>
 802cd48:	fb0c 2101 	mla	r1, ip, r1, r2
 802cd4c:	4604      	mov	r4, r0
 802cd4e:	2301      	movs	r3, #1
 802cd50:	e7f0      	b.n	802cd34 <_svfiprintf_r+0x194>
 802cd52:	ab03      	add	r3, sp, #12
 802cd54:	9300      	str	r3, [sp, #0]
 802cd56:	462a      	mov	r2, r5
 802cd58:	4b0f      	ldr	r3, [pc, #60]	; (802cd98 <_svfiprintf_r+0x1f8>)
 802cd5a:	a904      	add	r1, sp, #16
 802cd5c:	4638      	mov	r0, r7
 802cd5e:	f7fd ff11 	bl	802ab84 <_printf_float>
 802cd62:	1c42      	adds	r2, r0, #1
 802cd64:	4606      	mov	r6, r0
 802cd66:	d1d6      	bne.n	802cd16 <_svfiprintf_r+0x176>
 802cd68:	89ab      	ldrh	r3, [r5, #12]
 802cd6a:	065b      	lsls	r3, r3, #25
 802cd6c:	f53f af2c 	bmi.w	802cbc8 <_svfiprintf_r+0x28>
 802cd70:	9809      	ldr	r0, [sp, #36]	; 0x24
 802cd72:	b01d      	add	sp, #116	; 0x74
 802cd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cd78:	ab03      	add	r3, sp, #12
 802cd7a:	9300      	str	r3, [sp, #0]
 802cd7c:	462a      	mov	r2, r5
 802cd7e:	4b06      	ldr	r3, [pc, #24]	; (802cd98 <_svfiprintf_r+0x1f8>)
 802cd80:	a904      	add	r1, sp, #16
 802cd82:	4638      	mov	r0, r7
 802cd84:	f7fe f9a2 	bl	802b0cc <_printf_i>
 802cd88:	e7eb      	b.n	802cd62 <_svfiprintf_r+0x1c2>
 802cd8a:	bf00      	nop
 802cd8c:	08079e5c 	.word	0x08079e5c
 802cd90:	08079e66 	.word	0x08079e66
 802cd94:	0802ab85 	.word	0x0802ab85
 802cd98:	0802cae9 	.word	0x0802cae9
 802cd9c:	08079e62 	.word	0x08079e62

0802cda0 <__sfputc_r>:
 802cda0:	6893      	ldr	r3, [r2, #8]
 802cda2:	3b01      	subs	r3, #1
 802cda4:	2b00      	cmp	r3, #0
 802cda6:	b410      	push	{r4}
 802cda8:	6093      	str	r3, [r2, #8]
 802cdaa:	da08      	bge.n	802cdbe <__sfputc_r+0x1e>
 802cdac:	6994      	ldr	r4, [r2, #24]
 802cdae:	42a3      	cmp	r3, r4
 802cdb0:	db01      	blt.n	802cdb6 <__sfputc_r+0x16>
 802cdb2:	290a      	cmp	r1, #10
 802cdb4:	d103      	bne.n	802cdbe <__sfputc_r+0x1e>
 802cdb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cdba:	f000 b95b 	b.w	802d074 <__swbuf_r>
 802cdbe:	6813      	ldr	r3, [r2, #0]
 802cdc0:	1c58      	adds	r0, r3, #1
 802cdc2:	6010      	str	r0, [r2, #0]
 802cdc4:	7019      	strb	r1, [r3, #0]
 802cdc6:	4608      	mov	r0, r1
 802cdc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cdcc:	4770      	bx	lr

0802cdce <__sfputs_r>:
 802cdce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cdd0:	4606      	mov	r6, r0
 802cdd2:	460f      	mov	r7, r1
 802cdd4:	4614      	mov	r4, r2
 802cdd6:	18d5      	adds	r5, r2, r3
 802cdd8:	42ac      	cmp	r4, r5
 802cdda:	d101      	bne.n	802cde0 <__sfputs_r+0x12>
 802cddc:	2000      	movs	r0, #0
 802cdde:	e007      	b.n	802cdf0 <__sfputs_r+0x22>
 802cde0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cde4:	463a      	mov	r2, r7
 802cde6:	4630      	mov	r0, r6
 802cde8:	f7ff ffda 	bl	802cda0 <__sfputc_r>
 802cdec:	1c43      	adds	r3, r0, #1
 802cdee:	d1f3      	bne.n	802cdd8 <__sfputs_r+0xa>
 802cdf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802cdf4 <_vfiprintf_r>:
 802cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cdf8:	460d      	mov	r5, r1
 802cdfa:	b09d      	sub	sp, #116	; 0x74
 802cdfc:	4614      	mov	r4, r2
 802cdfe:	4698      	mov	r8, r3
 802ce00:	4606      	mov	r6, r0
 802ce02:	b118      	cbz	r0, 802ce0c <_vfiprintf_r+0x18>
 802ce04:	6983      	ldr	r3, [r0, #24]
 802ce06:	b90b      	cbnz	r3, 802ce0c <_vfiprintf_r+0x18>
 802ce08:	f000 fb16 	bl	802d438 <__sinit>
 802ce0c:	4b89      	ldr	r3, [pc, #548]	; (802d034 <_vfiprintf_r+0x240>)
 802ce0e:	429d      	cmp	r5, r3
 802ce10:	d11b      	bne.n	802ce4a <_vfiprintf_r+0x56>
 802ce12:	6875      	ldr	r5, [r6, #4]
 802ce14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ce16:	07d9      	lsls	r1, r3, #31
 802ce18:	d405      	bmi.n	802ce26 <_vfiprintf_r+0x32>
 802ce1a:	89ab      	ldrh	r3, [r5, #12]
 802ce1c:	059a      	lsls	r2, r3, #22
 802ce1e:	d402      	bmi.n	802ce26 <_vfiprintf_r+0x32>
 802ce20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ce22:	f000 fba7 	bl	802d574 <__retarget_lock_acquire_recursive>
 802ce26:	89ab      	ldrh	r3, [r5, #12]
 802ce28:	071b      	lsls	r3, r3, #28
 802ce2a:	d501      	bpl.n	802ce30 <_vfiprintf_r+0x3c>
 802ce2c:	692b      	ldr	r3, [r5, #16]
 802ce2e:	b9eb      	cbnz	r3, 802ce6c <_vfiprintf_r+0x78>
 802ce30:	4629      	mov	r1, r5
 802ce32:	4630      	mov	r0, r6
 802ce34:	f000 f970 	bl	802d118 <__swsetup_r>
 802ce38:	b1c0      	cbz	r0, 802ce6c <_vfiprintf_r+0x78>
 802ce3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ce3c:	07dc      	lsls	r4, r3, #31
 802ce3e:	d50e      	bpl.n	802ce5e <_vfiprintf_r+0x6a>
 802ce40:	f04f 30ff 	mov.w	r0, #4294967295
 802ce44:	b01d      	add	sp, #116	; 0x74
 802ce46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ce4a:	4b7b      	ldr	r3, [pc, #492]	; (802d038 <_vfiprintf_r+0x244>)
 802ce4c:	429d      	cmp	r5, r3
 802ce4e:	d101      	bne.n	802ce54 <_vfiprintf_r+0x60>
 802ce50:	68b5      	ldr	r5, [r6, #8]
 802ce52:	e7df      	b.n	802ce14 <_vfiprintf_r+0x20>
 802ce54:	4b79      	ldr	r3, [pc, #484]	; (802d03c <_vfiprintf_r+0x248>)
 802ce56:	429d      	cmp	r5, r3
 802ce58:	bf08      	it	eq
 802ce5a:	68f5      	ldreq	r5, [r6, #12]
 802ce5c:	e7da      	b.n	802ce14 <_vfiprintf_r+0x20>
 802ce5e:	89ab      	ldrh	r3, [r5, #12]
 802ce60:	0598      	lsls	r0, r3, #22
 802ce62:	d4ed      	bmi.n	802ce40 <_vfiprintf_r+0x4c>
 802ce64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ce66:	f000 fb86 	bl	802d576 <__retarget_lock_release_recursive>
 802ce6a:	e7e9      	b.n	802ce40 <_vfiprintf_r+0x4c>
 802ce6c:	2300      	movs	r3, #0
 802ce6e:	9309      	str	r3, [sp, #36]	; 0x24
 802ce70:	2320      	movs	r3, #32
 802ce72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ce76:	f8cd 800c 	str.w	r8, [sp, #12]
 802ce7a:	2330      	movs	r3, #48	; 0x30
 802ce7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802d040 <_vfiprintf_r+0x24c>
 802ce80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ce84:	f04f 0901 	mov.w	r9, #1
 802ce88:	4623      	mov	r3, r4
 802ce8a:	469a      	mov	sl, r3
 802ce8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ce90:	b10a      	cbz	r2, 802ce96 <_vfiprintf_r+0xa2>
 802ce92:	2a25      	cmp	r2, #37	; 0x25
 802ce94:	d1f9      	bne.n	802ce8a <_vfiprintf_r+0x96>
 802ce96:	ebba 0b04 	subs.w	fp, sl, r4
 802ce9a:	d00b      	beq.n	802ceb4 <_vfiprintf_r+0xc0>
 802ce9c:	465b      	mov	r3, fp
 802ce9e:	4622      	mov	r2, r4
 802cea0:	4629      	mov	r1, r5
 802cea2:	4630      	mov	r0, r6
 802cea4:	f7ff ff93 	bl	802cdce <__sfputs_r>
 802cea8:	3001      	adds	r0, #1
 802ceaa:	f000 80aa 	beq.w	802d002 <_vfiprintf_r+0x20e>
 802ceae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ceb0:	445a      	add	r2, fp
 802ceb2:	9209      	str	r2, [sp, #36]	; 0x24
 802ceb4:	f89a 3000 	ldrb.w	r3, [sl]
 802ceb8:	2b00      	cmp	r3, #0
 802ceba:	f000 80a2 	beq.w	802d002 <_vfiprintf_r+0x20e>
 802cebe:	2300      	movs	r3, #0
 802cec0:	f04f 32ff 	mov.w	r2, #4294967295
 802cec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cec8:	f10a 0a01 	add.w	sl, sl, #1
 802cecc:	9304      	str	r3, [sp, #16]
 802cece:	9307      	str	r3, [sp, #28]
 802ced0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ced4:	931a      	str	r3, [sp, #104]	; 0x68
 802ced6:	4654      	mov	r4, sl
 802ced8:	2205      	movs	r2, #5
 802ceda:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cede:	4858      	ldr	r0, [pc, #352]	; (802d040 <_vfiprintf_r+0x24c>)
 802cee0:	f7f3 f8de 	bl	80200a0 <memchr>
 802cee4:	9a04      	ldr	r2, [sp, #16]
 802cee6:	b9d8      	cbnz	r0, 802cf20 <_vfiprintf_r+0x12c>
 802cee8:	06d1      	lsls	r1, r2, #27
 802ceea:	bf44      	itt	mi
 802ceec:	2320      	movmi	r3, #32
 802ceee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cef2:	0713      	lsls	r3, r2, #28
 802cef4:	bf44      	itt	mi
 802cef6:	232b      	movmi	r3, #43	; 0x2b
 802cef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cefc:	f89a 3000 	ldrb.w	r3, [sl]
 802cf00:	2b2a      	cmp	r3, #42	; 0x2a
 802cf02:	d015      	beq.n	802cf30 <_vfiprintf_r+0x13c>
 802cf04:	9a07      	ldr	r2, [sp, #28]
 802cf06:	4654      	mov	r4, sl
 802cf08:	2000      	movs	r0, #0
 802cf0a:	f04f 0c0a 	mov.w	ip, #10
 802cf0e:	4621      	mov	r1, r4
 802cf10:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cf14:	3b30      	subs	r3, #48	; 0x30
 802cf16:	2b09      	cmp	r3, #9
 802cf18:	d94e      	bls.n	802cfb8 <_vfiprintf_r+0x1c4>
 802cf1a:	b1b0      	cbz	r0, 802cf4a <_vfiprintf_r+0x156>
 802cf1c:	9207      	str	r2, [sp, #28]
 802cf1e:	e014      	b.n	802cf4a <_vfiprintf_r+0x156>
 802cf20:	eba0 0308 	sub.w	r3, r0, r8
 802cf24:	fa09 f303 	lsl.w	r3, r9, r3
 802cf28:	4313      	orrs	r3, r2
 802cf2a:	9304      	str	r3, [sp, #16]
 802cf2c:	46a2      	mov	sl, r4
 802cf2e:	e7d2      	b.n	802ced6 <_vfiprintf_r+0xe2>
 802cf30:	9b03      	ldr	r3, [sp, #12]
 802cf32:	1d19      	adds	r1, r3, #4
 802cf34:	681b      	ldr	r3, [r3, #0]
 802cf36:	9103      	str	r1, [sp, #12]
 802cf38:	2b00      	cmp	r3, #0
 802cf3a:	bfbb      	ittet	lt
 802cf3c:	425b      	neglt	r3, r3
 802cf3e:	f042 0202 	orrlt.w	r2, r2, #2
 802cf42:	9307      	strge	r3, [sp, #28]
 802cf44:	9307      	strlt	r3, [sp, #28]
 802cf46:	bfb8      	it	lt
 802cf48:	9204      	strlt	r2, [sp, #16]
 802cf4a:	7823      	ldrb	r3, [r4, #0]
 802cf4c:	2b2e      	cmp	r3, #46	; 0x2e
 802cf4e:	d10c      	bne.n	802cf6a <_vfiprintf_r+0x176>
 802cf50:	7863      	ldrb	r3, [r4, #1]
 802cf52:	2b2a      	cmp	r3, #42	; 0x2a
 802cf54:	d135      	bne.n	802cfc2 <_vfiprintf_r+0x1ce>
 802cf56:	9b03      	ldr	r3, [sp, #12]
 802cf58:	1d1a      	adds	r2, r3, #4
 802cf5a:	681b      	ldr	r3, [r3, #0]
 802cf5c:	9203      	str	r2, [sp, #12]
 802cf5e:	2b00      	cmp	r3, #0
 802cf60:	bfb8      	it	lt
 802cf62:	f04f 33ff 	movlt.w	r3, #4294967295
 802cf66:	3402      	adds	r4, #2
 802cf68:	9305      	str	r3, [sp, #20]
 802cf6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802d050 <_vfiprintf_r+0x25c>
 802cf6e:	7821      	ldrb	r1, [r4, #0]
 802cf70:	2203      	movs	r2, #3
 802cf72:	4650      	mov	r0, sl
 802cf74:	f7f3 f894 	bl	80200a0 <memchr>
 802cf78:	b140      	cbz	r0, 802cf8c <_vfiprintf_r+0x198>
 802cf7a:	2340      	movs	r3, #64	; 0x40
 802cf7c:	eba0 000a 	sub.w	r0, r0, sl
 802cf80:	fa03 f000 	lsl.w	r0, r3, r0
 802cf84:	9b04      	ldr	r3, [sp, #16]
 802cf86:	4303      	orrs	r3, r0
 802cf88:	3401      	adds	r4, #1
 802cf8a:	9304      	str	r3, [sp, #16]
 802cf8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cf90:	482c      	ldr	r0, [pc, #176]	; (802d044 <_vfiprintf_r+0x250>)
 802cf92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802cf96:	2206      	movs	r2, #6
 802cf98:	f7f3 f882 	bl	80200a0 <memchr>
 802cf9c:	2800      	cmp	r0, #0
 802cf9e:	d03f      	beq.n	802d020 <_vfiprintf_r+0x22c>
 802cfa0:	4b29      	ldr	r3, [pc, #164]	; (802d048 <_vfiprintf_r+0x254>)
 802cfa2:	bb1b      	cbnz	r3, 802cfec <_vfiprintf_r+0x1f8>
 802cfa4:	9b03      	ldr	r3, [sp, #12]
 802cfa6:	3307      	adds	r3, #7
 802cfa8:	f023 0307 	bic.w	r3, r3, #7
 802cfac:	3308      	adds	r3, #8
 802cfae:	9303      	str	r3, [sp, #12]
 802cfb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cfb2:	443b      	add	r3, r7
 802cfb4:	9309      	str	r3, [sp, #36]	; 0x24
 802cfb6:	e767      	b.n	802ce88 <_vfiprintf_r+0x94>
 802cfb8:	fb0c 3202 	mla	r2, ip, r2, r3
 802cfbc:	460c      	mov	r4, r1
 802cfbe:	2001      	movs	r0, #1
 802cfc0:	e7a5      	b.n	802cf0e <_vfiprintf_r+0x11a>
 802cfc2:	2300      	movs	r3, #0
 802cfc4:	3401      	adds	r4, #1
 802cfc6:	9305      	str	r3, [sp, #20]
 802cfc8:	4619      	mov	r1, r3
 802cfca:	f04f 0c0a 	mov.w	ip, #10
 802cfce:	4620      	mov	r0, r4
 802cfd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cfd4:	3a30      	subs	r2, #48	; 0x30
 802cfd6:	2a09      	cmp	r2, #9
 802cfd8:	d903      	bls.n	802cfe2 <_vfiprintf_r+0x1ee>
 802cfda:	2b00      	cmp	r3, #0
 802cfdc:	d0c5      	beq.n	802cf6a <_vfiprintf_r+0x176>
 802cfde:	9105      	str	r1, [sp, #20]
 802cfe0:	e7c3      	b.n	802cf6a <_vfiprintf_r+0x176>
 802cfe2:	fb0c 2101 	mla	r1, ip, r1, r2
 802cfe6:	4604      	mov	r4, r0
 802cfe8:	2301      	movs	r3, #1
 802cfea:	e7f0      	b.n	802cfce <_vfiprintf_r+0x1da>
 802cfec:	ab03      	add	r3, sp, #12
 802cfee:	9300      	str	r3, [sp, #0]
 802cff0:	462a      	mov	r2, r5
 802cff2:	4b16      	ldr	r3, [pc, #88]	; (802d04c <_vfiprintf_r+0x258>)
 802cff4:	a904      	add	r1, sp, #16
 802cff6:	4630      	mov	r0, r6
 802cff8:	f7fd fdc4 	bl	802ab84 <_printf_float>
 802cffc:	4607      	mov	r7, r0
 802cffe:	1c78      	adds	r0, r7, #1
 802d000:	d1d6      	bne.n	802cfb0 <_vfiprintf_r+0x1bc>
 802d002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d004:	07d9      	lsls	r1, r3, #31
 802d006:	d405      	bmi.n	802d014 <_vfiprintf_r+0x220>
 802d008:	89ab      	ldrh	r3, [r5, #12]
 802d00a:	059a      	lsls	r2, r3, #22
 802d00c:	d402      	bmi.n	802d014 <_vfiprintf_r+0x220>
 802d00e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d010:	f000 fab1 	bl	802d576 <__retarget_lock_release_recursive>
 802d014:	89ab      	ldrh	r3, [r5, #12]
 802d016:	065b      	lsls	r3, r3, #25
 802d018:	f53f af12 	bmi.w	802ce40 <_vfiprintf_r+0x4c>
 802d01c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d01e:	e711      	b.n	802ce44 <_vfiprintf_r+0x50>
 802d020:	ab03      	add	r3, sp, #12
 802d022:	9300      	str	r3, [sp, #0]
 802d024:	462a      	mov	r2, r5
 802d026:	4b09      	ldr	r3, [pc, #36]	; (802d04c <_vfiprintf_r+0x258>)
 802d028:	a904      	add	r1, sp, #16
 802d02a:	4630      	mov	r0, r6
 802d02c:	f7fe f84e 	bl	802b0cc <_printf_i>
 802d030:	e7e4      	b.n	802cffc <_vfiprintf_r+0x208>
 802d032:	bf00      	nop
 802d034:	08079e90 	.word	0x08079e90
 802d038:	08079eb0 	.word	0x08079eb0
 802d03c:	08079e70 	.word	0x08079e70
 802d040:	08079e5c 	.word	0x08079e5c
 802d044:	08079e66 	.word	0x08079e66
 802d048:	0802ab85 	.word	0x0802ab85
 802d04c:	0802cdcf 	.word	0x0802cdcf
 802d050:	08079e62 	.word	0x08079e62

0802d054 <_sbrk_r>:
 802d054:	b538      	push	{r3, r4, r5, lr}
 802d056:	4d06      	ldr	r5, [pc, #24]	; (802d070 <_sbrk_r+0x1c>)
 802d058:	2300      	movs	r3, #0
 802d05a:	4604      	mov	r4, r0
 802d05c:	4608      	mov	r0, r1
 802d05e:	602b      	str	r3, [r5, #0]
 802d060:	f7f6 fe60 	bl	8023d24 <_sbrk>
 802d064:	1c43      	adds	r3, r0, #1
 802d066:	d102      	bne.n	802d06e <_sbrk_r+0x1a>
 802d068:	682b      	ldr	r3, [r5, #0]
 802d06a:	b103      	cbz	r3, 802d06e <_sbrk_r+0x1a>
 802d06c:	6023      	str	r3, [r4, #0]
 802d06e:	bd38      	pop	{r3, r4, r5, pc}
 802d070:	20002d1c 	.word	0x20002d1c

0802d074 <__swbuf_r>:
 802d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d076:	460e      	mov	r6, r1
 802d078:	4614      	mov	r4, r2
 802d07a:	4605      	mov	r5, r0
 802d07c:	b118      	cbz	r0, 802d086 <__swbuf_r+0x12>
 802d07e:	6983      	ldr	r3, [r0, #24]
 802d080:	b90b      	cbnz	r3, 802d086 <__swbuf_r+0x12>
 802d082:	f000 f9d9 	bl	802d438 <__sinit>
 802d086:	4b21      	ldr	r3, [pc, #132]	; (802d10c <__swbuf_r+0x98>)
 802d088:	429c      	cmp	r4, r3
 802d08a:	d12b      	bne.n	802d0e4 <__swbuf_r+0x70>
 802d08c:	686c      	ldr	r4, [r5, #4]
 802d08e:	69a3      	ldr	r3, [r4, #24]
 802d090:	60a3      	str	r3, [r4, #8]
 802d092:	89a3      	ldrh	r3, [r4, #12]
 802d094:	071a      	lsls	r2, r3, #28
 802d096:	d52f      	bpl.n	802d0f8 <__swbuf_r+0x84>
 802d098:	6923      	ldr	r3, [r4, #16]
 802d09a:	b36b      	cbz	r3, 802d0f8 <__swbuf_r+0x84>
 802d09c:	6923      	ldr	r3, [r4, #16]
 802d09e:	6820      	ldr	r0, [r4, #0]
 802d0a0:	1ac0      	subs	r0, r0, r3
 802d0a2:	6963      	ldr	r3, [r4, #20]
 802d0a4:	b2f6      	uxtb	r6, r6
 802d0a6:	4283      	cmp	r3, r0
 802d0a8:	4637      	mov	r7, r6
 802d0aa:	dc04      	bgt.n	802d0b6 <__swbuf_r+0x42>
 802d0ac:	4621      	mov	r1, r4
 802d0ae:	4628      	mov	r0, r5
 802d0b0:	f000 f92e 	bl	802d310 <_fflush_r>
 802d0b4:	bb30      	cbnz	r0, 802d104 <__swbuf_r+0x90>
 802d0b6:	68a3      	ldr	r3, [r4, #8]
 802d0b8:	3b01      	subs	r3, #1
 802d0ba:	60a3      	str	r3, [r4, #8]
 802d0bc:	6823      	ldr	r3, [r4, #0]
 802d0be:	1c5a      	adds	r2, r3, #1
 802d0c0:	6022      	str	r2, [r4, #0]
 802d0c2:	701e      	strb	r6, [r3, #0]
 802d0c4:	6963      	ldr	r3, [r4, #20]
 802d0c6:	3001      	adds	r0, #1
 802d0c8:	4283      	cmp	r3, r0
 802d0ca:	d004      	beq.n	802d0d6 <__swbuf_r+0x62>
 802d0cc:	89a3      	ldrh	r3, [r4, #12]
 802d0ce:	07db      	lsls	r3, r3, #31
 802d0d0:	d506      	bpl.n	802d0e0 <__swbuf_r+0x6c>
 802d0d2:	2e0a      	cmp	r6, #10
 802d0d4:	d104      	bne.n	802d0e0 <__swbuf_r+0x6c>
 802d0d6:	4621      	mov	r1, r4
 802d0d8:	4628      	mov	r0, r5
 802d0da:	f000 f919 	bl	802d310 <_fflush_r>
 802d0de:	b988      	cbnz	r0, 802d104 <__swbuf_r+0x90>
 802d0e0:	4638      	mov	r0, r7
 802d0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d0e4:	4b0a      	ldr	r3, [pc, #40]	; (802d110 <__swbuf_r+0x9c>)
 802d0e6:	429c      	cmp	r4, r3
 802d0e8:	d101      	bne.n	802d0ee <__swbuf_r+0x7a>
 802d0ea:	68ac      	ldr	r4, [r5, #8]
 802d0ec:	e7cf      	b.n	802d08e <__swbuf_r+0x1a>
 802d0ee:	4b09      	ldr	r3, [pc, #36]	; (802d114 <__swbuf_r+0xa0>)
 802d0f0:	429c      	cmp	r4, r3
 802d0f2:	bf08      	it	eq
 802d0f4:	68ec      	ldreq	r4, [r5, #12]
 802d0f6:	e7ca      	b.n	802d08e <__swbuf_r+0x1a>
 802d0f8:	4621      	mov	r1, r4
 802d0fa:	4628      	mov	r0, r5
 802d0fc:	f000 f80c 	bl	802d118 <__swsetup_r>
 802d100:	2800      	cmp	r0, #0
 802d102:	d0cb      	beq.n	802d09c <__swbuf_r+0x28>
 802d104:	f04f 37ff 	mov.w	r7, #4294967295
 802d108:	e7ea      	b.n	802d0e0 <__swbuf_r+0x6c>
 802d10a:	bf00      	nop
 802d10c:	08079e90 	.word	0x08079e90
 802d110:	08079eb0 	.word	0x08079eb0
 802d114:	08079e70 	.word	0x08079e70

0802d118 <__swsetup_r>:
 802d118:	4b32      	ldr	r3, [pc, #200]	; (802d1e4 <__swsetup_r+0xcc>)
 802d11a:	b570      	push	{r4, r5, r6, lr}
 802d11c:	681d      	ldr	r5, [r3, #0]
 802d11e:	4606      	mov	r6, r0
 802d120:	460c      	mov	r4, r1
 802d122:	b125      	cbz	r5, 802d12e <__swsetup_r+0x16>
 802d124:	69ab      	ldr	r3, [r5, #24]
 802d126:	b913      	cbnz	r3, 802d12e <__swsetup_r+0x16>
 802d128:	4628      	mov	r0, r5
 802d12a:	f000 f985 	bl	802d438 <__sinit>
 802d12e:	4b2e      	ldr	r3, [pc, #184]	; (802d1e8 <__swsetup_r+0xd0>)
 802d130:	429c      	cmp	r4, r3
 802d132:	d10f      	bne.n	802d154 <__swsetup_r+0x3c>
 802d134:	686c      	ldr	r4, [r5, #4]
 802d136:	89a3      	ldrh	r3, [r4, #12]
 802d138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d13c:	0719      	lsls	r1, r3, #28
 802d13e:	d42c      	bmi.n	802d19a <__swsetup_r+0x82>
 802d140:	06dd      	lsls	r5, r3, #27
 802d142:	d411      	bmi.n	802d168 <__swsetup_r+0x50>
 802d144:	2309      	movs	r3, #9
 802d146:	6033      	str	r3, [r6, #0]
 802d148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d14c:	81a3      	strh	r3, [r4, #12]
 802d14e:	f04f 30ff 	mov.w	r0, #4294967295
 802d152:	e03e      	b.n	802d1d2 <__swsetup_r+0xba>
 802d154:	4b25      	ldr	r3, [pc, #148]	; (802d1ec <__swsetup_r+0xd4>)
 802d156:	429c      	cmp	r4, r3
 802d158:	d101      	bne.n	802d15e <__swsetup_r+0x46>
 802d15a:	68ac      	ldr	r4, [r5, #8]
 802d15c:	e7eb      	b.n	802d136 <__swsetup_r+0x1e>
 802d15e:	4b24      	ldr	r3, [pc, #144]	; (802d1f0 <__swsetup_r+0xd8>)
 802d160:	429c      	cmp	r4, r3
 802d162:	bf08      	it	eq
 802d164:	68ec      	ldreq	r4, [r5, #12]
 802d166:	e7e6      	b.n	802d136 <__swsetup_r+0x1e>
 802d168:	0758      	lsls	r0, r3, #29
 802d16a:	d512      	bpl.n	802d192 <__swsetup_r+0x7a>
 802d16c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d16e:	b141      	cbz	r1, 802d182 <__swsetup_r+0x6a>
 802d170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d174:	4299      	cmp	r1, r3
 802d176:	d002      	beq.n	802d17e <__swsetup_r+0x66>
 802d178:	4630      	mov	r0, r6
 802d17a:	f7ff fbd5 	bl	802c928 <_free_r>
 802d17e:	2300      	movs	r3, #0
 802d180:	6363      	str	r3, [r4, #52]	; 0x34
 802d182:	89a3      	ldrh	r3, [r4, #12]
 802d184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d188:	81a3      	strh	r3, [r4, #12]
 802d18a:	2300      	movs	r3, #0
 802d18c:	6063      	str	r3, [r4, #4]
 802d18e:	6923      	ldr	r3, [r4, #16]
 802d190:	6023      	str	r3, [r4, #0]
 802d192:	89a3      	ldrh	r3, [r4, #12]
 802d194:	f043 0308 	orr.w	r3, r3, #8
 802d198:	81a3      	strh	r3, [r4, #12]
 802d19a:	6923      	ldr	r3, [r4, #16]
 802d19c:	b94b      	cbnz	r3, 802d1b2 <__swsetup_r+0x9a>
 802d19e:	89a3      	ldrh	r3, [r4, #12]
 802d1a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d1a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d1a8:	d003      	beq.n	802d1b2 <__swsetup_r+0x9a>
 802d1aa:	4621      	mov	r1, r4
 802d1ac:	4630      	mov	r0, r6
 802d1ae:	f000 fa09 	bl	802d5c4 <__smakebuf_r>
 802d1b2:	89a0      	ldrh	r0, [r4, #12]
 802d1b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d1b8:	f010 0301 	ands.w	r3, r0, #1
 802d1bc:	d00a      	beq.n	802d1d4 <__swsetup_r+0xbc>
 802d1be:	2300      	movs	r3, #0
 802d1c0:	60a3      	str	r3, [r4, #8]
 802d1c2:	6963      	ldr	r3, [r4, #20]
 802d1c4:	425b      	negs	r3, r3
 802d1c6:	61a3      	str	r3, [r4, #24]
 802d1c8:	6923      	ldr	r3, [r4, #16]
 802d1ca:	b943      	cbnz	r3, 802d1de <__swsetup_r+0xc6>
 802d1cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d1d0:	d1ba      	bne.n	802d148 <__swsetup_r+0x30>
 802d1d2:	bd70      	pop	{r4, r5, r6, pc}
 802d1d4:	0781      	lsls	r1, r0, #30
 802d1d6:	bf58      	it	pl
 802d1d8:	6963      	ldrpl	r3, [r4, #20]
 802d1da:	60a3      	str	r3, [r4, #8]
 802d1dc:	e7f4      	b.n	802d1c8 <__swsetup_r+0xb0>
 802d1de:	2000      	movs	r0, #0
 802d1e0:	e7f7      	b.n	802d1d2 <__swsetup_r+0xba>
 802d1e2:	bf00      	nop
 802d1e4:	200002ac 	.word	0x200002ac
 802d1e8:	08079e90 	.word	0x08079e90
 802d1ec:	08079eb0 	.word	0x08079eb0
 802d1f0:	08079e70 	.word	0x08079e70

0802d1f4 <abort>:
 802d1f4:	b508      	push	{r3, lr}
 802d1f6:	2006      	movs	r0, #6
 802d1f8:	f000 fa9a 	bl	802d730 <raise>
 802d1fc:	2001      	movs	r0, #1
 802d1fe:	f7f6 fd35 	bl	8023c6c <_exit>
	...

0802d204 <__sflush_r>:
 802d204:	898a      	ldrh	r2, [r1, #12]
 802d206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d20a:	4605      	mov	r5, r0
 802d20c:	0710      	lsls	r0, r2, #28
 802d20e:	460c      	mov	r4, r1
 802d210:	d458      	bmi.n	802d2c4 <__sflush_r+0xc0>
 802d212:	684b      	ldr	r3, [r1, #4]
 802d214:	2b00      	cmp	r3, #0
 802d216:	dc05      	bgt.n	802d224 <__sflush_r+0x20>
 802d218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802d21a:	2b00      	cmp	r3, #0
 802d21c:	dc02      	bgt.n	802d224 <__sflush_r+0x20>
 802d21e:	2000      	movs	r0, #0
 802d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d226:	2e00      	cmp	r6, #0
 802d228:	d0f9      	beq.n	802d21e <__sflush_r+0x1a>
 802d22a:	2300      	movs	r3, #0
 802d22c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802d230:	682f      	ldr	r7, [r5, #0]
 802d232:	602b      	str	r3, [r5, #0]
 802d234:	d032      	beq.n	802d29c <__sflush_r+0x98>
 802d236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802d238:	89a3      	ldrh	r3, [r4, #12]
 802d23a:	075a      	lsls	r2, r3, #29
 802d23c:	d505      	bpl.n	802d24a <__sflush_r+0x46>
 802d23e:	6863      	ldr	r3, [r4, #4]
 802d240:	1ac0      	subs	r0, r0, r3
 802d242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802d244:	b10b      	cbz	r3, 802d24a <__sflush_r+0x46>
 802d246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d248:	1ac0      	subs	r0, r0, r3
 802d24a:	2300      	movs	r3, #0
 802d24c:	4602      	mov	r2, r0
 802d24e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d250:	6a21      	ldr	r1, [r4, #32]
 802d252:	4628      	mov	r0, r5
 802d254:	47b0      	blx	r6
 802d256:	1c43      	adds	r3, r0, #1
 802d258:	89a3      	ldrh	r3, [r4, #12]
 802d25a:	d106      	bne.n	802d26a <__sflush_r+0x66>
 802d25c:	6829      	ldr	r1, [r5, #0]
 802d25e:	291d      	cmp	r1, #29
 802d260:	d82c      	bhi.n	802d2bc <__sflush_r+0xb8>
 802d262:	4a2a      	ldr	r2, [pc, #168]	; (802d30c <__sflush_r+0x108>)
 802d264:	40ca      	lsrs	r2, r1
 802d266:	07d6      	lsls	r6, r2, #31
 802d268:	d528      	bpl.n	802d2bc <__sflush_r+0xb8>
 802d26a:	2200      	movs	r2, #0
 802d26c:	6062      	str	r2, [r4, #4]
 802d26e:	04d9      	lsls	r1, r3, #19
 802d270:	6922      	ldr	r2, [r4, #16]
 802d272:	6022      	str	r2, [r4, #0]
 802d274:	d504      	bpl.n	802d280 <__sflush_r+0x7c>
 802d276:	1c42      	adds	r2, r0, #1
 802d278:	d101      	bne.n	802d27e <__sflush_r+0x7a>
 802d27a:	682b      	ldr	r3, [r5, #0]
 802d27c:	b903      	cbnz	r3, 802d280 <__sflush_r+0x7c>
 802d27e:	6560      	str	r0, [r4, #84]	; 0x54
 802d280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d282:	602f      	str	r7, [r5, #0]
 802d284:	2900      	cmp	r1, #0
 802d286:	d0ca      	beq.n	802d21e <__sflush_r+0x1a>
 802d288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d28c:	4299      	cmp	r1, r3
 802d28e:	d002      	beq.n	802d296 <__sflush_r+0x92>
 802d290:	4628      	mov	r0, r5
 802d292:	f7ff fb49 	bl	802c928 <_free_r>
 802d296:	2000      	movs	r0, #0
 802d298:	6360      	str	r0, [r4, #52]	; 0x34
 802d29a:	e7c1      	b.n	802d220 <__sflush_r+0x1c>
 802d29c:	6a21      	ldr	r1, [r4, #32]
 802d29e:	2301      	movs	r3, #1
 802d2a0:	4628      	mov	r0, r5
 802d2a2:	47b0      	blx	r6
 802d2a4:	1c41      	adds	r1, r0, #1
 802d2a6:	d1c7      	bne.n	802d238 <__sflush_r+0x34>
 802d2a8:	682b      	ldr	r3, [r5, #0]
 802d2aa:	2b00      	cmp	r3, #0
 802d2ac:	d0c4      	beq.n	802d238 <__sflush_r+0x34>
 802d2ae:	2b1d      	cmp	r3, #29
 802d2b0:	d001      	beq.n	802d2b6 <__sflush_r+0xb2>
 802d2b2:	2b16      	cmp	r3, #22
 802d2b4:	d101      	bne.n	802d2ba <__sflush_r+0xb6>
 802d2b6:	602f      	str	r7, [r5, #0]
 802d2b8:	e7b1      	b.n	802d21e <__sflush_r+0x1a>
 802d2ba:	89a3      	ldrh	r3, [r4, #12]
 802d2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d2c0:	81a3      	strh	r3, [r4, #12]
 802d2c2:	e7ad      	b.n	802d220 <__sflush_r+0x1c>
 802d2c4:	690f      	ldr	r7, [r1, #16]
 802d2c6:	2f00      	cmp	r7, #0
 802d2c8:	d0a9      	beq.n	802d21e <__sflush_r+0x1a>
 802d2ca:	0793      	lsls	r3, r2, #30
 802d2cc:	680e      	ldr	r6, [r1, #0]
 802d2ce:	bf08      	it	eq
 802d2d0:	694b      	ldreq	r3, [r1, #20]
 802d2d2:	600f      	str	r7, [r1, #0]
 802d2d4:	bf18      	it	ne
 802d2d6:	2300      	movne	r3, #0
 802d2d8:	eba6 0807 	sub.w	r8, r6, r7
 802d2dc:	608b      	str	r3, [r1, #8]
 802d2de:	f1b8 0f00 	cmp.w	r8, #0
 802d2e2:	dd9c      	ble.n	802d21e <__sflush_r+0x1a>
 802d2e4:	6a21      	ldr	r1, [r4, #32]
 802d2e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802d2e8:	4643      	mov	r3, r8
 802d2ea:	463a      	mov	r2, r7
 802d2ec:	4628      	mov	r0, r5
 802d2ee:	47b0      	blx	r6
 802d2f0:	2800      	cmp	r0, #0
 802d2f2:	dc06      	bgt.n	802d302 <__sflush_r+0xfe>
 802d2f4:	89a3      	ldrh	r3, [r4, #12]
 802d2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d2fa:	81a3      	strh	r3, [r4, #12]
 802d2fc:	f04f 30ff 	mov.w	r0, #4294967295
 802d300:	e78e      	b.n	802d220 <__sflush_r+0x1c>
 802d302:	4407      	add	r7, r0
 802d304:	eba8 0800 	sub.w	r8, r8, r0
 802d308:	e7e9      	b.n	802d2de <__sflush_r+0xda>
 802d30a:	bf00      	nop
 802d30c:	20400001 	.word	0x20400001

0802d310 <_fflush_r>:
 802d310:	b538      	push	{r3, r4, r5, lr}
 802d312:	690b      	ldr	r3, [r1, #16]
 802d314:	4605      	mov	r5, r0
 802d316:	460c      	mov	r4, r1
 802d318:	b913      	cbnz	r3, 802d320 <_fflush_r+0x10>
 802d31a:	2500      	movs	r5, #0
 802d31c:	4628      	mov	r0, r5
 802d31e:	bd38      	pop	{r3, r4, r5, pc}
 802d320:	b118      	cbz	r0, 802d32a <_fflush_r+0x1a>
 802d322:	6983      	ldr	r3, [r0, #24]
 802d324:	b90b      	cbnz	r3, 802d32a <_fflush_r+0x1a>
 802d326:	f000 f887 	bl	802d438 <__sinit>
 802d32a:	4b14      	ldr	r3, [pc, #80]	; (802d37c <_fflush_r+0x6c>)
 802d32c:	429c      	cmp	r4, r3
 802d32e:	d11b      	bne.n	802d368 <_fflush_r+0x58>
 802d330:	686c      	ldr	r4, [r5, #4]
 802d332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d336:	2b00      	cmp	r3, #0
 802d338:	d0ef      	beq.n	802d31a <_fflush_r+0xa>
 802d33a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802d33c:	07d0      	lsls	r0, r2, #31
 802d33e:	d404      	bmi.n	802d34a <_fflush_r+0x3a>
 802d340:	0599      	lsls	r1, r3, #22
 802d342:	d402      	bmi.n	802d34a <_fflush_r+0x3a>
 802d344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d346:	f000 f915 	bl	802d574 <__retarget_lock_acquire_recursive>
 802d34a:	4628      	mov	r0, r5
 802d34c:	4621      	mov	r1, r4
 802d34e:	f7ff ff59 	bl	802d204 <__sflush_r>
 802d352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d354:	07da      	lsls	r2, r3, #31
 802d356:	4605      	mov	r5, r0
 802d358:	d4e0      	bmi.n	802d31c <_fflush_r+0xc>
 802d35a:	89a3      	ldrh	r3, [r4, #12]
 802d35c:	059b      	lsls	r3, r3, #22
 802d35e:	d4dd      	bmi.n	802d31c <_fflush_r+0xc>
 802d360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d362:	f000 f908 	bl	802d576 <__retarget_lock_release_recursive>
 802d366:	e7d9      	b.n	802d31c <_fflush_r+0xc>
 802d368:	4b05      	ldr	r3, [pc, #20]	; (802d380 <_fflush_r+0x70>)
 802d36a:	429c      	cmp	r4, r3
 802d36c:	d101      	bne.n	802d372 <_fflush_r+0x62>
 802d36e:	68ac      	ldr	r4, [r5, #8]
 802d370:	e7df      	b.n	802d332 <_fflush_r+0x22>
 802d372:	4b04      	ldr	r3, [pc, #16]	; (802d384 <_fflush_r+0x74>)
 802d374:	429c      	cmp	r4, r3
 802d376:	bf08      	it	eq
 802d378:	68ec      	ldreq	r4, [r5, #12]
 802d37a:	e7da      	b.n	802d332 <_fflush_r+0x22>
 802d37c:	08079e90 	.word	0x08079e90
 802d380:	08079eb0 	.word	0x08079eb0
 802d384:	08079e70 	.word	0x08079e70

0802d388 <std>:
 802d388:	2300      	movs	r3, #0
 802d38a:	b510      	push	{r4, lr}
 802d38c:	4604      	mov	r4, r0
 802d38e:	e9c0 3300 	strd	r3, r3, [r0]
 802d392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d396:	6083      	str	r3, [r0, #8]
 802d398:	8181      	strh	r1, [r0, #12]
 802d39a:	6643      	str	r3, [r0, #100]	; 0x64
 802d39c:	81c2      	strh	r2, [r0, #14]
 802d39e:	6183      	str	r3, [r0, #24]
 802d3a0:	4619      	mov	r1, r3
 802d3a2:	2208      	movs	r2, #8
 802d3a4:	305c      	adds	r0, #92	; 0x5c
 802d3a6:	f7fd fb45 	bl	802aa34 <memset>
 802d3aa:	4b05      	ldr	r3, [pc, #20]	; (802d3c0 <std+0x38>)
 802d3ac:	6263      	str	r3, [r4, #36]	; 0x24
 802d3ae:	4b05      	ldr	r3, [pc, #20]	; (802d3c4 <std+0x3c>)
 802d3b0:	62a3      	str	r3, [r4, #40]	; 0x28
 802d3b2:	4b05      	ldr	r3, [pc, #20]	; (802d3c8 <std+0x40>)
 802d3b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d3b6:	4b05      	ldr	r3, [pc, #20]	; (802d3cc <std+0x44>)
 802d3b8:	6224      	str	r4, [r4, #32]
 802d3ba:	6323      	str	r3, [r4, #48]	; 0x30
 802d3bc:	bd10      	pop	{r4, pc}
 802d3be:	bf00      	nop
 802d3c0:	0802d769 	.word	0x0802d769
 802d3c4:	0802d78b 	.word	0x0802d78b
 802d3c8:	0802d7c3 	.word	0x0802d7c3
 802d3cc:	0802d7e7 	.word	0x0802d7e7

0802d3d0 <_cleanup_r>:
 802d3d0:	4901      	ldr	r1, [pc, #4]	; (802d3d8 <_cleanup_r+0x8>)
 802d3d2:	f000 b8af 	b.w	802d534 <_fwalk_reent>
 802d3d6:	bf00      	nop
 802d3d8:	0802d311 	.word	0x0802d311

0802d3dc <__sfmoreglue>:
 802d3dc:	b570      	push	{r4, r5, r6, lr}
 802d3de:	2268      	movs	r2, #104	; 0x68
 802d3e0:	1e4d      	subs	r5, r1, #1
 802d3e2:	4355      	muls	r5, r2
 802d3e4:	460e      	mov	r6, r1
 802d3e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802d3ea:	f7ff fb09 	bl	802ca00 <_malloc_r>
 802d3ee:	4604      	mov	r4, r0
 802d3f0:	b140      	cbz	r0, 802d404 <__sfmoreglue+0x28>
 802d3f2:	2100      	movs	r1, #0
 802d3f4:	e9c0 1600 	strd	r1, r6, [r0]
 802d3f8:	300c      	adds	r0, #12
 802d3fa:	60a0      	str	r0, [r4, #8]
 802d3fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802d400:	f7fd fb18 	bl	802aa34 <memset>
 802d404:	4620      	mov	r0, r4
 802d406:	bd70      	pop	{r4, r5, r6, pc}

0802d408 <__sfp_lock_acquire>:
 802d408:	4801      	ldr	r0, [pc, #4]	; (802d410 <__sfp_lock_acquire+0x8>)
 802d40a:	f000 b8b3 	b.w	802d574 <__retarget_lock_acquire_recursive>
 802d40e:	bf00      	nop
 802d410:	20002d21 	.word	0x20002d21

0802d414 <__sfp_lock_release>:
 802d414:	4801      	ldr	r0, [pc, #4]	; (802d41c <__sfp_lock_release+0x8>)
 802d416:	f000 b8ae 	b.w	802d576 <__retarget_lock_release_recursive>
 802d41a:	bf00      	nop
 802d41c:	20002d21 	.word	0x20002d21

0802d420 <__sinit_lock_acquire>:
 802d420:	4801      	ldr	r0, [pc, #4]	; (802d428 <__sinit_lock_acquire+0x8>)
 802d422:	f000 b8a7 	b.w	802d574 <__retarget_lock_acquire_recursive>
 802d426:	bf00      	nop
 802d428:	20002d22 	.word	0x20002d22

0802d42c <__sinit_lock_release>:
 802d42c:	4801      	ldr	r0, [pc, #4]	; (802d434 <__sinit_lock_release+0x8>)
 802d42e:	f000 b8a2 	b.w	802d576 <__retarget_lock_release_recursive>
 802d432:	bf00      	nop
 802d434:	20002d22 	.word	0x20002d22

0802d438 <__sinit>:
 802d438:	b510      	push	{r4, lr}
 802d43a:	4604      	mov	r4, r0
 802d43c:	f7ff fff0 	bl	802d420 <__sinit_lock_acquire>
 802d440:	69a3      	ldr	r3, [r4, #24]
 802d442:	b11b      	cbz	r3, 802d44c <__sinit+0x14>
 802d444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d448:	f7ff bff0 	b.w	802d42c <__sinit_lock_release>
 802d44c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802d450:	6523      	str	r3, [r4, #80]	; 0x50
 802d452:	4b13      	ldr	r3, [pc, #76]	; (802d4a0 <__sinit+0x68>)
 802d454:	4a13      	ldr	r2, [pc, #76]	; (802d4a4 <__sinit+0x6c>)
 802d456:	681b      	ldr	r3, [r3, #0]
 802d458:	62a2      	str	r2, [r4, #40]	; 0x28
 802d45a:	42a3      	cmp	r3, r4
 802d45c:	bf04      	itt	eq
 802d45e:	2301      	moveq	r3, #1
 802d460:	61a3      	streq	r3, [r4, #24]
 802d462:	4620      	mov	r0, r4
 802d464:	f000 f820 	bl	802d4a8 <__sfp>
 802d468:	6060      	str	r0, [r4, #4]
 802d46a:	4620      	mov	r0, r4
 802d46c:	f000 f81c 	bl	802d4a8 <__sfp>
 802d470:	60a0      	str	r0, [r4, #8]
 802d472:	4620      	mov	r0, r4
 802d474:	f000 f818 	bl	802d4a8 <__sfp>
 802d478:	2200      	movs	r2, #0
 802d47a:	60e0      	str	r0, [r4, #12]
 802d47c:	2104      	movs	r1, #4
 802d47e:	6860      	ldr	r0, [r4, #4]
 802d480:	f7ff ff82 	bl	802d388 <std>
 802d484:	68a0      	ldr	r0, [r4, #8]
 802d486:	2201      	movs	r2, #1
 802d488:	2109      	movs	r1, #9
 802d48a:	f7ff ff7d 	bl	802d388 <std>
 802d48e:	68e0      	ldr	r0, [r4, #12]
 802d490:	2202      	movs	r2, #2
 802d492:	2112      	movs	r1, #18
 802d494:	f7ff ff78 	bl	802d388 <std>
 802d498:	2301      	movs	r3, #1
 802d49a:	61a3      	str	r3, [r4, #24]
 802d49c:	e7d2      	b.n	802d444 <__sinit+0xc>
 802d49e:	bf00      	nop
 802d4a0:	08079ba0 	.word	0x08079ba0
 802d4a4:	0802d3d1 	.word	0x0802d3d1

0802d4a8 <__sfp>:
 802d4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d4aa:	4607      	mov	r7, r0
 802d4ac:	f7ff ffac 	bl	802d408 <__sfp_lock_acquire>
 802d4b0:	4b1e      	ldr	r3, [pc, #120]	; (802d52c <__sfp+0x84>)
 802d4b2:	681e      	ldr	r6, [r3, #0]
 802d4b4:	69b3      	ldr	r3, [r6, #24]
 802d4b6:	b913      	cbnz	r3, 802d4be <__sfp+0x16>
 802d4b8:	4630      	mov	r0, r6
 802d4ba:	f7ff ffbd 	bl	802d438 <__sinit>
 802d4be:	3648      	adds	r6, #72	; 0x48
 802d4c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802d4c4:	3b01      	subs	r3, #1
 802d4c6:	d503      	bpl.n	802d4d0 <__sfp+0x28>
 802d4c8:	6833      	ldr	r3, [r6, #0]
 802d4ca:	b30b      	cbz	r3, 802d510 <__sfp+0x68>
 802d4cc:	6836      	ldr	r6, [r6, #0]
 802d4ce:	e7f7      	b.n	802d4c0 <__sfp+0x18>
 802d4d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802d4d4:	b9d5      	cbnz	r5, 802d50c <__sfp+0x64>
 802d4d6:	4b16      	ldr	r3, [pc, #88]	; (802d530 <__sfp+0x88>)
 802d4d8:	60e3      	str	r3, [r4, #12]
 802d4da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d4de:	6665      	str	r5, [r4, #100]	; 0x64
 802d4e0:	f000 f847 	bl	802d572 <__retarget_lock_init_recursive>
 802d4e4:	f7ff ff96 	bl	802d414 <__sfp_lock_release>
 802d4e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802d4ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802d4f0:	6025      	str	r5, [r4, #0]
 802d4f2:	61a5      	str	r5, [r4, #24]
 802d4f4:	2208      	movs	r2, #8
 802d4f6:	4629      	mov	r1, r5
 802d4f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802d4fc:	f7fd fa9a 	bl	802aa34 <memset>
 802d500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802d504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802d508:	4620      	mov	r0, r4
 802d50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d50c:	3468      	adds	r4, #104	; 0x68
 802d50e:	e7d9      	b.n	802d4c4 <__sfp+0x1c>
 802d510:	2104      	movs	r1, #4
 802d512:	4638      	mov	r0, r7
 802d514:	f7ff ff62 	bl	802d3dc <__sfmoreglue>
 802d518:	4604      	mov	r4, r0
 802d51a:	6030      	str	r0, [r6, #0]
 802d51c:	2800      	cmp	r0, #0
 802d51e:	d1d5      	bne.n	802d4cc <__sfp+0x24>
 802d520:	f7ff ff78 	bl	802d414 <__sfp_lock_release>
 802d524:	230c      	movs	r3, #12
 802d526:	603b      	str	r3, [r7, #0]
 802d528:	e7ee      	b.n	802d508 <__sfp+0x60>
 802d52a:	bf00      	nop
 802d52c:	08079ba0 	.word	0x08079ba0
 802d530:	ffff0001 	.word	0xffff0001

0802d534 <_fwalk_reent>:
 802d534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d538:	4606      	mov	r6, r0
 802d53a:	4688      	mov	r8, r1
 802d53c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802d540:	2700      	movs	r7, #0
 802d542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d546:	f1b9 0901 	subs.w	r9, r9, #1
 802d54a:	d505      	bpl.n	802d558 <_fwalk_reent+0x24>
 802d54c:	6824      	ldr	r4, [r4, #0]
 802d54e:	2c00      	cmp	r4, #0
 802d550:	d1f7      	bne.n	802d542 <_fwalk_reent+0xe>
 802d552:	4638      	mov	r0, r7
 802d554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d558:	89ab      	ldrh	r3, [r5, #12]
 802d55a:	2b01      	cmp	r3, #1
 802d55c:	d907      	bls.n	802d56e <_fwalk_reent+0x3a>
 802d55e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d562:	3301      	adds	r3, #1
 802d564:	d003      	beq.n	802d56e <_fwalk_reent+0x3a>
 802d566:	4629      	mov	r1, r5
 802d568:	4630      	mov	r0, r6
 802d56a:	47c0      	blx	r8
 802d56c:	4307      	orrs	r7, r0
 802d56e:	3568      	adds	r5, #104	; 0x68
 802d570:	e7e9      	b.n	802d546 <_fwalk_reent+0x12>

0802d572 <__retarget_lock_init_recursive>:
 802d572:	4770      	bx	lr

0802d574 <__retarget_lock_acquire_recursive>:
 802d574:	4770      	bx	lr

0802d576 <__retarget_lock_release_recursive>:
 802d576:	4770      	bx	lr

0802d578 <__swhatbuf_r>:
 802d578:	b570      	push	{r4, r5, r6, lr}
 802d57a:	460e      	mov	r6, r1
 802d57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d580:	2900      	cmp	r1, #0
 802d582:	b096      	sub	sp, #88	; 0x58
 802d584:	4614      	mov	r4, r2
 802d586:	461d      	mov	r5, r3
 802d588:	da08      	bge.n	802d59c <__swhatbuf_r+0x24>
 802d58a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802d58e:	2200      	movs	r2, #0
 802d590:	602a      	str	r2, [r5, #0]
 802d592:	061a      	lsls	r2, r3, #24
 802d594:	d410      	bmi.n	802d5b8 <__swhatbuf_r+0x40>
 802d596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d59a:	e00e      	b.n	802d5ba <__swhatbuf_r+0x42>
 802d59c:	466a      	mov	r2, sp
 802d59e:	f000 f955 	bl	802d84c <_fstat_r>
 802d5a2:	2800      	cmp	r0, #0
 802d5a4:	dbf1      	blt.n	802d58a <__swhatbuf_r+0x12>
 802d5a6:	9a01      	ldr	r2, [sp, #4]
 802d5a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802d5ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802d5b0:	425a      	negs	r2, r3
 802d5b2:	415a      	adcs	r2, r3
 802d5b4:	602a      	str	r2, [r5, #0]
 802d5b6:	e7ee      	b.n	802d596 <__swhatbuf_r+0x1e>
 802d5b8:	2340      	movs	r3, #64	; 0x40
 802d5ba:	2000      	movs	r0, #0
 802d5bc:	6023      	str	r3, [r4, #0]
 802d5be:	b016      	add	sp, #88	; 0x58
 802d5c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0802d5c4 <__smakebuf_r>:
 802d5c4:	898b      	ldrh	r3, [r1, #12]
 802d5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d5c8:	079d      	lsls	r5, r3, #30
 802d5ca:	4606      	mov	r6, r0
 802d5cc:	460c      	mov	r4, r1
 802d5ce:	d507      	bpl.n	802d5e0 <__smakebuf_r+0x1c>
 802d5d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802d5d4:	6023      	str	r3, [r4, #0]
 802d5d6:	6123      	str	r3, [r4, #16]
 802d5d8:	2301      	movs	r3, #1
 802d5da:	6163      	str	r3, [r4, #20]
 802d5dc:	b002      	add	sp, #8
 802d5de:	bd70      	pop	{r4, r5, r6, pc}
 802d5e0:	ab01      	add	r3, sp, #4
 802d5e2:	466a      	mov	r2, sp
 802d5e4:	f7ff ffc8 	bl	802d578 <__swhatbuf_r>
 802d5e8:	9900      	ldr	r1, [sp, #0]
 802d5ea:	4605      	mov	r5, r0
 802d5ec:	4630      	mov	r0, r6
 802d5ee:	f7ff fa07 	bl	802ca00 <_malloc_r>
 802d5f2:	b948      	cbnz	r0, 802d608 <__smakebuf_r+0x44>
 802d5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d5f8:	059a      	lsls	r2, r3, #22
 802d5fa:	d4ef      	bmi.n	802d5dc <__smakebuf_r+0x18>
 802d5fc:	f023 0303 	bic.w	r3, r3, #3
 802d600:	f043 0302 	orr.w	r3, r3, #2
 802d604:	81a3      	strh	r3, [r4, #12]
 802d606:	e7e3      	b.n	802d5d0 <__smakebuf_r+0xc>
 802d608:	4b0d      	ldr	r3, [pc, #52]	; (802d640 <__smakebuf_r+0x7c>)
 802d60a:	62b3      	str	r3, [r6, #40]	; 0x28
 802d60c:	89a3      	ldrh	r3, [r4, #12]
 802d60e:	6020      	str	r0, [r4, #0]
 802d610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d614:	81a3      	strh	r3, [r4, #12]
 802d616:	9b00      	ldr	r3, [sp, #0]
 802d618:	6163      	str	r3, [r4, #20]
 802d61a:	9b01      	ldr	r3, [sp, #4]
 802d61c:	6120      	str	r0, [r4, #16]
 802d61e:	b15b      	cbz	r3, 802d638 <__smakebuf_r+0x74>
 802d620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d624:	4630      	mov	r0, r6
 802d626:	f000 f923 	bl	802d870 <_isatty_r>
 802d62a:	b128      	cbz	r0, 802d638 <__smakebuf_r+0x74>
 802d62c:	89a3      	ldrh	r3, [r4, #12]
 802d62e:	f023 0303 	bic.w	r3, r3, #3
 802d632:	f043 0301 	orr.w	r3, r3, #1
 802d636:	81a3      	strh	r3, [r4, #12]
 802d638:	89a0      	ldrh	r0, [r4, #12]
 802d63a:	4305      	orrs	r5, r0
 802d63c:	81a5      	strh	r5, [r4, #12]
 802d63e:	e7cd      	b.n	802d5dc <__smakebuf_r+0x18>
 802d640:	0802d3d1 	.word	0x0802d3d1

0802d644 <__ascii_mbtowc>:
 802d644:	b082      	sub	sp, #8
 802d646:	b901      	cbnz	r1, 802d64a <__ascii_mbtowc+0x6>
 802d648:	a901      	add	r1, sp, #4
 802d64a:	b142      	cbz	r2, 802d65e <__ascii_mbtowc+0x1a>
 802d64c:	b14b      	cbz	r3, 802d662 <__ascii_mbtowc+0x1e>
 802d64e:	7813      	ldrb	r3, [r2, #0]
 802d650:	600b      	str	r3, [r1, #0]
 802d652:	7812      	ldrb	r2, [r2, #0]
 802d654:	1e10      	subs	r0, r2, #0
 802d656:	bf18      	it	ne
 802d658:	2001      	movne	r0, #1
 802d65a:	b002      	add	sp, #8
 802d65c:	4770      	bx	lr
 802d65e:	4610      	mov	r0, r2
 802d660:	e7fb      	b.n	802d65a <__ascii_mbtowc+0x16>
 802d662:	f06f 0001 	mvn.w	r0, #1
 802d666:	e7f8      	b.n	802d65a <__ascii_mbtowc+0x16>

0802d668 <__malloc_lock>:
 802d668:	4801      	ldr	r0, [pc, #4]	; (802d670 <__malloc_lock+0x8>)
 802d66a:	f7ff bf83 	b.w	802d574 <__retarget_lock_acquire_recursive>
 802d66e:	bf00      	nop
 802d670:	20002d20 	.word	0x20002d20

0802d674 <__malloc_unlock>:
 802d674:	4801      	ldr	r0, [pc, #4]	; (802d67c <__malloc_unlock+0x8>)
 802d676:	f7ff bf7e 	b.w	802d576 <__retarget_lock_release_recursive>
 802d67a:	bf00      	nop
 802d67c:	20002d20 	.word	0x20002d20

0802d680 <_realloc_r>:
 802d680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d684:	4680      	mov	r8, r0
 802d686:	4614      	mov	r4, r2
 802d688:	460e      	mov	r6, r1
 802d68a:	b921      	cbnz	r1, 802d696 <_realloc_r+0x16>
 802d68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d690:	4611      	mov	r1, r2
 802d692:	f7ff b9b5 	b.w	802ca00 <_malloc_r>
 802d696:	b92a      	cbnz	r2, 802d6a4 <_realloc_r+0x24>
 802d698:	f7ff f946 	bl	802c928 <_free_r>
 802d69c:	4625      	mov	r5, r4
 802d69e:	4628      	mov	r0, r5
 802d6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d6a4:	f000 f906 	bl	802d8b4 <_malloc_usable_size_r>
 802d6a8:	4284      	cmp	r4, r0
 802d6aa:	4607      	mov	r7, r0
 802d6ac:	d802      	bhi.n	802d6b4 <_realloc_r+0x34>
 802d6ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802d6b2:	d812      	bhi.n	802d6da <_realloc_r+0x5a>
 802d6b4:	4621      	mov	r1, r4
 802d6b6:	4640      	mov	r0, r8
 802d6b8:	f7ff f9a2 	bl	802ca00 <_malloc_r>
 802d6bc:	4605      	mov	r5, r0
 802d6be:	2800      	cmp	r0, #0
 802d6c0:	d0ed      	beq.n	802d69e <_realloc_r+0x1e>
 802d6c2:	42bc      	cmp	r4, r7
 802d6c4:	4622      	mov	r2, r4
 802d6c6:	4631      	mov	r1, r6
 802d6c8:	bf28      	it	cs
 802d6ca:	463a      	movcs	r2, r7
 802d6cc:	f7fd f98a 	bl	802a9e4 <memcpy>
 802d6d0:	4631      	mov	r1, r6
 802d6d2:	4640      	mov	r0, r8
 802d6d4:	f7ff f928 	bl	802c928 <_free_r>
 802d6d8:	e7e1      	b.n	802d69e <_realloc_r+0x1e>
 802d6da:	4635      	mov	r5, r6
 802d6dc:	e7df      	b.n	802d69e <_realloc_r+0x1e>

0802d6de <_raise_r>:
 802d6de:	291f      	cmp	r1, #31
 802d6e0:	b538      	push	{r3, r4, r5, lr}
 802d6e2:	4604      	mov	r4, r0
 802d6e4:	460d      	mov	r5, r1
 802d6e6:	d904      	bls.n	802d6f2 <_raise_r+0x14>
 802d6e8:	2316      	movs	r3, #22
 802d6ea:	6003      	str	r3, [r0, #0]
 802d6ec:	f04f 30ff 	mov.w	r0, #4294967295
 802d6f0:	bd38      	pop	{r3, r4, r5, pc}
 802d6f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802d6f4:	b112      	cbz	r2, 802d6fc <_raise_r+0x1e>
 802d6f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802d6fa:	b94b      	cbnz	r3, 802d710 <_raise_r+0x32>
 802d6fc:	4620      	mov	r0, r4
 802d6fe:	f000 f831 	bl	802d764 <_getpid_r>
 802d702:	462a      	mov	r2, r5
 802d704:	4601      	mov	r1, r0
 802d706:	4620      	mov	r0, r4
 802d708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d70c:	f000 b818 	b.w	802d740 <_kill_r>
 802d710:	2b01      	cmp	r3, #1
 802d712:	d00a      	beq.n	802d72a <_raise_r+0x4c>
 802d714:	1c59      	adds	r1, r3, #1
 802d716:	d103      	bne.n	802d720 <_raise_r+0x42>
 802d718:	2316      	movs	r3, #22
 802d71a:	6003      	str	r3, [r0, #0]
 802d71c:	2001      	movs	r0, #1
 802d71e:	e7e7      	b.n	802d6f0 <_raise_r+0x12>
 802d720:	2400      	movs	r4, #0
 802d722:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802d726:	4628      	mov	r0, r5
 802d728:	4798      	blx	r3
 802d72a:	2000      	movs	r0, #0
 802d72c:	e7e0      	b.n	802d6f0 <_raise_r+0x12>
	...

0802d730 <raise>:
 802d730:	4b02      	ldr	r3, [pc, #8]	; (802d73c <raise+0xc>)
 802d732:	4601      	mov	r1, r0
 802d734:	6818      	ldr	r0, [r3, #0]
 802d736:	f7ff bfd2 	b.w	802d6de <_raise_r>
 802d73a:	bf00      	nop
 802d73c:	200002ac 	.word	0x200002ac

0802d740 <_kill_r>:
 802d740:	b538      	push	{r3, r4, r5, lr}
 802d742:	4d07      	ldr	r5, [pc, #28]	; (802d760 <_kill_r+0x20>)
 802d744:	2300      	movs	r3, #0
 802d746:	4604      	mov	r4, r0
 802d748:	4608      	mov	r0, r1
 802d74a:	4611      	mov	r1, r2
 802d74c:	602b      	str	r3, [r5, #0]
 802d74e:	f7f6 fa7d 	bl	8023c4c <_kill>
 802d752:	1c43      	adds	r3, r0, #1
 802d754:	d102      	bne.n	802d75c <_kill_r+0x1c>
 802d756:	682b      	ldr	r3, [r5, #0]
 802d758:	b103      	cbz	r3, 802d75c <_kill_r+0x1c>
 802d75a:	6023      	str	r3, [r4, #0]
 802d75c:	bd38      	pop	{r3, r4, r5, pc}
 802d75e:	bf00      	nop
 802d760:	20002d1c 	.word	0x20002d1c

0802d764 <_getpid_r>:
 802d764:	f7f6 ba6a 	b.w	8023c3c <_getpid>

0802d768 <__sread>:
 802d768:	b510      	push	{r4, lr}
 802d76a:	460c      	mov	r4, r1
 802d76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d770:	f000 f8a8 	bl	802d8c4 <_read_r>
 802d774:	2800      	cmp	r0, #0
 802d776:	bfab      	itete	ge
 802d778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d77a:	89a3      	ldrhlt	r3, [r4, #12]
 802d77c:	181b      	addge	r3, r3, r0
 802d77e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d782:	bfac      	ite	ge
 802d784:	6563      	strge	r3, [r4, #84]	; 0x54
 802d786:	81a3      	strhlt	r3, [r4, #12]
 802d788:	bd10      	pop	{r4, pc}

0802d78a <__swrite>:
 802d78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d78e:	461f      	mov	r7, r3
 802d790:	898b      	ldrh	r3, [r1, #12]
 802d792:	05db      	lsls	r3, r3, #23
 802d794:	4605      	mov	r5, r0
 802d796:	460c      	mov	r4, r1
 802d798:	4616      	mov	r6, r2
 802d79a:	d505      	bpl.n	802d7a8 <__swrite+0x1e>
 802d79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d7a0:	2302      	movs	r3, #2
 802d7a2:	2200      	movs	r2, #0
 802d7a4:	f000 f874 	bl	802d890 <_lseek_r>
 802d7a8:	89a3      	ldrh	r3, [r4, #12]
 802d7aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d7ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d7b2:	81a3      	strh	r3, [r4, #12]
 802d7b4:	4632      	mov	r2, r6
 802d7b6:	463b      	mov	r3, r7
 802d7b8:	4628      	mov	r0, r5
 802d7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d7be:	f000 b823 	b.w	802d808 <_write_r>

0802d7c2 <__sseek>:
 802d7c2:	b510      	push	{r4, lr}
 802d7c4:	460c      	mov	r4, r1
 802d7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d7ca:	f000 f861 	bl	802d890 <_lseek_r>
 802d7ce:	1c43      	adds	r3, r0, #1
 802d7d0:	89a3      	ldrh	r3, [r4, #12]
 802d7d2:	bf15      	itete	ne
 802d7d4:	6560      	strne	r0, [r4, #84]	; 0x54
 802d7d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d7da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d7de:	81a3      	strheq	r3, [r4, #12]
 802d7e0:	bf18      	it	ne
 802d7e2:	81a3      	strhne	r3, [r4, #12]
 802d7e4:	bd10      	pop	{r4, pc}

0802d7e6 <__sclose>:
 802d7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d7ea:	f000 b81f 	b.w	802d82c <_close_r>

0802d7ee <__ascii_wctomb>:
 802d7ee:	b149      	cbz	r1, 802d804 <__ascii_wctomb+0x16>
 802d7f0:	2aff      	cmp	r2, #255	; 0xff
 802d7f2:	bf85      	ittet	hi
 802d7f4:	238a      	movhi	r3, #138	; 0x8a
 802d7f6:	6003      	strhi	r3, [r0, #0]
 802d7f8:	700a      	strbls	r2, [r1, #0]
 802d7fa:	f04f 30ff 	movhi.w	r0, #4294967295
 802d7fe:	bf98      	it	ls
 802d800:	2001      	movls	r0, #1
 802d802:	4770      	bx	lr
 802d804:	4608      	mov	r0, r1
 802d806:	4770      	bx	lr

0802d808 <_write_r>:
 802d808:	b538      	push	{r3, r4, r5, lr}
 802d80a:	4d07      	ldr	r5, [pc, #28]	; (802d828 <_write_r+0x20>)
 802d80c:	4604      	mov	r4, r0
 802d80e:	4608      	mov	r0, r1
 802d810:	4611      	mov	r1, r2
 802d812:	2200      	movs	r2, #0
 802d814:	602a      	str	r2, [r5, #0]
 802d816:	461a      	mov	r2, r3
 802d818:	f7f4 fb92 	bl	8021f40 <_write>
 802d81c:	1c43      	adds	r3, r0, #1
 802d81e:	d102      	bne.n	802d826 <_write_r+0x1e>
 802d820:	682b      	ldr	r3, [r5, #0]
 802d822:	b103      	cbz	r3, 802d826 <_write_r+0x1e>
 802d824:	6023      	str	r3, [r4, #0]
 802d826:	bd38      	pop	{r3, r4, r5, pc}
 802d828:	20002d1c 	.word	0x20002d1c

0802d82c <_close_r>:
 802d82c:	b538      	push	{r3, r4, r5, lr}
 802d82e:	4d06      	ldr	r5, [pc, #24]	; (802d848 <_close_r+0x1c>)
 802d830:	2300      	movs	r3, #0
 802d832:	4604      	mov	r4, r0
 802d834:	4608      	mov	r0, r1
 802d836:	602b      	str	r3, [r5, #0]
 802d838:	f7f6 fa3f 	bl	8023cba <_close>
 802d83c:	1c43      	adds	r3, r0, #1
 802d83e:	d102      	bne.n	802d846 <_close_r+0x1a>
 802d840:	682b      	ldr	r3, [r5, #0]
 802d842:	b103      	cbz	r3, 802d846 <_close_r+0x1a>
 802d844:	6023      	str	r3, [r4, #0]
 802d846:	bd38      	pop	{r3, r4, r5, pc}
 802d848:	20002d1c 	.word	0x20002d1c

0802d84c <_fstat_r>:
 802d84c:	b538      	push	{r3, r4, r5, lr}
 802d84e:	4d07      	ldr	r5, [pc, #28]	; (802d86c <_fstat_r+0x20>)
 802d850:	2300      	movs	r3, #0
 802d852:	4604      	mov	r4, r0
 802d854:	4608      	mov	r0, r1
 802d856:	4611      	mov	r1, r2
 802d858:	602b      	str	r3, [r5, #0]
 802d85a:	f7f6 fa3a 	bl	8023cd2 <_fstat>
 802d85e:	1c43      	adds	r3, r0, #1
 802d860:	d102      	bne.n	802d868 <_fstat_r+0x1c>
 802d862:	682b      	ldr	r3, [r5, #0]
 802d864:	b103      	cbz	r3, 802d868 <_fstat_r+0x1c>
 802d866:	6023      	str	r3, [r4, #0]
 802d868:	bd38      	pop	{r3, r4, r5, pc}
 802d86a:	bf00      	nop
 802d86c:	20002d1c 	.word	0x20002d1c

0802d870 <_isatty_r>:
 802d870:	b538      	push	{r3, r4, r5, lr}
 802d872:	4d06      	ldr	r5, [pc, #24]	; (802d88c <_isatty_r+0x1c>)
 802d874:	2300      	movs	r3, #0
 802d876:	4604      	mov	r4, r0
 802d878:	4608      	mov	r0, r1
 802d87a:	602b      	str	r3, [r5, #0]
 802d87c:	f7f6 fa39 	bl	8023cf2 <_isatty>
 802d880:	1c43      	adds	r3, r0, #1
 802d882:	d102      	bne.n	802d88a <_isatty_r+0x1a>
 802d884:	682b      	ldr	r3, [r5, #0]
 802d886:	b103      	cbz	r3, 802d88a <_isatty_r+0x1a>
 802d888:	6023      	str	r3, [r4, #0]
 802d88a:	bd38      	pop	{r3, r4, r5, pc}
 802d88c:	20002d1c 	.word	0x20002d1c

0802d890 <_lseek_r>:
 802d890:	b538      	push	{r3, r4, r5, lr}
 802d892:	4d07      	ldr	r5, [pc, #28]	; (802d8b0 <_lseek_r+0x20>)
 802d894:	4604      	mov	r4, r0
 802d896:	4608      	mov	r0, r1
 802d898:	4611      	mov	r1, r2
 802d89a:	2200      	movs	r2, #0
 802d89c:	602a      	str	r2, [r5, #0]
 802d89e:	461a      	mov	r2, r3
 802d8a0:	f7f6 fa32 	bl	8023d08 <_lseek>
 802d8a4:	1c43      	adds	r3, r0, #1
 802d8a6:	d102      	bne.n	802d8ae <_lseek_r+0x1e>
 802d8a8:	682b      	ldr	r3, [r5, #0]
 802d8aa:	b103      	cbz	r3, 802d8ae <_lseek_r+0x1e>
 802d8ac:	6023      	str	r3, [r4, #0]
 802d8ae:	bd38      	pop	{r3, r4, r5, pc}
 802d8b0:	20002d1c 	.word	0x20002d1c

0802d8b4 <_malloc_usable_size_r>:
 802d8b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d8b8:	1f18      	subs	r0, r3, #4
 802d8ba:	2b00      	cmp	r3, #0
 802d8bc:	bfbc      	itt	lt
 802d8be:	580b      	ldrlt	r3, [r1, r0]
 802d8c0:	18c0      	addlt	r0, r0, r3
 802d8c2:	4770      	bx	lr

0802d8c4 <_read_r>:
 802d8c4:	b538      	push	{r3, r4, r5, lr}
 802d8c6:	4d07      	ldr	r5, [pc, #28]	; (802d8e4 <_read_r+0x20>)
 802d8c8:	4604      	mov	r4, r0
 802d8ca:	4608      	mov	r0, r1
 802d8cc:	4611      	mov	r1, r2
 802d8ce:	2200      	movs	r2, #0
 802d8d0:	602a      	str	r2, [r5, #0]
 802d8d2:	461a      	mov	r2, r3
 802d8d4:	f7f6 f9d4 	bl	8023c80 <_read>
 802d8d8:	1c43      	adds	r3, r0, #1
 802d8da:	d102      	bne.n	802d8e2 <_read_r+0x1e>
 802d8dc:	682b      	ldr	r3, [r5, #0]
 802d8de:	b103      	cbz	r3, 802d8e2 <_read_r+0x1e>
 802d8e0:	6023      	str	r3, [r4, #0]
 802d8e2:	bd38      	pop	{r3, r4, r5, pc}
 802d8e4:	20002d1c 	.word	0x20002d1c

0802d8e8 <atan2>:
 802d8e8:	f000 b82e 	b.w	802d948 <__ieee754_atan2>

0802d8ec <sqrt>:
 802d8ec:	b538      	push	{r3, r4, r5, lr}
 802d8ee:	ed2d 8b02 	vpush	{d8}
 802d8f2:	ec55 4b10 	vmov	r4, r5, d0
 802d8f6:	f000 f8f1 	bl	802dadc <__ieee754_sqrt>
 802d8fa:	4622      	mov	r2, r4
 802d8fc:	462b      	mov	r3, r5
 802d8fe:	4620      	mov	r0, r4
 802d900:	4629      	mov	r1, r5
 802d902:	eeb0 8a40 	vmov.f32	s16, s0
 802d906:	eef0 8a60 	vmov.f32	s17, s1
 802d90a:	f7f3 f86f 	bl	80209ec <__aeabi_dcmpun>
 802d90e:	b990      	cbnz	r0, 802d936 <sqrt+0x4a>
 802d910:	2200      	movs	r2, #0
 802d912:	2300      	movs	r3, #0
 802d914:	4620      	mov	r0, r4
 802d916:	4629      	mov	r1, r5
 802d918:	f7f3 f840 	bl	802099c <__aeabi_dcmplt>
 802d91c:	b158      	cbz	r0, 802d936 <sqrt+0x4a>
 802d91e:	f7fd f837 	bl	802a990 <__errno>
 802d922:	2321      	movs	r3, #33	; 0x21
 802d924:	6003      	str	r3, [r0, #0]
 802d926:	2200      	movs	r2, #0
 802d928:	2300      	movs	r3, #0
 802d92a:	4610      	mov	r0, r2
 802d92c:	4619      	mov	r1, r3
 802d92e:	f7f2 feed 	bl	802070c <__aeabi_ddiv>
 802d932:	ec41 0b18 	vmov	d8, r0, r1
 802d936:	eeb0 0a48 	vmov.f32	s0, s16
 802d93a:	eef0 0a68 	vmov.f32	s1, s17
 802d93e:	ecbd 8b02 	vpop	{d8}
 802d942:	bd38      	pop	{r3, r4, r5, pc}
 802d944:	0000      	movs	r0, r0
	...

0802d948 <__ieee754_atan2>:
 802d948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d94c:	ec57 6b11 	vmov	r6, r7, d1
 802d950:	4273      	negs	r3, r6
 802d952:	f8df e184 	ldr.w	lr, [pc, #388]	; 802dad8 <__ieee754_atan2+0x190>
 802d956:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 802d95a:	4333      	orrs	r3, r6
 802d95c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 802d960:	4573      	cmp	r3, lr
 802d962:	ec51 0b10 	vmov	r0, r1, d0
 802d966:	ee11 8a10 	vmov	r8, s2
 802d96a:	d80a      	bhi.n	802d982 <__ieee754_atan2+0x3a>
 802d96c:	4244      	negs	r4, r0
 802d96e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802d972:	4304      	orrs	r4, r0
 802d974:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 802d978:	4574      	cmp	r4, lr
 802d97a:	ee10 9a10 	vmov	r9, s0
 802d97e:	468c      	mov	ip, r1
 802d980:	d907      	bls.n	802d992 <__ieee754_atan2+0x4a>
 802d982:	4632      	mov	r2, r6
 802d984:	463b      	mov	r3, r7
 802d986:	f7f2 fbe1 	bl	802014c <__adddf3>
 802d98a:	ec41 0b10 	vmov	d0, r0, r1
 802d98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d992:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 802d996:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802d99a:	4334      	orrs	r4, r6
 802d99c:	d103      	bne.n	802d9a6 <__ieee754_atan2+0x5e>
 802d99e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d9a2:	f000 b94d 	b.w	802dc40 <atan>
 802d9a6:	17bc      	asrs	r4, r7, #30
 802d9a8:	f004 0402 	and.w	r4, r4, #2
 802d9ac:	ea53 0909 	orrs.w	r9, r3, r9
 802d9b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 802d9b4:	d107      	bne.n	802d9c6 <__ieee754_atan2+0x7e>
 802d9b6:	2c02      	cmp	r4, #2
 802d9b8:	d060      	beq.n	802da7c <__ieee754_atan2+0x134>
 802d9ba:	2c03      	cmp	r4, #3
 802d9bc:	d1e5      	bne.n	802d98a <__ieee754_atan2+0x42>
 802d9be:	a142      	add	r1, pc, #264	; (adr r1, 802dac8 <__ieee754_atan2+0x180>)
 802d9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d9c4:	e7e1      	b.n	802d98a <__ieee754_atan2+0x42>
 802d9c6:	ea52 0808 	orrs.w	r8, r2, r8
 802d9ca:	d106      	bne.n	802d9da <__ieee754_atan2+0x92>
 802d9cc:	f1bc 0f00 	cmp.w	ip, #0
 802d9d0:	da5f      	bge.n	802da92 <__ieee754_atan2+0x14a>
 802d9d2:	a13f      	add	r1, pc, #252	; (adr r1, 802dad0 <__ieee754_atan2+0x188>)
 802d9d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d9d8:	e7d7      	b.n	802d98a <__ieee754_atan2+0x42>
 802d9da:	4572      	cmp	r2, lr
 802d9dc:	d10f      	bne.n	802d9fe <__ieee754_atan2+0xb6>
 802d9de:	4293      	cmp	r3, r2
 802d9e0:	f104 34ff 	add.w	r4, r4, #4294967295
 802d9e4:	d107      	bne.n	802d9f6 <__ieee754_atan2+0xae>
 802d9e6:	2c02      	cmp	r4, #2
 802d9e8:	d84c      	bhi.n	802da84 <__ieee754_atan2+0x13c>
 802d9ea:	4b35      	ldr	r3, [pc, #212]	; (802dac0 <__ieee754_atan2+0x178>)
 802d9ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802d9f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 802d9f4:	e7c9      	b.n	802d98a <__ieee754_atan2+0x42>
 802d9f6:	2c02      	cmp	r4, #2
 802d9f8:	d848      	bhi.n	802da8c <__ieee754_atan2+0x144>
 802d9fa:	4b32      	ldr	r3, [pc, #200]	; (802dac4 <__ieee754_atan2+0x17c>)
 802d9fc:	e7f6      	b.n	802d9ec <__ieee754_atan2+0xa4>
 802d9fe:	4573      	cmp	r3, lr
 802da00:	d0e4      	beq.n	802d9cc <__ieee754_atan2+0x84>
 802da02:	1a9b      	subs	r3, r3, r2
 802da04:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 802da08:	ea4f 5223 	mov.w	r2, r3, asr #20
 802da0c:	da1e      	bge.n	802da4c <__ieee754_atan2+0x104>
 802da0e:	2f00      	cmp	r7, #0
 802da10:	da01      	bge.n	802da16 <__ieee754_atan2+0xce>
 802da12:	323c      	adds	r2, #60	; 0x3c
 802da14:	db1e      	blt.n	802da54 <__ieee754_atan2+0x10c>
 802da16:	4632      	mov	r2, r6
 802da18:	463b      	mov	r3, r7
 802da1a:	f7f2 fe77 	bl	802070c <__aeabi_ddiv>
 802da1e:	ec41 0b10 	vmov	d0, r0, r1
 802da22:	f000 faad 	bl	802df80 <fabs>
 802da26:	f000 f90b 	bl	802dc40 <atan>
 802da2a:	ec51 0b10 	vmov	r0, r1, d0
 802da2e:	2c01      	cmp	r4, #1
 802da30:	d013      	beq.n	802da5a <__ieee754_atan2+0x112>
 802da32:	2c02      	cmp	r4, #2
 802da34:	d015      	beq.n	802da62 <__ieee754_atan2+0x11a>
 802da36:	2c00      	cmp	r4, #0
 802da38:	d0a7      	beq.n	802d98a <__ieee754_atan2+0x42>
 802da3a:	a319      	add	r3, pc, #100	; (adr r3, 802daa0 <__ieee754_atan2+0x158>)
 802da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da40:	f7f2 fb82 	bl	8020148 <__aeabi_dsub>
 802da44:	a318      	add	r3, pc, #96	; (adr r3, 802daa8 <__ieee754_atan2+0x160>)
 802da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da4a:	e014      	b.n	802da76 <__ieee754_atan2+0x12e>
 802da4c:	a118      	add	r1, pc, #96	; (adr r1, 802dab0 <__ieee754_atan2+0x168>)
 802da4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802da52:	e7ec      	b.n	802da2e <__ieee754_atan2+0xe6>
 802da54:	2000      	movs	r0, #0
 802da56:	2100      	movs	r1, #0
 802da58:	e7e9      	b.n	802da2e <__ieee754_atan2+0xe6>
 802da5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802da5e:	4619      	mov	r1, r3
 802da60:	e793      	b.n	802d98a <__ieee754_atan2+0x42>
 802da62:	a30f      	add	r3, pc, #60	; (adr r3, 802daa0 <__ieee754_atan2+0x158>)
 802da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da68:	f7f2 fb6e 	bl	8020148 <__aeabi_dsub>
 802da6c:	4602      	mov	r2, r0
 802da6e:	460b      	mov	r3, r1
 802da70:	a10d      	add	r1, pc, #52	; (adr r1, 802daa8 <__ieee754_atan2+0x160>)
 802da72:	e9d1 0100 	ldrd	r0, r1, [r1]
 802da76:	f7f2 fb67 	bl	8020148 <__aeabi_dsub>
 802da7a:	e786      	b.n	802d98a <__ieee754_atan2+0x42>
 802da7c:	a10a      	add	r1, pc, #40	; (adr r1, 802daa8 <__ieee754_atan2+0x160>)
 802da7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802da82:	e782      	b.n	802d98a <__ieee754_atan2+0x42>
 802da84:	a10c      	add	r1, pc, #48	; (adr r1, 802dab8 <__ieee754_atan2+0x170>)
 802da86:	e9d1 0100 	ldrd	r0, r1, [r1]
 802da8a:	e77e      	b.n	802d98a <__ieee754_atan2+0x42>
 802da8c:	2000      	movs	r0, #0
 802da8e:	2100      	movs	r1, #0
 802da90:	e77b      	b.n	802d98a <__ieee754_atan2+0x42>
 802da92:	a107      	add	r1, pc, #28	; (adr r1, 802dab0 <__ieee754_atan2+0x168>)
 802da94:	e9d1 0100 	ldrd	r0, r1, [r1]
 802da98:	e777      	b.n	802d98a <__ieee754_atan2+0x42>
 802da9a:	bf00      	nop
 802da9c:	f3af 8000 	nop.w
 802daa0:	33145c07 	.word	0x33145c07
 802daa4:	3ca1a626 	.word	0x3ca1a626
 802daa8:	54442d18 	.word	0x54442d18
 802daac:	400921fb 	.word	0x400921fb
 802dab0:	54442d18 	.word	0x54442d18
 802dab4:	3ff921fb 	.word	0x3ff921fb
 802dab8:	54442d18 	.word	0x54442d18
 802dabc:	3fe921fb 	.word	0x3fe921fb
 802dac0:	08079fe0 	.word	0x08079fe0
 802dac4:	08079ff8 	.word	0x08079ff8
 802dac8:	54442d18 	.word	0x54442d18
 802dacc:	c00921fb 	.word	0xc00921fb
 802dad0:	54442d18 	.word	0x54442d18
 802dad4:	bff921fb 	.word	0xbff921fb
 802dad8:	7ff00000 	.word	0x7ff00000

0802dadc <__ieee754_sqrt>:
 802dadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dae0:	ec55 4b10 	vmov	r4, r5, d0
 802dae4:	4e55      	ldr	r6, [pc, #340]	; (802dc3c <__ieee754_sqrt+0x160>)
 802dae6:	43ae      	bics	r6, r5
 802dae8:	ee10 0a10 	vmov	r0, s0
 802daec:	ee10 3a10 	vmov	r3, s0
 802daf0:	462a      	mov	r2, r5
 802daf2:	4629      	mov	r1, r5
 802daf4:	d110      	bne.n	802db18 <__ieee754_sqrt+0x3c>
 802daf6:	ee10 2a10 	vmov	r2, s0
 802dafa:	462b      	mov	r3, r5
 802dafc:	f7f2 fcdc 	bl	80204b8 <__aeabi_dmul>
 802db00:	4602      	mov	r2, r0
 802db02:	460b      	mov	r3, r1
 802db04:	4620      	mov	r0, r4
 802db06:	4629      	mov	r1, r5
 802db08:	f7f2 fb20 	bl	802014c <__adddf3>
 802db0c:	4604      	mov	r4, r0
 802db0e:	460d      	mov	r5, r1
 802db10:	ec45 4b10 	vmov	d0, r4, r5
 802db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802db18:	2d00      	cmp	r5, #0
 802db1a:	dc10      	bgt.n	802db3e <__ieee754_sqrt+0x62>
 802db1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802db20:	4330      	orrs	r0, r6
 802db22:	d0f5      	beq.n	802db10 <__ieee754_sqrt+0x34>
 802db24:	b15d      	cbz	r5, 802db3e <__ieee754_sqrt+0x62>
 802db26:	ee10 2a10 	vmov	r2, s0
 802db2a:	462b      	mov	r3, r5
 802db2c:	ee10 0a10 	vmov	r0, s0
 802db30:	f7f2 fb0a 	bl	8020148 <__aeabi_dsub>
 802db34:	4602      	mov	r2, r0
 802db36:	460b      	mov	r3, r1
 802db38:	f7f2 fde8 	bl	802070c <__aeabi_ddiv>
 802db3c:	e7e6      	b.n	802db0c <__ieee754_sqrt+0x30>
 802db3e:	1512      	asrs	r2, r2, #20
 802db40:	d074      	beq.n	802dc2c <__ieee754_sqrt+0x150>
 802db42:	07d4      	lsls	r4, r2, #31
 802db44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 802db48:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 802db4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802db50:	bf5e      	ittt	pl
 802db52:	0fda      	lsrpl	r2, r3, #31
 802db54:	005b      	lslpl	r3, r3, #1
 802db56:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 802db5a:	2400      	movs	r4, #0
 802db5c:	0fda      	lsrs	r2, r3, #31
 802db5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802db62:	107f      	asrs	r7, r7, #1
 802db64:	005b      	lsls	r3, r3, #1
 802db66:	2516      	movs	r5, #22
 802db68:	4620      	mov	r0, r4
 802db6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 802db6e:	1886      	adds	r6, r0, r2
 802db70:	428e      	cmp	r6, r1
 802db72:	bfde      	ittt	le
 802db74:	1b89      	suble	r1, r1, r6
 802db76:	18b0      	addle	r0, r6, r2
 802db78:	18a4      	addle	r4, r4, r2
 802db7a:	0049      	lsls	r1, r1, #1
 802db7c:	3d01      	subs	r5, #1
 802db7e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 802db82:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802db86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802db8a:	d1f0      	bne.n	802db6e <__ieee754_sqrt+0x92>
 802db8c:	462a      	mov	r2, r5
 802db8e:	f04f 0e20 	mov.w	lr, #32
 802db92:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802db96:	4281      	cmp	r1, r0
 802db98:	eb06 0c05 	add.w	ip, r6, r5
 802db9c:	dc02      	bgt.n	802dba4 <__ieee754_sqrt+0xc8>
 802db9e:	d113      	bne.n	802dbc8 <__ieee754_sqrt+0xec>
 802dba0:	459c      	cmp	ip, r3
 802dba2:	d811      	bhi.n	802dbc8 <__ieee754_sqrt+0xec>
 802dba4:	f1bc 0f00 	cmp.w	ip, #0
 802dba8:	eb0c 0506 	add.w	r5, ip, r6
 802dbac:	da43      	bge.n	802dc36 <__ieee754_sqrt+0x15a>
 802dbae:	2d00      	cmp	r5, #0
 802dbb0:	db41      	blt.n	802dc36 <__ieee754_sqrt+0x15a>
 802dbb2:	f100 0801 	add.w	r8, r0, #1
 802dbb6:	1a09      	subs	r1, r1, r0
 802dbb8:	459c      	cmp	ip, r3
 802dbba:	bf88      	it	hi
 802dbbc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 802dbc0:	eba3 030c 	sub.w	r3, r3, ip
 802dbc4:	4432      	add	r2, r6
 802dbc6:	4640      	mov	r0, r8
 802dbc8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 802dbcc:	f1be 0e01 	subs.w	lr, lr, #1
 802dbd0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 802dbd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802dbd8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802dbdc:	d1db      	bne.n	802db96 <__ieee754_sqrt+0xba>
 802dbde:	430b      	orrs	r3, r1
 802dbe0:	d006      	beq.n	802dbf0 <__ieee754_sqrt+0x114>
 802dbe2:	1c50      	adds	r0, r2, #1
 802dbe4:	bf13      	iteet	ne
 802dbe6:	3201      	addne	r2, #1
 802dbe8:	3401      	addeq	r4, #1
 802dbea:	4672      	moveq	r2, lr
 802dbec:	f022 0201 	bicne.w	r2, r2, #1
 802dbf0:	1063      	asrs	r3, r4, #1
 802dbf2:	0852      	lsrs	r2, r2, #1
 802dbf4:	07e1      	lsls	r1, r4, #31
 802dbf6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802dbfa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802dbfe:	bf48      	it	mi
 802dc00:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 802dc04:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 802dc08:	4614      	mov	r4, r2
 802dc0a:	e781      	b.n	802db10 <__ieee754_sqrt+0x34>
 802dc0c:	0ad9      	lsrs	r1, r3, #11
 802dc0e:	3815      	subs	r0, #21
 802dc10:	055b      	lsls	r3, r3, #21
 802dc12:	2900      	cmp	r1, #0
 802dc14:	d0fa      	beq.n	802dc0c <__ieee754_sqrt+0x130>
 802dc16:	02cd      	lsls	r5, r1, #11
 802dc18:	d50a      	bpl.n	802dc30 <__ieee754_sqrt+0x154>
 802dc1a:	f1c2 0420 	rsb	r4, r2, #32
 802dc1e:	fa23 f404 	lsr.w	r4, r3, r4
 802dc22:	1e55      	subs	r5, r2, #1
 802dc24:	4093      	lsls	r3, r2
 802dc26:	4321      	orrs	r1, r4
 802dc28:	1b42      	subs	r2, r0, r5
 802dc2a:	e78a      	b.n	802db42 <__ieee754_sqrt+0x66>
 802dc2c:	4610      	mov	r0, r2
 802dc2e:	e7f0      	b.n	802dc12 <__ieee754_sqrt+0x136>
 802dc30:	0049      	lsls	r1, r1, #1
 802dc32:	3201      	adds	r2, #1
 802dc34:	e7ef      	b.n	802dc16 <__ieee754_sqrt+0x13a>
 802dc36:	4680      	mov	r8, r0
 802dc38:	e7bd      	b.n	802dbb6 <__ieee754_sqrt+0xda>
 802dc3a:	bf00      	nop
 802dc3c:	7ff00000 	.word	0x7ff00000

0802dc40 <atan>:
 802dc40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dc44:	ec55 4b10 	vmov	r4, r5, d0
 802dc48:	4bc3      	ldr	r3, [pc, #780]	; (802df58 <atan+0x318>)
 802dc4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802dc4e:	429e      	cmp	r6, r3
 802dc50:	46ab      	mov	fp, r5
 802dc52:	dd18      	ble.n	802dc86 <atan+0x46>
 802dc54:	4bc1      	ldr	r3, [pc, #772]	; (802df5c <atan+0x31c>)
 802dc56:	429e      	cmp	r6, r3
 802dc58:	dc01      	bgt.n	802dc5e <atan+0x1e>
 802dc5a:	d109      	bne.n	802dc70 <atan+0x30>
 802dc5c:	b144      	cbz	r4, 802dc70 <atan+0x30>
 802dc5e:	4622      	mov	r2, r4
 802dc60:	462b      	mov	r3, r5
 802dc62:	4620      	mov	r0, r4
 802dc64:	4629      	mov	r1, r5
 802dc66:	f7f2 fa71 	bl	802014c <__adddf3>
 802dc6a:	4604      	mov	r4, r0
 802dc6c:	460d      	mov	r5, r1
 802dc6e:	e006      	b.n	802dc7e <atan+0x3e>
 802dc70:	f1bb 0f00 	cmp.w	fp, #0
 802dc74:	f300 8131 	bgt.w	802deda <atan+0x29a>
 802dc78:	a59b      	add	r5, pc, #620	; (adr r5, 802dee8 <atan+0x2a8>)
 802dc7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 802dc7e:	ec45 4b10 	vmov	d0, r4, r5
 802dc82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dc86:	4bb6      	ldr	r3, [pc, #728]	; (802df60 <atan+0x320>)
 802dc88:	429e      	cmp	r6, r3
 802dc8a:	dc14      	bgt.n	802dcb6 <atan+0x76>
 802dc8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 802dc90:	429e      	cmp	r6, r3
 802dc92:	dc0d      	bgt.n	802dcb0 <atan+0x70>
 802dc94:	a396      	add	r3, pc, #600	; (adr r3, 802def0 <atan+0x2b0>)
 802dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc9a:	ee10 0a10 	vmov	r0, s0
 802dc9e:	4629      	mov	r1, r5
 802dca0:	f7f2 fa54 	bl	802014c <__adddf3>
 802dca4:	4baf      	ldr	r3, [pc, #700]	; (802df64 <atan+0x324>)
 802dca6:	2200      	movs	r2, #0
 802dca8:	f7f2 fe96 	bl	80209d8 <__aeabi_dcmpgt>
 802dcac:	2800      	cmp	r0, #0
 802dcae:	d1e6      	bne.n	802dc7e <atan+0x3e>
 802dcb0:	f04f 3aff 	mov.w	sl, #4294967295
 802dcb4:	e02b      	b.n	802dd0e <atan+0xce>
 802dcb6:	f000 f963 	bl	802df80 <fabs>
 802dcba:	4bab      	ldr	r3, [pc, #684]	; (802df68 <atan+0x328>)
 802dcbc:	429e      	cmp	r6, r3
 802dcbe:	ec55 4b10 	vmov	r4, r5, d0
 802dcc2:	f300 80bf 	bgt.w	802de44 <atan+0x204>
 802dcc6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 802dcca:	429e      	cmp	r6, r3
 802dccc:	f300 80a0 	bgt.w	802de10 <atan+0x1d0>
 802dcd0:	ee10 2a10 	vmov	r2, s0
 802dcd4:	ee10 0a10 	vmov	r0, s0
 802dcd8:	462b      	mov	r3, r5
 802dcda:	4629      	mov	r1, r5
 802dcdc:	f7f2 fa36 	bl	802014c <__adddf3>
 802dce0:	4ba0      	ldr	r3, [pc, #640]	; (802df64 <atan+0x324>)
 802dce2:	2200      	movs	r2, #0
 802dce4:	f7f2 fa30 	bl	8020148 <__aeabi_dsub>
 802dce8:	2200      	movs	r2, #0
 802dcea:	4606      	mov	r6, r0
 802dcec:	460f      	mov	r7, r1
 802dcee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802dcf2:	4620      	mov	r0, r4
 802dcf4:	4629      	mov	r1, r5
 802dcf6:	f7f2 fa29 	bl	802014c <__adddf3>
 802dcfa:	4602      	mov	r2, r0
 802dcfc:	460b      	mov	r3, r1
 802dcfe:	4630      	mov	r0, r6
 802dd00:	4639      	mov	r1, r7
 802dd02:	f7f2 fd03 	bl	802070c <__aeabi_ddiv>
 802dd06:	f04f 0a00 	mov.w	sl, #0
 802dd0a:	4604      	mov	r4, r0
 802dd0c:	460d      	mov	r5, r1
 802dd0e:	4622      	mov	r2, r4
 802dd10:	462b      	mov	r3, r5
 802dd12:	4620      	mov	r0, r4
 802dd14:	4629      	mov	r1, r5
 802dd16:	f7f2 fbcf 	bl	80204b8 <__aeabi_dmul>
 802dd1a:	4602      	mov	r2, r0
 802dd1c:	460b      	mov	r3, r1
 802dd1e:	4680      	mov	r8, r0
 802dd20:	4689      	mov	r9, r1
 802dd22:	f7f2 fbc9 	bl	80204b8 <__aeabi_dmul>
 802dd26:	a374      	add	r3, pc, #464	; (adr r3, 802def8 <atan+0x2b8>)
 802dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd2c:	4606      	mov	r6, r0
 802dd2e:	460f      	mov	r7, r1
 802dd30:	f7f2 fbc2 	bl	80204b8 <__aeabi_dmul>
 802dd34:	a372      	add	r3, pc, #456	; (adr r3, 802df00 <atan+0x2c0>)
 802dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd3a:	f7f2 fa07 	bl	802014c <__adddf3>
 802dd3e:	4632      	mov	r2, r6
 802dd40:	463b      	mov	r3, r7
 802dd42:	f7f2 fbb9 	bl	80204b8 <__aeabi_dmul>
 802dd46:	a370      	add	r3, pc, #448	; (adr r3, 802df08 <atan+0x2c8>)
 802dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd4c:	f7f2 f9fe 	bl	802014c <__adddf3>
 802dd50:	4632      	mov	r2, r6
 802dd52:	463b      	mov	r3, r7
 802dd54:	f7f2 fbb0 	bl	80204b8 <__aeabi_dmul>
 802dd58:	a36d      	add	r3, pc, #436	; (adr r3, 802df10 <atan+0x2d0>)
 802dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd5e:	f7f2 f9f5 	bl	802014c <__adddf3>
 802dd62:	4632      	mov	r2, r6
 802dd64:	463b      	mov	r3, r7
 802dd66:	f7f2 fba7 	bl	80204b8 <__aeabi_dmul>
 802dd6a:	a36b      	add	r3, pc, #428	; (adr r3, 802df18 <atan+0x2d8>)
 802dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd70:	f7f2 f9ec 	bl	802014c <__adddf3>
 802dd74:	4632      	mov	r2, r6
 802dd76:	463b      	mov	r3, r7
 802dd78:	f7f2 fb9e 	bl	80204b8 <__aeabi_dmul>
 802dd7c:	a368      	add	r3, pc, #416	; (adr r3, 802df20 <atan+0x2e0>)
 802dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd82:	f7f2 f9e3 	bl	802014c <__adddf3>
 802dd86:	4642      	mov	r2, r8
 802dd88:	464b      	mov	r3, r9
 802dd8a:	f7f2 fb95 	bl	80204b8 <__aeabi_dmul>
 802dd8e:	a366      	add	r3, pc, #408	; (adr r3, 802df28 <atan+0x2e8>)
 802dd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd94:	4680      	mov	r8, r0
 802dd96:	4689      	mov	r9, r1
 802dd98:	4630      	mov	r0, r6
 802dd9a:	4639      	mov	r1, r7
 802dd9c:	f7f2 fb8c 	bl	80204b8 <__aeabi_dmul>
 802dda0:	a363      	add	r3, pc, #396	; (adr r3, 802df30 <atan+0x2f0>)
 802dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dda6:	f7f2 f9cf 	bl	8020148 <__aeabi_dsub>
 802ddaa:	4632      	mov	r2, r6
 802ddac:	463b      	mov	r3, r7
 802ddae:	f7f2 fb83 	bl	80204b8 <__aeabi_dmul>
 802ddb2:	a361      	add	r3, pc, #388	; (adr r3, 802df38 <atan+0x2f8>)
 802ddb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddb8:	f7f2 f9c6 	bl	8020148 <__aeabi_dsub>
 802ddbc:	4632      	mov	r2, r6
 802ddbe:	463b      	mov	r3, r7
 802ddc0:	f7f2 fb7a 	bl	80204b8 <__aeabi_dmul>
 802ddc4:	a35e      	add	r3, pc, #376	; (adr r3, 802df40 <atan+0x300>)
 802ddc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddca:	f7f2 f9bd 	bl	8020148 <__aeabi_dsub>
 802ddce:	4632      	mov	r2, r6
 802ddd0:	463b      	mov	r3, r7
 802ddd2:	f7f2 fb71 	bl	80204b8 <__aeabi_dmul>
 802ddd6:	a35c      	add	r3, pc, #368	; (adr r3, 802df48 <atan+0x308>)
 802ddd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dddc:	f7f2 f9b4 	bl	8020148 <__aeabi_dsub>
 802dde0:	4632      	mov	r2, r6
 802dde2:	463b      	mov	r3, r7
 802dde4:	f7f2 fb68 	bl	80204b8 <__aeabi_dmul>
 802dde8:	4602      	mov	r2, r0
 802ddea:	460b      	mov	r3, r1
 802ddec:	4640      	mov	r0, r8
 802ddee:	4649      	mov	r1, r9
 802ddf0:	f7f2 f9ac 	bl	802014c <__adddf3>
 802ddf4:	4622      	mov	r2, r4
 802ddf6:	462b      	mov	r3, r5
 802ddf8:	f7f2 fb5e 	bl	80204b8 <__aeabi_dmul>
 802ddfc:	f1ba 3fff 	cmp.w	sl, #4294967295
 802de00:	4602      	mov	r2, r0
 802de02:	460b      	mov	r3, r1
 802de04:	d14b      	bne.n	802de9e <atan+0x25e>
 802de06:	4620      	mov	r0, r4
 802de08:	4629      	mov	r1, r5
 802de0a:	f7f2 f99d 	bl	8020148 <__aeabi_dsub>
 802de0e:	e72c      	b.n	802dc6a <atan+0x2a>
 802de10:	ee10 0a10 	vmov	r0, s0
 802de14:	4b53      	ldr	r3, [pc, #332]	; (802df64 <atan+0x324>)
 802de16:	2200      	movs	r2, #0
 802de18:	4629      	mov	r1, r5
 802de1a:	f7f2 f995 	bl	8020148 <__aeabi_dsub>
 802de1e:	4b51      	ldr	r3, [pc, #324]	; (802df64 <atan+0x324>)
 802de20:	4606      	mov	r6, r0
 802de22:	460f      	mov	r7, r1
 802de24:	2200      	movs	r2, #0
 802de26:	4620      	mov	r0, r4
 802de28:	4629      	mov	r1, r5
 802de2a:	f7f2 f98f 	bl	802014c <__adddf3>
 802de2e:	4602      	mov	r2, r0
 802de30:	460b      	mov	r3, r1
 802de32:	4630      	mov	r0, r6
 802de34:	4639      	mov	r1, r7
 802de36:	f7f2 fc69 	bl	802070c <__aeabi_ddiv>
 802de3a:	f04f 0a01 	mov.w	sl, #1
 802de3e:	4604      	mov	r4, r0
 802de40:	460d      	mov	r5, r1
 802de42:	e764      	b.n	802dd0e <atan+0xce>
 802de44:	4b49      	ldr	r3, [pc, #292]	; (802df6c <atan+0x32c>)
 802de46:	429e      	cmp	r6, r3
 802de48:	da1d      	bge.n	802de86 <atan+0x246>
 802de4a:	ee10 0a10 	vmov	r0, s0
 802de4e:	4b48      	ldr	r3, [pc, #288]	; (802df70 <atan+0x330>)
 802de50:	2200      	movs	r2, #0
 802de52:	4629      	mov	r1, r5
 802de54:	f7f2 f978 	bl	8020148 <__aeabi_dsub>
 802de58:	4b45      	ldr	r3, [pc, #276]	; (802df70 <atan+0x330>)
 802de5a:	4606      	mov	r6, r0
 802de5c:	460f      	mov	r7, r1
 802de5e:	2200      	movs	r2, #0
 802de60:	4620      	mov	r0, r4
 802de62:	4629      	mov	r1, r5
 802de64:	f7f2 fb28 	bl	80204b8 <__aeabi_dmul>
 802de68:	4b3e      	ldr	r3, [pc, #248]	; (802df64 <atan+0x324>)
 802de6a:	2200      	movs	r2, #0
 802de6c:	f7f2 f96e 	bl	802014c <__adddf3>
 802de70:	4602      	mov	r2, r0
 802de72:	460b      	mov	r3, r1
 802de74:	4630      	mov	r0, r6
 802de76:	4639      	mov	r1, r7
 802de78:	f7f2 fc48 	bl	802070c <__aeabi_ddiv>
 802de7c:	f04f 0a02 	mov.w	sl, #2
 802de80:	4604      	mov	r4, r0
 802de82:	460d      	mov	r5, r1
 802de84:	e743      	b.n	802dd0e <atan+0xce>
 802de86:	462b      	mov	r3, r5
 802de88:	ee10 2a10 	vmov	r2, s0
 802de8c:	4939      	ldr	r1, [pc, #228]	; (802df74 <atan+0x334>)
 802de8e:	2000      	movs	r0, #0
 802de90:	f7f2 fc3c 	bl	802070c <__aeabi_ddiv>
 802de94:	f04f 0a03 	mov.w	sl, #3
 802de98:	4604      	mov	r4, r0
 802de9a:	460d      	mov	r5, r1
 802de9c:	e737      	b.n	802dd0e <atan+0xce>
 802de9e:	4b36      	ldr	r3, [pc, #216]	; (802df78 <atan+0x338>)
 802dea0:	4e36      	ldr	r6, [pc, #216]	; (802df7c <atan+0x33c>)
 802dea2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 802dea6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 802deaa:	e9da 2300 	ldrd	r2, r3, [sl]
 802deae:	f7f2 f94b 	bl	8020148 <__aeabi_dsub>
 802deb2:	4622      	mov	r2, r4
 802deb4:	462b      	mov	r3, r5
 802deb6:	f7f2 f947 	bl	8020148 <__aeabi_dsub>
 802deba:	4602      	mov	r2, r0
 802debc:	460b      	mov	r3, r1
 802debe:	e9d6 0100 	ldrd	r0, r1, [r6]
 802dec2:	f7f2 f941 	bl	8020148 <__aeabi_dsub>
 802dec6:	f1bb 0f00 	cmp.w	fp, #0
 802deca:	4604      	mov	r4, r0
 802decc:	460d      	mov	r5, r1
 802dece:	f6bf aed6 	bge.w	802dc7e <atan+0x3e>
 802ded2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802ded6:	461d      	mov	r5, r3
 802ded8:	e6d1      	b.n	802dc7e <atan+0x3e>
 802deda:	a51d      	add	r5, pc, #116	; (adr r5, 802df50 <atan+0x310>)
 802dedc:	e9d5 4500 	ldrd	r4, r5, [r5]
 802dee0:	e6cd      	b.n	802dc7e <atan+0x3e>
 802dee2:	bf00      	nop
 802dee4:	f3af 8000 	nop.w
 802dee8:	54442d18 	.word	0x54442d18
 802deec:	bff921fb 	.word	0xbff921fb
 802def0:	8800759c 	.word	0x8800759c
 802def4:	7e37e43c 	.word	0x7e37e43c
 802def8:	e322da11 	.word	0xe322da11
 802defc:	3f90ad3a 	.word	0x3f90ad3a
 802df00:	24760deb 	.word	0x24760deb
 802df04:	3fa97b4b 	.word	0x3fa97b4b
 802df08:	a0d03d51 	.word	0xa0d03d51
 802df0c:	3fb10d66 	.word	0x3fb10d66
 802df10:	c54c206e 	.word	0xc54c206e
 802df14:	3fb745cd 	.word	0x3fb745cd
 802df18:	920083ff 	.word	0x920083ff
 802df1c:	3fc24924 	.word	0x3fc24924
 802df20:	5555550d 	.word	0x5555550d
 802df24:	3fd55555 	.word	0x3fd55555
 802df28:	2c6a6c2f 	.word	0x2c6a6c2f
 802df2c:	bfa2b444 	.word	0xbfa2b444
 802df30:	52defd9a 	.word	0x52defd9a
 802df34:	3fadde2d 	.word	0x3fadde2d
 802df38:	af749a6d 	.word	0xaf749a6d
 802df3c:	3fb3b0f2 	.word	0x3fb3b0f2
 802df40:	fe231671 	.word	0xfe231671
 802df44:	3fbc71c6 	.word	0x3fbc71c6
 802df48:	9998ebc4 	.word	0x9998ebc4
 802df4c:	3fc99999 	.word	0x3fc99999
 802df50:	54442d18 	.word	0x54442d18
 802df54:	3ff921fb 	.word	0x3ff921fb
 802df58:	440fffff 	.word	0x440fffff
 802df5c:	7ff00000 	.word	0x7ff00000
 802df60:	3fdbffff 	.word	0x3fdbffff
 802df64:	3ff00000 	.word	0x3ff00000
 802df68:	3ff2ffff 	.word	0x3ff2ffff
 802df6c:	40038000 	.word	0x40038000
 802df70:	3ff80000 	.word	0x3ff80000
 802df74:	bff00000 	.word	0xbff00000
 802df78:	0807a030 	.word	0x0807a030
 802df7c:	0807a010 	.word	0x0807a010

0802df80 <fabs>:
 802df80:	ec51 0b10 	vmov	r0, r1, d0
 802df84:	ee10 2a10 	vmov	r2, s0
 802df88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802df8c:	ec43 2b10 	vmov	d0, r2, r3
 802df90:	4770      	bx	lr
	...

0802df94 <_gettimeofday>:
 802df94:	4b02      	ldr	r3, [pc, #8]	; (802dfa0 <_gettimeofday+0xc>)
 802df96:	2258      	movs	r2, #88	; 0x58
 802df98:	601a      	str	r2, [r3, #0]
 802df9a:	f04f 30ff 	mov.w	r0, #4294967295
 802df9e:	4770      	bx	lr
 802dfa0:	20002d1c 	.word	0x20002d1c

0802dfa4 <_init>:
 802dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dfa6:	bf00      	nop
 802dfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dfaa:	bc08      	pop	{r3}
 802dfac:	469e      	mov	lr, r3
 802dfae:	4770      	bx	lr

0802dfb0 <_fini>:
 802dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dfb2:	bf00      	nop
 802dfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dfb6:	bc08      	pop	{r3}
 802dfb8:	469e      	mov	lr, r3
 802dfba:	4770      	bx	lr
