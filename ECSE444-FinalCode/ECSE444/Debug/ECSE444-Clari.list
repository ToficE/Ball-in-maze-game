
ECSE444-Clari.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c55c  08010000  08010000  00020000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004bd98  0802c560  0802c560  0003c560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080782f8  080782f8  00090310  2**0
                  CONTENTS
  4 .ARM          00000008  080782f8  080782f8  000882f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08078300  08078300  00090310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08078300  08078300  00088300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08078304  08078304  00088304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  08078308  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028a8  20000310  08078618  00090310  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb8  08078618  00092bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00090310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002543e  00000000  00000000  00090340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b1e  00000000  00000000  000b577e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  000ba2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  000bbeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ffb5  00000000  00000000  000bd898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b66  00000000  00000000  000ed84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011aac1  00000000  00000000  001113b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0022be74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082f0  00000000  00000000  0022bf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0023422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00234328  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0023434c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000310 	.word	0x20000310
 801001c:	00000000 	.word	0x00000000
 8010020:	0802c544 	.word	0x0802c544

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000314 	.word	0x20000314
 801003c:	0802c544 	.word	0x0802c544
	...

08020000 <kalman>:
kalman: //label
	// push local variables used on stack

	//enable FPU

	PUSH {R1-R3,LR} // fixed-point push
 8020000:	b50e      	push	{r1, r2, r3, lr}

	LDR   R2, =0xE000ED88      	  // load CPACR
 8020002:	4a22      	ldr	r2, [pc, #136]	; (802008c <EXIT+0xa>)
	LDR     R3, [R2]              // retrieve CPACR value
 8020004:	6813      	ldr	r3, [r2, #0]
	ORR     R3, R3, #(0xF << 20)  // Set bits 20-23 to enable CP10 and CP11 coprocessors for FP operations
 8020006:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
	STR     R3, [R2]              // Write back to the CPACR
 802000a:	6013      	str	r3, [r2, #0]
	DSB                           // data sync barrier (wait for all memory accesses)
 802000c:	f3bf 8f4f 	dsb	sy
	ISB                           // instruction sync barrier (wait for all instructions)
 8020010:	f3bf 8f6f 	isb	sy

	VPUSH {S1-S6} // floating-point push
 8020014:	ed6d 0a06 	vpush	{s1-s6}

	MOV R1, #1
 8020018:	f04f 0101 	mov.w	r1, #1
	VMSR FPSCR, R1 // clear FPSCR by writing to it
 802001c:	eee1 1a10 	vmsr	fpscr, r1

	// load q, r, x, p, and k from memory
	VLDR.32 S1, [R0] // q
 8020020:	edd0 0a00 	vldr	s1, [r0]
	VLDR.32 S2, [R0, #4] // r
 8020024:	ed90 1a01 	vldr	s2, [r0, #4]
	VLDR.32 S3, [R0, #8] // x
 8020028:	edd0 1a02 	vldr	s3, [r0, #8]
	VLDR.32 S4, [R0, #12] // p
 802002c:	ed90 2a03 	vldr	s4, [r0, #12]
	//VLDR.32 S5, [R0, #16] // k (no need to load?)

	// arithmic
	VADD.F32 S4, S4, S1 // p = p + q
 8020030:	ee32 2a20 	vadd.f32	s4, s4, s1
	VADD.F32 S6, S4, S2 // den = p + r
 8020034:	ee32 3a01 	vadd.f32	s6, s4, s2
	VDIV.F32 S5, S4, S6 // k = p/den (need to store k)
 8020038:	eec2 2a03 	vdiv.f32	s5, s4, s6
	VSUB.F32 S0, S0, S3 // mult = measurement - x
 802003c:	ee30 0a61 	vsub.f32	s0, s0, s3
	VMUL.F32 S6, S5, S0 // addr = k*mult
 8020040:	ee22 3a80 	vmul.f32	s6, s5, s0
	VADD.F32 S3, S6, S3 // x = addr + x
 8020044:	ee73 1a21 	vadd.f32	s3, s6, s3

	// p = (1-k)*p
	// p = p - k*p
	VMUL.F32 S6, S5, S4 // mul = k*p
 8020048:	ee22 3a82 	vmul.f32	s6, s5, s4
	VSUB.F32 S4, S4, S6 // p = p - mul
 802004c:	ee32 2a43 	vsub.f32	s4, s4, s6

	// store variables
	VSTR S3, [R0, #8] // store x
 8020050:	edc0 1a02 	vstr	s3, [r0, #8]
	VSTR S4, [R0, #12] // store p
 8020054:	ed80 2a03 	vstr	s4, [r0, #12]
	VSTR S5, [R0, #16] // store k
 8020058:	edc0 2a04 	vstr	s5, [r0, #16]

	// check division by zero, overflow and underflow
	VMRS R1, FPSCR 	//Copy FPSCR to R1
 802005c:	eef1 1a10 	vmrs	r1, fpscr
	TST R1, #0x2 // test the DZC (Division by zero) bit
 8020060:	f011 0f02 	tst.w	r1, #2
	BNE ERROR // bracnh to error if division by zero has happened
 8020064:	d10b      	bne.n	802007e <ERROR>
	TST  R1, #0x4  	// test the OFC (overflow cumulative) bit in FPSCR
 8020066:	f011 0f04 	tst.w	r1, #4
	BNE ERROR 	// branch to error if overflow has happened
 802006a:	d108      	bne.n	802007e <ERROR>
	TST R1, #0x8 // test the UFC (undeflow cumulative) bit in FPSCR
 802006c:	f011 0f08 	tst.w	r1, #8
	BNE ERROR // branch to error if underflow has happened
 8020070:	d105      	bne.n	802007e <ERROR>

	// We can reduce the above instruction to:
	// This TST instruction checks if any of the flag bits are set to 1.
	TST R1, #14 // bin(0...01110) = dec(14)
 8020072:	f011 0f0e 	tst.w	r1, #14
	BNE ERROR
 8020076:	d102      	bne.n	802007e <ERROR>

	// These two instructions are reach iff no division by zero,
	// underflow or overflow occured.
	MOV R0, #0 // If the function returns 0 in the C code,
 8020078:	f04f 0000 	mov.w	r0, #0
			   // then no exception has occured.
	B EXIT
 802007c:	e001      	b.n	8020082 <EXIT>

0802007e <ERROR>:

	ERROR:
	MOV R0, #-1 // return -1. If the function returns -1 in the C code,
 802007e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

08020082 <EXIT>:
				// then an exception must have occured.

	EXIT:
	// retrieve local variables from stack used in subroutine
	VPOP {S1-S6} // floating-point pop
 8020082:	ecfd 0a06 	vpop	{s1-s6}
	POP {R1-R3,LR} // fixed-point pop
 8020086:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
	BX LR // exit subroutine
 802008a:	4770      	bx	lr
	LDR   R2, =0xE000ED88      	  // load CPACR
 802008c:	e000ed88 	.word	0xe000ed88

08020090 <memchr>:
 8020090:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020094:	2a10      	cmp	r2, #16
 8020096:	db2b      	blt.n	80200f0 <memchr+0x60>
 8020098:	f010 0f07 	tst.w	r0, #7
 802009c:	d008      	beq.n	80200b0 <memchr+0x20>
 802009e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200a2:	3a01      	subs	r2, #1
 80200a4:	428b      	cmp	r3, r1
 80200a6:	d02d      	beq.n	8020104 <memchr+0x74>
 80200a8:	f010 0f07 	tst.w	r0, #7
 80200ac:	b342      	cbz	r2, 8020100 <memchr+0x70>
 80200ae:	d1f6      	bne.n	802009e <memchr+0xe>
 80200b0:	b4f0      	push	{r4, r5, r6, r7}
 80200b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80200b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80200ba:	f022 0407 	bic.w	r4, r2, #7
 80200be:	f07f 0700 	mvns.w	r7, #0
 80200c2:	2300      	movs	r3, #0
 80200c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80200c8:	3c08      	subs	r4, #8
 80200ca:	ea85 0501 	eor.w	r5, r5, r1
 80200ce:	ea86 0601 	eor.w	r6, r6, r1
 80200d2:	fa85 f547 	uadd8	r5, r5, r7
 80200d6:	faa3 f587 	sel	r5, r3, r7
 80200da:	fa86 f647 	uadd8	r6, r6, r7
 80200de:	faa5 f687 	sel	r6, r5, r7
 80200e2:	b98e      	cbnz	r6, 8020108 <memchr+0x78>
 80200e4:	d1ee      	bne.n	80200c4 <memchr+0x34>
 80200e6:	bcf0      	pop	{r4, r5, r6, r7}
 80200e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80200ec:	f002 0207 	and.w	r2, r2, #7
 80200f0:	b132      	cbz	r2, 8020100 <memchr+0x70>
 80200f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200f6:	3a01      	subs	r2, #1
 80200f8:	ea83 0301 	eor.w	r3, r3, r1
 80200fc:	b113      	cbz	r3, 8020104 <memchr+0x74>
 80200fe:	d1f8      	bne.n	80200f2 <memchr+0x62>
 8020100:	2000      	movs	r0, #0
 8020102:	4770      	bx	lr
 8020104:	3801      	subs	r0, #1
 8020106:	4770      	bx	lr
 8020108:	2d00      	cmp	r5, #0
 802010a:	bf06      	itte	eq
 802010c:	4635      	moveq	r5, r6
 802010e:	3803      	subeq	r0, #3
 8020110:	3807      	subne	r0, #7
 8020112:	f015 0f01 	tst.w	r5, #1
 8020116:	d107      	bne.n	8020128 <memchr+0x98>
 8020118:	3001      	adds	r0, #1
 802011a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802011e:	bf02      	ittt	eq
 8020120:	3001      	addeq	r0, #1
 8020122:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020126:	3001      	addeq	r0, #1
 8020128:	bcf0      	pop	{r4, r5, r6, r7}
 802012a:	3801      	subs	r0, #1
 802012c:	4770      	bx	lr
 802012e:	bf00      	nop

08020130 <__aeabi_drsub>:
 8020130:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020134:	e002      	b.n	802013c <__adddf3>
 8020136:	bf00      	nop

08020138 <__aeabi_dsub>:
 8020138:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802013c <__adddf3>:
 802013c:	b530      	push	{r4, r5, lr}
 802013e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020142:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020146:	ea94 0f05 	teq	r4, r5
 802014a:	bf08      	it	eq
 802014c:	ea90 0f02 	teqeq	r0, r2
 8020150:	bf1f      	itttt	ne
 8020152:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020156:	ea55 0c02 	orrsne.w	ip, r5, r2
 802015a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802015e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020162:	f000 80e2 	beq.w	802032a <__adddf3+0x1ee>
 8020166:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802016a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802016e:	bfb8      	it	lt
 8020170:	426d      	neglt	r5, r5
 8020172:	dd0c      	ble.n	802018e <__adddf3+0x52>
 8020174:	442c      	add	r4, r5
 8020176:	ea80 0202 	eor.w	r2, r0, r2
 802017a:	ea81 0303 	eor.w	r3, r1, r3
 802017e:	ea82 0000 	eor.w	r0, r2, r0
 8020182:	ea83 0101 	eor.w	r1, r3, r1
 8020186:	ea80 0202 	eor.w	r2, r0, r2
 802018a:	ea81 0303 	eor.w	r3, r1, r3
 802018e:	2d36      	cmp	r5, #54	; 0x36
 8020190:	bf88      	it	hi
 8020192:	bd30      	pophi	{r4, r5, pc}
 8020194:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020198:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802019c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80201a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80201a4:	d002      	beq.n	80201ac <__adddf3+0x70>
 80201a6:	4240      	negs	r0, r0
 80201a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80201ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80201b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80201b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80201b8:	d002      	beq.n	80201c0 <__adddf3+0x84>
 80201ba:	4252      	negs	r2, r2
 80201bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80201c0:	ea94 0f05 	teq	r4, r5
 80201c4:	f000 80a7 	beq.w	8020316 <__adddf3+0x1da>
 80201c8:	f1a4 0401 	sub.w	r4, r4, #1
 80201cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80201d0:	db0d      	blt.n	80201ee <__adddf3+0xb2>
 80201d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80201d6:	fa22 f205 	lsr.w	r2, r2, r5
 80201da:	1880      	adds	r0, r0, r2
 80201dc:	f141 0100 	adc.w	r1, r1, #0
 80201e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80201e4:	1880      	adds	r0, r0, r2
 80201e6:	fa43 f305 	asr.w	r3, r3, r5
 80201ea:	4159      	adcs	r1, r3
 80201ec:	e00e      	b.n	802020c <__adddf3+0xd0>
 80201ee:	f1a5 0520 	sub.w	r5, r5, #32
 80201f2:	f10e 0e20 	add.w	lr, lr, #32
 80201f6:	2a01      	cmp	r2, #1
 80201f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80201fc:	bf28      	it	cs
 80201fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020202:	fa43 f305 	asr.w	r3, r3, r5
 8020206:	18c0      	adds	r0, r0, r3
 8020208:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802020c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020210:	d507      	bpl.n	8020222 <__adddf3+0xe6>
 8020212:	f04f 0e00 	mov.w	lr, #0
 8020216:	f1dc 0c00 	rsbs	ip, ip, #0
 802021a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802021e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020222:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020226:	d31b      	bcc.n	8020260 <__adddf3+0x124>
 8020228:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802022c:	d30c      	bcc.n	8020248 <__adddf3+0x10c>
 802022e:	0849      	lsrs	r1, r1, #1
 8020230:	ea5f 0030 	movs.w	r0, r0, rrx
 8020234:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020238:	f104 0401 	add.w	r4, r4, #1
 802023c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020240:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020244:	f080 809a 	bcs.w	802037c <__adddf3+0x240>
 8020248:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802024c:	bf08      	it	eq
 802024e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020252:	f150 0000 	adcs.w	r0, r0, #0
 8020256:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802025a:	ea41 0105 	orr.w	r1, r1, r5
 802025e:	bd30      	pop	{r4, r5, pc}
 8020260:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020264:	4140      	adcs	r0, r0
 8020266:	eb41 0101 	adc.w	r1, r1, r1
 802026a:	3c01      	subs	r4, #1
 802026c:	bf28      	it	cs
 802026e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8020272:	d2e9      	bcs.n	8020248 <__adddf3+0x10c>
 8020274:	f091 0f00 	teq	r1, #0
 8020278:	bf04      	itt	eq
 802027a:	4601      	moveq	r1, r0
 802027c:	2000      	moveq	r0, #0
 802027e:	fab1 f381 	clz	r3, r1
 8020282:	bf08      	it	eq
 8020284:	3320      	addeq	r3, #32
 8020286:	f1a3 030b 	sub.w	r3, r3, #11
 802028a:	f1b3 0220 	subs.w	r2, r3, #32
 802028e:	da0c      	bge.n	80202aa <__adddf3+0x16e>
 8020290:	320c      	adds	r2, #12
 8020292:	dd08      	ble.n	80202a6 <__adddf3+0x16a>
 8020294:	f102 0c14 	add.w	ip, r2, #20
 8020298:	f1c2 020c 	rsb	r2, r2, #12
 802029c:	fa01 f00c 	lsl.w	r0, r1, ip
 80202a0:	fa21 f102 	lsr.w	r1, r1, r2
 80202a4:	e00c      	b.n	80202c0 <__adddf3+0x184>
 80202a6:	f102 0214 	add.w	r2, r2, #20
 80202aa:	bfd8      	it	le
 80202ac:	f1c2 0c20 	rsble	ip, r2, #32
 80202b0:	fa01 f102 	lsl.w	r1, r1, r2
 80202b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80202b8:	bfdc      	itt	le
 80202ba:	ea41 010c 	orrle.w	r1, r1, ip
 80202be:	4090      	lslle	r0, r2
 80202c0:	1ae4      	subs	r4, r4, r3
 80202c2:	bfa2      	ittt	ge
 80202c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80202c8:	4329      	orrge	r1, r5
 80202ca:	bd30      	popge	{r4, r5, pc}
 80202cc:	ea6f 0404 	mvn.w	r4, r4
 80202d0:	3c1f      	subs	r4, #31
 80202d2:	da1c      	bge.n	802030e <__adddf3+0x1d2>
 80202d4:	340c      	adds	r4, #12
 80202d6:	dc0e      	bgt.n	80202f6 <__adddf3+0x1ba>
 80202d8:	f104 0414 	add.w	r4, r4, #20
 80202dc:	f1c4 0220 	rsb	r2, r4, #32
 80202e0:	fa20 f004 	lsr.w	r0, r0, r4
 80202e4:	fa01 f302 	lsl.w	r3, r1, r2
 80202e8:	ea40 0003 	orr.w	r0, r0, r3
 80202ec:	fa21 f304 	lsr.w	r3, r1, r4
 80202f0:	ea45 0103 	orr.w	r1, r5, r3
 80202f4:	bd30      	pop	{r4, r5, pc}
 80202f6:	f1c4 040c 	rsb	r4, r4, #12
 80202fa:	f1c4 0220 	rsb	r2, r4, #32
 80202fe:	fa20 f002 	lsr.w	r0, r0, r2
 8020302:	fa01 f304 	lsl.w	r3, r1, r4
 8020306:	ea40 0003 	orr.w	r0, r0, r3
 802030a:	4629      	mov	r1, r5
 802030c:	bd30      	pop	{r4, r5, pc}
 802030e:	fa21 f004 	lsr.w	r0, r1, r4
 8020312:	4629      	mov	r1, r5
 8020314:	bd30      	pop	{r4, r5, pc}
 8020316:	f094 0f00 	teq	r4, #0
 802031a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802031e:	bf06      	itte	eq
 8020320:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020324:	3401      	addeq	r4, #1
 8020326:	3d01      	subne	r5, #1
 8020328:	e74e      	b.n	80201c8 <__adddf3+0x8c>
 802032a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802032e:	bf18      	it	ne
 8020330:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020334:	d029      	beq.n	802038a <__adddf3+0x24e>
 8020336:	ea94 0f05 	teq	r4, r5
 802033a:	bf08      	it	eq
 802033c:	ea90 0f02 	teqeq	r0, r2
 8020340:	d005      	beq.n	802034e <__adddf3+0x212>
 8020342:	ea54 0c00 	orrs.w	ip, r4, r0
 8020346:	bf04      	itt	eq
 8020348:	4619      	moveq	r1, r3
 802034a:	4610      	moveq	r0, r2
 802034c:	bd30      	pop	{r4, r5, pc}
 802034e:	ea91 0f03 	teq	r1, r3
 8020352:	bf1e      	ittt	ne
 8020354:	2100      	movne	r1, #0
 8020356:	2000      	movne	r0, #0
 8020358:	bd30      	popne	{r4, r5, pc}
 802035a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802035e:	d105      	bne.n	802036c <__adddf3+0x230>
 8020360:	0040      	lsls	r0, r0, #1
 8020362:	4149      	adcs	r1, r1
 8020364:	bf28      	it	cs
 8020366:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802036a:	bd30      	pop	{r4, r5, pc}
 802036c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020370:	bf3c      	itt	cc
 8020372:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020376:	bd30      	popcc	{r4, r5, pc}
 8020378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802037c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020380:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020384:	f04f 0000 	mov.w	r0, #0
 8020388:	bd30      	pop	{r4, r5, pc}
 802038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802038e:	bf1a      	itte	ne
 8020390:	4619      	movne	r1, r3
 8020392:	4610      	movne	r0, r2
 8020394:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020398:	bf1c      	itt	ne
 802039a:	460b      	movne	r3, r1
 802039c:	4602      	movne	r2, r0
 802039e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80203a2:	bf06      	itte	eq
 80203a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80203a8:	ea91 0f03 	teqeq	r1, r3
 80203ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80203b0:	bd30      	pop	{r4, r5, pc}
 80203b2:	bf00      	nop

080203b4 <__aeabi_ui2d>:
 80203b4:	f090 0f00 	teq	r0, #0
 80203b8:	bf04      	itt	eq
 80203ba:	2100      	moveq	r1, #0
 80203bc:	4770      	bxeq	lr
 80203be:	b530      	push	{r4, r5, lr}
 80203c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80203c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80203c8:	f04f 0500 	mov.w	r5, #0
 80203cc:	f04f 0100 	mov.w	r1, #0
 80203d0:	e750      	b.n	8020274 <__adddf3+0x138>
 80203d2:	bf00      	nop

080203d4 <__aeabi_i2d>:
 80203d4:	f090 0f00 	teq	r0, #0
 80203d8:	bf04      	itt	eq
 80203da:	2100      	moveq	r1, #0
 80203dc:	4770      	bxeq	lr
 80203de:	b530      	push	{r4, r5, lr}
 80203e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80203e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80203e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80203ec:	bf48      	it	mi
 80203ee:	4240      	negmi	r0, r0
 80203f0:	f04f 0100 	mov.w	r1, #0
 80203f4:	e73e      	b.n	8020274 <__adddf3+0x138>
 80203f6:	bf00      	nop

080203f8 <__aeabi_f2d>:
 80203f8:	0042      	lsls	r2, r0, #1
 80203fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80203fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8020402:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020406:	bf1f      	itttt	ne
 8020408:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802040c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020410:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020414:	4770      	bxne	lr
 8020416:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802041a:	bf08      	it	eq
 802041c:	4770      	bxeq	lr
 802041e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020422:	bf04      	itt	eq
 8020424:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020428:	4770      	bxeq	lr
 802042a:	b530      	push	{r4, r5, lr}
 802042c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020434:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020438:	e71c      	b.n	8020274 <__adddf3+0x138>
 802043a:	bf00      	nop

0802043c <__aeabi_ul2d>:
 802043c:	ea50 0201 	orrs.w	r2, r0, r1
 8020440:	bf08      	it	eq
 8020442:	4770      	bxeq	lr
 8020444:	b530      	push	{r4, r5, lr}
 8020446:	f04f 0500 	mov.w	r5, #0
 802044a:	e00a      	b.n	8020462 <__aeabi_l2d+0x16>

0802044c <__aeabi_l2d>:
 802044c:	ea50 0201 	orrs.w	r2, r0, r1
 8020450:	bf08      	it	eq
 8020452:	4770      	bxeq	lr
 8020454:	b530      	push	{r4, r5, lr}
 8020456:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802045a:	d502      	bpl.n	8020462 <__aeabi_l2d+0x16>
 802045c:	4240      	negs	r0, r0
 802045e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020462:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020466:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802046a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802046e:	f43f aed8 	beq.w	8020222 <__adddf3+0xe6>
 8020472:	f04f 0203 	mov.w	r2, #3
 8020476:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802047a:	bf18      	it	ne
 802047c:	3203      	addne	r2, #3
 802047e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020482:	bf18      	it	ne
 8020484:	3203      	addne	r2, #3
 8020486:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802048a:	f1c2 0320 	rsb	r3, r2, #32
 802048e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020492:	fa20 f002 	lsr.w	r0, r0, r2
 8020496:	fa01 fe03 	lsl.w	lr, r1, r3
 802049a:	ea40 000e 	orr.w	r0, r0, lr
 802049e:	fa21 f102 	lsr.w	r1, r1, r2
 80204a2:	4414      	add	r4, r2
 80204a4:	e6bd      	b.n	8020222 <__adddf3+0xe6>
 80204a6:	bf00      	nop

080204a8 <__aeabi_dmul>:
 80204a8:	b570      	push	{r4, r5, r6, lr}
 80204aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80204ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80204b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80204b6:	bf1d      	ittte	ne
 80204b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80204bc:	ea94 0f0c 	teqne	r4, ip
 80204c0:	ea95 0f0c 	teqne	r5, ip
 80204c4:	f000 f8de 	bleq	8020684 <__aeabi_dmul+0x1dc>
 80204c8:	442c      	add	r4, r5
 80204ca:	ea81 0603 	eor.w	r6, r1, r3
 80204ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80204d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80204d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80204da:	bf18      	it	ne
 80204dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80204e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80204e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80204e8:	d038      	beq.n	802055c <__aeabi_dmul+0xb4>
 80204ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80204ee:	f04f 0500 	mov.w	r5, #0
 80204f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80204f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80204fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80204fe:	f04f 0600 	mov.w	r6, #0
 8020502:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020506:	f09c 0f00 	teq	ip, #0
 802050a:	bf18      	it	ne
 802050c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020510:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020514:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020518:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802051c:	d204      	bcs.n	8020528 <__aeabi_dmul+0x80>
 802051e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020522:	416d      	adcs	r5, r5
 8020524:	eb46 0606 	adc.w	r6, r6, r6
 8020528:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802052c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020530:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020534:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020538:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802053c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020540:	bf88      	it	hi
 8020542:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020546:	d81e      	bhi.n	8020586 <__aeabi_dmul+0xde>
 8020548:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802054c:	bf08      	it	eq
 802054e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020552:	f150 0000 	adcs.w	r0, r0, #0
 8020556:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802055a:	bd70      	pop	{r4, r5, r6, pc}
 802055c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020560:	ea46 0101 	orr.w	r1, r6, r1
 8020564:	ea40 0002 	orr.w	r0, r0, r2
 8020568:	ea81 0103 	eor.w	r1, r1, r3
 802056c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020570:	bfc2      	ittt	gt
 8020572:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020576:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802057a:	bd70      	popgt	{r4, r5, r6, pc}
 802057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020580:	f04f 0e00 	mov.w	lr, #0
 8020584:	3c01      	subs	r4, #1
 8020586:	f300 80ab 	bgt.w	80206e0 <__aeabi_dmul+0x238>
 802058a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802058e:	bfde      	ittt	le
 8020590:	2000      	movle	r0, #0
 8020592:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8020596:	bd70      	pople	{r4, r5, r6, pc}
 8020598:	f1c4 0400 	rsb	r4, r4, #0
 802059c:	3c20      	subs	r4, #32
 802059e:	da35      	bge.n	802060c <__aeabi_dmul+0x164>
 80205a0:	340c      	adds	r4, #12
 80205a2:	dc1b      	bgt.n	80205dc <__aeabi_dmul+0x134>
 80205a4:	f104 0414 	add.w	r4, r4, #20
 80205a8:	f1c4 0520 	rsb	r5, r4, #32
 80205ac:	fa00 f305 	lsl.w	r3, r0, r5
 80205b0:	fa20 f004 	lsr.w	r0, r0, r4
 80205b4:	fa01 f205 	lsl.w	r2, r1, r5
 80205b8:	ea40 0002 	orr.w	r0, r0, r2
 80205bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80205c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80205c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80205c8:	fa21 f604 	lsr.w	r6, r1, r4
 80205cc:	eb42 0106 	adc.w	r1, r2, r6
 80205d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80205d4:	bf08      	it	eq
 80205d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80205da:	bd70      	pop	{r4, r5, r6, pc}
 80205dc:	f1c4 040c 	rsb	r4, r4, #12
 80205e0:	f1c4 0520 	rsb	r5, r4, #32
 80205e4:	fa00 f304 	lsl.w	r3, r0, r4
 80205e8:	fa20 f005 	lsr.w	r0, r0, r5
 80205ec:	fa01 f204 	lsl.w	r2, r1, r4
 80205f0:	ea40 0002 	orr.w	r0, r0, r2
 80205f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80205fc:	f141 0100 	adc.w	r1, r1, #0
 8020600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020604:	bf08      	it	eq
 8020606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802060a:	bd70      	pop	{r4, r5, r6, pc}
 802060c:	f1c4 0520 	rsb	r5, r4, #32
 8020610:	fa00 f205 	lsl.w	r2, r0, r5
 8020614:	ea4e 0e02 	orr.w	lr, lr, r2
 8020618:	fa20 f304 	lsr.w	r3, r0, r4
 802061c:	fa01 f205 	lsl.w	r2, r1, r5
 8020620:	ea43 0302 	orr.w	r3, r3, r2
 8020624:	fa21 f004 	lsr.w	r0, r1, r4
 8020628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802062c:	fa21 f204 	lsr.w	r2, r1, r4
 8020630:	ea20 0002 	bic.w	r0, r0, r2
 8020634:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802063c:	bf08      	it	eq
 802063e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020642:	bd70      	pop	{r4, r5, r6, pc}
 8020644:	f094 0f00 	teq	r4, #0
 8020648:	d10f      	bne.n	802066a <__aeabi_dmul+0x1c2>
 802064a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802064e:	0040      	lsls	r0, r0, #1
 8020650:	eb41 0101 	adc.w	r1, r1, r1
 8020654:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020658:	bf08      	it	eq
 802065a:	3c01      	subeq	r4, #1
 802065c:	d0f7      	beq.n	802064e <__aeabi_dmul+0x1a6>
 802065e:	ea41 0106 	orr.w	r1, r1, r6
 8020662:	f095 0f00 	teq	r5, #0
 8020666:	bf18      	it	ne
 8020668:	4770      	bxne	lr
 802066a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802066e:	0052      	lsls	r2, r2, #1
 8020670:	eb43 0303 	adc.w	r3, r3, r3
 8020674:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020678:	bf08      	it	eq
 802067a:	3d01      	subeq	r5, #1
 802067c:	d0f7      	beq.n	802066e <__aeabi_dmul+0x1c6>
 802067e:	ea43 0306 	orr.w	r3, r3, r6
 8020682:	4770      	bx	lr
 8020684:	ea94 0f0c 	teq	r4, ip
 8020688:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802068c:	bf18      	it	ne
 802068e:	ea95 0f0c 	teqne	r5, ip
 8020692:	d00c      	beq.n	80206ae <__aeabi_dmul+0x206>
 8020694:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020698:	bf18      	it	ne
 802069a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802069e:	d1d1      	bne.n	8020644 <__aeabi_dmul+0x19c>
 80206a0:	ea81 0103 	eor.w	r1, r1, r3
 80206a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80206a8:	f04f 0000 	mov.w	r0, #0
 80206ac:	bd70      	pop	{r4, r5, r6, pc}
 80206ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80206b2:	bf06      	itte	eq
 80206b4:	4610      	moveq	r0, r2
 80206b6:	4619      	moveq	r1, r3
 80206b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80206bc:	d019      	beq.n	80206f2 <__aeabi_dmul+0x24a>
 80206be:	ea94 0f0c 	teq	r4, ip
 80206c2:	d102      	bne.n	80206ca <__aeabi_dmul+0x222>
 80206c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80206c8:	d113      	bne.n	80206f2 <__aeabi_dmul+0x24a>
 80206ca:	ea95 0f0c 	teq	r5, ip
 80206ce:	d105      	bne.n	80206dc <__aeabi_dmul+0x234>
 80206d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80206d4:	bf1c      	itt	ne
 80206d6:	4610      	movne	r0, r2
 80206d8:	4619      	movne	r1, r3
 80206da:	d10a      	bne.n	80206f2 <__aeabi_dmul+0x24a>
 80206dc:	ea81 0103 	eor.w	r1, r1, r3
 80206e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80206e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80206e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80206ec:	f04f 0000 	mov.w	r0, #0
 80206f0:	bd70      	pop	{r4, r5, r6, pc}
 80206f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80206f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80206fa:	bd70      	pop	{r4, r5, r6, pc}

080206fc <__aeabi_ddiv>:
 80206fc:	b570      	push	{r4, r5, r6, lr}
 80206fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020702:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020706:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802070a:	bf1d      	ittte	ne
 802070c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020710:	ea94 0f0c 	teqne	r4, ip
 8020714:	ea95 0f0c 	teqne	r5, ip
 8020718:	f000 f8a7 	bleq	802086a <__aeabi_ddiv+0x16e>
 802071c:	eba4 0405 	sub.w	r4, r4, r5
 8020720:	ea81 0e03 	eor.w	lr, r1, r3
 8020724:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020728:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802072c:	f000 8088 	beq.w	8020840 <__aeabi_ddiv+0x144>
 8020730:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020734:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020738:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802073c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020740:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020744:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020748:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802074c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020750:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020754:	429d      	cmp	r5, r3
 8020756:	bf08      	it	eq
 8020758:	4296      	cmpeq	r6, r2
 802075a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802075e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020762:	d202      	bcs.n	802076a <__aeabi_ddiv+0x6e>
 8020764:	085b      	lsrs	r3, r3, #1
 8020766:	ea4f 0232 	mov.w	r2, r2, rrx
 802076a:	1ab6      	subs	r6, r6, r2
 802076c:	eb65 0503 	sbc.w	r5, r5, r3
 8020770:	085b      	lsrs	r3, r3, #1
 8020772:	ea4f 0232 	mov.w	r2, r2, rrx
 8020776:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802077a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802077e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020782:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020786:	bf22      	ittt	cs
 8020788:	1ab6      	subcs	r6, r6, r2
 802078a:	4675      	movcs	r5, lr
 802078c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020790:	085b      	lsrs	r3, r3, #1
 8020792:	ea4f 0232 	mov.w	r2, r2, rrx
 8020796:	ebb6 0e02 	subs.w	lr, r6, r2
 802079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802079e:	bf22      	ittt	cs
 80207a0:	1ab6      	subcs	r6, r6, r2
 80207a2:	4675      	movcs	r5, lr
 80207a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80207a8:	085b      	lsrs	r3, r3, #1
 80207aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80207ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80207b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207b6:	bf22      	ittt	cs
 80207b8:	1ab6      	subcs	r6, r6, r2
 80207ba:	4675      	movcs	r5, lr
 80207bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80207c0:	085b      	lsrs	r3, r3, #1
 80207c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80207c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80207ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207ce:	bf22      	ittt	cs
 80207d0:	1ab6      	subcs	r6, r6, r2
 80207d2:	4675      	movcs	r5, lr
 80207d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80207d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80207dc:	d018      	beq.n	8020810 <__aeabi_ddiv+0x114>
 80207de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80207e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80207e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80207ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80207ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80207f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80207f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80207fa:	d1c0      	bne.n	802077e <__aeabi_ddiv+0x82>
 80207fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020800:	d10b      	bne.n	802081a <__aeabi_ddiv+0x11e>
 8020802:	ea41 0100 	orr.w	r1, r1, r0
 8020806:	f04f 0000 	mov.w	r0, #0
 802080a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802080e:	e7b6      	b.n	802077e <__aeabi_ddiv+0x82>
 8020810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020814:	bf04      	itt	eq
 8020816:	4301      	orreq	r1, r0
 8020818:	2000      	moveq	r0, #0
 802081a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802081e:	bf88      	it	hi
 8020820:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020824:	f63f aeaf 	bhi.w	8020586 <__aeabi_dmul+0xde>
 8020828:	ebb5 0c03 	subs.w	ip, r5, r3
 802082c:	bf04      	itt	eq
 802082e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020832:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020836:	f150 0000 	adcs.w	r0, r0, #0
 802083a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802083e:	bd70      	pop	{r4, r5, r6, pc}
 8020840:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020844:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020848:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802084c:	bfc2      	ittt	gt
 802084e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020852:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020856:	bd70      	popgt	{r4, r5, r6, pc}
 8020858:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802085c:	f04f 0e00 	mov.w	lr, #0
 8020860:	3c01      	subs	r4, #1
 8020862:	e690      	b.n	8020586 <__aeabi_dmul+0xde>
 8020864:	ea45 0e06 	orr.w	lr, r5, r6
 8020868:	e68d      	b.n	8020586 <__aeabi_dmul+0xde>
 802086a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802086e:	ea94 0f0c 	teq	r4, ip
 8020872:	bf08      	it	eq
 8020874:	ea95 0f0c 	teqeq	r5, ip
 8020878:	f43f af3b 	beq.w	80206f2 <__aeabi_dmul+0x24a>
 802087c:	ea94 0f0c 	teq	r4, ip
 8020880:	d10a      	bne.n	8020898 <__aeabi_ddiv+0x19c>
 8020882:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020886:	f47f af34 	bne.w	80206f2 <__aeabi_dmul+0x24a>
 802088a:	ea95 0f0c 	teq	r5, ip
 802088e:	f47f af25 	bne.w	80206dc <__aeabi_dmul+0x234>
 8020892:	4610      	mov	r0, r2
 8020894:	4619      	mov	r1, r3
 8020896:	e72c      	b.n	80206f2 <__aeabi_dmul+0x24a>
 8020898:	ea95 0f0c 	teq	r5, ip
 802089c:	d106      	bne.n	80208ac <__aeabi_ddiv+0x1b0>
 802089e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208a2:	f43f aefd 	beq.w	80206a0 <__aeabi_dmul+0x1f8>
 80208a6:	4610      	mov	r0, r2
 80208a8:	4619      	mov	r1, r3
 80208aa:	e722      	b.n	80206f2 <__aeabi_dmul+0x24a>
 80208ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80208b0:	bf18      	it	ne
 80208b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80208b6:	f47f aec5 	bne.w	8020644 <__aeabi_dmul+0x19c>
 80208ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80208be:	f47f af0d 	bne.w	80206dc <__aeabi_dmul+0x234>
 80208c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80208c6:	f47f aeeb 	bne.w	80206a0 <__aeabi_dmul+0x1f8>
 80208ca:	e712      	b.n	80206f2 <__aeabi_dmul+0x24a>

080208cc <__gedf2>:
 80208cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80208d0:	e006      	b.n	80208e0 <__cmpdf2+0x4>
 80208d2:	bf00      	nop

080208d4 <__ledf2>:
 80208d4:	f04f 0c01 	mov.w	ip, #1
 80208d8:	e002      	b.n	80208e0 <__cmpdf2+0x4>
 80208da:	bf00      	nop

080208dc <__cmpdf2>:
 80208dc:	f04f 0c01 	mov.w	ip, #1
 80208e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80208e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80208e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80208ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80208f0:	bf18      	it	ne
 80208f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80208f6:	d01b      	beq.n	8020930 <__cmpdf2+0x54>
 80208f8:	b001      	add	sp, #4
 80208fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80208fe:	bf0c      	ite	eq
 8020900:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020904:	ea91 0f03 	teqne	r1, r3
 8020908:	bf02      	ittt	eq
 802090a:	ea90 0f02 	teqeq	r0, r2
 802090e:	2000      	moveq	r0, #0
 8020910:	4770      	bxeq	lr
 8020912:	f110 0f00 	cmn.w	r0, #0
 8020916:	ea91 0f03 	teq	r1, r3
 802091a:	bf58      	it	pl
 802091c:	4299      	cmppl	r1, r3
 802091e:	bf08      	it	eq
 8020920:	4290      	cmpeq	r0, r2
 8020922:	bf2c      	ite	cs
 8020924:	17d8      	asrcs	r0, r3, #31
 8020926:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802092a:	f040 0001 	orr.w	r0, r0, #1
 802092e:	4770      	bx	lr
 8020930:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020938:	d102      	bne.n	8020940 <__cmpdf2+0x64>
 802093a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802093e:	d107      	bne.n	8020950 <__cmpdf2+0x74>
 8020940:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020948:	d1d6      	bne.n	80208f8 <__cmpdf2+0x1c>
 802094a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802094e:	d0d3      	beq.n	80208f8 <__cmpdf2+0x1c>
 8020950:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020954:	4770      	bx	lr
 8020956:	bf00      	nop

08020958 <__aeabi_cdrcmple>:
 8020958:	4684      	mov	ip, r0
 802095a:	4610      	mov	r0, r2
 802095c:	4662      	mov	r2, ip
 802095e:	468c      	mov	ip, r1
 8020960:	4619      	mov	r1, r3
 8020962:	4663      	mov	r3, ip
 8020964:	e000      	b.n	8020968 <__aeabi_cdcmpeq>
 8020966:	bf00      	nop

08020968 <__aeabi_cdcmpeq>:
 8020968:	b501      	push	{r0, lr}
 802096a:	f7ff ffb7 	bl	80208dc <__cmpdf2>
 802096e:	2800      	cmp	r0, #0
 8020970:	bf48      	it	mi
 8020972:	f110 0f00 	cmnmi.w	r0, #0
 8020976:	bd01      	pop	{r0, pc}

08020978 <__aeabi_dcmpeq>:
 8020978:	f84d ed08 	str.w	lr, [sp, #-8]!
 802097c:	f7ff fff4 	bl	8020968 <__aeabi_cdcmpeq>
 8020980:	bf0c      	ite	eq
 8020982:	2001      	moveq	r0, #1
 8020984:	2000      	movne	r0, #0
 8020986:	f85d fb08 	ldr.w	pc, [sp], #8
 802098a:	bf00      	nop

0802098c <__aeabi_dcmplt>:
 802098c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020990:	f7ff ffea 	bl	8020968 <__aeabi_cdcmpeq>
 8020994:	bf34      	ite	cc
 8020996:	2001      	movcc	r0, #1
 8020998:	2000      	movcs	r0, #0
 802099a:	f85d fb08 	ldr.w	pc, [sp], #8
 802099e:	bf00      	nop

080209a0 <__aeabi_dcmple>:
 80209a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209a4:	f7ff ffe0 	bl	8020968 <__aeabi_cdcmpeq>
 80209a8:	bf94      	ite	ls
 80209aa:	2001      	movls	r0, #1
 80209ac:	2000      	movhi	r0, #0
 80209ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80209b2:	bf00      	nop

080209b4 <__aeabi_dcmpge>:
 80209b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209b8:	f7ff ffce 	bl	8020958 <__aeabi_cdrcmple>
 80209bc:	bf94      	ite	ls
 80209be:	2001      	movls	r0, #1
 80209c0:	2000      	movhi	r0, #0
 80209c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80209c6:	bf00      	nop

080209c8 <__aeabi_dcmpgt>:
 80209c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209cc:	f7ff ffc4 	bl	8020958 <__aeabi_cdrcmple>
 80209d0:	bf34      	ite	cc
 80209d2:	2001      	movcc	r0, #1
 80209d4:	2000      	movcs	r0, #0
 80209d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80209da:	bf00      	nop

080209dc <__aeabi_dcmpun>:
 80209dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80209e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80209e4:	d102      	bne.n	80209ec <__aeabi_dcmpun+0x10>
 80209e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80209ea:	d10a      	bne.n	8020a02 <__aeabi_dcmpun+0x26>
 80209ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80209f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80209f4:	d102      	bne.n	80209fc <__aeabi_dcmpun+0x20>
 80209f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80209fa:	d102      	bne.n	8020a02 <__aeabi_dcmpun+0x26>
 80209fc:	f04f 0000 	mov.w	r0, #0
 8020a00:	4770      	bx	lr
 8020a02:	f04f 0001 	mov.w	r0, #1
 8020a06:	4770      	bx	lr

08020a08 <__aeabi_d2f>:
 8020a08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020a0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020a10:	bf24      	itt	cs
 8020a12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020a16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020a1a:	d90d      	bls.n	8020a38 <__aeabi_d2f+0x30>
 8020a1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020a20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020a24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020a28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020a2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020a30:	bf08      	it	eq
 8020a32:	f020 0001 	biceq.w	r0, r0, #1
 8020a36:	4770      	bx	lr
 8020a38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020a3c:	d121      	bne.n	8020a82 <__aeabi_d2f+0x7a>
 8020a3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020a42:	bfbc      	itt	lt
 8020a44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020a48:	4770      	bxlt	lr
 8020a4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020a4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020a52:	f1c2 0218 	rsb	r2, r2, #24
 8020a56:	f1c2 0c20 	rsb	ip, r2, #32
 8020a5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020a5e:	fa20 f002 	lsr.w	r0, r0, r2
 8020a62:	bf18      	it	ne
 8020a64:	f040 0001 	orrne.w	r0, r0, #1
 8020a68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020a6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020a70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020a74:	ea40 000c 	orr.w	r0, r0, ip
 8020a78:	fa23 f302 	lsr.w	r3, r3, r2
 8020a7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020a80:	e7cc      	b.n	8020a1c <__aeabi_d2f+0x14>
 8020a82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020a86:	d107      	bne.n	8020a98 <__aeabi_d2f+0x90>
 8020a88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020a8c:	bf1e      	ittt	ne
 8020a8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020a92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020a96:	4770      	bxne	lr
 8020a98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020a9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020aa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020aa4:	4770      	bx	lr
 8020aa6:	bf00      	nop

08020aa8 <__aeabi_uldivmod>:
 8020aa8:	b953      	cbnz	r3, 8020ac0 <__aeabi_uldivmod+0x18>
 8020aaa:	b94a      	cbnz	r2, 8020ac0 <__aeabi_uldivmod+0x18>
 8020aac:	2900      	cmp	r1, #0
 8020aae:	bf08      	it	eq
 8020ab0:	2800      	cmpeq	r0, #0
 8020ab2:	bf1c      	itt	ne
 8020ab4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020ab8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020abc:	f000 b974 	b.w	8020da8 <__aeabi_idiv0>
 8020ac0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020ac4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020ac8:	f000 f806 	bl	8020ad8 <__udivmoddi4>
 8020acc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020ad4:	b004      	add	sp, #16
 8020ad6:	4770      	bx	lr

08020ad8 <__udivmoddi4>:
 8020ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020adc:	9d08      	ldr	r5, [sp, #32]
 8020ade:	4604      	mov	r4, r0
 8020ae0:	468e      	mov	lr, r1
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	d14d      	bne.n	8020b82 <__udivmoddi4+0xaa>
 8020ae6:	428a      	cmp	r2, r1
 8020ae8:	4694      	mov	ip, r2
 8020aea:	d969      	bls.n	8020bc0 <__udivmoddi4+0xe8>
 8020aec:	fab2 f282 	clz	r2, r2
 8020af0:	b152      	cbz	r2, 8020b08 <__udivmoddi4+0x30>
 8020af2:	fa01 f302 	lsl.w	r3, r1, r2
 8020af6:	f1c2 0120 	rsb	r1, r2, #32
 8020afa:	fa20 f101 	lsr.w	r1, r0, r1
 8020afe:	fa0c fc02 	lsl.w	ip, ip, r2
 8020b02:	ea41 0e03 	orr.w	lr, r1, r3
 8020b06:	4094      	lsls	r4, r2
 8020b08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020b0c:	0c21      	lsrs	r1, r4, #16
 8020b0e:	fbbe f6f8 	udiv	r6, lr, r8
 8020b12:	fa1f f78c 	uxth.w	r7, ip
 8020b16:	fb08 e316 	mls	r3, r8, r6, lr
 8020b1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020b1e:	fb06 f107 	mul.w	r1, r6, r7
 8020b22:	4299      	cmp	r1, r3
 8020b24:	d90a      	bls.n	8020b3c <__udivmoddi4+0x64>
 8020b26:	eb1c 0303 	adds.w	r3, ip, r3
 8020b2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020b2e:	f080 811f 	bcs.w	8020d70 <__udivmoddi4+0x298>
 8020b32:	4299      	cmp	r1, r3
 8020b34:	f240 811c 	bls.w	8020d70 <__udivmoddi4+0x298>
 8020b38:	3e02      	subs	r6, #2
 8020b3a:	4463      	add	r3, ip
 8020b3c:	1a5b      	subs	r3, r3, r1
 8020b3e:	b2a4      	uxth	r4, r4
 8020b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8020b44:	fb08 3310 	mls	r3, r8, r0, r3
 8020b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020b4c:	fb00 f707 	mul.w	r7, r0, r7
 8020b50:	42a7      	cmp	r7, r4
 8020b52:	d90a      	bls.n	8020b6a <__udivmoddi4+0x92>
 8020b54:	eb1c 0404 	adds.w	r4, ip, r4
 8020b58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020b5c:	f080 810a 	bcs.w	8020d74 <__udivmoddi4+0x29c>
 8020b60:	42a7      	cmp	r7, r4
 8020b62:	f240 8107 	bls.w	8020d74 <__udivmoddi4+0x29c>
 8020b66:	4464      	add	r4, ip
 8020b68:	3802      	subs	r0, #2
 8020b6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020b6e:	1be4      	subs	r4, r4, r7
 8020b70:	2600      	movs	r6, #0
 8020b72:	b11d      	cbz	r5, 8020b7c <__udivmoddi4+0xa4>
 8020b74:	40d4      	lsrs	r4, r2
 8020b76:	2300      	movs	r3, #0
 8020b78:	e9c5 4300 	strd	r4, r3, [r5]
 8020b7c:	4631      	mov	r1, r6
 8020b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b82:	428b      	cmp	r3, r1
 8020b84:	d909      	bls.n	8020b9a <__udivmoddi4+0xc2>
 8020b86:	2d00      	cmp	r5, #0
 8020b88:	f000 80ef 	beq.w	8020d6a <__udivmoddi4+0x292>
 8020b8c:	2600      	movs	r6, #0
 8020b8e:	e9c5 0100 	strd	r0, r1, [r5]
 8020b92:	4630      	mov	r0, r6
 8020b94:	4631      	mov	r1, r6
 8020b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b9a:	fab3 f683 	clz	r6, r3
 8020b9e:	2e00      	cmp	r6, #0
 8020ba0:	d14a      	bne.n	8020c38 <__udivmoddi4+0x160>
 8020ba2:	428b      	cmp	r3, r1
 8020ba4:	d302      	bcc.n	8020bac <__udivmoddi4+0xd4>
 8020ba6:	4282      	cmp	r2, r0
 8020ba8:	f200 80f9 	bhi.w	8020d9e <__udivmoddi4+0x2c6>
 8020bac:	1a84      	subs	r4, r0, r2
 8020bae:	eb61 0303 	sbc.w	r3, r1, r3
 8020bb2:	2001      	movs	r0, #1
 8020bb4:	469e      	mov	lr, r3
 8020bb6:	2d00      	cmp	r5, #0
 8020bb8:	d0e0      	beq.n	8020b7c <__udivmoddi4+0xa4>
 8020bba:	e9c5 4e00 	strd	r4, lr, [r5]
 8020bbe:	e7dd      	b.n	8020b7c <__udivmoddi4+0xa4>
 8020bc0:	b902      	cbnz	r2, 8020bc4 <__udivmoddi4+0xec>
 8020bc2:	deff      	udf	#255	; 0xff
 8020bc4:	fab2 f282 	clz	r2, r2
 8020bc8:	2a00      	cmp	r2, #0
 8020bca:	f040 8092 	bne.w	8020cf2 <__udivmoddi4+0x21a>
 8020bce:	eba1 010c 	sub.w	r1, r1, ip
 8020bd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020bd6:	fa1f fe8c 	uxth.w	lr, ip
 8020bda:	2601      	movs	r6, #1
 8020bdc:	0c20      	lsrs	r0, r4, #16
 8020bde:	fbb1 f3f7 	udiv	r3, r1, r7
 8020be2:	fb07 1113 	mls	r1, r7, r3, r1
 8020be6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020bea:	fb0e f003 	mul.w	r0, lr, r3
 8020bee:	4288      	cmp	r0, r1
 8020bf0:	d908      	bls.n	8020c04 <__udivmoddi4+0x12c>
 8020bf2:	eb1c 0101 	adds.w	r1, ip, r1
 8020bf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8020bfa:	d202      	bcs.n	8020c02 <__udivmoddi4+0x12a>
 8020bfc:	4288      	cmp	r0, r1
 8020bfe:	f200 80cb 	bhi.w	8020d98 <__udivmoddi4+0x2c0>
 8020c02:	4643      	mov	r3, r8
 8020c04:	1a09      	subs	r1, r1, r0
 8020c06:	b2a4      	uxth	r4, r4
 8020c08:	fbb1 f0f7 	udiv	r0, r1, r7
 8020c0c:	fb07 1110 	mls	r1, r7, r0, r1
 8020c10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8020c14:	fb0e fe00 	mul.w	lr, lr, r0
 8020c18:	45a6      	cmp	lr, r4
 8020c1a:	d908      	bls.n	8020c2e <__udivmoddi4+0x156>
 8020c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8020c20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8020c24:	d202      	bcs.n	8020c2c <__udivmoddi4+0x154>
 8020c26:	45a6      	cmp	lr, r4
 8020c28:	f200 80bb 	bhi.w	8020da2 <__udivmoddi4+0x2ca>
 8020c2c:	4608      	mov	r0, r1
 8020c2e:	eba4 040e 	sub.w	r4, r4, lr
 8020c32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8020c36:	e79c      	b.n	8020b72 <__udivmoddi4+0x9a>
 8020c38:	f1c6 0720 	rsb	r7, r6, #32
 8020c3c:	40b3      	lsls	r3, r6
 8020c3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8020c42:	ea4c 0c03 	orr.w	ip, ip, r3
 8020c46:	fa20 f407 	lsr.w	r4, r0, r7
 8020c4a:	fa01 f306 	lsl.w	r3, r1, r6
 8020c4e:	431c      	orrs	r4, r3
 8020c50:	40f9      	lsrs	r1, r7
 8020c52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8020c56:	fa00 f306 	lsl.w	r3, r0, r6
 8020c5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8020c5e:	0c20      	lsrs	r0, r4, #16
 8020c60:	fa1f fe8c 	uxth.w	lr, ip
 8020c64:	fb09 1118 	mls	r1, r9, r8, r1
 8020c68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020c6c:	fb08 f00e 	mul.w	r0, r8, lr
 8020c70:	4288      	cmp	r0, r1
 8020c72:	fa02 f206 	lsl.w	r2, r2, r6
 8020c76:	d90b      	bls.n	8020c90 <__udivmoddi4+0x1b8>
 8020c78:	eb1c 0101 	adds.w	r1, ip, r1
 8020c7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020c80:	f080 8088 	bcs.w	8020d94 <__udivmoddi4+0x2bc>
 8020c84:	4288      	cmp	r0, r1
 8020c86:	f240 8085 	bls.w	8020d94 <__udivmoddi4+0x2bc>
 8020c8a:	f1a8 0802 	sub.w	r8, r8, #2
 8020c8e:	4461      	add	r1, ip
 8020c90:	1a09      	subs	r1, r1, r0
 8020c92:	b2a4      	uxth	r4, r4
 8020c94:	fbb1 f0f9 	udiv	r0, r1, r9
 8020c98:	fb09 1110 	mls	r1, r9, r0, r1
 8020c9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020ca0:	fb00 fe0e 	mul.w	lr, r0, lr
 8020ca4:	458e      	cmp	lr, r1
 8020ca6:	d908      	bls.n	8020cba <__udivmoddi4+0x1e2>
 8020ca8:	eb1c 0101 	adds.w	r1, ip, r1
 8020cac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020cb0:	d26c      	bcs.n	8020d8c <__udivmoddi4+0x2b4>
 8020cb2:	458e      	cmp	lr, r1
 8020cb4:	d96a      	bls.n	8020d8c <__udivmoddi4+0x2b4>
 8020cb6:	3802      	subs	r0, #2
 8020cb8:	4461      	add	r1, ip
 8020cba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020cbe:	fba0 9402 	umull	r9, r4, r0, r2
 8020cc2:	eba1 010e 	sub.w	r1, r1, lr
 8020cc6:	42a1      	cmp	r1, r4
 8020cc8:	46c8      	mov	r8, r9
 8020cca:	46a6      	mov	lr, r4
 8020ccc:	d356      	bcc.n	8020d7c <__udivmoddi4+0x2a4>
 8020cce:	d053      	beq.n	8020d78 <__udivmoddi4+0x2a0>
 8020cd0:	b15d      	cbz	r5, 8020cea <__udivmoddi4+0x212>
 8020cd2:	ebb3 0208 	subs.w	r2, r3, r8
 8020cd6:	eb61 010e 	sbc.w	r1, r1, lr
 8020cda:	fa01 f707 	lsl.w	r7, r1, r7
 8020cde:	fa22 f306 	lsr.w	r3, r2, r6
 8020ce2:	40f1      	lsrs	r1, r6
 8020ce4:	431f      	orrs	r7, r3
 8020ce6:	e9c5 7100 	strd	r7, r1, [r5]
 8020cea:	2600      	movs	r6, #0
 8020cec:	4631      	mov	r1, r6
 8020cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cf2:	f1c2 0320 	rsb	r3, r2, #32
 8020cf6:	40d8      	lsrs	r0, r3
 8020cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8020cfc:	fa21 f303 	lsr.w	r3, r1, r3
 8020d00:	4091      	lsls	r1, r2
 8020d02:	4301      	orrs	r1, r0
 8020d04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020d08:	fa1f fe8c 	uxth.w	lr, ip
 8020d0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8020d10:	fb07 3610 	mls	r6, r7, r0, r3
 8020d14:	0c0b      	lsrs	r3, r1, #16
 8020d16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020d1a:	fb00 f60e 	mul.w	r6, r0, lr
 8020d1e:	429e      	cmp	r6, r3
 8020d20:	fa04 f402 	lsl.w	r4, r4, r2
 8020d24:	d908      	bls.n	8020d38 <__udivmoddi4+0x260>
 8020d26:	eb1c 0303 	adds.w	r3, ip, r3
 8020d2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020d2e:	d22f      	bcs.n	8020d90 <__udivmoddi4+0x2b8>
 8020d30:	429e      	cmp	r6, r3
 8020d32:	d92d      	bls.n	8020d90 <__udivmoddi4+0x2b8>
 8020d34:	3802      	subs	r0, #2
 8020d36:	4463      	add	r3, ip
 8020d38:	1b9b      	subs	r3, r3, r6
 8020d3a:	b289      	uxth	r1, r1
 8020d3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8020d40:	fb07 3316 	mls	r3, r7, r6, r3
 8020d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020d48:	fb06 f30e 	mul.w	r3, r6, lr
 8020d4c:	428b      	cmp	r3, r1
 8020d4e:	d908      	bls.n	8020d62 <__udivmoddi4+0x28a>
 8020d50:	eb1c 0101 	adds.w	r1, ip, r1
 8020d54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020d58:	d216      	bcs.n	8020d88 <__udivmoddi4+0x2b0>
 8020d5a:	428b      	cmp	r3, r1
 8020d5c:	d914      	bls.n	8020d88 <__udivmoddi4+0x2b0>
 8020d5e:	3e02      	subs	r6, #2
 8020d60:	4461      	add	r1, ip
 8020d62:	1ac9      	subs	r1, r1, r3
 8020d64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020d68:	e738      	b.n	8020bdc <__udivmoddi4+0x104>
 8020d6a:	462e      	mov	r6, r5
 8020d6c:	4628      	mov	r0, r5
 8020d6e:	e705      	b.n	8020b7c <__udivmoddi4+0xa4>
 8020d70:	4606      	mov	r6, r0
 8020d72:	e6e3      	b.n	8020b3c <__udivmoddi4+0x64>
 8020d74:	4618      	mov	r0, r3
 8020d76:	e6f8      	b.n	8020b6a <__udivmoddi4+0x92>
 8020d78:	454b      	cmp	r3, r9
 8020d7a:	d2a9      	bcs.n	8020cd0 <__udivmoddi4+0x1f8>
 8020d7c:	ebb9 0802 	subs.w	r8, r9, r2
 8020d80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8020d84:	3801      	subs	r0, #1
 8020d86:	e7a3      	b.n	8020cd0 <__udivmoddi4+0x1f8>
 8020d88:	4646      	mov	r6, r8
 8020d8a:	e7ea      	b.n	8020d62 <__udivmoddi4+0x28a>
 8020d8c:	4620      	mov	r0, r4
 8020d8e:	e794      	b.n	8020cba <__udivmoddi4+0x1e2>
 8020d90:	4640      	mov	r0, r8
 8020d92:	e7d1      	b.n	8020d38 <__udivmoddi4+0x260>
 8020d94:	46d0      	mov	r8, sl
 8020d96:	e77b      	b.n	8020c90 <__udivmoddi4+0x1b8>
 8020d98:	3b02      	subs	r3, #2
 8020d9a:	4461      	add	r1, ip
 8020d9c:	e732      	b.n	8020c04 <__udivmoddi4+0x12c>
 8020d9e:	4630      	mov	r0, r6
 8020da0:	e709      	b.n	8020bb6 <__udivmoddi4+0xde>
 8020da2:	4464      	add	r4, ip
 8020da4:	3802      	subs	r0, #2
 8020da6:	e742      	b.n	8020c2e <__udivmoddi4+0x156>

08020da8 <__aeabi_idiv0>:
 8020da8:	4770      	bx	lr
 8020daa:	bf00      	nop

08020dac <Initialize_Game>:
/*
 *  @brief  Initialize ball kinematics and timestep
 *  @params timestep
  * @retval None.
 */
void Initialize_Game(float timestep) {
 8020dac:	b480      	push	{r7}
 8020dae:	b083      	sub	sp, #12
 8020db0:	af00      	add	r7, sp, #0
 8020db2:	ed87 0a01 	vstr	s0, [r7, #4]
	// dt for numerical integration
	dt = timestep;
 8020db6:	4a1a      	ldr	r2, [pc, #104]	; (8020e20 <Initialize_Game+0x74>)
 8020db8:	687b      	ldr	r3, [r7, #4]
 8020dba:	6013      	str	r3, [r2, #0]


	// initialize ball params
	x_angle = 0.0;
 8020dbc:	4b19      	ldr	r3, [pc, #100]	; (8020e24 <Initialize_Game+0x78>)
 8020dbe:	f04f 0200 	mov.w	r2, #0
 8020dc2:	601a      	str	r2, [r3, #0]
	y_angle = 0.0;
 8020dc4:	4b18      	ldr	r3, [pc, #96]	; (8020e28 <Initialize_Game+0x7c>)
 8020dc6:	f04f 0200 	mov.w	r2, #0
 8020dca:	601a      	str	r2, [r3, #0]

	d_x = 0;
 8020dcc:	4b17      	ldr	r3, [pc, #92]	; (8020e2c <Initialize_Game+0x80>)
 8020dce:	f04f 0200 	mov.w	r2, #0
 8020dd2:	601a      	str	r2, [r3, #0]
	d_y = 0;
 8020dd4:	4b16      	ldr	r3, [pc, #88]	; (8020e30 <Initialize_Game+0x84>)
 8020dd6:	f04f 0200 	mov.w	r2, #0
 8020dda:	601a      	str	r2, [r3, #0]

	Dx = 0;
 8020ddc:	4b15      	ldr	r3, [pc, #84]	; (8020e34 <Initialize_Game+0x88>)
 8020dde:	f04f 0200 	mov.w	r2, #0
 8020de2:	601a      	str	r2, [r3, #0]
	Dy = 0;
 8020de4:	4b14      	ldr	r3, [pc, #80]	; (8020e38 <Initialize_Game+0x8c>)
 8020de6:	f04f 0200 	mov.w	r2, #0
 8020dea:	601a      	str	r2, [r3, #0]

	v_x = 0.0;
 8020dec:	4b13      	ldr	r3, [pc, #76]	; (8020e3c <Initialize_Game+0x90>)
 8020dee:	f04f 0200 	mov.w	r2, #0
 8020df2:	601a      	str	r2, [r3, #0]
	v_x_prev = 0.0;
 8020df4:	4b12      	ldr	r3, [pc, #72]	; (8020e40 <Initialize_Game+0x94>)
 8020df6:	f04f 0200 	mov.w	r2, #0
 8020dfa:	601a      	str	r2, [r3, #0]

	v_y = 0.0;
 8020dfc:	4b11      	ldr	r3, [pc, #68]	; (8020e44 <Initialize_Game+0x98>)
 8020dfe:	f04f 0200 	mov.w	r2, #0
 8020e02:	601a      	str	r2, [r3, #0]
	v_y_prev = 0.0;
 8020e04:	4b10      	ldr	r3, [pc, #64]	; (8020e48 <Initialize_Game+0x9c>)
 8020e06:	f04f 0200 	mov.w	r2, #0
 8020e0a:	601a      	str	r2, [r3, #0]

	win = 0; //set win boolean to 0
 8020e0c:	4b0f      	ldr	r3, [pc, #60]	; (8020e4c <Initialize_Game+0xa0>)
 8020e0e:	2200      	movs	r2, #0
 8020e10:	601a      	str	r2, [r3, #0]
}
 8020e12:	bf00      	nop
 8020e14:	370c      	adds	r7, #12
 8020e16:	46bd      	mov	sp, r7
 8020e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e1c:	4770      	bx	lr
 8020e1e:	bf00      	nop
 8020e20:	20000334 	.word	0x20000334
 8020e24:	2000032c 	.word	0x2000032c
 8020e28:	20000330 	.word	0x20000330
 8020e2c:	20000350 	.word	0x20000350
 8020e30:	20000354 	.word	0x20000354
 8020e34:	20000358 	.word	0x20000358
 8020e38:	2000035c 	.word	0x2000035c
 8020e3c:	20000338 	.word	0x20000338
 8020e40:	2000033c 	.word	0x2000033c
 8020e44:	20000348 	.word	0x20000348
 8020e48:	2000034c 	.word	0x2000034c
 8020e4c:	20000368 	.word	0x20000368

08020e50 <Init_Ball>:

/*
 * @brief initialize ball on LCD display
 * @params (x, y) position
 */
void Init_Ball(int x_pos, int y_pos){
 8020e50:	b580      	push	{r7, lr}
 8020e52:	b082      	sub	sp, #8
 8020e54:	af00      	add	r7, sp, #0
 8020e56:	6078      	str	r0, [r7, #4]
 8020e58:	6039      	str	r1, [r7, #0]
	x_ball_pos = x_pos;
 8020e5a:	4a0a      	ldr	r2, [pc, #40]	; (8020e84 <Init_Ball+0x34>)
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	6013      	str	r3, [r2, #0]
	y_ball_pos = y_pos;
 8020e60:	4a09      	ldr	r2, [pc, #36]	; (8020e88 <Init_Ball+0x38>)
 8020e62:	683b      	ldr	r3, [r7, #0]
 8020e64:	6013      	str	r3, [r2, #0]
	ssd1306_DrawCircle(x_pos, y_pos, BALL_RADIUS, White);
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	b2d8      	uxtb	r0, r3
 8020e6a:	683b      	ldr	r3, [r7, #0]
 8020e6c:	b2d9      	uxtb	r1, r3
 8020e6e:	2301      	movs	r3, #1
 8020e70:	2201      	movs	r2, #1
 8020e72:	f009 fc6b 	bl	802a74c <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 8020e76:	f009 fb27 	bl	802a4c8 <ssd1306_UpdateScreen>
}
 8020e7a:	bf00      	nop
 8020e7c:	3708      	adds	r7, #8
 8020e7e:	46bd      	mov	sp, r7
 8020e80:	bd80      	pop	{r7, pc}
 8020e82:	bf00      	nop
 8020e84:	20000360 	.word	0x20000360
 8020e88:	20000364 	.word	0x20000364

08020e8c <Update_Position>:

/*
 * @brief updates ball on LCD display based on change
 * @params (dx, dy)
 */
void Update_Position(int dx, int dy){
 8020e8c:	b580      	push	{r7, lr}
 8020e8e:	b082      	sub	sp, #8
 8020e90:	af00      	add	r7, sp, #0
 8020e92:	6078      	str	r0, [r7, #4]
 8020e94:	6039      	str	r1, [r7, #0]
	ssd1306_DrawCircle(x_ball_pos, y_ball_pos, BALL_RADIUS, Black);
 8020e96:	4b12      	ldr	r3, [pc, #72]	; (8020ee0 <Update_Position+0x54>)
 8020e98:	681b      	ldr	r3, [r3, #0]
 8020e9a:	b2d8      	uxtb	r0, r3
 8020e9c:	4b11      	ldr	r3, [pc, #68]	; (8020ee4 <Update_Position+0x58>)
 8020e9e:	681b      	ldr	r3, [r3, #0]
 8020ea0:	b2d9      	uxtb	r1, r3
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	2201      	movs	r2, #1
 8020ea6:	f009 fc51 	bl	802a74c <ssd1306_DrawCircle>
	x_ball_pos += dx;
 8020eaa:	4b0d      	ldr	r3, [pc, #52]	; (8020ee0 <Update_Position+0x54>)
 8020eac:	681a      	ldr	r2, [r3, #0]
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	4413      	add	r3, r2
 8020eb2:	4a0b      	ldr	r2, [pc, #44]	; (8020ee0 <Update_Position+0x54>)
 8020eb4:	6013      	str	r3, [r2, #0]
	y_ball_pos += dy;
 8020eb6:	4b0b      	ldr	r3, [pc, #44]	; (8020ee4 <Update_Position+0x58>)
 8020eb8:	681a      	ldr	r2, [r3, #0]
 8020eba:	683b      	ldr	r3, [r7, #0]
 8020ebc:	4413      	add	r3, r2
 8020ebe:	4a09      	ldr	r2, [pc, #36]	; (8020ee4 <Update_Position+0x58>)
 8020ec0:	6013      	str	r3, [r2, #0]
	ssd1306_DrawCircle(x_ball_pos, y_ball_pos, BALL_RADIUS, White);
 8020ec2:	4b07      	ldr	r3, [pc, #28]	; (8020ee0 <Update_Position+0x54>)
 8020ec4:	681b      	ldr	r3, [r3, #0]
 8020ec6:	b2d8      	uxtb	r0, r3
 8020ec8:	4b06      	ldr	r3, [pc, #24]	; (8020ee4 <Update_Position+0x58>)
 8020eca:	681b      	ldr	r3, [r3, #0]
 8020ecc:	b2d9      	uxtb	r1, r3
 8020ece:	2301      	movs	r3, #1
 8020ed0:	2201      	movs	r2, #1
 8020ed2:	f009 fc3b 	bl	802a74c <ssd1306_DrawCircle>
}
 8020ed6:	bf00      	nop
 8020ed8:	3708      	adds	r7, #8
 8020eda:	46bd      	mov	sp, r7
 8020edc:	bd80      	pop	{r7, pc}
 8020ede:	bf00      	nop
 8020ee0:	20000360 	.word	0x20000360
 8020ee4:	20000364 	.word	0x20000364

08020ee8 <winSequence>:

/**
 * @brief display the ball entering the win area and display a win string
 * 		  and plays sounds
 */
void winSequence(){
 8020ee8:	b580      	push	{r7, lr}
 8020eea:	b084      	sub	sp, #16
 8020eec:	af00      	add	r7, sp, #0
	char winString[] = "Win!";
 8020eee:	4a18      	ldr	r2, [pc, #96]	; (8020f50 <winSequence+0x68>)
 8020ef0:	1d3b      	adds	r3, r7, #4
 8020ef2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020ef6:	6018      	str	r0, [r3, #0]
 8020ef8:	3304      	adds	r3, #4
 8020efa:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i<BALL_RADIUS+2;i++){ //ball animation entering the exit
 8020efc:	2300      	movs	r3, #0
 8020efe:	60fb      	str	r3, [r7, #12]
 8020f00:	e00d      	b.n	8020f1e <winSequence+0x36>
		Update_Position(0,-1);
 8020f02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020f06:	2000      	movs	r0, #0
 8020f08:	f7ff ffc0 	bl	8020e8c <Update_Position>
		ssd1306_UpdateScreen();
 8020f0c:	f009 fadc 	bl	802a4c8 <ssd1306_UpdateScreen>
		HAL_Delay(300);
 8020f10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8020f14:	f003 f9f2 	bl	80242fc <HAL_Delay>
	for (int i = 0; i<BALL_RADIUS+2;i++){ //ball animation entering the exit
 8020f18:	68fb      	ldr	r3, [r7, #12]
 8020f1a:	3301      	adds	r3, #1
 8020f1c:	60fb      	str	r3, [r7, #12]
 8020f1e:	68fb      	ldr	r3, [r7, #12]
 8020f20:	2b02      	cmp	r3, #2
 8020f22:	ddee      	ble.n	8020f02 <winSequence+0x1a>
	}
	ssd1306_SetCursor(42,23); //center string
 8020f24:	2117      	movs	r1, #23
 8020f26:	202a      	movs	r0, #42	; 0x2a
 8020f28:	f009 fbf8 	bl	802a71c <ssd1306_SetCursor>
	ssd1306_WriteString(winString, Font_11x18, White); //write winning string
 8020f2c:	4a09      	ldr	r2, [pc, #36]	; (8020f54 <winSequence+0x6c>)
 8020f2e:	1d38      	adds	r0, r7, #4
 8020f30:	2301      	movs	r3, #1
 8020f32:	ca06      	ldmia	r2, {r1, r2}
 8020f34:	f009 fbcc 	bl	802a6d0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8020f38:	f009 fac6 	bl	802a4c8 <ssd1306_UpdateScreen>
	playSounds();
 8020f3c:	f001 f85a 	bl	8021ff4 <playSounds>

	HAL_Delay(500);
 8020f40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020f44:	f003 f9da 	bl	80242fc <HAL_Delay>
}
 8020f48:	bf00      	nop
 8020f4a:	3710      	adds	r7, #16
 8020f4c:	46bd      	mov	sp, r7
 8020f4e:	bd80      	pop	{r7, pc}
 8020f50:	0802c560 	.word	0x0802c560
 8020f54:	200002a4 	.word	0x200002a4

08020f58 <gameOver>:

/**
 * @brief displays a "GAME OVER" string and plays sounds
 */
void gameOver(){
 8020f58:	b580      	push	{r7, lr}
 8020f5a:	b084      	sub	sp, #16
 8020f5c:	af00      	add	r7, sp, #0
	char lossString[] = "GAME OVER!";
 8020f5e:	4a0f      	ldr	r2, [pc, #60]	; (8020f9c <gameOver+0x44>)
 8020f60:	1d3b      	adds	r3, r7, #4
 8020f62:	ca07      	ldmia	r2, {r0, r1, r2}
 8020f64:	c303      	stmia	r3!, {r0, r1}
 8020f66:	801a      	strh	r2, [r3, #0]
 8020f68:	3302      	adds	r3, #2
 8020f6a:	0c12      	lsrs	r2, r2, #16
 8020f6c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(14,23); //center string
 8020f6e:	2117      	movs	r1, #23
 8020f70:	200e      	movs	r0, #14
 8020f72:	f009 fbd3 	bl	802a71c <ssd1306_SetCursor>
	ssd1306_WriteString(lossString, Font_11x18, White); //write winning string
 8020f76:	4a0a      	ldr	r2, [pc, #40]	; (8020fa0 <gameOver+0x48>)
 8020f78:	1d38      	adds	r0, r7, #4
 8020f7a:	2301      	movs	r3, #1
 8020f7c:	ca06      	ldmia	r2, {r1, r2}
 8020f7e:	f009 fba7 	bl	802a6d0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8020f82:	f009 faa1 	bl	802a4c8 <ssd1306_UpdateScreen>
	//playSounds();
	playGameOverSound();
 8020f86:	f001 f895 	bl	80220b4 <playGameOverSound>
	HAL_Delay(500);
 8020f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020f8e:	f003 f9b5 	bl	80242fc <HAL_Delay>
}
 8020f92:	bf00      	nop
 8020f94:	3710      	adds	r7, #16
 8020f96:	46bd      	mov	sp, r7
 8020f98:	bd80      	pop	{r7, pc}
 8020f9a:	bf00      	nop
 8020f9c:	0802c568 	.word	0x0802c568
 8020fa0:	200002a4 	.word	0x200002a4
 8020fa4:	00000000 	.word	0x00000000

08020fa8 <Calculate_Ball_Kinematics>:

/**
 * @brief calculates the ball's kinematics
 * @params pointers to the (theta_x, theta_y) STM32 orientation angle
 */
void Calculate_Ball_Kinematics(float* theta_x_in, float* theta_y_in) {
 8020fa8:	b580      	push	{r7, lr}
 8020faa:	b082      	sub	sp, #8
 8020fac:	af00      	add	r7, sp, #0
 8020fae:	6078      	str	r0, [r7, #4]
 8020fb0:	6039      	str	r1, [r7, #0]

	// transform angles to match simulation
	x_angle = -(*theta_y_in);
 8020fb2:	683b      	ldr	r3, [r7, #0]
 8020fb4:	edd3 7a00 	vldr	s15, [r3]
 8020fb8:	eef1 7a67 	vneg.f32	s15, s15
 8020fbc:	4bae      	ldr	r3, [pc, #696]	; (8021278 <Calculate_Ball_Kinematics+0x2d0>)
 8020fbe:	edc3 7a00 	vstr	s15, [r3]
	y_angle = -(*theta_x_in);
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	edd3 7a00 	vldr	s15, [r3]
 8020fc8:	eef1 7a67 	vneg.f32	s15, s15
 8020fcc:	4bab      	ldr	r3, [pc, #684]	; (802127c <Calculate_Ball_Kinematics+0x2d4>)
 8020fce:	edc3 7a00 	vstr	s15, [r3]

	// X-DIRECTION
	if (x_angle < 2 && x_angle > -2) {
 8020fd2:	4ba9      	ldr	r3, [pc, #676]	; (8021278 <Calculate_Ball_Kinematics+0x2d0>)
 8020fd4:	edd3 7a00 	vldr	s15, [r3]
 8020fd8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8020fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fe4:	d521      	bpl.n	802102a <Calculate_Ball_Kinematics+0x82>
 8020fe6:	4ba4      	ldr	r3, [pc, #656]	; (8021278 <Calculate_Ball_Kinematics+0x2d0>)
 8020fe8:	edd3 7a00 	vldr	s15, [r3]
 8020fec:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8020ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ff8:	dd17      	ble.n	802102a <Calculate_Ball_Kinematics+0x82>
		// check if angle is negligible small
		a_x = 0;
 8020ffa:	4ba1      	ldr	r3, [pc, #644]	; (8021280 <Calculate_Ball_Kinematics+0x2d8>)
 8020ffc:	f04f 0200 	mov.w	r2, #0
 8021000:	601a      	str	r2, [r3, #0]
		v_x_prev = v_x_prev*0.99;
 8021002:	4ba0      	ldr	r3, [pc, #640]	; (8021284 <Calculate_Ball_Kinematics+0x2dc>)
 8021004:	681b      	ldr	r3, [r3, #0]
 8021006:	4618      	mov	r0, r3
 8021008:	f7ff f9f6 	bl	80203f8 <__aeabi_f2d>
 802100c:	a394      	add	r3, pc, #592	; (adr r3, 8021260 <Calculate_Ball_Kinematics+0x2b8>)
 802100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021012:	f7ff fa49 	bl	80204a8 <__aeabi_dmul>
 8021016:	4602      	mov	r2, r0
 8021018:	460b      	mov	r3, r1
 802101a:	4610      	mov	r0, r2
 802101c:	4619      	mov	r1, r3
 802101e:	f7ff fcf3 	bl	8020a08 <__aeabi_d2f>
 8021022:	4603      	mov	r3, r0
 8021024:	4a97      	ldr	r2, [pc, #604]	; (8021284 <Calculate_Ball_Kinematics+0x2dc>)
 8021026:	6013      	str	r3, [r2, #0]
 8021028:	e030      	b.n	802108c <Calculate_Ball_Kinematics+0xe4>
	} else {
		a_x = g*arm_sin_f32(x_angle*M_PI/180.0);
 802102a:	4b93      	ldr	r3, [pc, #588]	; (8021278 <Calculate_Ball_Kinematics+0x2d0>)
 802102c:	681b      	ldr	r3, [r3, #0]
 802102e:	4618      	mov	r0, r3
 8021030:	f7ff f9e2 	bl	80203f8 <__aeabi_f2d>
 8021034:	a38c      	add	r3, pc, #560	; (adr r3, 8021268 <Calculate_Ball_Kinematics+0x2c0>)
 8021036:	e9d3 2300 	ldrd	r2, r3, [r3]
 802103a:	f7ff fa35 	bl	80204a8 <__aeabi_dmul>
 802103e:	4602      	mov	r2, r0
 8021040:	460b      	mov	r3, r1
 8021042:	4610      	mov	r0, r2
 8021044:	4619      	mov	r1, r3
 8021046:	f04f 0200 	mov.w	r2, #0
 802104a:	4b8f      	ldr	r3, [pc, #572]	; (8021288 <Calculate_Ball_Kinematics+0x2e0>)
 802104c:	f7ff fb56 	bl	80206fc <__aeabi_ddiv>
 8021050:	4602      	mov	r2, r0
 8021052:	460b      	mov	r3, r1
 8021054:	4610      	mov	r0, r2
 8021056:	4619      	mov	r1, r3
 8021058:	f7ff fcd6 	bl	8020a08 <__aeabi_d2f>
 802105c:	4603      	mov	r3, r0
 802105e:	ee00 3a10 	vmov	s0, r3
 8021062:	f009 fc2b 	bl	802a8bc <arm_sin_f32>
 8021066:	ee10 3a10 	vmov	r3, s0
 802106a:	4618      	mov	r0, r3
 802106c:	f7ff f9c4 	bl	80203f8 <__aeabi_f2d>
 8021070:	f04f 0200 	mov.w	r2, #0
 8021074:	4b85      	ldr	r3, [pc, #532]	; (802128c <Calculate_Ball_Kinematics+0x2e4>)
 8021076:	f7ff fa17 	bl	80204a8 <__aeabi_dmul>
 802107a:	4602      	mov	r2, r0
 802107c:	460b      	mov	r3, r1
 802107e:	4610      	mov	r0, r2
 8021080:	4619      	mov	r1, r3
 8021082:	f7ff fcc1 	bl	8020a08 <__aeabi_d2f>
 8021086:	4603      	mov	r3, r0
 8021088:	4a7d      	ldr	r2, [pc, #500]	; (8021280 <Calculate_Ball_Kinematics+0x2d8>)
 802108a:	6013      	str	r3, [r2, #0]
	}

	if ((a_x > 0 && v_x_prev < 0) || (a_x < 0 && v_x_prev > 0)) {
 802108c:	4b7c      	ldr	r3, [pc, #496]	; (8021280 <Calculate_Ball_Kinematics+0x2d8>)
 802108e:	edd3 7a00 	vldr	s15, [r3]
 8021092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802109a:	dd07      	ble.n	80210ac <Calculate_Ball_Kinematics+0x104>
 802109c:	4b79      	ldr	r3, [pc, #484]	; (8021284 <Calculate_Ball_Kinematics+0x2dc>)
 802109e:	edd3 7a00 	vldr	s15, [r3]
 80210a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80210a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210aa:	d40f      	bmi.n	80210cc <Calculate_Ball_Kinematics+0x124>
 80210ac:	4b74      	ldr	r3, [pc, #464]	; (8021280 <Calculate_Ball_Kinematics+0x2d8>)
 80210ae:	edd3 7a00 	vldr	s15, [r3]
 80210b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80210b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210ba:	d51a      	bpl.n	80210f2 <Calculate_Ball_Kinematics+0x14a>
 80210bc:	4b71      	ldr	r3, [pc, #452]	; (8021284 <Calculate_Ball_Kinematics+0x2dc>)
 80210be:	edd3 7a00 	vldr	s15, [r3]
 80210c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80210c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210ca:	dd12      	ble.n	80210f2 <Calculate_Ball_Kinematics+0x14a>
		// if they have opposite directions
		v_x_prev = v_x_prev*0.0001;
 80210cc:	4b6d      	ldr	r3, [pc, #436]	; (8021284 <Calculate_Ball_Kinematics+0x2dc>)
 80210ce:	681b      	ldr	r3, [r3, #0]
 80210d0:	4618      	mov	r0, r3
 80210d2:	f7ff f991 	bl	80203f8 <__aeabi_f2d>
 80210d6:	a366      	add	r3, pc, #408	; (adr r3, 8021270 <Calculate_Ball_Kinematics+0x2c8>)
 80210d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210dc:	f7ff f9e4 	bl	80204a8 <__aeabi_dmul>
 80210e0:	4602      	mov	r2, r0
 80210e2:	460b      	mov	r3, r1
 80210e4:	4610      	mov	r0, r2
 80210e6:	4619      	mov	r1, r3
 80210e8:	f7ff fc8e 	bl	8020a08 <__aeabi_d2f>
 80210ec:	4603      	mov	r3, r0
 80210ee:	4a65      	ldr	r2, [pc, #404]	; (8021284 <Calculate_Ball_Kinematics+0x2dc>)
 80210f0:	6013      	str	r3, [r2, #0]
	}

	v_x = v_x_prev + a_x*dt;
 80210f2:	4b63      	ldr	r3, [pc, #396]	; (8021280 <Calculate_Ball_Kinematics+0x2d8>)
 80210f4:	ed93 7a00 	vldr	s14, [r3]
 80210f8:	4b65      	ldr	r3, [pc, #404]	; (8021290 <Calculate_Ball_Kinematics+0x2e8>)
 80210fa:	edd3 7a00 	vldr	s15, [r3]
 80210fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8021102:	4b60      	ldr	r3, [pc, #384]	; (8021284 <Calculate_Ball_Kinematics+0x2dc>)
 8021104:	edd3 7a00 	vldr	s15, [r3]
 8021108:	ee77 7a27 	vadd.f32	s15, s14, s15
 802110c:	4b61      	ldr	r3, [pc, #388]	; (8021294 <Calculate_Ball_Kinematics+0x2ec>)
 802110e:	edc3 7a00 	vstr	s15, [r3]

	// Y-DIRECTION
	if (y_angle < 2 && y_angle > -2) {
 8021112:	4b5a      	ldr	r3, [pc, #360]	; (802127c <Calculate_Ball_Kinematics+0x2d4>)
 8021114:	edd3 7a00 	vldr	s15, [r3]
 8021118:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802111c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021124:	d521      	bpl.n	802116a <Calculate_Ball_Kinematics+0x1c2>
 8021126:	4b55      	ldr	r3, [pc, #340]	; (802127c <Calculate_Ball_Kinematics+0x2d4>)
 8021128:	edd3 7a00 	vldr	s15, [r3]
 802112c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8021130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021138:	dd17      	ble.n	802116a <Calculate_Ball_Kinematics+0x1c2>
		// check if angle is negligible small
		a_y = 0;
 802113a:	4b57      	ldr	r3, [pc, #348]	; (8021298 <Calculate_Ball_Kinematics+0x2f0>)
 802113c:	f04f 0200 	mov.w	r2, #0
 8021140:	601a      	str	r2, [r3, #0]
		v_y_prev = v_y_prev*0.99;
 8021142:	4b56      	ldr	r3, [pc, #344]	; (802129c <Calculate_Ball_Kinematics+0x2f4>)
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	4618      	mov	r0, r3
 8021148:	f7ff f956 	bl	80203f8 <__aeabi_f2d>
 802114c:	a344      	add	r3, pc, #272	; (adr r3, 8021260 <Calculate_Ball_Kinematics+0x2b8>)
 802114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021152:	f7ff f9a9 	bl	80204a8 <__aeabi_dmul>
 8021156:	4602      	mov	r2, r0
 8021158:	460b      	mov	r3, r1
 802115a:	4610      	mov	r0, r2
 802115c:	4619      	mov	r1, r3
 802115e:	f7ff fc53 	bl	8020a08 <__aeabi_d2f>
 8021162:	4603      	mov	r3, r0
 8021164:	4a4d      	ldr	r2, [pc, #308]	; (802129c <Calculate_Ball_Kinematics+0x2f4>)
 8021166:	6013      	str	r3, [r2, #0]
 8021168:	e030      	b.n	80211cc <Calculate_Ball_Kinematics+0x224>
	} else {
		a_y = g*arm_sin_f32(y_angle*M_PI/180.0);
 802116a:	4b44      	ldr	r3, [pc, #272]	; (802127c <Calculate_Ball_Kinematics+0x2d4>)
 802116c:	681b      	ldr	r3, [r3, #0]
 802116e:	4618      	mov	r0, r3
 8021170:	f7ff f942 	bl	80203f8 <__aeabi_f2d>
 8021174:	a33c      	add	r3, pc, #240	; (adr r3, 8021268 <Calculate_Ball_Kinematics+0x2c0>)
 8021176:	e9d3 2300 	ldrd	r2, r3, [r3]
 802117a:	f7ff f995 	bl	80204a8 <__aeabi_dmul>
 802117e:	4602      	mov	r2, r0
 8021180:	460b      	mov	r3, r1
 8021182:	4610      	mov	r0, r2
 8021184:	4619      	mov	r1, r3
 8021186:	f04f 0200 	mov.w	r2, #0
 802118a:	4b3f      	ldr	r3, [pc, #252]	; (8021288 <Calculate_Ball_Kinematics+0x2e0>)
 802118c:	f7ff fab6 	bl	80206fc <__aeabi_ddiv>
 8021190:	4602      	mov	r2, r0
 8021192:	460b      	mov	r3, r1
 8021194:	4610      	mov	r0, r2
 8021196:	4619      	mov	r1, r3
 8021198:	f7ff fc36 	bl	8020a08 <__aeabi_d2f>
 802119c:	4603      	mov	r3, r0
 802119e:	ee00 3a10 	vmov	s0, r3
 80211a2:	f009 fb8b 	bl	802a8bc <arm_sin_f32>
 80211a6:	ee10 3a10 	vmov	r3, s0
 80211aa:	4618      	mov	r0, r3
 80211ac:	f7ff f924 	bl	80203f8 <__aeabi_f2d>
 80211b0:	f04f 0200 	mov.w	r2, #0
 80211b4:	4b35      	ldr	r3, [pc, #212]	; (802128c <Calculate_Ball_Kinematics+0x2e4>)
 80211b6:	f7ff f977 	bl	80204a8 <__aeabi_dmul>
 80211ba:	4602      	mov	r2, r0
 80211bc:	460b      	mov	r3, r1
 80211be:	4610      	mov	r0, r2
 80211c0:	4619      	mov	r1, r3
 80211c2:	f7ff fc21 	bl	8020a08 <__aeabi_d2f>
 80211c6:	4603      	mov	r3, r0
 80211c8:	4a33      	ldr	r2, [pc, #204]	; (8021298 <Calculate_Ball_Kinematics+0x2f0>)
 80211ca:	6013      	str	r3, [r2, #0]
	}

	if ((a_y > 0 && v_y_prev < 0) || (a_y < 0 && v_y_prev > 0)) {
 80211cc:	4b32      	ldr	r3, [pc, #200]	; (8021298 <Calculate_Ball_Kinematics+0x2f0>)
 80211ce:	edd3 7a00 	vldr	s15, [r3]
 80211d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80211d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211da:	dd07      	ble.n	80211ec <Calculate_Ball_Kinematics+0x244>
 80211dc:	4b2f      	ldr	r3, [pc, #188]	; (802129c <Calculate_Ball_Kinematics+0x2f4>)
 80211de:	edd3 7a00 	vldr	s15, [r3]
 80211e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80211e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211ea:	d40f      	bmi.n	802120c <Calculate_Ball_Kinematics+0x264>
 80211ec:	4b2a      	ldr	r3, [pc, #168]	; (8021298 <Calculate_Ball_Kinematics+0x2f0>)
 80211ee:	edd3 7a00 	vldr	s15, [r3]
 80211f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80211f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211fa:	d51a      	bpl.n	8021232 <Calculate_Ball_Kinematics+0x28a>
 80211fc:	4b27      	ldr	r3, [pc, #156]	; (802129c <Calculate_Ball_Kinematics+0x2f4>)
 80211fe:	edd3 7a00 	vldr	s15, [r3]
 8021202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802120a:	dd12      	ble.n	8021232 <Calculate_Ball_Kinematics+0x28a>
		// if they have opposite directions
		v_y_prev = v_y_prev*0.0001;
 802120c:	4b23      	ldr	r3, [pc, #140]	; (802129c <Calculate_Ball_Kinematics+0x2f4>)
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	4618      	mov	r0, r3
 8021212:	f7ff f8f1 	bl	80203f8 <__aeabi_f2d>
 8021216:	a316      	add	r3, pc, #88	; (adr r3, 8021270 <Calculate_Ball_Kinematics+0x2c8>)
 8021218:	e9d3 2300 	ldrd	r2, r3, [r3]
 802121c:	f7ff f944 	bl	80204a8 <__aeabi_dmul>
 8021220:	4602      	mov	r2, r0
 8021222:	460b      	mov	r3, r1
 8021224:	4610      	mov	r0, r2
 8021226:	4619      	mov	r1, r3
 8021228:	f7ff fbee 	bl	8020a08 <__aeabi_d2f>
 802122c:	4603      	mov	r3, r0
 802122e:	4a1b      	ldr	r2, [pc, #108]	; (802129c <Calculate_Ball_Kinematics+0x2f4>)
 8021230:	6013      	str	r3, [r2, #0]
	}


	v_y = v_y_prev + a_y*dt;
 8021232:	4b19      	ldr	r3, [pc, #100]	; (8021298 <Calculate_Ball_Kinematics+0x2f0>)
 8021234:	ed93 7a00 	vldr	s14, [r3]
 8021238:	4b15      	ldr	r3, [pc, #84]	; (8021290 <Calculate_Ball_Kinematics+0x2e8>)
 802123a:	edd3 7a00 	vldr	s15, [r3]
 802123e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8021242:	4b16      	ldr	r3, [pc, #88]	; (802129c <Calculate_Ball_Kinematics+0x2f4>)
 8021244:	edd3 7a00 	vldr	s15, [r3]
 8021248:	ee77 7a27 	vadd.f32	s15, s14, s15
 802124c:	4b14      	ldr	r3, [pc, #80]	; (80212a0 <Calculate_Ball_Kinematics+0x2f8>)
 802124e:	edc3 7a00 	vstr	s15, [r3]


}
 8021252:	bf00      	nop
 8021254:	3708      	adds	r7, #8
 8021256:	46bd      	mov	sp, r7
 8021258:	bd80      	pop	{r7, pc}
 802125a:	bf00      	nop
 802125c:	f3af 8000 	nop.w
 8021260:	7ae147ae 	.word	0x7ae147ae
 8021264:	3fefae14 	.word	0x3fefae14
 8021268:	54442d18 	.word	0x54442d18
 802126c:	400921fb 	.word	0x400921fb
 8021270:	eb1c432d 	.word	0xeb1c432d
 8021274:	3f1a36e2 	.word	0x3f1a36e2
 8021278:	2000032c 	.word	0x2000032c
 802127c:	20000330 	.word	0x20000330
 8021280:	20000340 	.word	0x20000340
 8021284:	2000033c 	.word	0x2000033c
 8021288:	40668000 	.word	0x40668000
 802128c:	40240000 	.word	0x40240000
 8021290:	20000334 	.word	0x20000334
 8021294:	20000338 	.word	0x20000338
 8021298:	20000344 	.word	0x20000344
 802129c:	2000034c 	.word	0x2000034c
 80212a0:	20000348 	.word	0x20000348

080212a4 <Calculate_Ball_Velocity>:

/**
 * @brief checks for collisions
 */
void Calculate_Ball_Velocity() {
 80212a4:	b480      	push	{r7}
 80212a6:	af00      	add	r7, sp, #0

	if (v_x > 0) {
 80212a8:	4b5b      	ldr	r3, [pc, #364]	; (8021418 <Calculate_Ball_Velocity+0x174>)
 80212aa:	edd3 7a00 	vldr	s15, [r3]
 80212ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80212b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80212b6:	dd20      	ble.n	80212fa <Calculate_Ball_Velocity+0x56>
		if (x_ball_pos >= SSD1306_WIDTH -1- BALL_RADIUS) {
 80212b8:	4b58      	ldr	r3, [pc, #352]	; (802141c <Calculate_Ball_Velocity+0x178>)
 80212ba:	681b      	ldr	r3, [r3, #0]
 80212bc:	2b7d      	cmp	r3, #125	; 0x7d
 80212be:	dd07      	ble.n	80212d0 <Calculate_Ball_Velocity+0x2c>
			v_x_prev = 0;
 80212c0:	4b57      	ldr	r3, [pc, #348]	; (8021420 <Calculate_Ball_Velocity+0x17c>)
 80212c2:	f04f 0200 	mov.w	r2, #0
 80212c6:	601a      	str	r2, [r3, #0]
			v_x = 0;
 80212c8:	4b53      	ldr	r3, [pc, #332]	; (8021418 <Calculate_Ball_Velocity+0x174>)
 80212ca:	f04f 0200 	mov.w	r2, #0
 80212ce:	601a      	str	r2, [r3, #0]
		}
		// avoid collision with wall directly
		if (mazeDisplayed[y_ball_pos][x_ball_pos+1+BALL_RADIUS] == 1) {
 80212d0:	4b54      	ldr	r3, [pc, #336]	; (8021424 <Calculate_Ball_Velocity+0x180>)
 80212d2:	681a      	ldr	r2, [r3, #0]
 80212d4:	4b51      	ldr	r3, [pc, #324]	; (802141c <Calculate_Ball_Velocity+0x178>)
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	3302      	adds	r3, #2
 80212da:	4953      	ldr	r1, [pc, #332]	; (8021428 <Calculate_Ball_Velocity+0x184>)
 80212dc:	01d2      	lsls	r2, r2, #7
 80212de:	440a      	add	r2, r1
 80212e0:	4413      	add	r3, r2
 80212e2:	781b      	ldrb	r3, [r3, #0]
 80212e4:	2b01      	cmp	r3, #1
 80212e6:	d130      	bne.n	802134a <Calculate_Ball_Velocity+0xa6>
			v_x_prev = 0;
 80212e8:	4b4d      	ldr	r3, [pc, #308]	; (8021420 <Calculate_Ball_Velocity+0x17c>)
 80212ea:	f04f 0200 	mov.w	r2, #0
 80212ee:	601a      	str	r2, [r3, #0]
			v_x = 0;
 80212f0:	4b49      	ldr	r3, [pc, #292]	; (8021418 <Calculate_Ball_Velocity+0x174>)
 80212f2:	f04f 0200 	mov.w	r2, #0
 80212f6:	601a      	str	r2, [r3, #0]
 80212f8:	e027      	b.n	802134a <Calculate_Ball_Velocity+0xa6>
		}
	}
	else if (v_x < 0) { // negative x velocity
 80212fa:	4b47      	ldr	r3, [pc, #284]	; (8021418 <Calculate_Ball_Velocity+0x174>)
 80212fc:	edd3 7a00 	vldr	s15, [r3]
 8021300:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021308:	d51f      	bpl.n	802134a <Calculate_Ball_Velocity+0xa6>
		if (x_ball_pos <= 0 + BALL_RADIUS + 1) {
 802130a:	4b44      	ldr	r3, [pc, #272]	; (802141c <Calculate_Ball_Velocity+0x178>)
 802130c:	681b      	ldr	r3, [r3, #0]
 802130e:	2b02      	cmp	r3, #2
 8021310:	dc07      	bgt.n	8021322 <Calculate_Ball_Velocity+0x7e>
			v_x_prev = 0;
 8021312:	4b43      	ldr	r3, [pc, #268]	; (8021420 <Calculate_Ball_Velocity+0x17c>)
 8021314:	f04f 0200 	mov.w	r2, #0
 8021318:	601a      	str	r2, [r3, #0]
			v_x = 0;
 802131a:	4b3f      	ldr	r3, [pc, #252]	; (8021418 <Calculate_Ball_Velocity+0x174>)
 802131c:	f04f 0200 	mov.w	r2, #0
 8021320:	601a      	str	r2, [r3, #0]
		}
		// avoid collision with wall directly
		if (mazeDisplayed[y_ball_pos][x_ball_pos-1-BALL_RADIUS] == 1) {
 8021322:	4b40      	ldr	r3, [pc, #256]	; (8021424 <Calculate_Ball_Velocity+0x180>)
 8021324:	681a      	ldr	r2, [r3, #0]
 8021326:	4b3d      	ldr	r3, [pc, #244]	; (802141c <Calculate_Ball_Velocity+0x178>)
 8021328:	681b      	ldr	r3, [r3, #0]
 802132a:	3b02      	subs	r3, #2
 802132c:	493e      	ldr	r1, [pc, #248]	; (8021428 <Calculate_Ball_Velocity+0x184>)
 802132e:	01d2      	lsls	r2, r2, #7
 8021330:	440a      	add	r2, r1
 8021332:	4413      	add	r3, r2
 8021334:	781b      	ldrb	r3, [r3, #0]
 8021336:	2b01      	cmp	r3, #1
 8021338:	d107      	bne.n	802134a <Calculate_Ball_Velocity+0xa6>
			v_x_prev = 0;
 802133a:	4b39      	ldr	r3, [pc, #228]	; (8021420 <Calculate_Ball_Velocity+0x17c>)
 802133c:	f04f 0200 	mov.w	r2, #0
 8021340:	601a      	str	r2, [r3, #0]
			v_x = 0;
 8021342:	4b35      	ldr	r3, [pc, #212]	; (8021418 <Calculate_Ball_Velocity+0x174>)
 8021344:	f04f 0200 	mov.w	r2, #0
 8021348:	601a      	str	r2, [r3, #0]
		}
	}

	// positive y velocity
	if (v_y > 0) {
 802134a:	4b38      	ldr	r3, [pc, #224]	; (802142c <Calculate_Ball_Velocity+0x188>)
 802134c:	edd3 7a00 	vldr	s15, [r3]
 8021350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021358:	dd20      	ble.n	802139c <Calculate_Ball_Velocity+0xf8>
		if (y_ball_pos >= SSD1306_HEIGHT -1- BALL_RADIUS) {
 802135a:	4b32      	ldr	r3, [pc, #200]	; (8021424 <Calculate_Ball_Velocity+0x180>)
 802135c:	681b      	ldr	r3, [r3, #0]
 802135e:	2b3d      	cmp	r3, #61	; 0x3d
 8021360:	dd07      	ble.n	8021372 <Calculate_Ball_Velocity+0xce>
			v_y_prev = 0;
 8021362:	4b33      	ldr	r3, [pc, #204]	; (8021430 <Calculate_Ball_Velocity+0x18c>)
 8021364:	f04f 0200 	mov.w	r2, #0
 8021368:	601a      	str	r2, [r3, #0]
			v_y = 0;
 802136a:	4b30      	ldr	r3, [pc, #192]	; (802142c <Calculate_Ball_Velocity+0x188>)
 802136c:	f04f 0200 	mov.w	r2, #0
 8021370:	601a      	str	r2, [r3, #0]
		}
		// avoid collision with wall direclty
		if (mazeDisplayed[y_ball_pos+1+BALL_RADIUS][x_ball_pos] == 1) {
 8021372:	4b2c      	ldr	r3, [pc, #176]	; (8021424 <Calculate_Ball_Velocity+0x180>)
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	1c9a      	adds	r2, r3, #2
 8021378:	4b28      	ldr	r3, [pc, #160]	; (802141c <Calculate_Ball_Velocity+0x178>)
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	492a      	ldr	r1, [pc, #168]	; (8021428 <Calculate_Ball_Velocity+0x184>)
 802137e:	01d2      	lsls	r2, r2, #7
 8021380:	440a      	add	r2, r1
 8021382:	4413      	add	r3, r2
 8021384:	781b      	ldrb	r3, [r3, #0]
 8021386:	2b01      	cmp	r3, #1
 8021388:	d142      	bne.n	8021410 <Calculate_Ball_Velocity+0x16c>
			v_y_prev = 0;
 802138a:	4b29      	ldr	r3, [pc, #164]	; (8021430 <Calculate_Ball_Velocity+0x18c>)
 802138c:	f04f 0200 	mov.w	r2, #0
 8021390:	601a      	str	r2, [r3, #0]
			v_y = 0;
 8021392:	4b26      	ldr	r3, [pc, #152]	; (802142c <Calculate_Ball_Velocity+0x188>)
 8021394:	f04f 0200 	mov.w	r2, #0
 8021398:	601a      	str	r2, [r3, #0]
 802139a:	e039      	b.n	8021410 <Calculate_Ball_Velocity+0x16c>
		}
	}
	else if (v_y < 0) { // negative y velocity
 802139c:	4b23      	ldr	r3, [pc, #140]	; (802142c <Calculate_Ball_Velocity+0x188>)
 802139e:	edd3 7a00 	vldr	s15, [r3]
 80213a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80213a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213aa:	d531      	bpl.n	8021410 <Calculate_Ball_Velocity+0x16c>
		if (y_ball_pos <= 0 + BALL_RADIUS + 1) {
 80213ac:	4b1d      	ldr	r3, [pc, #116]	; (8021424 <Calculate_Ball_Velocity+0x180>)
 80213ae:	681b      	ldr	r3, [r3, #0]
 80213b0:	2b02      	cmp	r3, #2
 80213b2:	dc19      	bgt.n	80213e8 <Calculate_Ball_Velocity+0x144>
			v_y_prev = 0;
 80213b4:	4b1e      	ldr	r3, [pc, #120]	; (8021430 <Calculate_Ball_Velocity+0x18c>)
 80213b6:	f04f 0200 	mov.w	r2, #0
 80213ba:	601a      	str	r2, [r3, #0]
			v_y = 0;
 80213bc:	4b1b      	ldr	r3, [pc, #108]	; (802142c <Calculate_Ball_Velocity+0x188>)
 80213be:	f04f 0200 	mov.w	r2, #0
 80213c2:	601a      	str	r2, [r3, #0]
			//upper collision => check for win
			if (mazeDisplayed[0][x_ball_pos-1-BALL_RADIUS] == 0 && mazeDisplayed[0][x_ball_pos+1+BALL_RADIUS] == 0){ //check if opening has been found
 80213c4:	4b15      	ldr	r3, [pc, #84]	; (802141c <Calculate_Ball_Velocity+0x178>)
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	3b02      	subs	r3, #2
 80213ca:	4a17      	ldr	r2, [pc, #92]	; (8021428 <Calculate_Ball_Velocity+0x184>)
 80213cc:	5cd3      	ldrb	r3, [r2, r3]
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	d10a      	bne.n	80213e8 <Calculate_Ball_Velocity+0x144>
 80213d2:	4b12      	ldr	r3, [pc, #72]	; (802141c <Calculate_Ball_Velocity+0x178>)
 80213d4:	681b      	ldr	r3, [r3, #0]
 80213d6:	3302      	adds	r3, #2
 80213d8:	4a13      	ldr	r2, [pc, #76]	; (8021428 <Calculate_Ball_Velocity+0x184>)
 80213da:	5cd3      	ldrb	r3, [r2, r3]
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d103      	bne.n	80213e8 <Calculate_Ball_Velocity+0x144>
				win = 1; //set win boolean to 1 and return from function
 80213e0:	4b14      	ldr	r3, [pc, #80]	; (8021434 <Calculate_Ball_Velocity+0x190>)
 80213e2:	2201      	movs	r2, #1
 80213e4:	601a      	str	r2, [r3, #0]
				return;
 80213e6:	e013      	b.n	8021410 <Calculate_Ball_Velocity+0x16c>
			}
		}
		// avoid collision with wall directly
		if (mazeDisplayed[y_ball_pos-1-BALL_RADIUS][x_ball_pos] == 1) {
 80213e8:	4b0e      	ldr	r3, [pc, #56]	; (8021424 <Calculate_Ball_Velocity+0x180>)
 80213ea:	681b      	ldr	r3, [r3, #0]
 80213ec:	1e9a      	subs	r2, r3, #2
 80213ee:	4b0b      	ldr	r3, [pc, #44]	; (802141c <Calculate_Ball_Velocity+0x178>)
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	490d      	ldr	r1, [pc, #52]	; (8021428 <Calculate_Ball_Velocity+0x184>)
 80213f4:	01d2      	lsls	r2, r2, #7
 80213f6:	440a      	add	r2, r1
 80213f8:	4413      	add	r3, r2
 80213fa:	781b      	ldrb	r3, [r3, #0]
 80213fc:	2b01      	cmp	r3, #1
 80213fe:	d107      	bne.n	8021410 <Calculate_Ball_Velocity+0x16c>
			v_y_prev = 0;
 8021400:	4b0b      	ldr	r3, [pc, #44]	; (8021430 <Calculate_Ball_Velocity+0x18c>)
 8021402:	f04f 0200 	mov.w	r2, #0
 8021406:	601a      	str	r2, [r3, #0]
			v_y = 0;
 8021408:	4b08      	ldr	r3, [pc, #32]	; (802142c <Calculate_Ball_Velocity+0x188>)
 802140a:	f04f 0200 	mov.w	r2, #0
 802140e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8021410:	46bd      	mov	sp, r7
 8021412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021416:	4770      	bx	lr
 8021418:	20000338 	.word	0x20000338
 802141c:	20000360 	.word	0x20000360
 8021420:	2000033c 	.word	0x2000033c
 8021424:	20000364 	.word	0x20000364
 8021428:	2000069c 	.word	0x2000069c
 802142c:	20000348 	.word	0x20000348
 8021430:	2000034c 	.word	0x2000034c
 8021434:	20000368 	.word	0x20000368

08021438 <Calculate_Delta_Displacement>:

///*
// *  @brief  Calculate ball's change of displacement
//  * @retval None.
// */
void Calculate_Delta_Displacement() {
 8021438:	b5b0      	push	{r4, r5, r7, lr}
 802143a:	af00      	add	r7, sp, #0
	// calculate displacement over timestep
	// AREA UNDER CURVE SEGMENT (Trapezium)
	d_x = (0.5)*(v_x_prev + v_x)*dt;
 802143c:	4b2d      	ldr	r3, [pc, #180]	; (80214f4 <Calculate_Delta_Displacement+0xbc>)
 802143e:	ed93 7a00 	vldr	s14, [r3]
 8021442:	4b2d      	ldr	r3, [pc, #180]	; (80214f8 <Calculate_Delta_Displacement+0xc0>)
 8021444:	edd3 7a00 	vldr	s15, [r3]
 8021448:	ee77 7a27 	vadd.f32	s15, s14, s15
 802144c:	ee17 0a90 	vmov	r0, s15
 8021450:	f7fe ffd2 	bl	80203f8 <__aeabi_f2d>
 8021454:	f04f 0200 	mov.w	r2, #0
 8021458:	4b28      	ldr	r3, [pc, #160]	; (80214fc <Calculate_Delta_Displacement+0xc4>)
 802145a:	f7ff f825 	bl	80204a8 <__aeabi_dmul>
 802145e:	4602      	mov	r2, r0
 8021460:	460b      	mov	r3, r1
 8021462:	4614      	mov	r4, r2
 8021464:	461d      	mov	r5, r3
 8021466:	4b26      	ldr	r3, [pc, #152]	; (8021500 <Calculate_Delta_Displacement+0xc8>)
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	4618      	mov	r0, r3
 802146c:	f7fe ffc4 	bl	80203f8 <__aeabi_f2d>
 8021470:	4602      	mov	r2, r0
 8021472:	460b      	mov	r3, r1
 8021474:	4620      	mov	r0, r4
 8021476:	4629      	mov	r1, r5
 8021478:	f7ff f816 	bl	80204a8 <__aeabi_dmul>
 802147c:	4602      	mov	r2, r0
 802147e:	460b      	mov	r3, r1
 8021480:	4610      	mov	r0, r2
 8021482:	4619      	mov	r1, r3
 8021484:	f7ff fac0 	bl	8020a08 <__aeabi_d2f>
 8021488:	4603      	mov	r3, r0
 802148a:	4a1e      	ldr	r2, [pc, #120]	; (8021504 <Calculate_Delta_Displacement+0xcc>)
 802148c:	6013      	str	r3, [r2, #0]
	d_y = (0.5)*(v_y_prev + v_y)*dt;
 802148e:	4b1e      	ldr	r3, [pc, #120]	; (8021508 <Calculate_Delta_Displacement+0xd0>)
 8021490:	ed93 7a00 	vldr	s14, [r3]
 8021494:	4b1d      	ldr	r3, [pc, #116]	; (802150c <Calculate_Delta_Displacement+0xd4>)
 8021496:	edd3 7a00 	vldr	s15, [r3]
 802149a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802149e:	ee17 0a90 	vmov	r0, s15
 80214a2:	f7fe ffa9 	bl	80203f8 <__aeabi_f2d>
 80214a6:	f04f 0200 	mov.w	r2, #0
 80214aa:	4b14      	ldr	r3, [pc, #80]	; (80214fc <Calculate_Delta_Displacement+0xc4>)
 80214ac:	f7fe fffc 	bl	80204a8 <__aeabi_dmul>
 80214b0:	4602      	mov	r2, r0
 80214b2:	460b      	mov	r3, r1
 80214b4:	4614      	mov	r4, r2
 80214b6:	461d      	mov	r5, r3
 80214b8:	4b11      	ldr	r3, [pc, #68]	; (8021500 <Calculate_Delta_Displacement+0xc8>)
 80214ba:	681b      	ldr	r3, [r3, #0]
 80214bc:	4618      	mov	r0, r3
 80214be:	f7fe ff9b 	bl	80203f8 <__aeabi_f2d>
 80214c2:	4602      	mov	r2, r0
 80214c4:	460b      	mov	r3, r1
 80214c6:	4620      	mov	r0, r4
 80214c8:	4629      	mov	r1, r5
 80214ca:	f7fe ffed 	bl	80204a8 <__aeabi_dmul>
 80214ce:	4602      	mov	r2, r0
 80214d0:	460b      	mov	r3, r1
 80214d2:	4610      	mov	r0, r2
 80214d4:	4619      	mov	r1, r3
 80214d6:	f7ff fa97 	bl	8020a08 <__aeabi_d2f>
 80214da:	4603      	mov	r3, r0
 80214dc:	4a0c      	ldr	r2, [pc, #48]	; (8021510 <Calculate_Delta_Displacement+0xd8>)
 80214de:	6013      	str	r3, [r2, #0]

	// update velocity
	v_x_prev = v_x;
 80214e0:	4b05      	ldr	r3, [pc, #20]	; (80214f8 <Calculate_Delta_Displacement+0xc0>)
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	4a03      	ldr	r2, [pc, #12]	; (80214f4 <Calculate_Delta_Displacement+0xbc>)
 80214e6:	6013      	str	r3, [r2, #0]
	v_y_prev = v_y;
 80214e8:	4b08      	ldr	r3, [pc, #32]	; (802150c <Calculate_Delta_Displacement+0xd4>)
 80214ea:	681b      	ldr	r3, [r3, #0]
 80214ec:	4a06      	ldr	r2, [pc, #24]	; (8021508 <Calculate_Delta_Displacement+0xd0>)
 80214ee:	6013      	str	r3, [r2, #0]
}
 80214f0:	bf00      	nop
 80214f2:	bdb0      	pop	{r4, r5, r7, pc}
 80214f4:	2000033c 	.word	0x2000033c
 80214f8:	20000338 	.word	0x20000338
 80214fc:	3fe00000 	.word	0x3fe00000
 8021500:	20000334 	.word	0x20000334
 8021504:	20000350 	.word	0x20000350
 8021508:	2000034c 	.word	0x2000034c
 802150c:	20000348 	.word	0x20000348
 8021510:	20000354 	.word	0x20000354

08021514 <Accumulate_Displacement>:


/**
 * @brief Accumulates the ball's displacement vectors
 */
void Accumulate_Displacement() {
 8021514:	b480      	push	{r7}
 8021516:	af00      	add	r7, sp, #0
	Dx += d_x;
 8021518:	4b0d      	ldr	r3, [pc, #52]	; (8021550 <Accumulate_Displacement+0x3c>)
 802151a:	ed93 7a00 	vldr	s14, [r3]
 802151e:	4b0d      	ldr	r3, [pc, #52]	; (8021554 <Accumulate_Displacement+0x40>)
 8021520:	edd3 7a00 	vldr	s15, [r3]
 8021524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021528:	4b09      	ldr	r3, [pc, #36]	; (8021550 <Accumulate_Displacement+0x3c>)
 802152a:	edc3 7a00 	vstr	s15, [r3]
	Dy += d_y;
 802152e:	4b0a      	ldr	r3, [pc, #40]	; (8021558 <Accumulate_Displacement+0x44>)
 8021530:	ed93 7a00 	vldr	s14, [r3]
 8021534:	4b09      	ldr	r3, [pc, #36]	; (802155c <Accumulate_Displacement+0x48>)
 8021536:	edd3 7a00 	vldr	s15, [r3]
 802153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802153e:	4b06      	ldr	r3, [pc, #24]	; (8021558 <Accumulate_Displacement+0x44>)
 8021540:	edc3 7a00 	vstr	s15, [r3]
}
 8021544:	bf00      	nop
 8021546:	46bd      	mov	sp, r7
 8021548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802154c:	4770      	bx	lr
 802154e:	bf00      	nop
 8021550:	20000358 	.word	0x20000358
 8021554:	20000350 	.word	0x20000350
 8021558:	2000035c 	.word	0x2000035c
 802155c:	20000354 	.word	0x20000354

08021560 <Determine_Ball_Movement>:

/**
 * @brief Wrapper function that determines the ball's movement and updates the screen accordingly
 * @params pointers to the (theta_x, theta_y) STM32 orientation angle, returns a 1 if a win has been detected a 0 otherwise
 */
int Determine_Ball_Movement(float* theta_x_in, float* theta_y_in) {
 8021560:	b580      	push	{r7, lr}
 8021562:	b082      	sub	sp, #8
 8021564:	af00      	add	r7, sp, #0
 8021566:	6078      	str	r0, [r7, #4]
 8021568:	6039      	str	r1, [r7, #0]
	Calculate_Ball_Kinematics(theta_x_in, theta_y_in);
 802156a:	6839      	ldr	r1, [r7, #0]
 802156c:	6878      	ldr	r0, [r7, #4]
 802156e:	f7ff fd1b 	bl	8020fa8 <Calculate_Ball_Kinematics>
	Calculate_Ball_Velocity();
 8021572:	f7ff fe97 	bl	80212a4 <Calculate_Ball_Velocity>
	//check for win
	if (win == 1){
 8021576:	4b38      	ldr	r3, [pc, #224]	; (8021658 <Determine_Ball_Movement+0xf8>)
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	2b01      	cmp	r3, #1
 802157c:	d101      	bne.n	8021582 <Determine_Ball_Movement+0x22>
		return 1; //if win has been detected, righturn right away
 802157e:	2301      	movs	r3, #1
 8021580:	e05e      	b.n	8021640 <Determine_Ball_Movement+0xe0>
	}
	Calculate_Delta_Displacement();
 8021582:	f7ff ff59 	bl	8021438 <Calculate_Delta_Displacement>
	Accumulate_Displacement();
 8021586:	f7ff ffc5 	bl	8021514 <Accumulate_Displacement>
	// assume that each pixel represents 1mm
	if (Dx >= DISP_SCALE) {
 802158a:	4b34      	ldr	r3, [pc, #208]	; (802165c <Determine_Ball_Movement+0xfc>)
 802158c:	681b      	ldr	r3, [r3, #0]
 802158e:	4618      	mov	r0, r3
 8021590:	f7fe ff32 	bl	80203f8 <__aeabi_f2d>
 8021594:	a32c      	add	r3, pc, #176	; (adr r3, 8021648 <Determine_Ball_Movement+0xe8>)
 8021596:	e9d3 2300 	ldrd	r2, r3, [r3]
 802159a:	f7ff fa0b 	bl	80209b4 <__aeabi_dcmpge>
 802159e:	4603      	mov	r3, r0
 80215a0:	2b00      	cmp	r3, #0
 80215a2:	d008      	beq.n	80215b6 <Determine_Ball_Movement+0x56>
		Update_Position(1, 0);
 80215a4:	2100      	movs	r1, #0
 80215a6:	2001      	movs	r0, #1
 80215a8:	f7ff fc70 	bl	8020e8c <Update_Position>
		Dx = 0;
 80215ac:	4b2b      	ldr	r3, [pc, #172]	; (802165c <Determine_Ball_Movement+0xfc>)
 80215ae:	f04f 0200 	mov.w	r2, #0
 80215b2:	601a      	str	r2, [r3, #0]
 80215b4:	e015      	b.n	80215e2 <Determine_Ball_Movement+0x82>
	}
	else if (Dx <= -DISP_SCALE) {
 80215b6:	4b29      	ldr	r3, [pc, #164]	; (802165c <Determine_Ball_Movement+0xfc>)
 80215b8:	681b      	ldr	r3, [r3, #0]
 80215ba:	4618      	mov	r0, r3
 80215bc:	f7fe ff1c 	bl	80203f8 <__aeabi_f2d>
 80215c0:	a323      	add	r3, pc, #140	; (adr r3, 8021650 <Determine_Ball_Movement+0xf0>)
 80215c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215c6:	f7ff f9eb 	bl	80209a0 <__aeabi_dcmple>
 80215ca:	4603      	mov	r3, r0
 80215cc:	2b00      	cmp	r3, #0
 80215ce:	d008      	beq.n	80215e2 <Determine_Ball_Movement+0x82>
		Update_Position(-1, 0);
 80215d0:	2100      	movs	r1, #0
 80215d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80215d6:	f7ff fc59 	bl	8020e8c <Update_Position>
		Dx = 0;
 80215da:	4b20      	ldr	r3, [pc, #128]	; (802165c <Determine_Ball_Movement+0xfc>)
 80215dc:	f04f 0200 	mov.w	r2, #0
 80215e0:	601a      	str	r2, [r3, #0]
	}

	if (Dy >= DISP_SCALE) {
 80215e2:	4b1f      	ldr	r3, [pc, #124]	; (8021660 <Determine_Ball_Movement+0x100>)
 80215e4:	681b      	ldr	r3, [r3, #0]
 80215e6:	4618      	mov	r0, r3
 80215e8:	f7fe ff06 	bl	80203f8 <__aeabi_f2d>
 80215ec:	a316      	add	r3, pc, #88	; (adr r3, 8021648 <Determine_Ball_Movement+0xe8>)
 80215ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215f2:	f7ff f9df 	bl	80209b4 <__aeabi_dcmpge>
 80215f6:	4603      	mov	r3, r0
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d008      	beq.n	802160e <Determine_Ball_Movement+0xae>
		Update_Position(0, 1);
 80215fc:	2101      	movs	r1, #1
 80215fe:	2000      	movs	r0, #0
 8021600:	f7ff fc44 	bl	8020e8c <Update_Position>
		Dy = 0;
 8021604:	4b16      	ldr	r3, [pc, #88]	; (8021660 <Determine_Ball_Movement+0x100>)
 8021606:	f04f 0200 	mov.w	r2, #0
 802160a:	601a      	str	r2, [r3, #0]
 802160c:	e015      	b.n	802163a <Determine_Ball_Movement+0xda>
	}
	else if (Dy <= -DISP_SCALE) {
 802160e:	4b14      	ldr	r3, [pc, #80]	; (8021660 <Determine_Ball_Movement+0x100>)
 8021610:	681b      	ldr	r3, [r3, #0]
 8021612:	4618      	mov	r0, r3
 8021614:	f7fe fef0 	bl	80203f8 <__aeabi_f2d>
 8021618:	a30d      	add	r3, pc, #52	; (adr r3, 8021650 <Determine_Ball_Movement+0xf0>)
 802161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802161e:	f7ff f9bf 	bl	80209a0 <__aeabi_dcmple>
 8021622:	4603      	mov	r3, r0
 8021624:	2b00      	cmp	r3, #0
 8021626:	d008      	beq.n	802163a <Determine_Ball_Movement+0xda>
		Update_Position(0, -1);
 8021628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802162c:	2000      	movs	r0, #0
 802162e:	f7ff fc2d 	bl	8020e8c <Update_Position>
		Dy = 0;
 8021632:	4b0b      	ldr	r3, [pc, #44]	; (8021660 <Determine_Ball_Movement+0x100>)
 8021634:	f04f 0200 	mov.w	r2, #0
 8021638:	601a      	str	r2, [r3, #0]
	}
	ssd1306_UpdateScreen();
 802163a:	f008 ff45 	bl	802a4c8 <ssd1306_UpdateScreen>
	return 0;
 802163e:	2300      	movs	r3, #0
}
 8021640:	4618      	mov	r0, r3
 8021642:	3708      	adds	r7, #8
 8021644:	46bd      	mov	sp, r7
 8021646:	bd80      	pop	{r7, pc}
 8021648:	835d548e 	.word	0x835d548e
 802164c:	3f22b97d 	.word	0x3f22b97d
 8021650:	835d548e 	.word	0x835d548e
 8021654:	bf22b97d 	.word	0xbf22b97d
 8021658:	20000368 	.word	0x20000368
 802165c:	20000358 	.word	0x20000358
 8021660:	2000035c 	.word	0x2000035c

08021664 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8021664:	b480      	push	{r7}
 8021666:	b083      	sub	sp, #12
 8021668:	af00      	add	r7, sp, #0
 802166a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 802166c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8021670:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8021674:	f003 0301 	and.w	r3, r3, #1
 8021678:	2b00      	cmp	r3, #0
 802167a:	d013      	beq.n	80216a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 802167c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8021680:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8021684:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8021688:	2b00      	cmp	r3, #0
 802168a:	d00b      	beq.n	80216a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 802168c:	e000      	b.n	8021690 <ITM_SendChar+0x2c>
    {
      __NOP();
 802168e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8021690:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	2b00      	cmp	r3, #0
 8021698:	d0f9      	beq.n	802168e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 802169a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 802169e:	687a      	ldr	r2, [r7, #4]
 80216a0:	b2d2      	uxtb	r2, r2
 80216a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80216a4:	687b      	ldr	r3, [r7, #4]
}
 80216a6:	4618      	mov	r0, r3
 80216a8:	370c      	adds	r7, #12
 80216aa:	46bd      	mov	sp, r7
 80216ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216b0:	4770      	bx	lr
	...

080216b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80216b4:	b580      	push	{r7, lr}
 80216b6:	b08c      	sub	sp, #48	; 0x30
 80216b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80216ba:	f002 fdab 	bl	8024214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80216be:	f000 f8e5 	bl	802188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80216c2:	f000 fb55 	bl	8021d70 <MX_GPIO_Init>
  MX_DMA_Init();
 80216c6:	f000 fb29 	bl	8021d1c <MX_DMA_Init>
  MX_I2C1_Init();
 80216ca:	f000 f965 	bl	8021998 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80216ce:	f000 fad9 	bl	8021c84 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80216d2:	f000 f9a1 	bl	8021a18 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80216d6:	f000 f9df 	bl	8021a98 <MX_OCTOSPI1_Init>
  MX_DAC1_Init();
 80216da:	f000 f929 	bl	8021930 <MX_DAC1_Init>
  MX_TIM2_Init();
 80216de:	f000 fa83 	bl	8021be8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80216e2:	f000 fa2d 	bl	8021b40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize sensors
  Sensors_Init();
 80216e6:	f000 fe59 	bl	802239c <Sensors_Init>
  mazeDisplayInit();
 80216ea:	f000 fc29 	bl	8021f40 <mazeDisplayInit>
  displayMaze1();
 80216ee:	f000 fd57 	bl	80221a0 <displayMaze1>

  //determine start position
  int startPosition = determineStartPosition();
 80216f2:	f000 fc5d 	bl	8021fb0 <determineStartPosition>
 80216f6:	62b8      	str	r0, [r7, #40]	; 0x28
  int startRow = startPosition /16;
 80216f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	da00      	bge.n	8021700 <main+0x4c>
 80216fe:	330f      	adds	r3, #15
 8021700:	111b      	asrs	r3, r3, #4
 8021702:	627b      	str	r3, [r7, #36]	; 0x24
  int startColumn = startPosition % 16;
 8021704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021706:	425a      	negs	r2, r3
 8021708:	f003 030f 	and.w	r3, r3, #15
 802170c:	f002 020f 	and.w	r2, r2, #15
 8021710:	bf58      	it	pl
 8021712:	4253      	negpl	r3, r2
 8021714:	623b      	str	r3, [r7, #32]

  int xPosition = startColumn * 8 +4;
 8021716:	6a3b      	ldr	r3, [r7, #32]
 8021718:	00db      	lsls	r3, r3, #3
 802171a:	3304      	adds	r3, #4
 802171c:	61fb      	str	r3, [r7, #28]
  int yPosition = startRow * 8 + 4;
 802171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021720:	00db      	lsls	r3, r3, #3
 8021722:	3304      	adds	r3, #4
 8021724:	61bb      	str	r3, [r7, #24]

  
  // set sampling frequency and measure gyro bias
  Set_Sampling_Frequency(SAMPLING_FREQUENCY);
 8021726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802172a:	f000 fe43 	bl	80223b4 <Set_Sampling_Frequency>
  Measure_Gyro_Bias();
 802172e:	f000 fe67 	bl	8022400 <Measure_Gyro_Bias>

  //initalize ball posiiton
  Init_Ball(xPosition,yPosition);
 8021732:	69b9      	ldr	r1, [r7, #24]
 8021734:	69f8      	ldr	r0, [r7, #28]
 8021736:	f7ff fb8b 	bl	8020e50 <Init_Ball>

  // initialize maze and ball
  Initialize_Game(TIMESTEP);
 802173a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 802185c <main+0x1a8>
 802173e:	f7ff fb35 	bl	8020dac <Initialize_Game>

  //start timers
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8021742:	2100      	movs	r1, #0
 8021744:	4846      	ldr	r0, [pc, #280]	; (8021860 <main+0x1ac>)
 8021746:	f002 ff30 	bl	80245aa <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 802174a:	4846      	ldr	r0, [pc, #280]	; (8021864 <main+0x1b0>)
 802174c:	f007 fb96 	bl	8028e7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8021750:	4845      	ldr	r0, [pc, #276]	; (8021868 <main+0x1b4>)
 8021752:	f007 fb93 	bl	8028e7c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0; //counter is used to play with frequency of the events in the main loop
 8021756:	2300      	movs	r3, #0
 8021758:	62fb      	str	r3, [r7, #44]	; 0x2c
  timeSec = 0;    //seconds that have elapsed
 802175a:	4b44      	ldr	r3, [pc, #272]	; (802186c <main+0x1b8>)
 802175c:	2200      	movs	r2, #0
 802175e:	601a      	str	r2, [r3, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (timeSec > MAXTIME){
 8021760:	4b42      	ldr	r3, [pc, #264]	; (802186c <main+0x1b8>)
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	2b1e      	cmp	r3, #30
 8021766:	dd07      	ble.n	8021778 <main+0xc4>
		  overBool = 1; //set to 1 to stop timer
 8021768:	4b41      	ldr	r3, [pc, #260]	; (8021870 <main+0x1bc>)
 802176a:	2201      	movs	r2, #1
 802176c:	601a      	str	r2, [r3, #0]
		  gameOver();   //call gameover sequence
 802176e:	f7ff fbf3 	bl	8020f58 <gameOver>
		  winBool = 1; // to enter the reinitializaiton section to restart the game
 8021772:	4b40      	ldr	r3, [pc, #256]	; (8021874 <main+0x1c0>)
 8021774:	2201      	movs	r2, #1
 8021776:	601a      	str	r2, [r3, #0]
	  }
	  if (winBool == 1){ //if win has been found
 8021778:	4b3e      	ldr	r3, [pc, #248]	; (8021874 <main+0x1c0>)
 802177a:	681b      	ldr	r3, [r3, #0]
 802177c:	2b01      	cmp	r3, #1
 802177e:	d136      	bne.n	80217ee <main+0x13a>
		if (overBool!=1){
 8021780:	4b3b      	ldr	r3, [pc, #236]	; (8021870 <main+0x1bc>)
 8021782:	681b      	ldr	r3, [r3, #0]
 8021784:	2b01      	cmp	r3, #1
 8021786:	d001      	beq.n	802178c <main+0xd8>
			winSequence(); 
 8021788:	f7ff fbae 	bl	8020ee8 <winSequence>
		}
      //restart adn reinitialize the game the game
      clearScreen();
 802178c:	f000 fcfe 	bl	802218c <clearScreen>
      selectRandomMaze();
 8021790:	f000 fcde 	bl	8022150 <selectRandomMaze>
      int startPosition = determineStartPosition();
 8021794:	f000 fc0c 	bl	8021fb0 <determineStartPosition>
 8021798:	6178      	str	r0, [r7, #20]
      int startRow = startPosition /16;
 802179a:	697b      	ldr	r3, [r7, #20]
 802179c:	2b00      	cmp	r3, #0
 802179e:	da00      	bge.n	80217a2 <main+0xee>
 80217a0:	330f      	adds	r3, #15
 80217a2:	111b      	asrs	r3, r3, #4
 80217a4:	613b      	str	r3, [r7, #16]
      int startColumn = startPosition % 16;
 80217a6:	697b      	ldr	r3, [r7, #20]
 80217a8:	425a      	negs	r2, r3
 80217aa:	f003 030f 	and.w	r3, r3, #15
 80217ae:	f002 020f 	and.w	r2, r2, #15
 80217b2:	bf58      	it	pl
 80217b4:	4253      	negpl	r3, r2
 80217b6:	60fb      	str	r3, [r7, #12]

      int xPosition = startColumn * 8 +4;
 80217b8:	68fb      	ldr	r3, [r7, #12]
 80217ba:	00db      	lsls	r3, r3, #3
 80217bc:	3304      	adds	r3, #4
 80217be:	60bb      	str	r3, [r7, #8]
      int yPosition = startRow * 8 + 4;
 80217c0:	693b      	ldr	r3, [r7, #16]
 80217c2:	00db      	lsls	r3, r3, #3
 80217c4:	3304      	adds	r3, #4
 80217c6:	607b      	str	r3, [r7, #4]


      Init_Ball(xPosition,yPosition);
 80217c8:	6879      	ldr	r1, [r7, #4]
 80217ca:	68b8      	ldr	r0, [r7, #8]
 80217cc:	f7ff fb40 	bl	8020e50 <Init_Ball>
      displayMaze1();
 80217d0:	f000 fce6 	bl	80221a0 <displayMaze1>
      Initialize_Game(TIMESTEP);
 80217d4:	ed9f 0a21 	vldr	s0, [pc, #132]	; 802185c <main+0x1a8>
 80217d8:	f7ff fae8 	bl	8020dac <Initialize_Game>
      timeSec = 0;  //initialize timer to 0
 80217dc:	4b23      	ldr	r3, [pc, #140]	; (802186c <main+0x1b8>)
 80217de:	2200      	movs	r2, #0
 80217e0:	601a      	str	r2, [r3, #0]
      winBool = 0; //reset = booleans
 80217e2:	4b24      	ldr	r3, [pc, #144]	; (8021874 <main+0x1c0>)
 80217e4:	2200      	movs	r2, #0
 80217e6:	601a      	str	r2, [r3, #0]
      overBool = 0;
 80217e8:	4b21      	ldr	r3, [pc, #132]	; (8021870 <main+0x1bc>)
 80217ea:	2200      	movs	r2, #0
 80217ec:	601a      	str	r2, [r3, #0]
	  }

	  Measure_Orientation(orientation);
 80217ee:	4822      	ldr	r0, [pc, #136]	; (8021878 <main+0x1c4>)
 80217f0:	f000 fe4a 	bl	8022488 <Measure_Orientation>
	  x = orientation[0];
 80217f4:	4b20      	ldr	r3, [pc, #128]	; (8021878 <main+0x1c4>)
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	4a20      	ldr	r2, [pc, #128]	; (802187c <main+0x1c8>)
 80217fa:	6013      	str	r3, [r2, #0]
	  y = orientation[1];
 80217fc:	4b1e      	ldr	r3, [pc, #120]	; (8021878 <main+0x1c4>)
 80217fe:	685b      	ldr	r3, [r3, #4]
 8021800:	4a1f      	ldr	r2, [pc, #124]	; (8021880 <main+0x1cc>)
 8021802:	6013      	str	r3, [r2, #0]

	  HAL_Delay(1);
 8021804:	2001      	movs	r0, #1
 8021806:	f002 fd79 	bl	80242fc <HAL_Delay>

	  if (counter%10 == 0) {
 802180a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802180c:	4b1d      	ldr	r3, [pc, #116]	; (8021884 <main+0x1d0>)
 802180e:	fb83 2301 	smull	r2, r3, r3, r1
 8021812:	109a      	asrs	r2, r3, #2
 8021814:	17cb      	asrs	r3, r1, #31
 8021816:	1ad2      	subs	r2, r2, r3
 8021818:	4613      	mov	r3, r2
 802181a:	009b      	lsls	r3, r3, #2
 802181c:	4413      	add	r3, r2
 802181e:	005b      	lsls	r3, r3, #1
 8021820:	1aca      	subs	r2, r1, r3
 8021822:	2a00      	cmp	r2, #0
 8021824:	d106      	bne.n	8021834 <main+0x180>
		 winBool = Determine_Ball_Movement(&x, &y);
 8021826:	4916      	ldr	r1, [pc, #88]	; (8021880 <main+0x1cc>)
 8021828:	4814      	ldr	r0, [pc, #80]	; (802187c <main+0x1c8>)
 802182a:	f7ff fe99 	bl	8021560 <Determine_Ball_Movement>
 802182e:	4603      	mov	r3, r0
 8021830:	4a10      	ldr	r2, [pc, #64]	; (8021874 <main+0x1c0>)
 8021832:	6013      	str	r3, [r2, #0]
	  }
	  if (counter%100 == 0) {
 8021834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021836:	4b14      	ldr	r3, [pc, #80]	; (8021888 <main+0x1d4>)
 8021838:	fb83 1302 	smull	r1, r3, r3, r2
 802183c:	1159      	asrs	r1, r3, #5
 802183e:	17d3      	asrs	r3, r2, #31
 8021840:	1acb      	subs	r3, r1, r3
 8021842:	2164      	movs	r1, #100	; 0x64
 8021844:	fb01 f303 	mul.w	r3, r1, r3
 8021848:	1ad3      	subs	r3, r2, r3
 802184a:	2b00      	cmp	r3, #0
 802184c:	d101      	bne.n	8021852 <main+0x19e>
		  displayMaze1();
 802184e:	f000 fca7 	bl	80221a0 <displayMaze1>
	  }

	  counter++;
 8021852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021854:	3301      	adds	r3, #1
 8021856:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (timeSec > MAXTIME){
 8021858:	e782      	b.n	8021760 <main+0xac>
 802185a:	bf00      	nop
 802185c:	3c23d70a 	.word	0x3c23d70a
 8021860:	2000036c 	.word	0x2000036c
 8021864:	200004d8 	.word	0x200004d8
 8021868:	20000524 	.word	0x20000524
 802186c:	20000610 	.word	0x20000610
 8021870:	20000614 	.word	0x20000614
 8021874:	20000618 	.word	0x20000618
 8021878:	20000600 	.word	0x20000600
 802187c:	20000608 	.word	0x20000608
 8021880:	2000060c 	.word	0x2000060c
 8021884:	66666667 	.word	0x66666667
 8021888:	51eb851f 	.word	0x51eb851f

0802188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802188c:	b580      	push	{r7, lr}
 802188e:	b096      	sub	sp, #88	; 0x58
 8021890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8021892:	f107 0314 	add.w	r3, r7, #20
 8021896:	2244      	movs	r2, #68	; 0x44
 8021898:	2100      	movs	r1, #0
 802189a:	4618      	mov	r0, r3
 802189c:	f009 f8a6 	bl	802a9ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80218a0:	463b      	mov	r3, r7
 80218a2:	2200      	movs	r2, #0
 80218a4:	601a      	str	r2, [r3, #0]
 80218a6:	605a      	str	r2, [r3, #4]
 80218a8:	609a      	str	r2, [r3, #8]
 80218aa:	60da      	str	r2, [r3, #12]
 80218ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80218ae:	2000      	movs	r0, #0
 80218b0:	f005 fdf8 	bl	80274a4 <HAL_PWREx_ControlVoltageScaling>
 80218b4:	4603      	mov	r3, r0
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	d001      	beq.n	80218be <SystemClock_Config+0x32>
  {
    Error_Handler();
 80218ba:	f000 fb3b 	bl	8021f34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80218be:	2310      	movs	r3, #16
 80218c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80218c2:	2301      	movs	r3, #1
 80218c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80218c6:	2300      	movs	r3, #0
 80218c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80218ca:	2360      	movs	r3, #96	; 0x60
 80218cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80218ce:	2302      	movs	r3, #2
 80218d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80218d2:	2301      	movs	r3, #1
 80218d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80218d6:	2301      	movs	r3, #1
 80218d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80218da:	233c      	movs	r3, #60	; 0x3c
 80218dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80218de:	2302      	movs	r3, #2
 80218e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80218e2:	2302      	movs	r3, #2
 80218e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80218e6:	2302      	movs	r3, #2
 80218e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80218ea:	f107 0314 	add.w	r3, r7, #20
 80218ee:	4618      	mov	r0, r3
 80218f0:	f005 fe7c 	bl	80275ec <HAL_RCC_OscConfig>
 80218f4:	4603      	mov	r3, r0
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	d001      	beq.n	80218fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80218fa:	f000 fb1b 	bl	8021f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80218fe:	230f      	movs	r3, #15
 8021900:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021902:	2303      	movs	r3, #3
 8021904:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8021906:	2300      	movs	r3, #0
 8021908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802190a:	2300      	movs	r3, #0
 802190c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802190e:	2300      	movs	r3, #0
 8021910:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021912:	463b      	mov	r3, r7
 8021914:	2105      	movs	r1, #5
 8021916:	4618      	mov	r0, r3
 8021918:	f006 fa82 	bl	8027e20 <HAL_RCC_ClockConfig>
 802191c:	4603      	mov	r3, r0
 802191e:	2b00      	cmp	r3, #0
 8021920:	d001      	beq.n	8021926 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8021922:	f000 fb07 	bl	8021f34 <Error_Handler>
  }
}
 8021926:	bf00      	nop
 8021928:	3758      	adds	r7, #88	; 0x58
 802192a:	46bd      	mov	sp, r7
 802192c:	bd80      	pop	{r7, pc}
	...

08021930 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8021930:	b580      	push	{r7, lr}
 8021932:	b08a      	sub	sp, #40	; 0x28
 8021934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8021936:	463b      	mov	r3, r7
 8021938:	2228      	movs	r2, #40	; 0x28
 802193a:	2100      	movs	r1, #0
 802193c:	4618      	mov	r0, r3
 802193e:	f009 f855 	bl	802a9ec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8021942:	4b13      	ldr	r3, [pc, #76]	; (8021990 <MX_DAC1_Init+0x60>)
 8021944:	4a13      	ldr	r2, [pc, #76]	; (8021994 <MX_DAC1_Init+0x64>)
 8021946:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8021948:	4811      	ldr	r0, [pc, #68]	; (8021990 <MX_DAC1_Init+0x60>)
 802194a:	f002 fe0c 	bl	8024566 <HAL_DAC_Init>
 802194e:	4603      	mov	r3, r0
 8021950:	2b00      	cmp	r3, #0
 8021952:	d001      	beq.n	8021958 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8021954:	f000 faee 	bl	8021f34 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8021958:	2300      	movs	r3, #0
 802195a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 802195c:	2306      	movs	r3, #6
 802195e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8021960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021964:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8021966:	2300      	movs	r3, #0
 8021968:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 802196a:	2300      	movs	r3, #0
 802196c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 802196e:	2300      	movs	r3, #0
 8021970:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8021972:	463b      	mov	r3, r7
 8021974:	2200      	movs	r2, #0
 8021976:	4619      	mov	r1, r3
 8021978:	4805      	ldr	r0, [pc, #20]	; (8021990 <MX_DAC1_Init+0x60>)
 802197a:	f002 ff99 	bl	80248b0 <HAL_DAC_ConfigChannel>
 802197e:	4603      	mov	r3, r0
 8021980:	2b00      	cmp	r3, #0
 8021982:	d001      	beq.n	8021988 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8021984:	f000 fad6 	bl	8021f34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8021988:	bf00      	nop
 802198a:	3728      	adds	r7, #40	; 0x28
 802198c:	46bd      	mov	sp, r7
 802198e:	bd80      	pop	{r7, pc}
 8021990:	2000036c 	.word	0x2000036c
 8021994:	40007400 	.word	0x40007400

08021998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8021998:	b580      	push	{r7, lr}
 802199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 802199c:	4b1b      	ldr	r3, [pc, #108]	; (8021a0c <MX_I2C1_Init+0x74>)
 802199e:	4a1c      	ldr	r2, [pc, #112]	; (8021a10 <MX_I2C1_Init+0x78>)
 80219a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80219a2:	4b1a      	ldr	r3, [pc, #104]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219a4:	4a1b      	ldr	r2, [pc, #108]	; (8021a14 <MX_I2C1_Init+0x7c>)
 80219a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80219a8:	4b18      	ldr	r3, [pc, #96]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219aa:	2200      	movs	r2, #0
 80219ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80219ae:	4b17      	ldr	r3, [pc, #92]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219b0:	2201      	movs	r2, #1
 80219b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80219b4:	4b15      	ldr	r3, [pc, #84]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219b6:	2200      	movs	r2, #0
 80219b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80219ba:	4b14      	ldr	r3, [pc, #80]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219bc:	2200      	movs	r2, #0
 80219be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80219c0:	4b12      	ldr	r3, [pc, #72]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219c2:	2200      	movs	r2, #0
 80219c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80219c6:	4b11      	ldr	r3, [pc, #68]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219c8:	2200      	movs	r2, #0
 80219ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80219cc:	4b0f      	ldr	r3, [pc, #60]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219ce:	2200      	movs	r2, #0
 80219d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80219d2:	480e      	ldr	r0, [pc, #56]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219d4:	f003 fea0 	bl	8025718 <HAL_I2C_Init>
 80219d8:	4603      	mov	r3, r0
 80219da:	2b00      	cmp	r3, #0
 80219dc:	d001      	beq.n	80219e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80219de:	f000 faa9 	bl	8021f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80219e2:	2100      	movs	r1, #0
 80219e4:	4809      	ldr	r0, [pc, #36]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219e6:	f004 fc29 	bl	802623c <HAL_I2CEx_ConfigAnalogFilter>
 80219ea:	4603      	mov	r3, r0
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	d001      	beq.n	80219f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80219f0:	f000 faa0 	bl	8021f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80219f4:	2100      	movs	r1, #0
 80219f6:	4805      	ldr	r0, [pc, #20]	; (8021a0c <MX_I2C1_Init+0x74>)
 80219f8:	f004 fc6b 	bl	80262d2 <HAL_I2CEx_ConfigDigitalFilter>
 80219fc:	4603      	mov	r3, r0
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d001      	beq.n	8021a06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8021a02:	f000 fa97 	bl	8021f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8021a06:	bf00      	nop
 8021a08:	bd80      	pop	{r7, pc}
 8021a0a:	bf00      	nop
 8021a0c:	200003e0 	.word	0x200003e0
 8021a10:	40005400 	.word	0x40005400
 8021a14:	00b03fdb 	.word	0x00b03fdb

08021a18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8021a18:	b580      	push	{r7, lr}
 8021a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8021a1c:	4b1b      	ldr	r3, [pc, #108]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a1e:	4a1c      	ldr	r2, [pc, #112]	; (8021a90 <MX_I2C2_Init+0x78>)
 8021a20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8021a22:	4b1a      	ldr	r3, [pc, #104]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a24:	4a1b      	ldr	r2, [pc, #108]	; (8021a94 <MX_I2C2_Init+0x7c>)
 8021a26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8021a28:	4b18      	ldr	r3, [pc, #96]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a2a:	2200      	movs	r2, #0
 8021a2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021a2e:	4b17      	ldr	r3, [pc, #92]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a30:	2201      	movs	r2, #1
 8021a32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021a34:	4b15      	ldr	r3, [pc, #84]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a36:	2200      	movs	r2, #0
 8021a38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8021a3a:	4b14      	ldr	r3, [pc, #80]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a3c:	2200      	movs	r2, #0
 8021a3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8021a40:	4b12      	ldr	r3, [pc, #72]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a42:	2200      	movs	r2, #0
 8021a44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021a46:	4b11      	ldr	r3, [pc, #68]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a48:	2200      	movs	r2, #0
 8021a4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8021a4c:	4b0f      	ldr	r3, [pc, #60]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a4e:	2200      	movs	r2, #0
 8021a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8021a52:	480e      	ldr	r0, [pc, #56]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a54:	f003 fe60 	bl	8025718 <HAL_I2C_Init>
 8021a58:	4603      	mov	r3, r0
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d001      	beq.n	8021a62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8021a5e:	f000 fa69 	bl	8021f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8021a62:	2100      	movs	r1, #0
 8021a64:	4809      	ldr	r0, [pc, #36]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a66:	f004 fbe9 	bl	802623c <HAL_I2CEx_ConfigAnalogFilter>
 8021a6a:	4603      	mov	r3, r0
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	d001      	beq.n	8021a74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8021a70:	f000 fa60 	bl	8021f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8021a74:	2100      	movs	r1, #0
 8021a76:	4805      	ldr	r0, [pc, #20]	; (8021a8c <MX_I2C2_Init+0x74>)
 8021a78:	f004 fc2b 	bl	80262d2 <HAL_I2CEx_ConfigDigitalFilter>
 8021a7c:	4603      	mov	r3, r0
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d001      	beq.n	8021a86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8021a82:	f000 fa57 	bl	8021f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8021a86:	bf00      	nop
 8021a88:	bd80      	pop	{r7, pc}
 8021a8a:	bf00      	nop
 8021a8c:	20000434 	.word	0x20000434
 8021a90:	40005800 	.word	0x40005800
 8021a94:	307075b1 	.word	0x307075b1

08021a98 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8021a98:	b580      	push	{r7, lr}
 8021a9a:	b086      	sub	sp, #24
 8021a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8021a9e:	1d3b      	adds	r3, r7, #4
 8021aa0:	2200      	movs	r2, #0
 8021aa2:	601a      	str	r2, [r3, #0]
 8021aa4:	605a      	str	r2, [r3, #4]
 8021aa6:	609a      	str	r2, [r3, #8]
 8021aa8:	60da      	str	r2, [r3, #12]
 8021aaa:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8021aac:	4b22      	ldr	r3, [pc, #136]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021aae:	4a23      	ldr	r2, [pc, #140]	; (8021b3c <MX_OCTOSPI1_Init+0xa4>)
 8021ab0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8021ab2:	4b21      	ldr	r3, [pc, #132]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021ab4:	2201      	movs	r2, #1
 8021ab6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8021ab8:	4b1f      	ldr	r3, [pc, #124]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021aba:	2200      	movs	r2, #0
 8021abc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8021abe:	4b1e      	ldr	r3, [pc, #120]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021ac0:	2200      	movs	r2, #0
 8021ac2:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8021ac4:	4b1c      	ldr	r3, [pc, #112]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021ac6:	2220      	movs	r2, #32
 8021ac8:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8021aca:	4b1b      	ldr	r3, [pc, #108]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021acc:	2201      	movs	r2, #1
 8021ace:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8021ad0:	4b19      	ldr	r3, [pc, #100]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021ad2:	2200      	movs	r2, #0
 8021ad4:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8021ad6:	4b18      	ldr	r3, [pc, #96]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021ad8:	2200      	movs	r2, #0
 8021ada:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8021adc:	4b16      	ldr	r3, [pc, #88]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021ade:	2201      	movs	r2, #1
 8021ae0:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8021ae2:	4b15      	ldr	r3, [pc, #84]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021ae4:	2200      	movs	r2, #0
 8021ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8021ae8:	4b13      	ldr	r3, [pc, #76]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021aea:	2200      	movs	r2, #0
 8021aec:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8021aee:	4b12      	ldr	r3, [pc, #72]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021af0:	2200      	movs	r2, #0
 8021af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8021af4:	4b10      	ldr	r3, [pc, #64]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021af6:	2208      	movs	r2, #8
 8021af8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8021afa:	480f      	ldr	r0, [pc, #60]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021afc:	f004 fc36 	bl	802636c <HAL_OSPI_Init>
 8021b00:	4603      	mov	r3, r0
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d001      	beq.n	8021b0a <MX_OCTOSPI1_Init+0x72>
  {
    Error_Handler();
 8021b06:	f000 fa15 	bl	8021f34 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8021b0a:	2301      	movs	r3, #1
 8021b0c:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8021b0e:	2301      	movs	r3, #1
 8021b10:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8021b12:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8021b16:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8021b18:	1d3b      	adds	r3, r7, #4
 8021b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8021b1e:	4619      	mov	r1, r3
 8021b20:	4805      	ldr	r0, [pc, #20]	; (8021b38 <MX_OCTOSPI1_Init+0xa0>)
 8021b22:	f004 ff21 	bl	8026968 <HAL_OSPIM_Config>
 8021b26:	4603      	mov	r3, r0
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	d001      	beq.n	8021b30 <MX_OCTOSPI1_Init+0x98>
  {
    Error_Handler();
 8021b2c:	f000 fa02 	bl	8021f34 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8021b30:	bf00      	nop
 8021b32:	3718      	adds	r7, #24
 8021b34:	46bd      	mov	sp, r7
 8021b36:	bd80      	pop	{r7, pc}
 8021b38:	20000488 	.word	0x20000488
 8021b3c:	a0001000 	.word	0xa0001000

08021b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b088      	sub	sp, #32
 8021b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021b46:	f107 0310 	add.w	r3, r7, #16
 8021b4a:	2200      	movs	r2, #0
 8021b4c:	601a      	str	r2, [r3, #0]
 8021b4e:	605a      	str	r2, [r3, #4]
 8021b50:	609a      	str	r2, [r3, #8]
 8021b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021b54:	1d3b      	adds	r3, r7, #4
 8021b56:	2200      	movs	r2, #0
 8021b58:	601a      	str	r2, [r3, #0]
 8021b5a:	605a      	str	r2, [r3, #4]
 8021b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021b5e:	4b20      	ldr	r3, [pc, #128]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021b60:	4a20      	ldr	r2, [pc, #128]	; (8021be4 <MX_TIM1_Init+0xa4>)
 8021b62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8021b64:	4b1e      	ldr	r3, [pc, #120]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021b66:	2200      	movs	r2, #0
 8021b68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021b6a:	4b1d      	ldr	r3, [pc, #116]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021b6c:	2200      	movs	r2, #0
 8021b6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2722;
 8021b70:	4b1b      	ldr	r3, [pc, #108]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021b72:	f640 22a2 	movw	r2, #2722	; 0xaa2
 8021b76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021b78:	4b19      	ldr	r3, [pc, #100]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021b7a:	2200      	movs	r2, #0
 8021b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021b7e:	4b18      	ldr	r3, [pc, #96]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021b80:	2200      	movs	r2, #0
 8021b82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021b84:	4b16      	ldr	r3, [pc, #88]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021b86:	2200      	movs	r2, #0
 8021b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8021b8a:	4815      	ldr	r0, [pc, #84]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021b8c:	f007 f91e 	bl	8028dcc <HAL_TIM_Base_Init>
 8021b90:	4603      	mov	r3, r0
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	d001      	beq.n	8021b9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8021b96:	f000 f9cd 	bl	8021f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021b9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8021ba0:	f107 0310 	add.w	r3, r7, #16
 8021ba4:	4619      	mov	r1, r3
 8021ba6:	480e      	ldr	r0, [pc, #56]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021ba8:	f007 faf7 	bl	802919a <HAL_TIM_ConfigClockSource>
 8021bac:	4603      	mov	r3, r0
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	d001      	beq.n	8021bb6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8021bb2:	f000 f9bf 	bl	8021f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8021bb6:	2320      	movs	r3, #32
 8021bb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8021bba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021bbe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021bc0:	2300      	movs	r3, #0
 8021bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021bc4:	1d3b      	adds	r3, r7, #4
 8021bc6:	4619      	mov	r1, r3
 8021bc8:	4805      	ldr	r0, [pc, #20]	; (8021be0 <MX_TIM1_Init+0xa0>)
 8021bca:	f007 fd0b 	bl	80295e4 <HAL_TIMEx_MasterConfigSynchronization>
 8021bce:	4603      	mov	r3, r0
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	d001      	beq.n	8021bd8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8021bd4:	f000 f9ae 	bl	8021f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8021bd8:	bf00      	nop
 8021bda:	3720      	adds	r7, #32
 8021bdc:	46bd      	mov	sp, r7
 8021bde:	bd80      	pop	{r7, pc}
 8021be0:	200004d8 	.word	0x200004d8
 8021be4:	40012c00 	.word	0x40012c00

08021be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8021be8:	b580      	push	{r7, lr}
 8021bea:	b088      	sub	sp, #32
 8021bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021bee:	f107 0310 	add.w	r3, r7, #16
 8021bf2:	2200      	movs	r2, #0
 8021bf4:	601a      	str	r2, [r3, #0]
 8021bf6:	605a      	str	r2, [r3, #4]
 8021bf8:	609a      	str	r2, [r3, #8]
 8021bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021bfc:	1d3b      	adds	r3, r7, #4
 8021bfe:	2200      	movs	r2, #0
 8021c00:	601a      	str	r2, [r3, #0]
 8021c02:	605a      	str	r2, [r3, #4]
 8021c04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8021c06:	4b1d      	ldr	r3, [pc, #116]	; (8021c7c <MX_TIM2_Init+0x94>)
 8021c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8021c0e:	4b1b      	ldr	r3, [pc, #108]	; (8021c7c <MX_TIM2_Init+0x94>)
 8021c10:	2278      	movs	r2, #120	; 0x78
 8021c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021c14:	4b19      	ldr	r3, [pc, #100]	; (8021c7c <MX_TIM2_Init+0x94>)
 8021c16:	2200      	movs	r2, #0
 8021c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8021c1a:	4b18      	ldr	r3, [pc, #96]	; (8021c7c <MX_TIM2_Init+0x94>)
 8021c1c:	4a18      	ldr	r2, [pc, #96]	; (8021c80 <MX_TIM2_Init+0x98>)
 8021c1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021c20:	4b16      	ldr	r3, [pc, #88]	; (8021c7c <MX_TIM2_Init+0x94>)
 8021c22:	2200      	movs	r2, #0
 8021c24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021c26:	4b15      	ldr	r3, [pc, #84]	; (8021c7c <MX_TIM2_Init+0x94>)
 8021c28:	2200      	movs	r2, #0
 8021c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8021c2c:	4813      	ldr	r0, [pc, #76]	; (8021c7c <MX_TIM2_Init+0x94>)
 8021c2e:	f007 f8cd 	bl	8028dcc <HAL_TIM_Base_Init>
 8021c32:	4603      	mov	r3, r0
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d001      	beq.n	8021c3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8021c38:	f000 f97c 	bl	8021f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021c40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8021c42:	f107 0310 	add.w	r3, r7, #16
 8021c46:	4619      	mov	r1, r3
 8021c48:	480c      	ldr	r0, [pc, #48]	; (8021c7c <MX_TIM2_Init+0x94>)
 8021c4a:	f007 faa6 	bl	802919a <HAL_TIM_ConfigClockSource>
 8021c4e:	4603      	mov	r3, r0
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d001      	beq.n	8021c58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8021c54:	f000 f96e 	bl	8021f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8021c58:	2320      	movs	r3, #32
 8021c5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8021c60:	1d3b      	adds	r3, r7, #4
 8021c62:	4619      	mov	r1, r3
 8021c64:	4805      	ldr	r0, [pc, #20]	; (8021c7c <MX_TIM2_Init+0x94>)
 8021c66:	f007 fcbd 	bl	80295e4 <HAL_TIMEx_MasterConfigSynchronization>
 8021c6a:	4603      	mov	r3, r0
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	d001      	beq.n	8021c74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8021c70:	f000 f960 	bl	8021f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8021c74:	bf00      	nop
 8021c76:	3720      	adds	r7, #32
 8021c78:	46bd      	mov	sp, r7
 8021c7a:	bd80      	pop	{r7, pc}
 8021c7c:	20000524 	.word	0x20000524
 8021c80:	000f4240 	.word	0x000f4240

08021c84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8021c84:	b580      	push	{r7, lr}
 8021c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8021c88:	4b22      	ldr	r3, [pc, #136]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021c8a:	4a23      	ldr	r2, [pc, #140]	; (8021d18 <MX_USART1_UART_Init+0x94>)
 8021c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8021c8e:	4b21      	ldr	r3, [pc, #132]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8021c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8021c96:	4b1f      	ldr	r3, [pc, #124]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021c98:	2200      	movs	r2, #0
 8021c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8021c9c:	4b1d      	ldr	r3, [pc, #116]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021c9e:	2200      	movs	r2, #0
 8021ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8021ca2:	4b1c      	ldr	r3, [pc, #112]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021ca4:	2200      	movs	r2, #0
 8021ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8021ca8:	4b1a      	ldr	r3, [pc, #104]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021caa:	220c      	movs	r2, #12
 8021cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021cae:	4b19      	ldr	r3, [pc, #100]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021cb0:	2200      	movs	r2, #0
 8021cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8021cb4:	4b17      	ldr	r3, [pc, #92]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021cb6:	2200      	movs	r2, #0
 8021cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8021cba:	4b16      	ldr	r3, [pc, #88]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021cbc:	2200      	movs	r2, #0
 8021cbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8021cc0:	4b14      	ldr	r3, [pc, #80]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021cc2:	2200      	movs	r2, #0
 8021cc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8021cc6:	4b13      	ldr	r3, [pc, #76]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021cc8:	2200      	movs	r2, #0
 8021cca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8021ccc:	4811      	ldr	r0, [pc, #68]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021cce:	f007 fd2f 	bl	8029730 <HAL_UART_Init>
 8021cd2:	4603      	mov	r3, r0
 8021cd4:	2b00      	cmp	r3, #0
 8021cd6:	d001      	beq.n	8021cdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8021cd8:	f000 f92c 	bl	8021f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021cdc:	2100      	movs	r1, #0
 8021cde:	480d      	ldr	r0, [pc, #52]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021ce0:	f008 fa60 	bl	802a1a4 <HAL_UARTEx_SetTxFifoThreshold>
 8021ce4:	4603      	mov	r3, r0
 8021ce6:	2b00      	cmp	r3, #0
 8021ce8:	d001      	beq.n	8021cee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8021cea:	f000 f923 	bl	8021f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021cee:	2100      	movs	r1, #0
 8021cf0:	4808      	ldr	r0, [pc, #32]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021cf2:	f008 fa95 	bl	802a220 <HAL_UARTEx_SetRxFifoThreshold>
 8021cf6:	4603      	mov	r3, r0
 8021cf8:	2b00      	cmp	r3, #0
 8021cfa:	d001      	beq.n	8021d00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8021cfc:	f000 f91a 	bl	8021f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8021d00:	4804      	ldr	r0, [pc, #16]	; (8021d14 <MX_USART1_UART_Init+0x90>)
 8021d02:	f008 fa16 	bl	802a132 <HAL_UARTEx_DisableFifoMode>
 8021d06:	4603      	mov	r3, r0
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	d001      	beq.n	8021d10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8021d0c:	f000 f912 	bl	8021f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8021d10:	bf00      	nop
 8021d12:	bd80      	pop	{r7, pc}
 8021d14:	20000570 	.word	0x20000570
 8021d18:	40013800 	.word	0x40013800

08021d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8021d1c:	b580      	push	{r7, lr}
 8021d1e:	b082      	sub	sp, #8
 8021d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8021d22:	4b12      	ldr	r3, [pc, #72]	; (8021d6c <MX_DMA_Init+0x50>)
 8021d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021d26:	4a11      	ldr	r2, [pc, #68]	; (8021d6c <MX_DMA_Init+0x50>)
 8021d28:	f043 0304 	orr.w	r3, r3, #4
 8021d2c:	6493      	str	r3, [r2, #72]	; 0x48
 8021d2e:	4b0f      	ldr	r3, [pc, #60]	; (8021d6c <MX_DMA_Init+0x50>)
 8021d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021d32:	f003 0304 	and.w	r3, r3, #4
 8021d36:	607b      	str	r3, [r7, #4]
 8021d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8021d3a:	4b0c      	ldr	r3, [pc, #48]	; (8021d6c <MX_DMA_Init+0x50>)
 8021d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021d3e:	4a0b      	ldr	r2, [pc, #44]	; (8021d6c <MX_DMA_Init+0x50>)
 8021d40:	f043 0301 	orr.w	r3, r3, #1
 8021d44:	6493      	str	r3, [r2, #72]	; 0x48
 8021d46:	4b09      	ldr	r3, [pc, #36]	; (8021d6c <MX_DMA_Init+0x50>)
 8021d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021d4a:	f003 0301 	and.w	r3, r3, #1
 8021d4e:	603b      	str	r3, [r7, #0]
 8021d50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8021d52:	2200      	movs	r2, #0
 8021d54:	2100      	movs	r1, #0
 8021d56:	200b      	movs	r0, #11
 8021d58:	f002 fbcf 	bl	80244fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8021d5c:	200b      	movs	r0, #11
 8021d5e:	f002 fbe8 	bl	8024532 <HAL_NVIC_EnableIRQ>

}
 8021d62:	bf00      	nop
 8021d64:	3708      	adds	r7, #8
 8021d66:	46bd      	mov	sp, r7
 8021d68:	bd80      	pop	{r7, pc}
 8021d6a:	bf00      	nop
 8021d6c:	40021000 	.word	0x40021000

08021d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8021d70:	b580      	push	{r7, lr}
 8021d72:	b08a      	sub	sp, #40	; 0x28
 8021d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021d76:	f107 0314 	add.w	r3, r7, #20
 8021d7a:	2200      	movs	r2, #0
 8021d7c:	601a      	str	r2, [r3, #0]
 8021d7e:	605a      	str	r2, [r3, #4]
 8021d80:	609a      	str	r2, [r3, #8]
 8021d82:	60da      	str	r2, [r3, #12]
 8021d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021d86:	4b25      	ldr	r3, [pc, #148]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021d8a:	4a24      	ldr	r2, [pc, #144]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021d8c:	f043 0304 	orr.w	r3, r3, #4
 8021d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8021d92:	4b22      	ldr	r3, [pc, #136]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021d96:	f003 0304 	and.w	r3, r3, #4
 8021d9a:	613b      	str	r3, [r7, #16]
 8021d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021d9e:	4b1f      	ldr	r3, [pc, #124]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021da2:	4a1e      	ldr	r2, [pc, #120]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021da4:	f043 0301 	orr.w	r3, r3, #1
 8021da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8021daa:	4b1c      	ldr	r3, [pc, #112]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021dae:	f003 0301 	and.w	r3, r3, #1
 8021db2:	60fb      	str	r3, [r7, #12]
 8021db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8021db6:	4b19      	ldr	r3, [pc, #100]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021dba:	4a18      	ldr	r2, [pc, #96]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021dbc:	f043 0310 	orr.w	r3, r3, #16
 8021dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8021dc2:	4b16      	ldr	r3, [pc, #88]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021dc6:	f003 0310 	and.w	r3, r3, #16
 8021dca:	60bb      	str	r3, [r7, #8]
 8021dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021dce:	4b13      	ldr	r3, [pc, #76]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021dd2:	4a12      	ldr	r2, [pc, #72]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021dd4:	f043 0302 	orr.w	r3, r3, #2
 8021dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8021dda:	4b10      	ldr	r3, [pc, #64]	; (8021e1c <MX_GPIO_Init+0xac>)
 8021ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021dde:	f003 0302 	and.w	r3, r3, #2
 8021de2:	607b      	str	r3, [r7, #4]
 8021de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8021de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8021dec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8021df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021df2:	2300      	movs	r3, #0
 8021df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8021df6:	f107 0314 	add.w	r3, r7, #20
 8021dfa:	4619      	mov	r1, r3
 8021dfc:	4808      	ldr	r0, [pc, #32]	; (8021e20 <MX_GPIO_Init+0xb0>)
 8021dfe:	f003 f9ef 	bl	80251e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8021e02:	2200      	movs	r2, #0
 8021e04:	2100      	movs	r1, #0
 8021e06:	2028      	movs	r0, #40	; 0x28
 8021e08:	f002 fb77 	bl	80244fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8021e0c:	2028      	movs	r0, #40	; 0x28
 8021e0e:	f002 fb90 	bl	8024532 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8021e12:	bf00      	nop
 8021e14:	3728      	adds	r7, #40	; 0x28
 8021e16:	46bd      	mov	sp, r7
 8021e18:	bd80      	pop	{r7, pc}
 8021e1a:	bf00      	nop
 8021e1c:	40021000 	.word	0x40021000
 8021e20:	48000800 	.word	0x48000800

08021e24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//call back function for timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021e24:	b580      	push	{r7, lr}
 8021e26:	b082      	sub	sp, #8
 8021e28:	af00      	add	r7, sp, #0
 8021e2a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && winBool == 0 && overBool == 0 ) { //make sure the timer does not continue with a win or loss has been detected
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	681b      	ldr	r3, [r3, #0]
 8021e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021e34:	d112      	bne.n	8021e5c <HAL_TIM_PeriodElapsedCallback+0x38>
 8021e36:	4b0b      	ldr	r3, [pc, #44]	; (8021e64 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8021e38:	681b      	ldr	r3, [r3, #0]
 8021e3a:	2b00      	cmp	r3, #0
 8021e3c:	d10e      	bne.n	8021e5c <HAL_TIM_PeriodElapsedCallback+0x38>
 8021e3e:	4b0a      	ldr	r3, [pc, #40]	; (8021e68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8021e40:	681b      	ldr	r3, [r3, #0]
 8021e42:	2b00      	cmp	r3, #0
 8021e44:	d10a      	bne.n	8021e5c <HAL_TIM_PeriodElapsedCallback+0x38>
		timeSec++; //upate total time elapsed
 8021e46:	4b09      	ldr	r3, [pc, #36]	; (8021e6c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	3301      	adds	r3, #1
 8021e4c:	4a07      	ldr	r2, [pc, #28]	; (8021e6c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8021e4e:	6013      	str	r3, [r2, #0]
		updateTime(timeSec, MAXTIME);   //update the screen
 8021e50:	4b06      	ldr	r3, [pc, #24]	; (8021e6c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8021e52:	681b      	ldr	r3, [r3, #0]
 8021e54:	211e      	movs	r1, #30
 8021e56:	4618      	mov	r0, r3
 8021e58:	f000 f948 	bl	80220ec <updateTime>
	}
}
 8021e5c:	bf00      	nop
 8021e5e:	3708      	adds	r7, #8
 8021e60:	46bd      	mov	sp, r7
 8021e62:	bd80      	pop	{r7, pc}
 8021e64:	20000618 	.word	0x20000618
 8021e68:	20000614 	.word	0x20000614
 8021e6c:	20000610 	.word	0x20000610

08021e70 <HAL_GPIO_EXTI_Callback>:

//callback function for hardware interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ //reinitialize the maze and the timer and restart the game
 8021e70:	b580      	push	{r7, lr}
 8021e72:	b088      	sub	sp, #32
 8021e74:	af00      	add	r7, sp, #0
 8021e76:	4603      	mov	r3, r0
 8021e78:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) { //verify pin
 8021e7a:	88fb      	ldrh	r3, [r7, #6]
 8021e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8021e80:	d130      	bne.n	8021ee4 <HAL_GPIO_EXTI_Callback+0x74>
		clearScreen();
 8021e82:	f000 f983 	bl	802218c <clearScreen>
		selectRandomMaze();
 8021e86:	f000 f963 	bl	8022150 <selectRandomMaze>
		int startPosition = determineStartPosition();
 8021e8a:	f000 f891 	bl	8021fb0 <determineStartPosition>
 8021e8e:	61f8      	str	r0, [r7, #28]
		int startRow = startPosition /16;
 8021e90:	69fb      	ldr	r3, [r7, #28]
 8021e92:	2b00      	cmp	r3, #0
 8021e94:	da00      	bge.n	8021e98 <HAL_GPIO_EXTI_Callback+0x28>
 8021e96:	330f      	adds	r3, #15
 8021e98:	111b      	asrs	r3, r3, #4
 8021e9a:	61bb      	str	r3, [r7, #24]
		int startColumn = startPosition % 16;
 8021e9c:	69fb      	ldr	r3, [r7, #28]
 8021e9e:	425a      	negs	r2, r3
 8021ea0:	f003 030f 	and.w	r3, r3, #15
 8021ea4:	f002 020f 	and.w	r2, r2, #15
 8021ea8:	bf58      	it	pl
 8021eaa:	4253      	negpl	r3, r2
 8021eac:	617b      	str	r3, [r7, #20]

		int xPosition = startColumn * 8 +4;
 8021eae:	697b      	ldr	r3, [r7, #20]
 8021eb0:	00db      	lsls	r3, r3, #3
 8021eb2:	3304      	adds	r3, #4
 8021eb4:	613b      	str	r3, [r7, #16]
		int yPosition = startRow * 8 + 4;
 8021eb6:	69bb      	ldr	r3, [r7, #24]
 8021eb8:	00db      	lsls	r3, r3, #3
 8021eba:	3304      	adds	r3, #4
 8021ebc:	60fb      	str	r3, [r7, #12]

    timeSec = 0;
 8021ebe:	4b0b      	ldr	r3, [pc, #44]	; (8021eec <HAL_GPIO_EXTI_Callback+0x7c>)
 8021ec0:	2200      	movs	r2, #0
 8021ec2:	601a      	str	r2, [r3, #0]
    winBool = 0;
 8021ec4:	4b0a      	ldr	r3, [pc, #40]	; (8021ef0 <HAL_GPIO_EXTI_Callback+0x80>)
 8021ec6:	2200      	movs	r2, #0
 8021ec8:	601a      	str	r2, [r3, #0]
    overBool = 0;
 8021eca:	4b0a      	ldr	r3, [pc, #40]	; (8021ef4 <HAL_GPIO_EXTI_Callback+0x84>)
 8021ecc:	2200      	movs	r2, #0
 8021ece:	601a      	str	r2, [r3, #0]
		Init_Ball(xPosition,yPosition);
 8021ed0:	68f9      	ldr	r1, [r7, #12]
 8021ed2:	6938      	ldr	r0, [r7, #16]
 8021ed4:	f7fe ffbc 	bl	8020e50 <Init_Ball>
		displayMaze1();
 8021ed8:	f000 f962 	bl	80221a0 <displayMaze1>
		Initialize_Game(TIMESTEP);
 8021edc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8021ef8 <HAL_GPIO_EXTI_Callback+0x88>
 8021ee0:	f7fe ff64 	bl	8020dac <Initialize_Game>
	}
}
 8021ee4:	bf00      	nop
 8021ee6:	3720      	adds	r7, #32
 8021ee8:	46bd      	mov	sp, r7
 8021eea:	bd80      	pop	{r7, pc}
 8021eec:	20000610 	.word	0x20000610
 8021ef0:	20000618 	.word	0x20000618
 8021ef4:	20000614 	.word	0x20000614
 8021ef8:	3c23d70a 	.word	0x3c23d70a

08021efc <_write>:



//function for printing to console (swb port 0)
int _write(int file, char *ptr, int len)
{
 8021efc:	b580      	push	{r7, lr}
 8021efe:	b086      	sub	sp, #24
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	60f8      	str	r0, [r7, #12]
 8021f04:	60b9      	str	r1, [r7, #8]
 8021f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021f08:	2300      	movs	r3, #0
 8021f0a:	617b      	str	r3, [r7, #20]
 8021f0c:	e009      	b.n	8021f22 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8021f0e:	68bb      	ldr	r3, [r7, #8]
 8021f10:	1c5a      	adds	r2, r3, #1
 8021f12:	60ba      	str	r2, [r7, #8]
 8021f14:	781b      	ldrb	r3, [r3, #0]
 8021f16:	4618      	mov	r0, r3
 8021f18:	f7ff fba4 	bl	8021664 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021f1c:	697b      	ldr	r3, [r7, #20]
 8021f1e:	3301      	adds	r3, #1
 8021f20:	617b      	str	r3, [r7, #20]
 8021f22:	697a      	ldr	r2, [r7, #20]
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	429a      	cmp	r2, r3
 8021f28:	dbf1      	blt.n	8021f0e <_write+0x12>
  }
  return len;
 8021f2a:	687b      	ldr	r3, [r7, #4]
}
 8021f2c:	4618      	mov	r0, r3
 8021f2e:	3718      	adds	r7, #24
 8021f30:	46bd      	mov	sp, r7
 8021f32:	bd80      	pop	{r7, pc}

08021f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021f34:	b480      	push	{r7}
 8021f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021f38:	b672      	cpsid	i
}
 8021f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021f3c:	e7fe      	b.n	8021f3c <Error_Handler+0x8>
	...

08021f40 <mazeDisplayInit>:
uint32_t sineValue[500];
uint32_t sine2Value[200];

#define MAZE_NUM 4; //number of mazes currently loaded to QPSI

void mazeDisplayInit() {
 8021f40:	b580      	push	{r7, lr}
 8021f42:	af00      	add	r7, sp, #0
	  BSP_QSPI_Init();
 8021f44:	f000 fe9e 	bl	8022c84 <BSP_QSPI_Init>
	  srand(time(NULL));  // seed the random number generator
 8021f48:	2000      	movs	r0, #0
 8021f4a:	f008 fde3 	bl	802ab14 <time>
 8021f4e:	4602      	mov	r2, r0
 8021f50:	460b      	mov	r3, r1
 8021f52:	4613      	mov	r3, r2
 8021f54:	4618      	mov	r0, r3
 8021f56:	f008 fd51 	bl	802a9fc <srand>
	  ssd1306_Init();
 8021f5a:	f008 fa27 	bl	802a3ac <ssd1306_Init>

	  writeMazesToFlash();
 8021f5e:	f000 f80b 	bl	8021f78 <writeMazesToFlash>
	  //initializeSounds();


	  readMazeFromSector(0, rMaze); //read initial maze
 8021f62:	4904      	ldr	r1, [pc, #16]	; (8021f74 <mazeDisplayInit+0x34>)
 8021f64:	2000      	movs	r0, #0
 8021f66:	f000 fa05 	bl	8022374 <readMazeFromSector>
//	  readMazeFromSector(1, rMaze);
	  convertLoadedMazeToDisplayedMaze(rMaze);
 8021f6a:	4802      	ldr	r0, [pc, #8]	; (8021f74 <mazeDisplayInit+0x34>)
 8021f6c:	f000 f946 	bl	80221fc <convertLoadedMazeToDisplayedMaze>
}
 8021f70:	bf00      	nop
 8021f72:	bd80      	pop	{r7, pc}
 8021f74:	2000061c 	.word	0x2000061c

08021f78 <writeMazesToFlash>:

void writeMazesToFlash() {
 8021f78:	b580      	push	{r7, lr}
 8021f7a:	af00      	add	r7, sp, #0
	writeMazeToSectors(0, toLoadMaze4);
 8021f7c:	4908      	ldr	r1, [pc, #32]	; (8021fa0 <writeMazesToFlash+0x28>)
 8021f7e:	2000      	movs	r0, #0
 8021f80:	f000 f9da 	bl	8022338 <writeMazeToSectors>
	writeMazeToSectors(1, toLoadMaze5);
 8021f84:	4907      	ldr	r1, [pc, #28]	; (8021fa4 <writeMazesToFlash+0x2c>)
 8021f86:	2001      	movs	r0, #1
 8021f88:	f000 f9d6 	bl	8022338 <writeMazeToSectors>
	writeMazeToSectors(2, toLoadMaze6);
 8021f8c:	4906      	ldr	r1, [pc, #24]	; (8021fa8 <writeMazesToFlash+0x30>)
 8021f8e:	2002      	movs	r0, #2
 8021f90:	f000 f9d2 	bl	8022338 <writeMazeToSectors>
	writeMazeToSectors(3, toLoadMaze7);
 8021f94:	4905      	ldr	r1, [pc, #20]	; (8021fac <writeMazesToFlash+0x34>)
 8021f96:	2003      	movs	r0, #3
 8021f98:	f000 f9ce 	bl	8022338 <writeMazeToSectors>
}
 8021f9c:	bf00      	nop
 8021f9e:	bd80      	pop	{r7, pc}
 8021fa0:	20000000 	.word	0x20000000
 8021fa4:	20000080 	.word	0x20000080
 8021fa8:	20000100 	.word	0x20000100
 8021fac:	20000180 	.word	0x20000180

08021fb0 <determineStartPosition>:

int determineStartPosition() {
 8021fb0:	b480      	push	{r7}
 8021fb2:	b083      	sub	sp, #12
 8021fb4:	af00      	add	r7, sp, #0
	int result = -1;
 8021fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021fba:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 128; i++) {
 8021fbc:	2300      	movs	r3, #0
 8021fbe:	607b      	str	r3, [r7, #4]
 8021fc0:	e00c      	b.n	8021fdc <determineStartPosition+0x2c>
		if(rMaze[i] & 32) {
 8021fc2:	4a0b      	ldr	r2, [pc, #44]	; (8021ff0 <determineStartPosition+0x40>)
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	4413      	add	r3, r2
 8021fc8:	781b      	ldrb	r3, [r3, #0]
 8021fca:	f003 0320 	and.w	r3, r3, #32
 8021fce:	2b00      	cmp	r3, #0
 8021fd0:	d001      	beq.n	8021fd6 <determineStartPosition+0x26>
			return i;
 8021fd2:	687b      	ldr	r3, [r7, #4]
 8021fd4:	e006      	b.n	8021fe4 <determineStartPosition+0x34>
	for(int i = 0; i < 128; i++) {
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	3301      	adds	r3, #1
 8021fda:	607b      	str	r3, [r7, #4]
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	2b7f      	cmp	r3, #127	; 0x7f
 8021fe0:	ddef      	ble.n	8021fc2 <determineStartPosition+0x12>
		}
	}

	return result;
 8021fe2:	683b      	ldr	r3, [r7, #0]
}
 8021fe4:	4618      	mov	r0, r3
 8021fe6:	370c      	adds	r7, #12
 8021fe8:	46bd      	mov	sp, r7
 8021fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fee:	4770      	bx	lr
 8021ff0:	2000061c 	.word	0x2000061c

08021ff4 <playSounds>:
//
//	  j+=1;
//	}
}

void playSounds() {
 8021ff4:	b580      	push	{r7, lr}
 8021ff6:	b082      	sub	sp, #8
 8021ff8:	af02      	add	r7, sp, #8
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 8021ffa:	2300      	movs	r3, #0
 8021ffc:	9300      	str	r3, [sp, #0]
 8021ffe:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 8022002:	4a2a      	ldr	r2, [pc, #168]	; (80220ac <playSounds+0xb8>)
 8022004:	2100      	movs	r1, #0
 8022006:	482a      	ldr	r0, [pc, #168]	; (80220b0 <playSounds+0xbc>)
 8022008:	f002 fb22 	bl	8024650 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 802200c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8022010:	f002 f974 	bl	80242fc <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8022014:	2100      	movs	r1, #0
 8022016:	4826      	ldr	r0, [pc, #152]	; (80220b0 <playSounds+0xbc>)
 8022018:	f002 fbe6 	bl	80247e8 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 802201c:	2300      	movs	r3, #0
 802201e:	9300      	str	r3, [sp, #0]
 8022020:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 8022024:	4a21      	ldr	r2, [pc, #132]	; (80220ac <playSounds+0xb8>)
 8022026:	2100      	movs	r1, #0
 8022028:	4821      	ldr	r0, [pc, #132]	; (80220b0 <playSounds+0xbc>)
 802202a:	f002 fb11 	bl	8024650 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 802202e:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8022032:	f002 f963 	bl	80242fc <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8022036:	2100      	movs	r1, #0
 8022038:	481d      	ldr	r0, [pc, #116]	; (80220b0 <playSounds+0xbc>)
 802203a:	f002 fbd5 	bl	80247e8 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 802203e:	2300      	movs	r3, #0
 8022040:	9300      	str	r3, [sp, #0]
 8022042:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 8022046:	4a19      	ldr	r2, [pc, #100]	; (80220ac <playSounds+0xb8>)
 8022048:	2100      	movs	r1, #0
 802204a:	4819      	ldr	r0, [pc, #100]	; (80220b0 <playSounds+0xbc>)
 802204c:	f002 fb00 	bl	8024650 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 8022050:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8022054:	f002 f952 	bl	80242fc <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8022058:	2100      	movs	r1, #0
 802205a:	4815      	ldr	r0, [pc, #84]	; (80220b0 <playSounds+0xbc>)
 802205c:	f002 fbc4 	bl	80247e8 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 8022060:	2300      	movs	r3, #0
 8022062:	9300      	str	r3, [sp, #0]
 8022064:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 8022068:	4a10      	ldr	r2, [pc, #64]	; (80220ac <playSounds+0xb8>)
 802206a:	2100      	movs	r1, #0
 802206c:	4810      	ldr	r0, [pc, #64]	; (80220b0 <playSounds+0xbc>)
 802206e:	f002 faef 	bl	8024650 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 8022072:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8022076:	f002 f941 	bl	80242fc <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 802207a:	2100      	movs	r1, #0
 802207c:	480c      	ldr	r0, [pc, #48]	; (80220b0 <playSounds+0xbc>)
 802207e:	f002 fbb3 	bl	80247e8 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) audio_signal, SIGNAL_LENGTH, DAC_ALIGN_12B_R);
 8022082:	2300      	movs	r3, #0
 8022084:	9300      	str	r3, [sp, #0]
 8022086:	f44f 3394 	mov.w	r3, #75776	; 0x12800
 802208a:	4a08      	ldr	r2, [pc, #32]	; (80220ac <playSounds+0xb8>)
 802208c:	2100      	movs	r1, #0
 802208e:	4808      	ldr	r0, [pc, #32]	; (80220b0 <playSounds+0xbc>)
 8022090:	f002 fade 	bl	8024650 <HAL_DAC_Start_DMA>

	HAL_Delay(1800);
 8022094:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8022098:	f002 f930 	bl	80242fc <HAL_Delay>

	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 802209c:	2100      	movs	r1, #0
 802209e:	4804      	ldr	r0, [pc, #16]	; (80220b0 <playSounds+0xbc>)
 80220a0:	f002 fba2 	bl	80247e8 <HAL_DAC_Stop_DMA>
}
 80220a4:	bf00      	nop
 80220a6:	46bd      	mov	sp, r7
 80220a8:	bd80      	pop	{r7, pc}
 80220aa:	bf00      	nop
 80220ac:	0802c580 	.word	0x0802c580
 80220b0:	2000036c 	.word	0x2000036c

080220b4 <playGameOverSound>:

void playGameOverSound() {
 80220b4:	b580      	push	{r7, lr}
 80220b6:	b082      	sub	sp, #8
 80220b8:	af02      	add	r7, sp, #8
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *) gameover_sig, SIGNAL_LENGTH_GO, DAC_ALIGN_12B_R);
 80220ba:	2300      	movs	r3, #0
 80220bc:	9300      	str	r3, [sp, #0]
 80220be:	f44f 339a 	mov.w	r3, #78848	; 0x13400
 80220c2:	4a08      	ldr	r2, [pc, #32]	; (80220e4 <playGameOverSound+0x30>)
 80220c4:	2100      	movs	r1, #0
 80220c6:	4808      	ldr	r0, [pc, #32]	; (80220e8 <playGameOverSound+0x34>)
 80220c8:	f002 fac2 	bl	8024650 <HAL_DAC_Start_DMA>
	HAL_Delay(1800);
 80220cc:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80220d0:	f002 f914 	bl	80242fc <HAL_Delay>
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80220d4:	2100      	movs	r1, #0
 80220d6:	4804      	ldr	r0, [pc, #16]	; (80220e8 <playGameOverSound+0x34>)
 80220d8:	f002 fb86 	bl	80247e8 <HAL_DAC_Stop_DMA>
}
 80220dc:	bf00      	nop
 80220de:	46bd      	mov	sp, r7
 80220e0:	bd80      	pop	{r7, pc}
 80220e2:	bf00      	nop
 80220e4:	08051580 	.word	0x08051580
 80220e8:	2000036c 	.word	0x2000036c

080220ec <updateTime>:

/**
function to update and displat the timer on the screen, takes as input the elapsed time and the total time permitted for the gaem*/
void updateTime(int i, int maxtime){
 80220ec:	b580      	push	{r7, lr}
 80220ee:	b088      	sub	sp, #32
 80220f0:	af00      	add	r7, sp, #0
 80220f2:	6078      	str	r0, [r7, #4]
 80220f4:	6039      	str	r1, [r7, #0]
	ssd1306_SetCursor(115,2); //top right
 80220f6:	2102      	movs	r1, #2
 80220f8:	2073      	movs	r0, #115	; 0x73
 80220fa:	f008 fb0f 	bl	802a71c <ssd1306_SetCursor>
	int num = maxtime-i; //get remaining time
 80220fe:	683a      	ldr	r2, [r7, #0]
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	1ad3      	subs	r3, r2, r3
 8022104:	61fb      	str	r3, [r7, #28]
	char str[20]; 
	if (num<10){ //single digit
 8022106:	69fb      	ldr	r3, [r7, #28]
 8022108:	2b09      	cmp	r3, #9
 802210a:	dc07      	bgt.n	802211c <updateTime+0x30>
		sprintf(str, "%02d", num); //format string to display on the screen
 802210c:	f107 0308 	add.w	r3, r7, #8
 8022110:	69fa      	ldr	r2, [r7, #28]
 8022112:	490c      	ldr	r1, [pc, #48]	; (8022144 <updateTime+0x58>)
 8022114:	4618      	mov	r0, r3
 8022116:	f008 fcdd 	bl	802aad4 <siprintf>
 802211a:	e006      	b.n	802212a <updateTime+0x3e>
	}else{
		sprintf(str, "%d", num);
 802211c:	f107 0308 	add.w	r3, r7, #8
 8022120:	69fa      	ldr	r2, [r7, #28]
 8022122:	4909      	ldr	r1, [pc, #36]	; (8022148 <updateTime+0x5c>)
 8022124:	4618      	mov	r0, r3
 8022126:	f008 fcd5 	bl	802aad4 <siprintf>
	}
	ssd1306_WriteString(str, Font_6x8, White); //write winning string
 802212a:	4a08      	ldr	r2, [pc, #32]	; (802214c <updateTime+0x60>)
 802212c:	f107 0008 	add.w	r0, r7, #8
 8022130:	2301      	movs	r3, #1
 8022132:	ca06      	ldmia	r2, {r1, r2}
 8022134:	f008 facc 	bl	802a6d0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8022138:	f008 f9c6 	bl	802a4c8 <ssd1306_UpdateScreen>
}
 802213c:	bf00      	nop
 802213e:	3720      	adds	r7, #32
 8022140:	46bd      	mov	sp, r7
 8022142:	bd80      	pop	{r7, pc}
 8022144:	0802c574 	.word	0x0802c574
 8022148:	0802c57c 	.word	0x0802c57c
 802214c:	2000029c 	.word	0x2000029c

08022150 <selectRandomMaze>:


/*
 * fct to randomely select mazes from the number of mazes currently loaded to flash
 */
void selectRandomMaze(){
 8022150:	b580      	push	{r7, lr}
 8022152:	b082      	sub	sp, #8
 8022154:	af00      	add	r7, sp, #0

	int sel = rand() % MAZE_NUM;	//select random index from total number of mazes
 8022156:	f008 fc7f 	bl	802aa58 <rand>
 802215a:	4603      	mov	r3, r0
 802215c:	425a      	negs	r2, r3
 802215e:	f003 0303 	and.w	r3, r3, #3
 8022162:	f002 0203 	and.w	r2, r2, #3
 8022166:	bf58      	it	pl
 8022168:	4253      	negpl	r3, r2
 802216a:	607b      	str	r3, [r7, #4]
	readMazeFromSector(sel, rMaze); //dispaly on  screen
 802216c:	687b      	ldr	r3, [r7, #4]
 802216e:	b29b      	uxth	r3, r3
 8022170:	4905      	ldr	r1, [pc, #20]	; (8022188 <selectRandomMaze+0x38>)
 8022172:	4618      	mov	r0, r3
 8022174:	f000 f8fe 	bl	8022374 <readMazeFromSector>
	convertLoadedMazeToDisplayedMaze(rMaze);
 8022178:	4803      	ldr	r0, [pc, #12]	; (8022188 <selectRandomMaze+0x38>)
 802217a:	f000 f83f 	bl	80221fc <convertLoadedMazeToDisplayedMaze>
}
 802217e:	bf00      	nop
 8022180:	3708      	adds	r7, #8
 8022182:	46bd      	mov	sp, r7
 8022184:	bd80      	pop	{r7, pc}
 8022186:	bf00      	nop
 8022188:	2000061c 	.word	0x2000061c

0802218c <clearScreen>:

/**
fct to clar screen*/
void clearScreen(){
 802218c:	b580      	push	{r7, lr}
 802218e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8022190:	2000      	movs	r0, #0
 8022192:	f008 f975 	bl	802a480 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8022196:	f008 f997 	bl	802a4c8 <ssd1306_UpdateScreen>
}
 802219a:	bf00      	nop
 802219c:	bd80      	pop	{r7, pc}
	...

080221a0 <displayMaze1>:

void displayMaze1() {
 80221a0:	b580      	push	{r7, lr}
 80221a2:	b082      	sub	sp, #8
 80221a4:	af00      	add	r7, sp, #0
	  for(int i = 0; i < 64; i++) {
 80221a6:	2300      	movs	r3, #0
 80221a8:	607b      	str	r3, [r7, #4]
 80221aa:	e01c      	b.n	80221e6 <displayMaze1+0x46>
		  for(int j = 0; j < 128; j++) {
 80221ac:	2300      	movs	r3, #0
 80221ae:	603b      	str	r3, [r7, #0]
 80221b0:	e013      	b.n	80221da <displayMaze1+0x3a>
			  if(mazeDisplayed[i][j] == 1) {
 80221b2:	4a11      	ldr	r2, [pc, #68]	; (80221f8 <displayMaze1+0x58>)
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	01db      	lsls	r3, r3, #7
 80221b8:	441a      	add	r2, r3
 80221ba:	683b      	ldr	r3, [r7, #0]
 80221bc:	4413      	add	r3, r2
 80221be:	781b      	ldrb	r3, [r3, #0]
 80221c0:	2b01      	cmp	r3, #1
 80221c2:	d107      	bne.n	80221d4 <displayMaze1+0x34>
				  ssd1306_DrawPixel(j, i, White);
 80221c4:	683b      	ldr	r3, [r7, #0]
 80221c6:	b2db      	uxtb	r3, r3
 80221c8:	687a      	ldr	r2, [r7, #4]
 80221ca:	b2d1      	uxtb	r1, r2
 80221cc:	2201      	movs	r2, #1
 80221ce:	4618      	mov	r0, r3
 80221d0:	f008 f9a2 	bl	802a518 <ssd1306_DrawPixel>
		  for(int j = 0; j < 128; j++) {
 80221d4:	683b      	ldr	r3, [r7, #0]
 80221d6:	3301      	adds	r3, #1
 80221d8:	603b      	str	r3, [r7, #0]
 80221da:	683b      	ldr	r3, [r7, #0]
 80221dc:	2b7f      	cmp	r3, #127	; 0x7f
 80221de:	dde8      	ble.n	80221b2 <displayMaze1+0x12>
	  for(int i = 0; i < 64; i++) {
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	3301      	adds	r3, #1
 80221e4:	607b      	str	r3, [r7, #4]
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	2b3f      	cmp	r3, #63	; 0x3f
 80221ea:	dddf      	ble.n	80221ac <displayMaze1+0xc>
			  }
		  }
	  }

	  ssd1306_UpdateScreen();
 80221ec:	f008 f96c 	bl	802a4c8 <ssd1306_UpdateScreen>
}
 80221f0:	bf00      	nop
 80221f2:	3708      	adds	r7, #8
 80221f4:	46bd      	mov	sp, r7
 80221f6:	bd80      	pop	{r7, pc}
 80221f8:	2000069c 	.word	0x2000069c

080221fc <convertLoadedMazeToDisplayedMaze>:


void convertLoadedMazeToDisplayedMaze(uint8_t *loadedMaze) {
 80221fc:	b480      	push	{r7}
 80221fe:	b08b      	sub	sp, #44	; 0x2c
 8022200:	af00      	add	r7, sp, #0
 8022202:	6078      	str	r0, [r7, #4]
	//Initialize the Array with Zeros
		for(int i = 0; i < 64; i++) {
 8022204:	2300      	movs	r3, #0
 8022206:	627b      	str	r3, [r7, #36]	; 0x24
 8022208:	e013      	b.n	8022232 <convertLoadedMazeToDisplayedMaze+0x36>
			for(int j = 0; j < 128; j++) {
 802220a:	2300      	movs	r3, #0
 802220c:	623b      	str	r3, [r7, #32]
 802220e:	e00a      	b.n	8022226 <convertLoadedMazeToDisplayedMaze+0x2a>
				mazeDisplayed[i][j] = 0;
 8022210:	4a48      	ldr	r2, [pc, #288]	; (8022334 <convertLoadedMazeToDisplayedMaze+0x138>)
 8022212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022214:	01db      	lsls	r3, r3, #7
 8022216:	441a      	add	r2, r3
 8022218:	6a3b      	ldr	r3, [r7, #32]
 802221a:	4413      	add	r3, r2
 802221c:	2200      	movs	r2, #0
 802221e:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 128; j++) {
 8022220:	6a3b      	ldr	r3, [r7, #32]
 8022222:	3301      	adds	r3, #1
 8022224:	623b      	str	r3, [r7, #32]
 8022226:	6a3b      	ldr	r3, [r7, #32]
 8022228:	2b7f      	cmp	r3, #127	; 0x7f
 802222a:	ddf1      	ble.n	8022210 <convertLoadedMazeToDisplayedMaze+0x14>
		for(int i = 0; i < 64; i++) {
 802222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802222e:	3301      	adds	r3, #1
 8022230:	627b      	str	r3, [r7, #36]	; 0x24
 8022232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022234:	2b3f      	cmp	r3, #63	; 0x3f
 8022236:	dde8      	ble.n	802220a <convertLoadedMazeToDisplayedMaze+0xe>
			}
		}

		//Iterate over all the cells in loaded Maze
		for(int i = 0; i < 128; i++) {
 8022238:	2300      	movs	r3, #0
 802223a:	61fb      	str	r3, [r7, #28]
 802223c:	e06f      	b.n	802231e <convertLoadedMazeToDisplayedMaze+0x122>
			uint8_t cellRow = i / 16;
 802223e:	69fb      	ldr	r3, [r7, #28]
 8022240:	2b00      	cmp	r3, #0
 8022242:	da00      	bge.n	8022246 <convertLoadedMazeToDisplayedMaze+0x4a>
 8022244:	330f      	adds	r3, #15
 8022246:	111b      	asrs	r3, r3, #4
 8022248:	75fb      	strb	r3, [r7, #23]
			uint8_t cellColumn = i %16;
 802224a:	69fb      	ldr	r3, [r7, #28]
 802224c:	425a      	negs	r2, r3
 802224e:	f003 030f 	and.w	r3, r3, #15
 8022252:	f002 020f 	and.w	r2, r2, #15
 8022256:	bf58      	it	pl
 8022258:	4253      	negpl	r3, r2
 802225a:	75bb      	strb	r3, [r7, #22]

			uint8_t cellNumber  = loadedMaze[i];
 802225c:	69fb      	ldr	r3, [r7, #28]
 802225e:	687a      	ldr	r2, [r7, #4]
 8022260:	4413      	add	r3, r2
 8022262:	781b      	ldrb	r3, [r3, #0]
 8022264:	757b      	strb	r3, [r7, #21]
			uint8_t topWall = cellNumber  & 1;
 8022266:	7d7b      	ldrb	r3, [r7, #21]
 8022268:	f003 0301 	and.w	r3, r3, #1
 802226c:	753b      	strb	r3, [r7, #20]
			uint8_t leftWall = cellNumber & 2;
 802226e:	7d7b      	ldrb	r3, [r7, #21]
 8022270:	f003 0302 	and.w	r3, r3, #2
 8022274:	74fb      	strb	r3, [r7, #19]
			uint8_t bottomWall = cellNumber & 4;
 8022276:	7d7b      	ldrb	r3, [r7, #21]
 8022278:	f003 0304 	and.w	r3, r3, #4
 802227c:	74bb      	strb	r3, [r7, #18]
			uint8_t rightWall = cellNumber & 8;
 802227e:	7d7b      	ldrb	r3, [r7, #21]
 8022280:	f003 0308 	and.w	r3, r3, #8
 8022284:	747b      	strb	r3, [r7, #17]

			uint8_t leftWallIndex = cellColumn * 8;
 8022286:	7dbb      	ldrb	r3, [r7, #22]
 8022288:	00db      	lsls	r3, r3, #3
 802228a:	743b      	strb	r3, [r7, #16]
			uint8_t rightWallIndex = leftWallIndex + 7;
 802228c:	7c3b      	ldrb	r3, [r7, #16]
 802228e:	3307      	adds	r3, #7
 8022290:	73fb      	strb	r3, [r7, #15]
			uint8_t topWallIndex = cellRow * 8;
 8022292:	7dfb      	ldrb	r3, [r7, #23]
 8022294:	00db      	lsls	r3, r3, #3
 8022296:	73bb      	strb	r3, [r7, #14]
			uint8_t bottomWallIndex = topWallIndex + 7;
 8022298:	7bbb      	ldrb	r3, [r7, #14]
 802229a:	3307      	adds	r3, #7
 802229c:	737b      	strb	r3, [r7, #13]

			for(int k = 0; k < 8; k++) {
 802229e:	2300      	movs	r3, #0
 80222a0:	61bb      	str	r3, [r7, #24]
 80222a2:	e036      	b.n	8022312 <convertLoadedMazeToDisplayedMaze+0x116>
				if(topWall != 0) {
 80222a4:	7d3b      	ldrb	r3, [r7, #20]
 80222a6:	2b00      	cmp	r3, #0
 80222a8:	d009      	beq.n	80222be <convertLoadedMazeToDisplayedMaze+0xc2>
					mazeDisplayed[topWallIndex][leftWallIndex+k]= 1;
 80222aa:	7bba      	ldrb	r2, [r7, #14]
 80222ac:	7c39      	ldrb	r1, [r7, #16]
 80222ae:	69bb      	ldr	r3, [r7, #24]
 80222b0:	440b      	add	r3, r1
 80222b2:	4920      	ldr	r1, [pc, #128]	; (8022334 <convertLoadedMazeToDisplayedMaze+0x138>)
 80222b4:	01d2      	lsls	r2, r2, #7
 80222b6:	440a      	add	r2, r1
 80222b8:	4413      	add	r3, r2
 80222ba:	2201      	movs	r2, #1
 80222bc:	701a      	strb	r2, [r3, #0]
				}

				if(bottomWall != 0) {
 80222be:	7cbb      	ldrb	r3, [r7, #18]
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	d009      	beq.n	80222d8 <convertLoadedMazeToDisplayedMaze+0xdc>
					mazeDisplayed[bottomWallIndex][leftWallIndex+k] = 1;
 80222c4:	7b7a      	ldrb	r2, [r7, #13]
 80222c6:	7c39      	ldrb	r1, [r7, #16]
 80222c8:	69bb      	ldr	r3, [r7, #24]
 80222ca:	440b      	add	r3, r1
 80222cc:	4919      	ldr	r1, [pc, #100]	; (8022334 <convertLoadedMazeToDisplayedMaze+0x138>)
 80222ce:	01d2      	lsls	r2, r2, #7
 80222d0:	440a      	add	r2, r1
 80222d2:	4413      	add	r3, r2
 80222d4:	2201      	movs	r2, #1
 80222d6:	701a      	strb	r2, [r3, #0]
				}

				if(leftWall != 0) {
 80222d8:	7cfb      	ldrb	r3, [r7, #19]
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d009      	beq.n	80222f2 <convertLoadedMazeToDisplayedMaze+0xf6>
					mazeDisplayed[topWallIndex+k][leftWallIndex] = 1;
 80222de:	7bba      	ldrb	r2, [r7, #14]
 80222e0:	69bb      	ldr	r3, [r7, #24]
 80222e2:	441a      	add	r2, r3
 80222e4:	7c3b      	ldrb	r3, [r7, #16]
 80222e6:	4913      	ldr	r1, [pc, #76]	; (8022334 <convertLoadedMazeToDisplayedMaze+0x138>)
 80222e8:	01d2      	lsls	r2, r2, #7
 80222ea:	440a      	add	r2, r1
 80222ec:	4413      	add	r3, r2
 80222ee:	2201      	movs	r2, #1
 80222f0:	701a      	strb	r2, [r3, #0]
				}

				if(rightWall != 0) {
 80222f2:	7c7b      	ldrb	r3, [r7, #17]
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	d009      	beq.n	802230c <convertLoadedMazeToDisplayedMaze+0x110>
					mazeDisplayed[topWallIndex+k][rightWallIndex] = 1;
 80222f8:	7bba      	ldrb	r2, [r7, #14]
 80222fa:	69bb      	ldr	r3, [r7, #24]
 80222fc:	441a      	add	r2, r3
 80222fe:	7bfb      	ldrb	r3, [r7, #15]
 8022300:	490c      	ldr	r1, [pc, #48]	; (8022334 <convertLoadedMazeToDisplayedMaze+0x138>)
 8022302:	01d2      	lsls	r2, r2, #7
 8022304:	440a      	add	r2, r1
 8022306:	4413      	add	r3, r2
 8022308:	2201      	movs	r2, #1
 802230a:	701a      	strb	r2, [r3, #0]
			for(int k = 0; k < 8; k++) {
 802230c:	69bb      	ldr	r3, [r7, #24]
 802230e:	3301      	adds	r3, #1
 8022310:	61bb      	str	r3, [r7, #24]
 8022312:	69bb      	ldr	r3, [r7, #24]
 8022314:	2b07      	cmp	r3, #7
 8022316:	ddc5      	ble.n	80222a4 <convertLoadedMazeToDisplayedMaze+0xa8>
		for(int i = 0; i < 128; i++) {
 8022318:	69fb      	ldr	r3, [r7, #28]
 802231a:	3301      	adds	r3, #1
 802231c:	61fb      	str	r3, [r7, #28]
 802231e:	69fb      	ldr	r3, [r7, #28]
 8022320:	2b7f      	cmp	r3, #127	; 0x7f
 8022322:	dd8c      	ble.n	802223e <convertLoadedMazeToDisplayedMaze+0x42>
				}
			}
		}
}
 8022324:	bf00      	nop
 8022326:	bf00      	nop
 8022328:	372c      	adds	r7, #44	; 0x2c
 802232a:	46bd      	mov	sp, r7
 802232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022330:	4770      	bx	lr
 8022332:	bf00      	nop
 8022334:	2000069c 	.word	0x2000069c

08022338 <writeMazeToSectors>:


void writeMazeToSectors(uint16_t mazeNumber, uint8_t *mazeToSave) {
 8022338:	b580      	push	{r7, lr}
 802233a:	b084      	sub	sp, #16
 802233c:	af00      	add	r7, sp, #0
 802233e:	4603      	mov	r3, r0
 8022340:	6039      	str	r1, [r7, #0]
 8022342:	80fb      	strh	r3, [r7, #6]
	uint16_t firstSector = mazeNumber;
 8022344:	88fb      	ldrh	r3, [r7, #6]
 8022346:	81fb      	strh	r3, [r7, #14]

	if(BSP_QSPI_Erase_Sector(firstSector) != QSPI_OK) {
 8022348:	89fb      	ldrh	r3, [r7, #14]
 802234a:	4618      	mov	r0, r3
 802234c:	f000 fdf0 	bl	8022f30 <BSP_QSPI_Erase_Sector>
//		UART_TX("Error Erase Sector 1\n", 21);
	}

	while(BSP_QSPI_GetStatus() != QSPI_OK);
 8022350:	bf00      	nop
 8022352:	f000 fe35 	bl	8022fc0 <BSP_QSPI_GetStatus>
 8022356:	4603      	mov	r3, r0
 8022358:	2b00      	cmp	r3, #0
 802235a:	d1fa      	bne.n	8022352 <writeMazeToSectors+0x1a>

//	UART_TX("Sector Erase OK!\n", 17);

	uint32_t firstStartAddress = firstSector * 4096;
 802235c:	89fb      	ldrh	r3, [r7, #14]
 802235e:	031b      	lsls	r3, r3, #12
 8022360:	60bb      	str	r3, [r7, #8]

	if(BSP_QSPI_Write(mazeToSave, firstStartAddress, 128) != QSPI_OK) {
 8022362:	2280      	movs	r2, #128	; 0x80
 8022364:	68b9      	ldr	r1, [r7, #8]
 8022366:	6838      	ldr	r0, [r7, #0]
 8022368:	f000 fd5c 	bl	8022e24 <BSP_QSPI_Write>
//		UART_TX("Write Error\n", 12);
	}


//	UART_TX("Maze Write OK\n", 14);
}
 802236c:	bf00      	nop
 802236e:	3710      	adds	r7, #16
 8022370:	46bd      	mov	sp, r7
 8022372:	bd80      	pop	{r7, pc}

08022374 <readMazeFromSector>:

void readMazeFromSector(uint16_t mazeNumber, uint8_t *mazeBuffer) {
 8022374:	b580      	push	{r7, lr}
 8022376:	b084      	sub	sp, #16
 8022378:	af00      	add	r7, sp, #0
 802237a:	4603      	mov	r3, r0
 802237c:	6039      	str	r1, [r7, #0]
 802237e:	80fb      	strh	r3, [r7, #6]
	uint16_t firstSector = mazeNumber;
 8022380:	88fb      	ldrh	r3, [r7, #6]
 8022382:	81fb      	strh	r3, [r7, #14]
	uint32_t firstStartAddress = firstSector * 4096;
 8022384:	89fb      	ldrh	r3, [r7, #14]
 8022386:	031b      	lsls	r3, r3, #12
 8022388:	60bb      	str	r3, [r7, #8]

	if(BSP_QSPI_Read(mazeBuffer, firstStartAddress, 128) != QSPI_OK) {
 802238a:	2280      	movs	r2, #128	; 0x80
 802238c:	68b9      	ldr	r1, [r7, #8]
 802238e:	6838      	ldr	r0, [r7, #0]
 8022390:	f000 fcf6 	bl	8022d80 <BSP_QSPI_Read>
//		UART_TX("Read Error\n", 11);
	}


//	UART_TX("Maze Read OK\n", 13);
}
 8022394:	bf00      	nop
 8022396:	3710      	adds	r7, #16
 8022398:	46bd      	mov	sp, r7
 802239a:	bd80      	pop	{r7, pc}

0802239c <Sensors_Init>:

/*
 *  @brief  Initialize the ACCELERO and GYRO.
  * @retval None.
 */
void Sensors_Init() {
 802239c:	b580      	push	{r7, lr}
 802239e:	af00      	add	r7, sp, #0
	 BSP_GYRO_Init();
 80223a0:	f000 fbfc 	bl	8022b9c <BSP_GYRO_Init>
	 BSP_ACCELERO_Init();
 80223a4:	f000 fba4 	bl	8022af0 <BSP_ACCELERO_Init>

	 /* Set gyroscope to normal power mode. */
	 BSP_GYRO_LowPower(1);
 80223a8:	2001      	movs	r0, #1
 80223aa:	f000 fc39 	bl	8022c20 <BSP_GYRO_LowPower>
}
 80223ae:	bf00      	nop
 80223b0:	bd80      	pop	{r7, pc}
	...

080223b4 <Set_Sampling_Frequency>:

/*
 *  @brief  Set sensor sampling frequency and sampling period.
  * @retval None.
 */
void Set_Sampling_Frequency(int frequency) {
 80223b4:	b580      	push	{r7, lr}
 80223b6:	b082      	sub	sp, #8
 80223b8:	af00      	add	r7, sp, #0
 80223ba:	6078      	str	r0, [r7, #4]
	SAMPLING_FREQUENCY = frequency;
 80223bc:	4a0d      	ldr	r2, [pc, #52]	; (80223f4 <Set_Sampling_Frequency+0x40>)
 80223be:	687b      	ldr	r3, [r7, #4]
 80223c0:	6013      	str	r3, [r2, #0]
	DT = 1.0/SAMPLING_FREQUENCY;
 80223c2:	4b0c      	ldr	r3, [pc, #48]	; (80223f4 <Set_Sampling_Frequency+0x40>)
 80223c4:	681b      	ldr	r3, [r3, #0]
 80223c6:	4618      	mov	r0, r3
 80223c8:	f7fe f804 	bl	80203d4 <__aeabi_i2d>
 80223cc:	4602      	mov	r2, r0
 80223ce:	460b      	mov	r3, r1
 80223d0:	f04f 0000 	mov.w	r0, #0
 80223d4:	4908      	ldr	r1, [pc, #32]	; (80223f8 <Set_Sampling_Frequency+0x44>)
 80223d6:	f7fe f991 	bl	80206fc <__aeabi_ddiv>
 80223da:	4602      	mov	r2, r0
 80223dc:	460b      	mov	r3, r1
 80223de:	4610      	mov	r0, r2
 80223e0:	4619      	mov	r1, r3
 80223e2:	f7fe fb11 	bl	8020a08 <__aeabi_d2f>
 80223e6:	4603      	mov	r3, r0
 80223e8:	4a04      	ldr	r2, [pc, #16]	; (80223fc <Set_Sampling_Frequency+0x48>)
 80223ea:	6013      	str	r3, [r2, #0]
}
 80223ec:	bf00      	nop
 80223ee:	3708      	adds	r7, #8
 80223f0:	46bd      	mov	sp, r7
 80223f2:	bd80      	pop	{r7, pc}
 80223f4:	2000269c 	.word	0x2000269c
 80223f8:	3ff00000 	.word	0x3ff00000
 80223fc:	200026a0 	.word	0x200026a0

08022400 <Measure_Gyro_Bias>:

/*
 *  @brief  Measure GYRO bias
  * @retval None.
 */
void Measure_Gyro_Bias() {
 8022400:	b580      	push	{r7, lr}
 8022402:	b084      	sub	sp, #16
 8022404:	af00      	add	r7, sp, #0
	float sum_x, sum_y = 0;
 8022406:	f04f 0300 	mov.w	r3, #0
 802240a:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 10000 ;i++){
 802240c:	2300      	movs	r3, #0
 802240e:	607b      	str	r3, [r7, #4]
 8022410:	e017      	b.n	8022442 <Measure_Gyro_Bias+0x42>
		BSP_GYRO_GetXYZ(gyro_xyz);
 8022412:	4819      	ldr	r0, [pc, #100]	; (8022478 <Measure_Gyro_Bias+0x78>)
 8022414:	f000 fc1e 	bl	8022c54 <BSP_GYRO_GetXYZ>
		sum_x += gyro_xyz[0];
 8022418:	4b17      	ldr	r3, [pc, #92]	; (8022478 <Measure_Gyro_Bias+0x78>)
 802241a:	edd3 7a00 	vldr	s15, [r3]
 802241e:	ed97 7a03 	vldr	s14, [r7, #12]
 8022422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022426:	edc7 7a03 	vstr	s15, [r7, #12]
		sum_y += gyro_xyz[1];
 802242a:	4b13      	ldr	r3, [pc, #76]	; (8022478 <Measure_Gyro_Bias+0x78>)
 802242c:	edd3 7a01 	vldr	s15, [r3, #4]
 8022430:	ed97 7a02 	vldr	s14, [r7, #8]
 8022434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022438:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int i = 0; i < 10000 ;i++){
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	3301      	adds	r3, #1
 8022440:	607b      	str	r3, [r7, #4]
 8022442:	687b      	ldr	r3, [r7, #4]
 8022444:	f242 720f 	movw	r2, #9999	; 0x270f
 8022448:	4293      	cmp	r3, r2
 802244a:	dde2      	ble.n	8022412 <Measure_Gyro_Bias+0x12>
	}
	gyro_x_bias = sum_x/10000;
 802244c:	ed97 7a03 	vldr	s14, [r7, #12]
 8022450:	eddf 6a0a 	vldr	s13, [pc, #40]	; 802247c <Measure_Gyro_Bias+0x7c>
 8022454:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8022458:	4b09      	ldr	r3, [pc, #36]	; (8022480 <Measure_Gyro_Bias+0x80>)
 802245a:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_bias = sum_y/10000;
 802245e:	ed97 7a02 	vldr	s14, [r7, #8]
 8022462:	eddf 6a06 	vldr	s13, [pc, #24]	; 802247c <Measure_Gyro_Bias+0x7c>
 8022466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802246a:	4b06      	ldr	r3, [pc, #24]	; (8022484 <Measure_Gyro_Bias+0x84>)
 802246c:	edc3 7a00 	vstr	s15, [r3]
}
 8022470:	bf00      	nop
 8022472:	3710      	adds	r7, #16
 8022474:	46bd      	mov	sp, r7
 8022476:	bd80      	pop	{r7, pc}
 8022478:	200026ac 	.word	0x200026ac
 802247c:	461c4000 	.word	0x461c4000
 8022480:	200026a4 	.word	0x200026a4
 8022484:	200026a8 	.word	0x200026a8

08022488 <Measure_Orientation>:

/*
 *  @brief  Measure STM32 Board Orientation
  * @retval 2-element orientation array (x, y).
 */
void Measure_Orientation(float* orientation) {
 8022488:	b5b0      	push	{r4, r5, r7, lr}
 802248a:	b084      	sub	sp, #16
 802248c:	af00      	add	r7, sp, #0
 802248e:	6078      	str	r0, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// sensor measurements
	BSP_ACCELERO_AccGetXYZ(accel_xyz);
 8022490:	48d1      	ldr	r0, [pc, #836]	; (80227d8 <Measure_Orientation+0x350>)
 8022492:	f000 fb6b 	bl	8022b6c <BSP_ACCELERO_AccGetXYZ>
    BSP_GYRO_GetXYZ(gyro_xyz);
 8022496:	48d1      	ldr	r0, [pc, #836]	; (80227dc <Measure_Orientation+0x354>)
 8022498:	f000 fbdc 	bl	8022c54 <BSP_GYRO_GetXYZ>

	// acceleration magnitude
	float accel_mag = sqrt(accel_xyz[0] * accel_xyz[0] + accel_xyz[1] * accel_xyz[1] + accel_xyz[2] * accel_xyz[2]);
 802249c:	4bce      	ldr	r3, [pc, #824]	; (80227d8 <Measure_Orientation+0x350>)
 802249e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80224a2:	461a      	mov	r2, r3
 80224a4:	4bcc      	ldr	r3, [pc, #816]	; (80227d8 <Measure_Orientation+0x350>)
 80224a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80224aa:	fb03 f202 	mul.w	r2, r3, r2
 80224ae:	4bca      	ldr	r3, [pc, #808]	; (80227d8 <Measure_Orientation+0x350>)
 80224b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80224b4:	4619      	mov	r1, r3
 80224b6:	4bc8      	ldr	r3, [pc, #800]	; (80227d8 <Measure_Orientation+0x350>)
 80224b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80224bc:	fb01 f303 	mul.w	r3, r1, r3
 80224c0:	441a      	add	r2, r3
 80224c2:	4bc5      	ldr	r3, [pc, #788]	; (80227d8 <Measure_Orientation+0x350>)
 80224c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80224c8:	4619      	mov	r1, r3
 80224ca:	4bc3      	ldr	r3, [pc, #780]	; (80227d8 <Measure_Orientation+0x350>)
 80224cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80224d0:	fb01 f303 	mul.w	r3, r1, r3
 80224d4:	4413      	add	r3, r2
 80224d6:	4618      	mov	r0, r3
 80224d8:	f7fd ff7c 	bl	80203d4 <__aeabi_i2d>
 80224dc:	4602      	mov	r2, r0
 80224de:	460b      	mov	r3, r1
 80224e0:	ec43 2b10 	vmov	d0, r2, r3
 80224e4:	f009 fcd2 	bl	802be8c <sqrt>
 80224e8:	ec53 2b10 	vmov	r2, r3, d0
 80224ec:	4610      	mov	r0, r2
 80224ee:	4619      	mov	r1, r3
 80224f0:	f7fe fa8a 	bl	8020a08 <__aeabi_d2f>
 80224f4:	4603      	mov	r3, r0
 80224f6:	60fb      	str	r3, [r7, #12]


	// normalization of acceleration
	accel_x = accel_xyz[0]/accel_mag;
 80224f8:	4bb7      	ldr	r3, [pc, #732]	; (80227d8 <Measure_Orientation+0x350>)
 80224fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80224fe:	ee07 3a90 	vmov	s15, r3
 8022502:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8022506:	ed97 7a03 	vldr	s14, [r7, #12]
 802250a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802250e:	4bb4      	ldr	r3, [pc, #720]	; (80227e0 <Measure_Orientation+0x358>)
 8022510:	edc3 7a00 	vstr	s15, [r3]
	accel_y = accel_xyz[1]/accel_mag;
 8022514:	4bb0      	ldr	r3, [pc, #704]	; (80227d8 <Measure_Orientation+0x350>)
 8022516:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802251a:	ee07 3a90 	vmov	s15, r3
 802251e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8022522:	ed97 7a03 	vldr	s14, [r7, #12]
 8022526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802252a:	4bae      	ldr	r3, [pc, #696]	; (80227e4 <Measure_Orientation+0x35c>)
 802252c:	edc3 7a00 	vstr	s15, [r3]
	accel_z = accel_xyz[2]/accel_mag;
 8022530:	4ba9      	ldr	r3, [pc, #676]	; (80227d8 <Measure_Orientation+0x350>)
 8022532:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022536:	ee07 3a90 	vmov	s15, r3
 802253a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802253e:	ed97 7a03 	vldr	s14, [r7, #12]
 8022542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022546:	4ba8      	ldr	r3, [pc, #672]	; (80227e8 <Measure_Orientation+0x360>)
 8022548:	edc3 7a00 	vstr	s15, [r3]

	// calculate roll and pitch
	roll_acc = atan2(accel_y, accel_z) * 180.0 / M_PI;
 802254c:	4ba5      	ldr	r3, [pc, #660]	; (80227e4 <Measure_Orientation+0x35c>)
 802254e:	681b      	ldr	r3, [r3, #0]
 8022550:	4618      	mov	r0, r3
 8022552:	f7fd ff51 	bl	80203f8 <__aeabi_f2d>
 8022556:	4604      	mov	r4, r0
 8022558:	460d      	mov	r5, r1
 802255a:	4ba3      	ldr	r3, [pc, #652]	; (80227e8 <Measure_Orientation+0x360>)
 802255c:	681b      	ldr	r3, [r3, #0]
 802255e:	4618      	mov	r0, r3
 8022560:	f7fd ff4a 	bl	80203f8 <__aeabi_f2d>
 8022564:	4602      	mov	r2, r0
 8022566:	460b      	mov	r3, r1
 8022568:	ec43 2b11 	vmov	d1, r2, r3
 802256c:	ec45 4b10 	vmov	d0, r4, r5
 8022570:	f009 fc8a 	bl	802be88 <atan2>
 8022574:	ec51 0b10 	vmov	r0, r1, d0
 8022578:	f04f 0200 	mov.w	r2, #0
 802257c:	4b9b      	ldr	r3, [pc, #620]	; (80227ec <Measure_Orientation+0x364>)
 802257e:	f7fd ff93 	bl	80204a8 <__aeabi_dmul>
 8022582:	4602      	mov	r2, r0
 8022584:	460b      	mov	r3, r1
 8022586:	4610      	mov	r0, r2
 8022588:	4619      	mov	r1, r3
 802258a:	a389      	add	r3, pc, #548	; (adr r3, 80227b0 <Measure_Orientation+0x328>)
 802258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022590:	f7fe f8b4 	bl	80206fc <__aeabi_ddiv>
 8022594:	4602      	mov	r2, r0
 8022596:	460b      	mov	r3, r1
 8022598:	4610      	mov	r0, r2
 802259a:	4619      	mov	r1, r3
 802259c:	f7fe fa34 	bl	8020a08 <__aeabi_d2f>
 80225a0:	4603      	mov	r3, r0
 80225a2:	4a93      	ldr	r2, [pc, #588]	; (80227f0 <Measure_Orientation+0x368>)
 80225a4:	6013      	str	r3, [r2, #0]
	pitch_acc = atan2(-accel_x, sqrt(accel_y * accel_y + accel_z * accel_z)) * 180.0 / M_PI;
 80225a6:	4b8e      	ldr	r3, [pc, #568]	; (80227e0 <Measure_Orientation+0x358>)
 80225a8:	edd3 7a00 	vldr	s15, [r3]
 80225ac:	eef1 7a67 	vneg.f32	s15, s15
 80225b0:	ee17 3a90 	vmov	r3, s15
 80225b4:	4618      	mov	r0, r3
 80225b6:	f7fd ff1f 	bl	80203f8 <__aeabi_f2d>
 80225ba:	4604      	mov	r4, r0
 80225bc:	460d      	mov	r5, r1
 80225be:	4b89      	ldr	r3, [pc, #548]	; (80227e4 <Measure_Orientation+0x35c>)
 80225c0:	ed93 7a00 	vldr	s14, [r3]
 80225c4:	4b87      	ldr	r3, [pc, #540]	; (80227e4 <Measure_Orientation+0x35c>)
 80225c6:	edd3 7a00 	vldr	s15, [r3]
 80225ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80225ce:	4b86      	ldr	r3, [pc, #536]	; (80227e8 <Measure_Orientation+0x360>)
 80225d0:	edd3 6a00 	vldr	s13, [r3]
 80225d4:	4b84      	ldr	r3, [pc, #528]	; (80227e8 <Measure_Orientation+0x360>)
 80225d6:	edd3 7a00 	vldr	s15, [r3]
 80225da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80225de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80225e2:	ee17 0a90 	vmov	r0, s15
 80225e6:	f7fd ff07 	bl	80203f8 <__aeabi_f2d>
 80225ea:	4602      	mov	r2, r0
 80225ec:	460b      	mov	r3, r1
 80225ee:	ec43 2b10 	vmov	d0, r2, r3
 80225f2:	f009 fc4b 	bl	802be8c <sqrt>
 80225f6:	eeb0 7a40 	vmov.f32	s14, s0
 80225fa:	eef0 7a60 	vmov.f32	s15, s1
 80225fe:	eeb0 1a47 	vmov.f32	s2, s14
 8022602:	eef0 1a67 	vmov.f32	s3, s15
 8022606:	ec45 4b10 	vmov	d0, r4, r5
 802260a:	f009 fc3d 	bl	802be88 <atan2>
 802260e:	ec51 0b10 	vmov	r0, r1, d0
 8022612:	f04f 0200 	mov.w	r2, #0
 8022616:	4b75      	ldr	r3, [pc, #468]	; (80227ec <Measure_Orientation+0x364>)
 8022618:	f7fd ff46 	bl	80204a8 <__aeabi_dmul>
 802261c:	4602      	mov	r2, r0
 802261e:	460b      	mov	r3, r1
 8022620:	4610      	mov	r0, r2
 8022622:	4619      	mov	r1, r3
 8022624:	a362      	add	r3, pc, #392	; (adr r3, 80227b0 <Measure_Orientation+0x328>)
 8022626:	e9d3 2300 	ldrd	r2, r3, [r3]
 802262a:	f7fe f867 	bl	80206fc <__aeabi_ddiv>
 802262e:	4602      	mov	r2, r0
 8022630:	460b      	mov	r3, r1
 8022632:	4610      	mov	r0, r2
 8022634:	4619      	mov	r1, r3
 8022636:	f7fe f9e7 	bl	8020a08 <__aeabi_d2f>
 802263a:	4603      	mov	r3, r0
 802263c:	4a6d      	ldr	r2, [pc, #436]	; (80227f4 <Measure_Orientation+0x36c>)
 802263e:	6013      	str	r3, [r2, #0]

	// remove bias from gyroscope measurements
	gyro_x = gyro_xyz[0] - gyro_x_bias;
 8022640:	4b66      	ldr	r3, [pc, #408]	; (80227dc <Measure_Orientation+0x354>)
 8022642:	ed93 7a00 	vldr	s14, [r3]
 8022646:	4b6c      	ldr	r3, [pc, #432]	; (80227f8 <Measure_Orientation+0x370>)
 8022648:	edd3 7a00 	vldr	s15, [r3]
 802264c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022650:	4b6a      	ldr	r3, [pc, #424]	; (80227fc <Measure_Orientation+0x374>)
 8022652:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = gyro_xyz[1] - gyro_y_bias;
 8022656:	4b61      	ldr	r3, [pc, #388]	; (80227dc <Measure_Orientation+0x354>)
 8022658:	ed93 7a01 	vldr	s14, [r3, #4]
 802265c:	4b68      	ldr	r3, [pc, #416]	; (8022800 <Measure_Orientation+0x378>)
 802265e:	edd3 7a00 	vldr	s15, [r3]
 8022662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022666:	4b67      	ldr	r3, [pc, #412]	; (8022804 <Measure_Orientation+0x37c>)
 8022668:	edc3 7a00 	vstr	s15, [r3]

	/* LOW-PASS FILTER: remove noise from gyroscope measurements */
	kalman(&gyro_x_state, gyro_x);
 802266c:	4b63      	ldr	r3, [pc, #396]	; (80227fc <Measure_Orientation+0x374>)
 802266e:	edd3 7a00 	vldr	s15, [r3]
 8022672:	eeb0 0a67 	vmov.f32	s0, s15
 8022676:	4864      	ldr	r0, [pc, #400]	; (8022808 <Measure_Orientation+0x380>)
 8022678:	f7fd fcc2 	bl	8020000 <kalman>
	kalman(&gyro_y_state, gyro_y);
 802267c:	4b61      	ldr	r3, [pc, #388]	; (8022804 <Measure_Orientation+0x37c>)
 802267e:	edd3 7a00 	vldr	s15, [r3]
 8022682:	eeb0 0a67 	vmov.f32	s0, s15
 8022686:	4861      	ldr	r0, [pc, #388]	; (802280c <Measure_Orientation+0x384>)
 8022688:	f7fd fcba 	bl	8020000 <kalman>

	/* obtain filtered results */
	gyro_x = gyro_x_state.x*GYRO_X_SENS;
 802268c:	4b5e      	ldr	r3, [pc, #376]	; (8022808 <Measure_Orientation+0x380>)
 802268e:	689b      	ldr	r3, [r3, #8]
 8022690:	4618      	mov	r0, r3
 8022692:	f7fd feb1 	bl	80203f8 <__aeabi_f2d>
 8022696:	a348      	add	r3, pc, #288	; (adr r3, 80227b8 <Measure_Orientation+0x330>)
 8022698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802269c:	f7fd ff04 	bl	80204a8 <__aeabi_dmul>
 80226a0:	4602      	mov	r2, r0
 80226a2:	460b      	mov	r3, r1
 80226a4:	4610      	mov	r0, r2
 80226a6:	4619      	mov	r1, r3
 80226a8:	f7fe f9ae 	bl	8020a08 <__aeabi_d2f>
 80226ac:	4603      	mov	r3, r0
 80226ae:	4a53      	ldr	r2, [pc, #332]	; (80227fc <Measure_Orientation+0x374>)
 80226b0:	6013      	str	r3, [r2, #0]
	gyro_y = gyro_y_state.x*GYRO_Y_SENS;
 80226b2:	4b56      	ldr	r3, [pc, #344]	; (802280c <Measure_Orientation+0x384>)
 80226b4:	689b      	ldr	r3, [r3, #8]
 80226b6:	4618      	mov	r0, r3
 80226b8:	f7fd fe9e 	bl	80203f8 <__aeabi_f2d>
 80226bc:	a340      	add	r3, pc, #256	; (adr r3, 80227c0 <Measure_Orientation+0x338>)
 80226be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226c2:	f7fd fef1 	bl	80204a8 <__aeabi_dmul>
 80226c6:	4602      	mov	r2, r0
 80226c8:	460b      	mov	r3, r1
 80226ca:	4610      	mov	r0, r2
 80226cc:	4619      	mov	r1, r3
 80226ce:	f7fe f99b 	bl	8020a08 <__aeabi_d2f>
 80226d2:	4603      	mov	r3, r0
 80226d4:	4a4b      	ldr	r2, [pc, #300]	; (8022804 <Measure_Orientation+0x37c>)
 80226d6:	6013      	str	r3, [r2, #0]
//	  if (gyro_y < min_gyro_y) {
//	  	  	  min_gyro_y = gyro_y;
//	  }

	/* integrate to obtain roll and pitch from gyroscope */
	roll_gyro = angle_x + gyro_x * DT;
 80226d8:	4b48      	ldr	r3, [pc, #288]	; (80227fc <Measure_Orientation+0x374>)
 80226da:	ed93 7a00 	vldr	s14, [r3]
 80226de:	4b4c      	ldr	r3, [pc, #304]	; (8022810 <Measure_Orientation+0x388>)
 80226e0:	edd3 7a00 	vldr	s15, [r3]
 80226e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80226e8:	4b4a      	ldr	r3, [pc, #296]	; (8022814 <Measure_Orientation+0x38c>)
 80226ea:	edd3 7a00 	vldr	s15, [r3]
 80226ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80226f2:	4b49      	ldr	r3, [pc, #292]	; (8022818 <Measure_Orientation+0x390>)
 80226f4:	edc3 7a00 	vstr	s15, [r3]
	pitch_gyro = angle_y + gyro_y * DT;
 80226f8:	4b42      	ldr	r3, [pc, #264]	; (8022804 <Measure_Orientation+0x37c>)
 80226fa:	ed93 7a00 	vldr	s14, [r3]
 80226fe:	4b44      	ldr	r3, [pc, #272]	; (8022810 <Measure_Orientation+0x388>)
 8022700:	edd3 7a00 	vldr	s15, [r3]
 8022704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022708:	4b44      	ldr	r3, [pc, #272]	; (802281c <Measure_Orientation+0x394>)
 802270a:	edd3 7a00 	vldr	s15, [r3]
 802270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022712:	4b43      	ldr	r3, [pc, #268]	; (8022820 <Measure_Orientation+0x398>)
 8022714:	edc3 7a00 	vstr	s15, [r3]

	// complementary filter
	angle_x = GYRO_ALPHA * roll_gyro + ACCEL_MAG_ALPHA * roll_acc;
 8022718:	4b3f      	ldr	r3, [pc, #252]	; (8022818 <Measure_Orientation+0x390>)
 802271a:	681b      	ldr	r3, [r3, #0]
 802271c:	4618      	mov	r0, r3
 802271e:	f7fd fe6b 	bl	80203f8 <__aeabi_f2d>
 8022722:	a329      	add	r3, pc, #164	; (adr r3, 80227c8 <Measure_Orientation+0x340>)
 8022724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022728:	f7fd febe 	bl	80204a8 <__aeabi_dmul>
 802272c:	4602      	mov	r2, r0
 802272e:	460b      	mov	r3, r1
 8022730:	4614      	mov	r4, r2
 8022732:	461d      	mov	r5, r3
 8022734:	4b2e      	ldr	r3, [pc, #184]	; (80227f0 <Measure_Orientation+0x368>)
 8022736:	681b      	ldr	r3, [r3, #0]
 8022738:	4618      	mov	r0, r3
 802273a:	f7fd fe5d 	bl	80203f8 <__aeabi_f2d>
 802273e:	a324      	add	r3, pc, #144	; (adr r3, 80227d0 <Measure_Orientation+0x348>)
 8022740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022744:	f7fd feb0 	bl	80204a8 <__aeabi_dmul>
 8022748:	4602      	mov	r2, r0
 802274a:	460b      	mov	r3, r1
 802274c:	4620      	mov	r0, r4
 802274e:	4629      	mov	r1, r5
 8022750:	f7fd fcf4 	bl	802013c <__adddf3>
 8022754:	4602      	mov	r2, r0
 8022756:	460b      	mov	r3, r1
 8022758:	4610      	mov	r0, r2
 802275a:	4619      	mov	r1, r3
 802275c:	f7fe f954 	bl	8020a08 <__aeabi_d2f>
 8022760:	4603      	mov	r3, r0
 8022762:	4a2c      	ldr	r2, [pc, #176]	; (8022814 <Measure_Orientation+0x38c>)
 8022764:	6013      	str	r3, [r2, #0]
	angle_y = GYRO_ALPHA * pitch_gyro + ACCEL_MAG_ALPHA * pitch_acc;
 8022766:	4b2e      	ldr	r3, [pc, #184]	; (8022820 <Measure_Orientation+0x398>)
 8022768:	681b      	ldr	r3, [r3, #0]
 802276a:	4618      	mov	r0, r3
 802276c:	f7fd fe44 	bl	80203f8 <__aeabi_f2d>
 8022770:	a315      	add	r3, pc, #84	; (adr r3, 80227c8 <Measure_Orientation+0x340>)
 8022772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022776:	f7fd fe97 	bl	80204a8 <__aeabi_dmul>
 802277a:	4602      	mov	r2, r0
 802277c:	460b      	mov	r3, r1
 802277e:	4614      	mov	r4, r2
 8022780:	461d      	mov	r5, r3
 8022782:	4b1c      	ldr	r3, [pc, #112]	; (80227f4 <Measure_Orientation+0x36c>)
 8022784:	681b      	ldr	r3, [r3, #0]
 8022786:	4618      	mov	r0, r3
 8022788:	f7fd fe36 	bl	80203f8 <__aeabi_f2d>
 802278c:	a310      	add	r3, pc, #64	; (adr r3, 80227d0 <Measure_Orientation+0x348>)
 802278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022792:	f7fd fe89 	bl	80204a8 <__aeabi_dmul>
 8022796:	4602      	mov	r2, r0
 8022798:	460b      	mov	r3, r1
 802279a:	4620      	mov	r0, r4
 802279c:	4629      	mov	r1, r5
 802279e:	f7fd fccd 	bl	802013c <__adddf3>
 80227a2:	4602      	mov	r2, r0
 80227a4:	460b      	mov	r3, r1
 80227a6:	4610      	mov	r0, r2
 80227a8:	4619      	mov	r1, r3
 80227aa:	e03b      	b.n	8022824 <Measure_Orientation+0x39c>
 80227ac:	f3af 8000 	nop.w
 80227b0:	54442d18 	.word	0x54442d18
 80227b4:	400921fb 	.word	0x400921fb
 80227b8:	728a0126 	.word	0x728a0126
 80227bc:	3ea2bcc3 	.word	0x3ea2bcc3
 80227c0:	f2eeacca 	.word	0xf2eeacca
 80227c4:	3e9f024e 	.word	0x3e9f024e
 80227c8:	cccccccd 	.word	0xcccccccd
 80227cc:	3feccccc 	.word	0x3feccccc
 80227d0:	9999999a 	.word	0x9999999a
 80227d4:	3fb99999 	.word	0x3fb99999
 80227d8:	200026c0 	.word	0x200026c0
 80227dc:	200026ac 	.word	0x200026ac
 80227e0:	200026c8 	.word	0x200026c8
 80227e4:	200026cc 	.word	0x200026cc
 80227e8:	200026d0 	.word	0x200026d0
 80227ec:	40668000 	.word	0x40668000
 80227f0:	200026dc 	.word	0x200026dc
 80227f4:	200026e0 	.word	0x200026e0
 80227f8:	200026a4 	.word	0x200026a4
 80227fc:	200026b8 	.word	0x200026b8
 8022800:	200026a8 	.word	0x200026a8
 8022804:	200026bc 	.word	0x200026bc
 8022808:	20000200 	.word	0x20000200
 802280c:	20000214 	.word	0x20000214
 8022810:	200026a0 	.word	0x200026a0
 8022814:	200026e4 	.word	0x200026e4
 8022818:	200026d4 	.word	0x200026d4
 802281c:	200026e8 	.word	0x200026e8
 8022820:	200026d8 	.word	0x200026d8
 8022824:	f7fe f8f0 	bl	8020a08 <__aeabi_d2f>
 8022828:	4603      	mov	r3, r0
 802282a:	4a07      	ldr	r2, [pc, #28]	; (8022848 <Measure_Orientation+0x3c0>)
 802282c:	6013      	str	r3, [r2, #0]

	orientation[0] = angle_x;
 802282e:	4b07      	ldr	r3, [pc, #28]	; (802284c <Measure_Orientation+0x3c4>)
 8022830:	681a      	ldr	r2, [r3, #0]
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	601a      	str	r2, [r3, #0]
	orientation[1] = angle_y;
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	3304      	adds	r3, #4
 802283a:	4a03      	ldr	r2, [pc, #12]	; (8022848 <Measure_Orientation+0x3c0>)
 802283c:	6812      	ldr	r2, [r2, #0]
 802283e:	601a      	str	r2, [r3, #0]

}
 8022840:	bf00      	nop
 8022842:	3710      	adds	r7, #16
 8022844:	46bd      	mov	sp, r7
 8022846:	bdb0      	pop	{r4, r5, r7, pc}
 8022848:	200026e8 	.word	0x200026e8
 802284c:	200026e4 	.word	0x200026e4

08022850 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8022850:	b580      	push	{r7, lr}
 8022852:	b08a      	sub	sp, #40	; 0x28
 8022854:	af00      	add	r7, sp, #0
 8022856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8022858:	4b27      	ldr	r3, [pc, #156]	; (80228f8 <I2Cx_MspInit+0xa8>)
 802285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802285c:	4a26      	ldr	r2, [pc, #152]	; (80228f8 <I2Cx_MspInit+0xa8>)
 802285e:	f043 0302 	orr.w	r3, r3, #2
 8022862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8022864:	4b24      	ldr	r3, [pc, #144]	; (80228f8 <I2Cx_MspInit+0xa8>)
 8022866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022868:	f003 0302 	and.w	r3, r3, #2
 802286c:	613b      	str	r3, [r7, #16]
 802286e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8022870:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8022874:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8022876:	2312      	movs	r3, #18
 8022878:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 802287a:	2301      	movs	r3, #1
 802287c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802287e:	2303      	movs	r3, #3
 8022880:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8022882:	2304      	movs	r3, #4
 8022884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8022886:	f107 0314 	add.w	r3, r7, #20
 802288a:	4619      	mov	r1, r3
 802288c:	481b      	ldr	r0, [pc, #108]	; (80228fc <I2Cx_MspInit+0xac>)
 802288e:	f002 fca7 	bl	80251e0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8022892:	f107 0314 	add.w	r3, r7, #20
 8022896:	4619      	mov	r1, r3
 8022898:	4818      	ldr	r0, [pc, #96]	; (80228fc <I2Cx_MspInit+0xac>)
 802289a:	f002 fca1 	bl	80251e0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 802289e:	4b16      	ldr	r3, [pc, #88]	; (80228f8 <I2Cx_MspInit+0xa8>)
 80228a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80228a2:	4a15      	ldr	r2, [pc, #84]	; (80228f8 <I2Cx_MspInit+0xa8>)
 80228a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80228a8:	6593      	str	r3, [r2, #88]	; 0x58
 80228aa:	4b13      	ldr	r3, [pc, #76]	; (80228f8 <I2Cx_MspInit+0xa8>)
 80228ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80228ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80228b2:	60fb      	str	r3, [r7, #12]
 80228b4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80228b6:	4b10      	ldr	r3, [pc, #64]	; (80228f8 <I2Cx_MspInit+0xa8>)
 80228b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80228ba:	4a0f      	ldr	r2, [pc, #60]	; (80228f8 <I2Cx_MspInit+0xa8>)
 80228bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80228c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80228c2:	4b0d      	ldr	r3, [pc, #52]	; (80228f8 <I2Cx_MspInit+0xa8>)
 80228c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80228c6:	4a0c      	ldr	r2, [pc, #48]	; (80228f8 <I2Cx_MspInit+0xa8>)
 80228c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80228cc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80228ce:	2200      	movs	r2, #0
 80228d0:	210f      	movs	r1, #15
 80228d2:	2021      	movs	r0, #33	; 0x21
 80228d4:	f001 fe11 	bl	80244fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80228d8:	2021      	movs	r0, #33	; 0x21
 80228da:	f001 fe2a 	bl	8024532 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80228de:	2200      	movs	r2, #0
 80228e0:	210f      	movs	r1, #15
 80228e2:	2022      	movs	r0, #34	; 0x22
 80228e4:	f001 fe09 	bl	80244fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80228e8:	2022      	movs	r0, #34	; 0x22
 80228ea:	f001 fe22 	bl	8024532 <HAL_NVIC_EnableIRQ>
}
 80228ee:	bf00      	nop
 80228f0:	3728      	adds	r7, #40	; 0x28
 80228f2:	46bd      	mov	sp, r7
 80228f4:	bd80      	pop	{r7, pc}
 80228f6:	bf00      	nop
 80228f8:	40021000 	.word	0x40021000
 80228fc:	48000400 	.word	0x48000400

08022900 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8022900:	b580      	push	{r7, lr}
 8022902:	b082      	sub	sp, #8
 8022904:	af00      	add	r7, sp, #0
 8022906:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8022908:	687b      	ldr	r3, [r7, #4]
 802290a:	4a12      	ldr	r2, [pc, #72]	; (8022954 <I2Cx_Init+0x54>)
 802290c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 802290e:	687b      	ldr	r3, [r7, #4]
 8022910:	4a11      	ldr	r2, [pc, #68]	; (8022958 <I2Cx_Init+0x58>)
 8022912:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	2200      	movs	r2, #0
 8022918:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 802291a:	687b      	ldr	r3, [r7, #4]
 802291c:	2201      	movs	r2, #1
 802291e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	2200      	movs	r2, #0
 8022924:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8022926:	687b      	ldr	r3, [r7, #4]
 8022928:	2200      	movs	r2, #0
 802292a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 802292c:	687b      	ldr	r3, [r7, #4]
 802292e:	2200      	movs	r2, #0
 8022930:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	2200      	movs	r2, #0
 8022936:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8022938:	6878      	ldr	r0, [r7, #4]
 802293a:	f7ff ff89 	bl	8022850 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 802293e:	6878      	ldr	r0, [r7, #4]
 8022940:	f002 feea 	bl	8025718 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8022944:	2100      	movs	r1, #0
 8022946:	6878      	ldr	r0, [r7, #4]
 8022948:	f003 fc78 	bl	802623c <HAL_I2CEx_ConfigAnalogFilter>
}
 802294c:	bf00      	nop
 802294e:	3708      	adds	r7, #8
 8022950:	46bd      	mov	sp, r7
 8022952:	bd80      	pop	{r7, pc}
 8022954:	40005800 	.word	0x40005800
 8022958:	00702681 	.word	0x00702681

0802295c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 802295c:	b580      	push	{r7, lr}
 802295e:	b08a      	sub	sp, #40	; 0x28
 8022960:	af04      	add	r7, sp, #16
 8022962:	60f8      	str	r0, [r7, #12]
 8022964:	4608      	mov	r0, r1
 8022966:	4611      	mov	r1, r2
 8022968:	461a      	mov	r2, r3
 802296a:	4603      	mov	r3, r0
 802296c:	72fb      	strb	r3, [r7, #11]
 802296e:	460b      	mov	r3, r1
 8022970:	813b      	strh	r3, [r7, #8]
 8022972:	4613      	mov	r3, r2
 8022974:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8022976:	2300      	movs	r3, #0
 8022978:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 802297a:	7afb      	ldrb	r3, [r7, #11]
 802297c:	b299      	uxth	r1, r3
 802297e:	88f8      	ldrh	r0, [r7, #6]
 8022980:	893a      	ldrh	r2, [r7, #8]
 8022982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8022986:	9302      	str	r3, [sp, #8]
 8022988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802298a:	9301      	str	r3, [sp, #4]
 802298c:	6a3b      	ldr	r3, [r7, #32]
 802298e:	9300      	str	r3, [sp, #0]
 8022990:	4603      	mov	r3, r0
 8022992:	68f8      	ldr	r0, [r7, #12]
 8022994:	f003 f892 	bl	8025abc <HAL_I2C_Mem_Read>
 8022998:	4603      	mov	r3, r0
 802299a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 802299c:	7dfb      	ldrb	r3, [r7, #23]
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d004      	beq.n	80229ac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80229a2:	7afb      	ldrb	r3, [r7, #11]
 80229a4:	4619      	mov	r1, r3
 80229a6:	68f8      	ldr	r0, [r7, #12]
 80229a8:	f000 f832 	bl	8022a10 <I2Cx_Error>
  }
  return status;
 80229ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80229ae:	4618      	mov	r0, r3
 80229b0:	3718      	adds	r7, #24
 80229b2:	46bd      	mov	sp, r7
 80229b4:	bd80      	pop	{r7, pc}

080229b6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80229b6:	b580      	push	{r7, lr}
 80229b8:	b08a      	sub	sp, #40	; 0x28
 80229ba:	af04      	add	r7, sp, #16
 80229bc:	60f8      	str	r0, [r7, #12]
 80229be:	4608      	mov	r0, r1
 80229c0:	4611      	mov	r1, r2
 80229c2:	461a      	mov	r2, r3
 80229c4:	4603      	mov	r3, r0
 80229c6:	72fb      	strb	r3, [r7, #11]
 80229c8:	460b      	mov	r3, r1
 80229ca:	813b      	strh	r3, [r7, #8]
 80229cc:	4613      	mov	r3, r2
 80229ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80229d0:	2300      	movs	r3, #0
 80229d2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80229d4:	7afb      	ldrb	r3, [r7, #11]
 80229d6:	b299      	uxth	r1, r3
 80229d8:	88f8      	ldrh	r0, [r7, #6]
 80229da:	893a      	ldrh	r2, [r7, #8]
 80229dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80229e0:	9302      	str	r3, [sp, #8]
 80229e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80229e4:	9301      	str	r3, [sp, #4]
 80229e6:	6a3b      	ldr	r3, [r7, #32]
 80229e8:	9300      	str	r3, [sp, #0]
 80229ea:	4603      	mov	r3, r0
 80229ec:	68f8      	ldr	r0, [r7, #12]
 80229ee:	f002 ff51 	bl	8025894 <HAL_I2C_Mem_Write>
 80229f2:	4603      	mov	r3, r0
 80229f4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80229f6:	7dfb      	ldrb	r3, [r7, #23]
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	d004      	beq.n	8022a06 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80229fc:	7afb      	ldrb	r3, [r7, #11]
 80229fe:	4619      	mov	r1, r3
 8022a00:	68f8      	ldr	r0, [r7, #12]
 8022a02:	f000 f805 	bl	8022a10 <I2Cx_Error>
  }
  return status;
 8022a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8022a08:	4618      	mov	r0, r3
 8022a0a:	3718      	adds	r7, #24
 8022a0c:	46bd      	mov	sp, r7
 8022a0e:	bd80      	pop	{r7, pc}

08022a10 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8022a10:	b580      	push	{r7, lr}
 8022a12:	b082      	sub	sp, #8
 8022a14:	af00      	add	r7, sp, #0
 8022a16:	6078      	str	r0, [r7, #4]
 8022a18:	460b      	mov	r3, r1
 8022a1a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8022a1c:	6878      	ldr	r0, [r7, #4]
 8022a1e:	f002 ff0a 	bl	8025836 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8022a22:	6878      	ldr	r0, [r7, #4]
 8022a24:	f7ff ff6c 	bl	8022900 <I2Cx_Init>
}
 8022a28:	bf00      	nop
 8022a2a:	3708      	adds	r7, #8
 8022a2c:	46bd      	mov	sp, r7
 8022a2e:	bd80      	pop	{r7, pc}

08022a30 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8022a30:	b580      	push	{r7, lr}
 8022a32:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8022a34:	4802      	ldr	r0, [pc, #8]	; (8022a40 <SENSOR_IO_Init+0x10>)
 8022a36:	f7ff ff63 	bl	8022900 <I2Cx_Init>
}
 8022a3a:	bf00      	nop
 8022a3c:	bd80      	pop	{r7, pc}
 8022a3e:	bf00      	nop
 8022a40:	200026ec 	.word	0x200026ec

08022a44 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8022a44:	b580      	push	{r7, lr}
 8022a46:	b084      	sub	sp, #16
 8022a48:	af02      	add	r7, sp, #8
 8022a4a:	4603      	mov	r3, r0
 8022a4c:	71fb      	strb	r3, [r7, #7]
 8022a4e:	460b      	mov	r3, r1
 8022a50:	71bb      	strb	r3, [r7, #6]
 8022a52:	4613      	mov	r3, r2
 8022a54:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8022a56:	79bb      	ldrb	r3, [r7, #6]
 8022a58:	b29a      	uxth	r2, r3
 8022a5a:	79f9      	ldrb	r1, [r7, #7]
 8022a5c:	2301      	movs	r3, #1
 8022a5e:	9301      	str	r3, [sp, #4]
 8022a60:	1d7b      	adds	r3, r7, #5
 8022a62:	9300      	str	r3, [sp, #0]
 8022a64:	2301      	movs	r3, #1
 8022a66:	4803      	ldr	r0, [pc, #12]	; (8022a74 <SENSOR_IO_Write+0x30>)
 8022a68:	f7ff ffa5 	bl	80229b6 <I2Cx_WriteMultiple>
}
 8022a6c:	bf00      	nop
 8022a6e:	3708      	adds	r7, #8
 8022a70:	46bd      	mov	sp, r7
 8022a72:	bd80      	pop	{r7, pc}
 8022a74:	200026ec 	.word	0x200026ec

08022a78 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8022a78:	b580      	push	{r7, lr}
 8022a7a:	b086      	sub	sp, #24
 8022a7c:	af02      	add	r7, sp, #8
 8022a7e:	4603      	mov	r3, r0
 8022a80:	460a      	mov	r2, r1
 8022a82:	71fb      	strb	r3, [r7, #7]
 8022a84:	4613      	mov	r3, r2
 8022a86:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8022a88:	2300      	movs	r3, #0
 8022a8a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8022a8c:	79bb      	ldrb	r3, [r7, #6]
 8022a8e:	b29a      	uxth	r2, r3
 8022a90:	79f9      	ldrb	r1, [r7, #7]
 8022a92:	2301      	movs	r3, #1
 8022a94:	9301      	str	r3, [sp, #4]
 8022a96:	f107 030f 	add.w	r3, r7, #15
 8022a9a:	9300      	str	r3, [sp, #0]
 8022a9c:	2301      	movs	r3, #1
 8022a9e:	4804      	ldr	r0, [pc, #16]	; (8022ab0 <SENSOR_IO_Read+0x38>)
 8022aa0:	f7ff ff5c 	bl	802295c <I2Cx_ReadMultiple>

  return read_value;
 8022aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8022aa6:	4618      	mov	r0, r3
 8022aa8:	3710      	adds	r7, #16
 8022aaa:	46bd      	mov	sp, r7
 8022aac:	bd80      	pop	{r7, pc}
 8022aae:	bf00      	nop
 8022ab0:	200026ec 	.word	0x200026ec

08022ab4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8022ab4:	b580      	push	{r7, lr}
 8022ab6:	b084      	sub	sp, #16
 8022ab8:	af02      	add	r7, sp, #8
 8022aba:	603a      	str	r2, [r7, #0]
 8022abc:	461a      	mov	r2, r3
 8022abe:	4603      	mov	r3, r0
 8022ac0:	71fb      	strb	r3, [r7, #7]
 8022ac2:	460b      	mov	r3, r1
 8022ac4:	71bb      	strb	r3, [r7, #6]
 8022ac6:	4613      	mov	r3, r2
 8022ac8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8022aca:	79bb      	ldrb	r3, [r7, #6]
 8022acc:	b29a      	uxth	r2, r3
 8022ace:	79f9      	ldrb	r1, [r7, #7]
 8022ad0:	88bb      	ldrh	r3, [r7, #4]
 8022ad2:	9301      	str	r3, [sp, #4]
 8022ad4:	683b      	ldr	r3, [r7, #0]
 8022ad6:	9300      	str	r3, [sp, #0]
 8022ad8:	2301      	movs	r3, #1
 8022ada:	4804      	ldr	r0, [pc, #16]	; (8022aec <SENSOR_IO_ReadMultiple+0x38>)
 8022adc:	f7ff ff3e 	bl	802295c <I2Cx_ReadMultiple>
 8022ae0:	4603      	mov	r3, r0
 8022ae2:	b29b      	uxth	r3, r3
}
 8022ae4:	4618      	mov	r0, r3
 8022ae6:	3708      	adds	r7, #8
 8022ae8:	46bd      	mov	sp, r7
 8022aea:	bd80      	pop	{r7, pc}
 8022aec:	200026ec 	.word	0x200026ec

08022af0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8022af0:	b580      	push	{r7, lr}
 8022af2:	b084      	sub	sp, #16
 8022af4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8022af6:	2300      	movs	r3, #0
 8022af8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8022afa:	2300      	movs	r3, #0
 8022afc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8022afe:	4b19      	ldr	r3, [pc, #100]	; (8022b64 <BSP_ACCELERO_Init+0x74>)
 8022b00:	689b      	ldr	r3, [r3, #8]
 8022b02:	4798      	blx	r3
 8022b04:	4603      	mov	r3, r0
 8022b06:	2b6a      	cmp	r3, #106	; 0x6a
 8022b08:	d002      	beq.n	8022b10 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8022b0a:	2301      	movs	r3, #1
 8022b0c:	73fb      	strb	r3, [r7, #15]
 8022b0e:	e024      	b.n	8022b5a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8022b10:	4b15      	ldr	r3, [pc, #84]	; (8022b68 <BSP_ACCELERO_Init+0x78>)
 8022b12:	4a14      	ldr	r2, [pc, #80]	; (8022b64 <BSP_ACCELERO_Init+0x74>)
 8022b14:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8022b16:	2330      	movs	r3, #48	; 0x30
 8022b18:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8022b1a:	2300      	movs	r3, #0
 8022b1c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8022b1e:	2300      	movs	r3, #0
 8022b20:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8022b22:	2340      	movs	r3, #64	; 0x40
 8022b24:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8022b26:	2300      	movs	r3, #0
 8022b28:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8022b2a:	2300      	movs	r3, #0
 8022b2c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8022b2e:	797a      	ldrb	r2, [r7, #5]
 8022b30:	7abb      	ldrb	r3, [r7, #10]
 8022b32:	4313      	orrs	r3, r2
 8022b34:	b2db      	uxtb	r3, r3
 8022b36:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8022b38:	7a3b      	ldrb	r3, [r7, #8]
 8022b3a:	f043 0304 	orr.w	r3, r3, #4
 8022b3e:	b2db      	uxtb	r3, r3
 8022b40:	021b      	lsls	r3, r3, #8
 8022b42:	b21a      	sxth	r2, r3
 8022b44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8022b48:	4313      	orrs	r3, r2
 8022b4a:	b21b      	sxth	r3, r3
 8022b4c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8022b4e:	4b06      	ldr	r3, [pc, #24]	; (8022b68 <BSP_ACCELERO_Init+0x78>)
 8022b50:	681b      	ldr	r3, [r3, #0]
 8022b52:	681b      	ldr	r3, [r3, #0]
 8022b54:	89ba      	ldrh	r2, [r7, #12]
 8022b56:	4610      	mov	r0, r2
 8022b58:	4798      	blx	r3
  }  

  return ret;
 8022b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b5c:	4618      	mov	r0, r3
 8022b5e:	3710      	adds	r7, #16
 8022b60:	46bd      	mov	sp, r7
 8022b62:	bd80      	pop	{r7, pc}
 8022b64:	2000022c 	.word	0x2000022c
 8022b68:	20002740 	.word	0x20002740

08022b6c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8022b6c:	b580      	push	{r7, lr}
 8022b6e:	b082      	sub	sp, #8
 8022b70:	af00      	add	r7, sp, #0
 8022b72:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8022b74:	4b08      	ldr	r3, [pc, #32]	; (8022b98 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8022b76:	681b      	ldr	r3, [r3, #0]
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	d009      	beq.n	8022b90 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8022b7c:	4b06      	ldr	r3, [pc, #24]	; (8022b98 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8022b7e:	681b      	ldr	r3, [r3, #0]
 8022b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022b82:	2b00      	cmp	r3, #0
 8022b84:	d004      	beq.n	8022b90 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8022b86:	4b04      	ldr	r3, [pc, #16]	; (8022b98 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8022b88:	681b      	ldr	r3, [r3, #0]
 8022b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022b8c:	6878      	ldr	r0, [r7, #4]
 8022b8e:	4798      	blx	r3
    }
  }
}
 8022b90:	bf00      	nop
 8022b92:	3708      	adds	r7, #8
 8022b94:	46bd      	mov	sp, r7
 8022b96:	bd80      	pop	{r7, pc}
 8022b98:	20002740 	.word	0x20002740

08022b9c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8022b9c:	b580      	push	{r7, lr}
 8022b9e:	b084      	sub	sp, #16
 8022ba0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8022ba2:	2301      	movs	r3, #1
 8022ba4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8022ba6:	2300      	movs	r3, #0
 8022ba8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8022baa:	4b1b      	ldr	r3, [pc, #108]	; (8022c18 <BSP_GYRO_Init+0x7c>)
 8022bac:	689b      	ldr	r3, [r3, #8]
 8022bae:	4798      	blx	r3
 8022bb0:	4603      	mov	r3, r0
 8022bb2:	2b6a      	cmp	r3, #106	; 0x6a
 8022bb4:	d002      	beq.n	8022bbc <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8022bb6:	2301      	movs	r3, #1
 8022bb8:	73fb      	strb	r3, [r7, #15]
 8022bba:	e028      	b.n	8022c0e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8022bbc:	4b17      	ldr	r3, [pc, #92]	; (8022c1c <BSP_GYRO_Init+0x80>)
 8022bbe:	4a16      	ldr	r2, [pc, #88]	; (8022c18 <BSP_GYRO_Init+0x7c>)
 8022bc0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8022bc2:	2300      	movs	r3, #0
 8022bc4:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8022bc6:	2330      	movs	r3, #48	; 0x30
 8022bc8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8022bca:	2300      	movs	r3, #0
 8022bcc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8022bce:	2300      	movs	r3, #0
 8022bd0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8022bd2:	2340      	movs	r3, #64	; 0x40
 8022bd4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8022bd6:	2300      	movs	r3, #0
 8022bd8:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8022bda:	230c      	movs	r3, #12
 8022bdc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8022bde:	7aba      	ldrb	r2, [r7, #10]
 8022be0:	797b      	ldrb	r3, [r7, #5]
 8022be2:	4313      	orrs	r3, r2
 8022be4:	b2db      	uxtb	r3, r3
 8022be6:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8022be8:	7a3b      	ldrb	r3, [r7, #8]
 8022bea:	f043 0304 	orr.w	r3, r3, #4
 8022bee:	b2db      	uxtb	r3, r3
 8022bf0:	021b      	lsls	r3, r3, #8
 8022bf2:	b21a      	sxth	r2, r3
 8022bf4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8022bf8:	4313      	orrs	r3, r2
 8022bfa:	b21b      	sxth	r3, r3
 8022bfc:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8022bfe:	4b07      	ldr	r3, [pc, #28]	; (8022c1c <BSP_GYRO_Init+0x80>)
 8022c00:	681b      	ldr	r3, [r3, #0]
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	89ba      	ldrh	r2, [r7, #12]
 8022c06:	4610      	mov	r0, r2
 8022c08:	4798      	blx	r3
    
    ret = GYRO_OK;
 8022c0a:	2300      	movs	r3, #0
 8022c0c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8022c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022c10:	4618      	mov	r0, r3
 8022c12:	3710      	adds	r7, #16
 8022c14:	46bd      	mov	sp, r7
 8022c16:	bd80      	pop	{r7, pc}
 8022c18:	20000260 	.word	0x20000260
 8022c1c:	20002744 	.word	0x20002744

08022c20 <BSP_GYRO_LowPower>:
/**
  * @brief  Set/Unset Gyroscope in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void BSP_GYRO_LowPower(uint16_t status)
{
 8022c20:	b580      	push	{r7, lr}
 8022c22:	b082      	sub	sp, #8
 8022c24:	af00      	add	r7, sp, #0
 8022c26:	4603      	mov	r3, r0
 8022c28:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset component in low-power mode */
  if(GyroscopeDrv != NULL)
 8022c2a:	4b09      	ldr	r3, [pc, #36]	; (8022c50 <BSP_GYRO_LowPower+0x30>)
 8022c2c:	681b      	ldr	r3, [r3, #0]
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	d00a      	beq.n	8022c48 <BSP_GYRO_LowPower+0x28>
  {
    if(GyroscopeDrv->LowPower!= NULL)
 8022c32:	4b07      	ldr	r3, [pc, #28]	; (8022c50 <BSP_GYRO_LowPower+0x30>)
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	691b      	ldr	r3, [r3, #16]
 8022c38:	2b00      	cmp	r3, #0
 8022c3a:	d005      	beq.n	8022c48 <BSP_GYRO_LowPower+0x28>
    {
      GyroscopeDrv->LowPower(status);
 8022c3c:	4b04      	ldr	r3, [pc, #16]	; (8022c50 <BSP_GYRO_LowPower+0x30>)
 8022c3e:	681b      	ldr	r3, [r3, #0]
 8022c40:	691b      	ldr	r3, [r3, #16]
 8022c42:	88fa      	ldrh	r2, [r7, #6]
 8022c44:	4610      	mov	r0, r2
 8022c46:	4798      	blx	r3
    }
  }
}
 8022c48:	bf00      	nop
 8022c4a:	3708      	adds	r7, #8
 8022c4c:	46bd      	mov	sp, r7
 8022c4e:	bd80      	pop	{r7, pc}
 8022c50:	20002744 	.word	0x20002744

08022c54 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8022c54:	b580      	push	{r7, lr}
 8022c56:	b082      	sub	sp, #8
 8022c58:	af00      	add	r7, sp, #0
 8022c5a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8022c5c:	4b08      	ldr	r3, [pc, #32]	; (8022c80 <BSP_GYRO_GetXYZ+0x2c>)
 8022c5e:	681b      	ldr	r3, [r3, #0]
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	d009      	beq.n	8022c78 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8022c64:	4b06      	ldr	r3, [pc, #24]	; (8022c80 <BSP_GYRO_GetXYZ+0x2c>)
 8022c66:	681b      	ldr	r3, [r3, #0]
 8022c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	d004      	beq.n	8022c78 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8022c6e:	4b04      	ldr	r3, [pc, #16]	; (8022c80 <BSP_GYRO_GetXYZ+0x2c>)
 8022c70:	681b      	ldr	r3, [r3, #0]
 8022c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c74:	6878      	ldr	r0, [r7, #4]
 8022c76:	4798      	blx	r3
    }
  }
}
 8022c78:	bf00      	nop
 8022c7a:	3708      	adds	r7, #8
 8022c7c:	46bd      	mov	sp, r7
 8022c7e:	bd80      	pop	{r7, pc}
 8022c80:	20002744 	.word	0x20002744

08022c84 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8022c84:	b580      	push	{r7, lr}
 8022c86:	b084      	sub	sp, #16
 8022c88:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8022c8a:	4b3b      	ldr	r3, [pc, #236]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022c8c:	4a3b      	ldr	r2, [pc, #236]	; (8022d7c <BSP_QSPI_Init+0xf8>)
 8022c8e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8022c90:	4839      	ldr	r0, [pc, #228]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022c92:	f003 fc15 	bl	80264c0 <HAL_OSPI_DeInit>
 8022c96:	4603      	mov	r3, r0
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d001      	beq.n	8022ca0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8022c9c:	2301      	movs	r3, #1
 8022c9e:	e067      	b.n	8022d70 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8022ca0:	f000 f9fe 	bl	80230a0 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8022ca4:	4b34      	ldr	r3, [pc, #208]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022ca6:	2204      	movs	r2, #4
 8022ca8:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8022caa:	4b33      	ldr	r3, [pc, #204]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022cac:	2200      	movs	r2, #0
 8022cae:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8022cb0:	4b31      	ldr	r3, [pc, #196]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022cb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8022cb6:	60da      	str	r2, [r3, #12]
 8022cb8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8022cbc:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022cbe:	68bb      	ldr	r3, [r7, #8]
 8022cc0:	fa93 f3a3 	rbit	r3, r3
 8022cc4:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8022cca:	68fb      	ldr	r3, [r7, #12]
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	d101      	bne.n	8022cd4 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8022cd0:	2320      	movs	r3, #32
 8022cd2:	e003      	b.n	8022cdc <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8022cd4:	68fb      	ldr	r3, [r7, #12]
 8022cd6:	fab3 f383 	clz	r3, r3
 8022cda:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8022cdc:	461a      	mov	r2, r3
 8022cde:	4b26      	ldr	r3, [pc, #152]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022ce0:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8022ce2:	4b25      	ldr	r3, [pc, #148]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022ce4:	2201      	movs	r2, #1
 8022ce6:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8022ce8:	4b23      	ldr	r3, [pc, #140]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022cea:	2200      	movs	r2, #0
 8022cec:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8022cee:	4b22      	ldr	r3, [pc, #136]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022cf0:	2200      	movs	r2, #0
 8022cf2:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8022cf4:	4b20      	ldr	r3, [pc, #128]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022cf6:	2204      	movs	r2, #4
 8022cf8:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8022cfa:	4b1f      	ldr	r3, [pc, #124]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8022d00:	4b1d      	ldr	r3, [pc, #116]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022d06:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8022d08:	4b1b      	ldr	r3, [pc, #108]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022d0a:	2200      	movs	r2, #0
 8022d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8022d0e:	4b1a      	ldr	r3, [pc, #104]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022d10:	2200      	movs	r2, #0
 8022d12:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8022d14:	4818      	ldr	r0, [pc, #96]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022d16:	f003 fb29 	bl	802636c <HAL_OSPI_Init>
 8022d1a:	4603      	mov	r3, r0
 8022d1c:	2b00      	cmp	r3, #0
 8022d1e:	d001      	beq.n	8022d24 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8022d20:	2301      	movs	r3, #1
 8022d22:	e025      	b.n	8022d70 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8022d24:	4814      	ldr	r0, [pc, #80]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022d26:	f000 f9fb 	bl	8023120 <QSPI_ResetMemory>
 8022d2a:	4603      	mov	r3, r0
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d001      	beq.n	8022d34 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8022d30:	2304      	movs	r3, #4
 8022d32:	e01d      	b.n	8022d70 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8022d34:	2101      	movs	r1, #1
 8022d36:	4810      	ldr	r0, [pc, #64]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022d38:	f000 fae0 	bl	80232fc <QSPI_QuadMode>
 8022d3c:	4603      	mov	r3, r0
 8022d3e:	2b00      	cmp	r3, #0
 8022d40:	d001      	beq.n	8022d46 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8022d42:	2301      	movs	r3, #1
 8022d44:	e014      	b.n	8022d70 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8022d46:	2101      	movs	r1, #1
 8022d48:	480b      	ldr	r0, [pc, #44]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022d4a:	f000 fb83 	bl	8023454 <QSPI_HighPerfMode>
 8022d4e:	4603      	mov	r3, r0
 8022d50:	2b00      	cmp	r3, #0
 8022d52:	d001      	beq.n	8022d58 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8022d54:	2301      	movs	r3, #1
 8022d56:	e00b      	b.n	8022d70 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8022d58:	4b07      	ldr	r3, [pc, #28]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022d5a:	2202      	movs	r2, #2
 8022d5c:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8022d5e:	4806      	ldr	r0, [pc, #24]	; (8022d78 <BSP_QSPI_Init+0xf4>)
 8022d60:	f003 fb04 	bl	802636c <HAL_OSPI_Init>
 8022d64:	4603      	mov	r3, r0
 8022d66:	2b00      	cmp	r3, #0
 8022d68:	d001      	beq.n	8022d6e <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 8022d6a:	2301      	movs	r3, #1
 8022d6c:	e000      	b.n	8022d70 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8022d6e:	2300      	movs	r3, #0
}
 8022d70:	4618      	mov	r0, r3
 8022d72:	3710      	adds	r7, #16
 8022d74:	46bd      	mov	sp, r7
 8022d76:	bd80      	pop	{r7, pc}
 8022d78:	20002748 	.word	0x20002748
 8022d7c:	a0001000 	.word	0xa0001000

08022d80 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8022d80:	b580      	push	{r7, lr}
 8022d82:	b098      	sub	sp, #96	; 0x60
 8022d84:	af00      	add	r7, sp, #0
 8022d86:	60f8      	str	r0, [r7, #12]
 8022d88:	60b9      	str	r1, [r7, #8]
 8022d8a:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8022d8c:	2300      	movs	r3, #0
 8022d8e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8022d90:	2300      	movs	r3, #0
 8022d92:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8022d94:	23eb      	movs	r3, #235	; 0xeb
 8022d96:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8022d98:	2301      	movs	r3, #1
 8022d9a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8022d9c:	2300      	movs	r3, #0
 8022d9e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8022da0:	2300      	movs	r3, #0
 8022da2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8022da4:	68bb      	ldr	r3, [r7, #8]
 8022da6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8022da8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8022dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8022dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022db2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8022db4:	2300      	movs	r3, #0
 8022db6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8022db8:	23aa      	movs	r3, #170	; 0xaa
 8022dba:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8022dbc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8022dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8022dc2:	2300      	movs	r3, #0
 8022dc4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8022dca:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8022dce:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8022dd4:	2300      	movs	r3, #0
 8022dd6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8022dd8:	2304      	movs	r3, #4
 8022dda:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8022ddc:	2300      	movs	r3, #0
 8022dde:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8022de0:	2300      	movs	r3, #0
 8022de2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022de4:	f107 0310 	add.w	r3, r7, #16
 8022de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8022dec:	4619      	mov	r1, r3
 8022dee:	480c      	ldr	r0, [pc, #48]	; (8022e20 <BSP_QSPI_Read+0xa0>)
 8022df0:	f003 fb8d 	bl	802650e <HAL_OSPI_Command>
 8022df4:	4603      	mov	r3, r0
 8022df6:	2b00      	cmp	r3, #0
 8022df8:	d001      	beq.n	8022dfe <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8022dfa:	2301      	movs	r3, #1
 8022dfc:	e00b      	b.n	8022e16 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8022e02:	68f9      	ldr	r1, [r7, #12]
 8022e04:	4806      	ldr	r0, [pc, #24]	; (8022e20 <BSP_QSPI_Read+0xa0>)
 8022e06:	f003 fc76 	bl	80266f6 <HAL_OSPI_Receive>
 8022e0a:	4603      	mov	r3, r0
 8022e0c:	2b00      	cmp	r3, #0
 8022e0e:	d001      	beq.n	8022e14 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8022e10:	2301      	movs	r3, #1
 8022e12:	e000      	b.n	8022e16 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8022e14:	2300      	movs	r3, #0
}
 8022e16:	4618      	mov	r0, r3
 8022e18:	3760      	adds	r7, #96	; 0x60
 8022e1a:	46bd      	mov	sp, r7
 8022e1c:	bd80      	pop	{r7, pc}
 8022e1e:	bf00      	nop
 8022e20:	20002748 	.word	0x20002748

08022e24 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8022e24:	b580      	push	{r7, lr}
 8022e26:	b09c      	sub	sp, #112	; 0x70
 8022e28:	af00      	add	r7, sp, #0
 8022e2a:	60f8      	str	r0, [r7, #12]
 8022e2c:	60b9      	str	r1, [r7, #8]
 8022e2e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8022e30:	68bb      	ldr	r3, [r7, #8]
 8022e32:	b2db      	uxtb	r3, r3
 8022e34:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022e38:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8022e3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	429a      	cmp	r2, r3
 8022e40:	d901      	bls.n	8022e46 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8022e42:	687b      	ldr	r3, [r7, #4]
 8022e44:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8022e46:	68bb      	ldr	r3, [r7, #8]
 8022e48:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 8022e4a:	68ba      	ldr	r2, [r7, #8]
 8022e4c:	687b      	ldr	r3, [r7, #4]
 8022e4e:	4413      	add	r3, r2
 8022e50:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8022e52:	2300      	movs	r3, #0
 8022e54:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8022e56:	2300      	movs	r3, #0
 8022e58:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 8022e5a:	2338      	movs	r3, #56	; 0x38
 8022e5c:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8022e5e:	2301      	movs	r3, #1
 8022e60:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8022e62:	2300      	movs	r3, #0
 8022e64:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8022e66:	2300      	movs	r3, #0
 8022e68:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8022e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8022e6e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8022e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022e74:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8022e76:	2300      	movs	r3, #0
 8022e78:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8022e7a:	2300      	movs	r3, #0
 8022e7c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8022e7e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8022e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8022e84:	2300      	movs	r3, #0
 8022e86:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8022e88:	2300      	movs	r3, #0
 8022e8a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8022e8c:	2300      	movs	r3, #0
 8022e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8022e90:	2300      	movs	r3, #0
 8022e92:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8022e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8022e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8022e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022e9a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8022e9c:	4823      	ldr	r0, [pc, #140]	; (8022f2c <BSP_QSPI_Write+0x108>)
 8022e9e:	f000 f986 	bl	80231ae <QSPI_WriteEnable>
 8022ea2:	4603      	mov	r3, r0
 8022ea4:	2b00      	cmp	r3, #0
 8022ea6:	d001      	beq.n	8022eac <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8022ea8:	2301      	movs	r3, #1
 8022eaa:	e03b      	b.n	8022f24 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022eac:	f107 0314 	add.w	r3, r7, #20
 8022eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8022eb4:	4619      	mov	r1, r3
 8022eb6:	481d      	ldr	r0, [pc, #116]	; (8022f2c <BSP_QSPI_Write+0x108>)
 8022eb8:	f003 fb29 	bl	802650e <HAL_OSPI_Command>
 8022ebc:	4603      	mov	r3, r0
 8022ebe:	2b00      	cmp	r3, #0
 8022ec0:	d001      	beq.n	8022ec6 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8022ec2:	2301      	movs	r3, #1
 8022ec4:	e02e      	b.n	8022f24 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8022eca:	68f9      	ldr	r1, [r7, #12]
 8022ecc:	4817      	ldr	r0, [pc, #92]	; (8022f2c <BSP_QSPI_Write+0x108>)
 8022ece:	f003 fb9f 	bl	8026610 <HAL_OSPI_Transmit>
 8022ed2:	4603      	mov	r3, r0
 8022ed4:	2b00      	cmp	r3, #0
 8022ed6:	d001      	beq.n	8022edc <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8022ed8:	2301      	movs	r3, #1
 8022eda:	e023      	b.n	8022f24 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8022edc:	f241 3188 	movw	r1, #5000	; 0x1388
 8022ee0:	4812      	ldr	r0, [pc, #72]	; (8022f2c <BSP_QSPI_Write+0x108>)
 8022ee2:	f000 f9c0 	bl	8023266 <QSPI_AutoPollingMemReady>
 8022ee6:	4603      	mov	r3, r0
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d001      	beq.n	8022ef0 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8022eec:	2301      	movs	r3, #1
 8022eee:	e019      	b.n	8022f24 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8022ef0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8022ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022ef4:	4413      	add	r3, r2
 8022ef6:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8022ef8:	68fa      	ldr	r2, [r7, #12]
 8022efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022efc:	4413      	add	r3, r2
 8022efe:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8022f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8022f02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022f06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8022f08:	429a      	cmp	r2, r3
 8022f0a:	d203      	bcs.n	8022f14 <BSP_QSPI_Write+0xf0>
 8022f0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8022f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8022f10:	1ad3      	subs	r3, r2, r3
 8022f12:	e001      	b.n	8022f18 <BSP_QSPI_Write+0xf4>
 8022f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022f18:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 8022f1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8022f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022f1e:	429a      	cmp	r2, r3
 8022f20:	d3b8      	bcc.n	8022e94 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8022f22:	2300      	movs	r3, #0
}
 8022f24:	4618      	mov	r0, r3
 8022f26:	3770      	adds	r7, #112	; 0x70
 8022f28:	46bd      	mov	sp, r7
 8022f2a:	bd80      	pop	{r7, pc}
 8022f2c:	20002748 	.word	0x20002748

08022f30 <BSP_QSPI_Erase_Sector>:
  *       returns. Application has to call BSP_QSPI_GetStatus()
  *       to know when the device is available again (i.e. erase operation
  *       completed).
  */
uint8_t BSP_QSPI_Erase_Sector(uint32_t Sector)
{
 8022f30:	b580      	push	{r7, lr}
 8022f32:	b096      	sub	sp, #88	; 0x58
 8022f34:	af00      	add	r7, sp, #0
 8022f36:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  
  if (Sector >= (uint32_t)(MX25R6435F_FLASH_SIZE/MX25R6435F_SECTOR_SIZE))
 8022f38:	687b      	ldr	r3, [r7, #4]
 8022f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8022f3e:	d301      	bcc.n	8022f44 <BSP_QSPI_Erase_Sector+0x14>
  {
    return QSPI_ERROR;
 8022f40:	2301      	movs	r3, #1
 8022f42:	e036      	b.n	8022fb2 <BSP_QSPI_Erase_Sector+0x82>
  }
  
  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8022f44:	2300      	movs	r3, #0
 8022f46:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8022f48:	2300      	movs	r3, #0
 8022f4a:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = SECTOR_ERASE_CMD;
 8022f4c:	2320      	movs	r3, #32
 8022f4e:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8022f50:	2301      	movs	r3, #1
 8022f52:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8022f54:	2300      	movs	r3, #0
 8022f56:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8022f58:	2300      	movs	r3, #0
 8022f5a:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = (Sector * MX25R6435F_SECTOR_SIZE);
 8022f5c:	687b      	ldr	r3, [r7, #4]
 8022f5e:	031b      	lsls	r3, r3, #12
 8022f60:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8022f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022f66:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8022f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8022f6e:	2300      	movs	r3, #0
 8022f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8022f72:	2300      	movs	r3, #0
 8022f74:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8022f76:	2300      	movs	r3, #0
 8022f78:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8022f7a:	2300      	movs	r3, #0
 8022f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8022f7e:	2300      	movs	r3, #0
 8022f80:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8022f82:	2300      	movs	r3, #0
 8022f84:	657b      	str	r3, [r7, #84]	; 0x54
  
  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8022f86:	480d      	ldr	r0, [pc, #52]	; (8022fbc <BSP_QSPI_Erase_Sector+0x8c>)
 8022f88:	f000 f911 	bl	80231ae <QSPI_WriteEnable>
 8022f8c:	4603      	mov	r3, r0
 8022f8e:	2b00      	cmp	r3, #0
 8022f90:	d001      	beq.n	8022f96 <BSP_QSPI_Erase_Sector+0x66>
  {
    return QSPI_ERROR;
 8022f92:	2301      	movs	r3, #1
 8022f94:	e00d      	b.n	8022fb2 <BSP_QSPI_Erase_Sector+0x82>
  }
  
  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8022f96:	f107 0308 	add.w	r3, r7, #8
 8022f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8022f9e:	4619      	mov	r1, r3
 8022fa0:	4806      	ldr	r0, [pc, #24]	; (8022fbc <BSP_QSPI_Erase_Sector+0x8c>)
 8022fa2:	f003 fab4 	bl	802650e <HAL_OSPI_Command>
 8022fa6:	4603      	mov	r3, r0
 8022fa8:	2b00      	cmp	r3, #0
 8022faa:	d001      	beq.n	8022fb0 <BSP_QSPI_Erase_Sector+0x80>
  {
    return QSPI_ERROR;
 8022fac:	2301      	movs	r3, #1
 8022fae:	e000      	b.n	8022fb2 <BSP_QSPI_Erase_Sector+0x82>
  }
  
  return QSPI_OK;
 8022fb0:	2300      	movs	r3, #0
}
 8022fb2:	4618      	mov	r0, r3
 8022fb4:	3758      	adds	r7, #88	; 0x58
 8022fb6:	46bd      	mov	sp, r7
 8022fb8:	bd80      	pop	{r7, pc}
 8022fba:	bf00      	nop
 8022fbc:	20002748 	.word	0x20002748

08022fc0 <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 8022fc0:	b580      	push	{r7, lr}
 8022fc2:	b096      	sub	sp, #88	; 0x58
 8022fc4:	af00      	add	r7, sp, #0
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read security register command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8022fc6:	2300      	movs	r3, #0
 8022fc8:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8022fca:	2300      	movs	r3, #0
 8022fcc:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = READ_SEC_REG_CMD;
 8022fce:	232b      	movs	r3, #43	; 0x2b
 8022fd0:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8022fd2:	2301      	movs	r3, #1
 8022fd4:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8022fd6:	2300      	movs	r3, #0
 8022fd8:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8022fda:	2300      	movs	r3, #0
 8022fdc:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8022fde:	2300      	movs	r3, #0
 8022fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8022fe2:	2300      	movs	r3, #0
 8022fe4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8022fe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8022fea:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.NbData             = 1;
 8022fec:	2301      	movs	r3, #1
 8022fee:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8022ff0:	2300      	movs	r3, #0
 8022ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DummyCycles        = 0;
 8022ff4:	2300      	movs	r3, #0
 8022ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8022ff8:	2300      	movs	r3, #0
 8022ffa:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8022ffc:	2300      	movs	r3, #0
 8022ffe:	657b      	str	r3, [r7, #84]	; 0x54

  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023000:	f107 0308 	add.w	r3, r7, #8
 8023004:	f241 3288 	movw	r2, #5000	; 0x1388
 8023008:	4619      	mov	r1, r3
 802300a:	4824      	ldr	r0, [pc, #144]	; (802309c <BSP_QSPI_GetStatus+0xdc>)
 802300c:	f003 fa7f 	bl	802650e <HAL_OSPI_Command>
 8023010:	4603      	mov	r3, r0
 8023012:	2b00      	cmp	r3, #0
 8023014:	d001      	beq.n	802301a <BSP_QSPI_GetStatus+0x5a>
  {
    return QSPI_ERROR;
 8023016:	2301      	movs	r3, #1
 8023018:	e03c      	b.n	8023094 <BSP_QSPI_GetStatus+0xd4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802301a:	1dfb      	adds	r3, r7, #7
 802301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023020:	4619      	mov	r1, r3
 8023022:	481e      	ldr	r0, [pc, #120]	; (802309c <BSP_QSPI_GetStatus+0xdc>)
 8023024:	f003 fb67 	bl	80266f6 <HAL_OSPI_Receive>
 8023028:	4603      	mov	r3, r0
 802302a:	2b00      	cmp	r3, #0
 802302c:	d001      	beq.n	8023032 <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 802302e:	2301      	movs	r3, #1
 8023030:	e030      	b.n	8023094 <BSP_QSPI_GetStatus+0xd4>
  }
  
  /* Check the value of the register */
  if ((reg & (MX25R6435F_SECR_P_FAIL | MX25R6435F_SECR_E_FAIL)) != 0)
 8023032:	79fb      	ldrb	r3, [r7, #7]
 8023034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8023038:	2b00      	cmp	r3, #0
 802303a:	d001      	beq.n	8023040 <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_ERROR;
 802303c:	2301      	movs	r3, #1
 802303e:	e029      	b.n	8023094 <BSP_QSPI_GetStatus+0xd4>
  }
  else if ((reg & (MX25R6435F_SECR_PSB | MX25R6435F_SECR_ESB)) != 0)
 8023040:	79fb      	ldrb	r3, [r7, #7]
 8023042:	f003 030c 	and.w	r3, r3, #12
 8023046:	2b00      	cmp	r3, #0
 8023048:	d001      	beq.n	802304e <BSP_QSPI_GetStatus+0x8e>
  {
    return QSPI_SUSPENDED;
 802304a:	2308      	movs	r3, #8
 802304c:	e022      	b.n	8023094 <BSP_QSPI_GetStatus+0xd4>
  }

  /* Initialize the read status register command */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 802304e:	2305      	movs	r3, #5
 8023050:	613b      	str	r3, [r7, #16]

  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023052:	f107 0308 	add.w	r3, r7, #8
 8023056:	f241 3288 	movw	r2, #5000	; 0x1388
 802305a:	4619      	mov	r1, r3
 802305c:	480f      	ldr	r0, [pc, #60]	; (802309c <BSP_QSPI_GetStatus+0xdc>)
 802305e:	f003 fa56 	bl	802650e <HAL_OSPI_Command>
 8023062:	4603      	mov	r3, r0
 8023064:	2b00      	cmp	r3, #0
 8023066:	d001      	beq.n	802306c <BSP_QSPI_GetStatus+0xac>
  {
    return QSPI_ERROR;
 8023068:	2301      	movs	r3, #1
 802306a:	e013      	b.n	8023094 <BSP_QSPI_GetStatus+0xd4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802306c:	1dfb      	adds	r3, r7, #7
 802306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8023072:	4619      	mov	r1, r3
 8023074:	4809      	ldr	r0, [pc, #36]	; (802309c <BSP_QSPI_GetStatus+0xdc>)
 8023076:	f003 fb3e 	bl	80266f6 <HAL_OSPI_Receive>
 802307a:	4603      	mov	r3, r0
 802307c:	2b00      	cmp	r3, #0
 802307e:	d001      	beq.n	8023084 <BSP_QSPI_GetStatus+0xc4>
  {
    return QSPI_ERROR;
 8023080:	2301      	movs	r3, #1
 8023082:	e007      	b.n	8023094 <BSP_QSPI_GetStatus+0xd4>
  }

  /* Check the value of the register */
  if ((reg & MX25R6435F_SR_WIP) != 0)
 8023084:	79fb      	ldrb	r3, [r7, #7]
 8023086:	f003 0301 	and.w	r3, r3, #1
 802308a:	2b00      	cmp	r3, #0
 802308c:	d001      	beq.n	8023092 <BSP_QSPI_GetStatus+0xd2>
  {
    return QSPI_BUSY;
 802308e:	2302      	movs	r3, #2
 8023090:	e000      	b.n	8023094 <BSP_QSPI_GetStatus+0xd4>
  }
  else
  {
    return QSPI_OK;
 8023092:	2300      	movs	r3, #0
  }
}
 8023094:	4618      	mov	r0, r3
 8023096:	3758      	adds	r7, #88	; 0x58
 8023098:	46bd      	mov	sp, r7
 802309a:	bd80      	pop	{r7, pc}
 802309c:	20002748 	.word	0x20002748

080230a0 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80230a0:	b580      	push	{r7, lr}
 80230a2:	b088      	sub	sp, #32
 80230a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 80230a6:	4b1c      	ldr	r3, [pc, #112]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80230aa:	4a1b      	ldr	r2, [pc, #108]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80230b0:	6513      	str	r3, [r2, #80]	; 0x50
 80230b2:	4b19      	ldr	r3, [pc, #100]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80230b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80230ba:	60bb      	str	r3, [r7, #8]
 80230bc:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 80230be:	4b16      	ldr	r3, [pc, #88]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230c2:	4a15      	ldr	r2, [pc, #84]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80230c8:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 80230ca:	4b13      	ldr	r3, [pc, #76]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230ce:	4a12      	ldr	r2, [pc, #72]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80230d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80230d6:	4b10      	ldr	r3, [pc, #64]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80230da:	4a0f      	ldr	r2, [pc, #60]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230dc:	f043 0310 	orr.w	r3, r3, #16
 80230e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80230e2:	4b0d      	ldr	r3, [pc, #52]	; (8023118 <BSP_QSPI_MspInit+0x78>)
 80230e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80230e6:	f003 0310 	and.w	r3, r3, #16
 80230ea:	607b      	str	r3, [r7, #4]
 80230ec:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80230ee:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80230f2:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80230f4:	2302      	movs	r3, #2
 80230f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80230f8:	2300      	movs	r3, #0
 80230fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80230fc:	2303      	movs	r3, #3
 80230fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8023100:	230a      	movs	r3, #10
 8023102:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8023104:	f107 030c 	add.w	r3, r7, #12
 8023108:	4619      	mov	r1, r3
 802310a:	4804      	ldr	r0, [pc, #16]	; (802311c <BSP_QSPI_MspInit+0x7c>)
 802310c:	f002 f868 	bl	80251e0 <HAL_GPIO_Init>
}
 8023110:	bf00      	nop
 8023112:	3720      	adds	r7, #32
 8023114:	46bd      	mov	sp, r7
 8023116:	bd80      	pop	{r7, pc}
 8023118:	40021000 	.word	0x40021000
 802311c:	48001000 	.word	0x48001000

08023120 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8023120:	b580      	push	{r7, lr}
 8023122:	b096      	sub	sp, #88	; 0x58
 8023124:	af00      	add	r7, sp, #0
 8023126:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8023128:	2300      	movs	r3, #0
 802312a:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 802312c:	2300      	movs	r3, #0
 802312e:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8023130:	2366      	movs	r3, #102	; 0x66
 8023132:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8023134:	2301      	movs	r3, #1
 8023136:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8023138:	2300      	movs	r3, #0
 802313a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 802313c:	2300      	movs	r3, #0
 802313e:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8023140:	2300      	movs	r3, #0
 8023142:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8023144:	2300      	movs	r3, #0
 8023146:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8023148:	2300      	movs	r3, #0
 802314a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 802314c:	2300      	movs	r3, #0
 802314e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8023150:	2300      	movs	r3, #0
 8023152:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8023154:	2300      	movs	r3, #0
 8023156:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023158:	f107 0308 	add.w	r3, r7, #8
 802315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023160:	4619      	mov	r1, r3
 8023162:	6878      	ldr	r0, [r7, #4]
 8023164:	f003 f9d3 	bl	802650e <HAL_OSPI_Command>
 8023168:	4603      	mov	r3, r0
 802316a:	2b00      	cmp	r3, #0
 802316c:	d001      	beq.n	8023172 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 802316e:	2301      	movs	r3, #1
 8023170:	e019      	b.n	80231a6 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8023172:	2399      	movs	r3, #153	; 0x99
 8023174:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023176:	f107 0308 	add.w	r3, r7, #8
 802317a:	f241 3288 	movw	r2, #5000	; 0x1388
 802317e:	4619      	mov	r1, r3
 8023180:	6878      	ldr	r0, [r7, #4]
 8023182:	f003 f9c4 	bl	802650e <HAL_OSPI_Command>
 8023186:	4603      	mov	r3, r0
 8023188:	2b00      	cmp	r3, #0
 802318a:	d001      	beq.n	8023190 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 802318c:	2301      	movs	r3, #1
 802318e:	e00a      	b.n	80231a6 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8023190:	f241 3188 	movw	r1, #5000	; 0x1388
 8023194:	6878      	ldr	r0, [r7, #4]
 8023196:	f000 f866 	bl	8023266 <QSPI_AutoPollingMemReady>
 802319a:	4603      	mov	r3, r0
 802319c:	2b00      	cmp	r3, #0
 802319e:	d001      	beq.n	80231a4 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 80231a0:	2301      	movs	r3, #1
 80231a2:	e000      	b.n	80231a6 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 80231a4:	2300      	movs	r3, #0
}
 80231a6:	4618      	mov	r0, r3
 80231a8:	3758      	adds	r7, #88	; 0x58
 80231aa:	46bd      	mov	sp, r7
 80231ac:	bd80      	pop	{r7, pc}

080231ae <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 80231ae:	b580      	push	{r7, lr}
 80231b0:	b09c      	sub	sp, #112	; 0x70
 80231b2:	af00      	add	r7, sp, #0
 80231b4:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80231b6:	2300      	movs	r3, #0
 80231b8:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80231ba:	2300      	movs	r3, #0
 80231bc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 80231be:	2306      	movs	r3, #6
 80231c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80231c2:	2301      	movs	r3, #1
 80231c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80231c6:	2300      	movs	r3, #0
 80231c8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80231ca:	2300      	movs	r3, #0
 80231cc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80231ce:	2300      	movs	r3, #0
 80231d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80231d2:	2300      	movs	r3, #0
 80231d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80231d6:	2300      	movs	r3, #0
 80231d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 80231da:	2300      	movs	r3, #0
 80231dc:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80231de:	2300      	movs	r3, #0
 80231e0:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80231e2:	2300      	movs	r3, #0
 80231e4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80231e6:	f107 0320 	add.w	r3, r7, #32
 80231ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80231ee:	4619      	mov	r1, r3
 80231f0:	6878      	ldr	r0, [r7, #4]
 80231f2:	f003 f98c 	bl	802650e <HAL_OSPI_Command>
 80231f6:	4603      	mov	r3, r0
 80231f8:	2b00      	cmp	r3, #0
 80231fa:	d001      	beq.n	8023200 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 80231fc:	2301      	movs	r3, #1
 80231fe:	e02e      	b.n	802325e <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8023200:	2302      	movs	r3, #2
 8023202:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8023204:	2302      	movs	r3, #2
 8023206:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8023208:	2300      	movs	r3, #0
 802320a:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 802320c:	2310      	movs	r3, #16
 802320e:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8023210:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023214:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8023216:	2305      	movs	r3, #5
 8023218:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 802321a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802321e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8023220:	2301      	movs	r3, #1
 8023222:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8023224:	2300      	movs	r3, #0
 8023226:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023228:	f107 0320 	add.w	r3, r7, #32
 802322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023230:	4619      	mov	r1, r3
 8023232:	6878      	ldr	r0, [r7, #4]
 8023234:	f003 f96b 	bl	802650e <HAL_OSPI_Command>
 8023238:	4603      	mov	r3, r0
 802323a:	2b00      	cmp	r3, #0
 802323c:	d001      	beq.n	8023242 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 802323e:	2301      	movs	r3, #1
 8023240:	e00d      	b.n	802325e <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023242:	f107 030c 	add.w	r3, r7, #12
 8023246:	f241 3288 	movw	r2, #5000	; 0x1388
 802324a:	4619      	mov	r1, r3
 802324c:	6878      	ldr	r0, [r7, #4]
 802324e:	f003 faf5 	bl	802683c <HAL_OSPI_AutoPolling>
 8023252:	4603      	mov	r3, r0
 8023254:	2b00      	cmp	r3, #0
 8023256:	d001      	beq.n	802325c <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8023258:	2301      	movs	r3, #1
 802325a:	e000      	b.n	802325e <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 802325c:	2300      	movs	r3, #0
}
 802325e:	4618      	mov	r0, r3
 8023260:	3770      	adds	r7, #112	; 0x70
 8023262:	46bd      	mov	sp, r7
 8023264:	bd80      	pop	{r7, pc}

08023266 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8023266:	b580      	push	{r7, lr}
 8023268:	b09c      	sub	sp, #112	; 0x70
 802326a:	af00      	add	r7, sp, #0
 802326c:	6078      	str	r0, [r7, #4]
 802326e:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8023270:	2300      	movs	r3, #0
 8023272:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8023274:	2300      	movs	r3, #0
 8023276:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8023278:	2305      	movs	r3, #5
 802327a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 802327c:	2301      	movs	r3, #1
 802327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8023280:	2300      	movs	r3, #0
 8023282:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8023284:	2300      	movs	r3, #0
 8023286:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8023288:	2300      	movs	r3, #0
 802328a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 802328c:	2300      	movs	r3, #0
 802328e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8023290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023294:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8023296:	2301      	movs	r3, #1
 8023298:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 802329a:	2300      	movs	r3, #0
 802329c:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 802329e:	2300      	movs	r3, #0
 80232a0:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80232a2:	2300      	movs	r3, #0
 80232a4:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80232a6:	2300      	movs	r3, #0
 80232a8:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 80232aa:	2300      	movs	r3, #0
 80232ac:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80232ae:	2301      	movs	r3, #1
 80232b0:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80232b2:	2300      	movs	r3, #0
 80232b4:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80232b6:	2310      	movs	r3, #16
 80232b8:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80232ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80232be:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80232c0:	f107 0320 	add.w	r3, r7, #32
 80232c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80232c8:	4619      	mov	r1, r3
 80232ca:	6878      	ldr	r0, [r7, #4]
 80232cc:	f003 f91f 	bl	802650e <HAL_OSPI_Command>
 80232d0:	4603      	mov	r3, r0
 80232d2:	2b00      	cmp	r3, #0
 80232d4:	d001      	beq.n	80232da <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 80232d6:	2301      	movs	r3, #1
 80232d8:	e00c      	b.n	80232f4 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 80232da:	f107 030c 	add.w	r3, r7, #12
 80232de:	683a      	ldr	r2, [r7, #0]
 80232e0:	4619      	mov	r1, r3
 80232e2:	6878      	ldr	r0, [r7, #4]
 80232e4:	f003 faaa 	bl	802683c <HAL_OSPI_AutoPolling>
 80232e8:	4603      	mov	r3, r0
 80232ea:	2b00      	cmp	r3, #0
 80232ec:	d001      	beq.n	80232f2 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 80232ee:	2301      	movs	r3, #1
 80232f0:	e000      	b.n	80232f4 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 80232f2:	2300      	movs	r3, #0
}
 80232f4:	4618      	mov	r0, r3
 80232f6:	3770      	adds	r7, #112	; 0x70
 80232f8:	46bd      	mov	sp, r7
 80232fa:	bd80      	pop	{r7, pc}

080232fc <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80232fc:	b580      	push	{r7, lr}
 80232fe:	b098      	sub	sp, #96	; 0x60
 8023300:	af00      	add	r7, sp, #0
 8023302:	6078      	str	r0, [r7, #4]
 8023304:	460b      	mov	r3, r1
 8023306:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8023308:	2300      	movs	r3, #0
 802330a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 802330c:	2300      	movs	r3, #0
 802330e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8023310:	2305      	movs	r3, #5
 8023312:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8023314:	2301      	movs	r3, #1
 8023316:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8023318:	2300      	movs	r3, #0
 802331a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 802331c:	2300      	movs	r3, #0
 802331e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8023320:	2300      	movs	r3, #0
 8023322:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8023324:	2300      	movs	r3, #0
 8023326:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8023328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802332c:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 802332e:	2300      	movs	r3, #0
 8023330:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8023332:	2300      	movs	r3, #0
 8023334:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8023336:	2301      	movs	r3, #1
 8023338:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 802333a:	2300      	movs	r3, #0
 802333c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 802333e:	2300      	movs	r3, #0
 8023340:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023342:	f107 0310 	add.w	r3, r7, #16
 8023346:	f241 3288 	movw	r2, #5000	; 0x1388
 802334a:	4619      	mov	r1, r3
 802334c:	6878      	ldr	r0, [r7, #4]
 802334e:	f003 f8de 	bl	802650e <HAL_OSPI_Command>
 8023352:	4603      	mov	r3, r0
 8023354:	2b00      	cmp	r3, #0
 8023356:	d001      	beq.n	802335c <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8023358:	2301      	movs	r3, #1
 802335a:	e077      	b.n	802344c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802335c:	f107 030f 	add.w	r3, r7, #15
 8023360:	f241 3288 	movw	r2, #5000	; 0x1388
 8023364:	4619      	mov	r1, r3
 8023366:	6878      	ldr	r0, [r7, #4]
 8023368:	f003 f9c5 	bl	80266f6 <HAL_OSPI_Receive>
 802336c:	4603      	mov	r3, r0
 802336e:	2b00      	cmp	r3, #0
 8023370:	d001      	beq.n	8023376 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8023372:	2301      	movs	r3, #1
 8023374:	e06a      	b.n	802344c <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8023376:	6878      	ldr	r0, [r7, #4]
 8023378:	f7ff ff19 	bl	80231ae <QSPI_WriteEnable>
 802337c:	4603      	mov	r3, r0
 802337e:	2b00      	cmp	r3, #0
 8023380:	d001      	beq.n	8023386 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8023382:	2301      	movs	r3, #1
 8023384:	e062      	b.n	802344c <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8023386:	78fb      	ldrb	r3, [r7, #3]
 8023388:	2b01      	cmp	r3, #1
 802338a:	d105      	bne.n	8023398 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 802338c:	7bfb      	ldrb	r3, [r7, #15]
 802338e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023392:	b2db      	uxtb	r3, r3
 8023394:	73fb      	strb	r3, [r7, #15]
 8023396:	e004      	b.n	80233a2 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8023398:	7bfb      	ldrb	r3, [r7, #15]
 802339a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802339e:	b2db      	uxtb	r3, r3
 80233a0:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80233a2:	2301      	movs	r3, #1
 80233a4:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80233a6:	f107 0310 	add.w	r3, r7, #16
 80233aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80233ae:	4619      	mov	r1, r3
 80233b0:	6878      	ldr	r0, [r7, #4]
 80233b2:	f003 f8ac 	bl	802650e <HAL_OSPI_Command>
 80233b6:	4603      	mov	r3, r0
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	d001      	beq.n	80233c0 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 80233bc:	2301      	movs	r3, #1
 80233be:	e045      	b.n	802344c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80233c0:	f107 030f 	add.w	r3, r7, #15
 80233c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80233c8:	4619      	mov	r1, r3
 80233ca:	6878      	ldr	r0, [r7, #4]
 80233cc:	f003 f920 	bl	8026610 <HAL_OSPI_Transmit>
 80233d0:	4603      	mov	r3, r0
 80233d2:	2b00      	cmp	r3, #0
 80233d4:	d001      	beq.n	80233da <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 80233d6:	2301      	movs	r3, #1
 80233d8:	e038      	b.n	802344c <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80233da:	f241 3188 	movw	r1, #5000	; 0x1388
 80233de:	6878      	ldr	r0, [r7, #4]
 80233e0:	f7ff ff41 	bl	8023266 <QSPI_AutoPollingMemReady>
 80233e4:	4603      	mov	r3, r0
 80233e6:	2b00      	cmp	r3, #0
 80233e8:	d001      	beq.n	80233ee <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 80233ea:	2301      	movs	r3, #1
 80233ec:	e02e      	b.n	802344c <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80233ee:	2305      	movs	r3, #5
 80233f0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80233f2:	f107 0310 	add.w	r3, r7, #16
 80233f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80233fa:	4619      	mov	r1, r3
 80233fc:	6878      	ldr	r0, [r7, #4]
 80233fe:	f003 f886 	bl	802650e <HAL_OSPI_Command>
 8023402:	4603      	mov	r3, r0
 8023404:	2b00      	cmp	r3, #0
 8023406:	d001      	beq.n	802340c <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8023408:	2301      	movs	r3, #1
 802340a:	e01f      	b.n	802344c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802340c:	f107 030f 	add.w	r3, r7, #15
 8023410:	f241 3288 	movw	r2, #5000	; 0x1388
 8023414:	4619      	mov	r1, r3
 8023416:	6878      	ldr	r0, [r7, #4]
 8023418:	f003 f96d 	bl	80266f6 <HAL_OSPI_Receive>
 802341c:	4603      	mov	r3, r0
 802341e:	2b00      	cmp	r3, #0
 8023420:	d001      	beq.n	8023426 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8023422:	2301      	movs	r3, #1
 8023424:	e012      	b.n	802344c <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8023426:	7bfb      	ldrb	r3, [r7, #15]
 8023428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802342c:	2b00      	cmp	r3, #0
 802342e:	d102      	bne.n	8023436 <QSPI_QuadMode+0x13a>
 8023430:	78fb      	ldrb	r3, [r7, #3]
 8023432:	2b01      	cmp	r3, #1
 8023434:	d007      	beq.n	8023446 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8023436:	7bfb      	ldrb	r3, [r7, #15]
 8023438:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 802343c:	2b00      	cmp	r3, #0
 802343e:	d004      	beq.n	802344a <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8023440:	78fb      	ldrb	r3, [r7, #3]
 8023442:	2b00      	cmp	r3, #0
 8023444:	d101      	bne.n	802344a <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8023446:	2301      	movs	r3, #1
 8023448:	e000      	b.n	802344c <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 802344a:	2300      	movs	r3, #0
}
 802344c:	4618      	mov	r0, r3
 802344e:	3760      	adds	r7, #96	; 0x60
 8023450:	46bd      	mov	sp, r7
 8023452:	bd80      	pop	{r7, pc}

08023454 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8023454:	b580      	push	{r7, lr}
 8023456:	b098      	sub	sp, #96	; 0x60
 8023458:	af00      	add	r7, sp, #0
 802345a:	6078      	str	r0, [r7, #4]
 802345c:	460b      	mov	r3, r1
 802345e:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8023460:	2300      	movs	r3, #0
 8023462:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8023464:	2300      	movs	r3, #0
 8023466:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8023468:	2305      	movs	r3, #5
 802346a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 802346c:	2301      	movs	r3, #1
 802346e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8023470:	2300      	movs	r3, #0
 8023472:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8023474:	2300      	movs	r3, #0
 8023476:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8023478:	2300      	movs	r3, #0
 802347a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 802347c:	2300      	movs	r3, #0
 802347e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8023480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023484:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8023486:	2300      	movs	r3, #0
 8023488:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 802348a:	2300      	movs	r3, #0
 802348c:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 802348e:	2301      	movs	r3, #1
 8023490:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8023492:	2300      	movs	r3, #0
 8023494:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8023496:	2300      	movs	r3, #0
 8023498:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802349a:	f107 0310 	add.w	r3, r7, #16
 802349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80234a2:	4619      	mov	r1, r3
 80234a4:	6878      	ldr	r0, [r7, #4]
 80234a6:	f003 f832 	bl	802650e <HAL_OSPI_Command>
 80234aa:	4603      	mov	r3, r0
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	d001      	beq.n	80234b4 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 80234b0:	2301      	movs	r3, #1
 80234b2:	e09a      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80234b4:	f107 030c 	add.w	r3, r7, #12
 80234b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80234bc:	4619      	mov	r1, r3
 80234be:	6878      	ldr	r0, [r7, #4]
 80234c0:	f003 f919 	bl	80266f6 <HAL_OSPI_Receive>
 80234c4:	4603      	mov	r3, r0
 80234c6:	2b00      	cmp	r3, #0
 80234c8:	d001      	beq.n	80234ce <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 80234ca:	2301      	movs	r3, #1
 80234cc:	e08d      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80234ce:	2315      	movs	r3, #21
 80234d0:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 80234d2:	2302      	movs	r3, #2
 80234d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80234d6:	f107 0310 	add.w	r3, r7, #16
 80234da:	f241 3288 	movw	r2, #5000	; 0x1388
 80234de:	4619      	mov	r1, r3
 80234e0:	6878      	ldr	r0, [r7, #4]
 80234e2:	f003 f814 	bl	802650e <HAL_OSPI_Command>
 80234e6:	4603      	mov	r3, r0
 80234e8:	2b00      	cmp	r3, #0
 80234ea:	d001      	beq.n	80234f0 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 80234ec:	2301      	movs	r3, #1
 80234ee:	e07c      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80234f0:	f107 030c 	add.w	r3, r7, #12
 80234f4:	3301      	adds	r3, #1
 80234f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80234fa:	4619      	mov	r1, r3
 80234fc:	6878      	ldr	r0, [r7, #4]
 80234fe:	f003 f8fa 	bl	80266f6 <HAL_OSPI_Receive>
 8023502:	4603      	mov	r3, r0
 8023504:	2b00      	cmp	r3, #0
 8023506:	d001      	beq.n	802350c <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8023508:	2301      	movs	r3, #1
 802350a:	e06e      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 802350c:	6878      	ldr	r0, [r7, #4]
 802350e:	f7ff fe4e 	bl	80231ae <QSPI_WriteEnable>
 8023512:	4603      	mov	r3, r0
 8023514:	2b00      	cmp	r3, #0
 8023516:	d001      	beq.n	802351c <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8023518:	2301      	movs	r3, #1
 802351a:	e066      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 802351c:	78fb      	ldrb	r3, [r7, #3]
 802351e:	2b01      	cmp	r3, #1
 8023520:	d105      	bne.n	802352e <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8023522:	7bbb      	ldrb	r3, [r7, #14]
 8023524:	f043 0302 	orr.w	r3, r3, #2
 8023528:	b2db      	uxtb	r3, r3
 802352a:	73bb      	strb	r3, [r7, #14]
 802352c:	e004      	b.n	8023538 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 802352e:	7bbb      	ldrb	r3, [r7, #14]
 8023530:	f023 0302 	bic.w	r3, r3, #2
 8023534:	b2db      	uxtb	r3, r3
 8023536:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8023538:	2301      	movs	r3, #1
 802353a:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 802353c:	2303      	movs	r3, #3
 802353e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023540:	f107 0310 	add.w	r3, r7, #16
 8023544:	f241 3288 	movw	r2, #5000	; 0x1388
 8023548:	4619      	mov	r1, r3
 802354a:	6878      	ldr	r0, [r7, #4]
 802354c:	f002 ffdf 	bl	802650e <HAL_OSPI_Command>
 8023550:	4603      	mov	r3, r0
 8023552:	2b00      	cmp	r3, #0
 8023554:	d001      	beq.n	802355a <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8023556:	2301      	movs	r3, #1
 8023558:	e047      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802355a:	f107 030c 	add.w	r3, r7, #12
 802355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8023562:	4619      	mov	r1, r3
 8023564:	6878      	ldr	r0, [r7, #4]
 8023566:	f003 f853 	bl	8026610 <HAL_OSPI_Transmit>
 802356a:	4603      	mov	r3, r0
 802356c:	2b00      	cmp	r3, #0
 802356e:	d001      	beq.n	8023574 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8023570:	2301      	movs	r3, #1
 8023572:	e03a      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8023574:	f241 3188 	movw	r1, #5000	; 0x1388
 8023578:	6878      	ldr	r0, [r7, #4]
 802357a:	f7ff fe74 	bl	8023266 <QSPI_AutoPollingMemReady>
 802357e:	4603      	mov	r3, r0
 8023580:	2b00      	cmp	r3, #0
 8023582:	d001      	beq.n	8023588 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8023584:	2301      	movs	r3, #1
 8023586:	e030      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8023588:	2315      	movs	r3, #21
 802358a:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 802358c:	2302      	movs	r3, #2
 802358e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8023590:	f107 0310 	add.w	r3, r7, #16
 8023594:	f241 3288 	movw	r2, #5000	; 0x1388
 8023598:	4619      	mov	r1, r3
 802359a:	6878      	ldr	r0, [r7, #4]
 802359c:	f002 ffb7 	bl	802650e <HAL_OSPI_Command>
 80235a0:	4603      	mov	r3, r0
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	d001      	beq.n	80235aa <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 80235a6:	2301      	movs	r3, #1
 80235a8:	e01f      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80235aa:	f107 030c 	add.w	r3, r7, #12
 80235ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80235b2:	4619      	mov	r1, r3
 80235b4:	6878      	ldr	r0, [r7, #4]
 80235b6:	f003 f89e 	bl	80266f6 <HAL_OSPI_Receive>
 80235ba:	4603      	mov	r3, r0
 80235bc:	2b00      	cmp	r3, #0
 80235be:	d001      	beq.n	80235c4 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 80235c0:	2301      	movs	r3, #1
 80235c2:	e012      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80235c4:	7b7b      	ldrb	r3, [r7, #13]
 80235c6:	f003 0302 	and.w	r3, r3, #2
 80235ca:	2b00      	cmp	r3, #0
 80235cc:	d102      	bne.n	80235d4 <QSPI_HighPerfMode+0x180>
 80235ce:	78fb      	ldrb	r3, [r7, #3]
 80235d0:	2b01      	cmp	r3, #1
 80235d2:	d007      	beq.n	80235e4 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80235d4:	7b7b      	ldrb	r3, [r7, #13]
 80235d6:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80235da:	2b00      	cmp	r3, #0
 80235dc:	d004      	beq.n	80235e8 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80235de:	78fb      	ldrb	r3, [r7, #3]
 80235e0:	2b00      	cmp	r3, #0
 80235e2:	d101      	bne.n	80235e8 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 80235e4:	2301      	movs	r3, #1
 80235e6:	e000      	b.n	80235ea <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 80235e8:	2300      	movs	r3, #0
}
 80235ea:	4618      	mov	r0, r3
 80235ec:	3760      	adds	r7, #96	; 0x60
 80235ee:	46bd      	mov	sp, r7
 80235f0:	bd80      	pop	{r7, pc}
	...

080235f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80235f4:	b480      	push	{r7}
 80235f6:	b083      	sub	sp, #12
 80235f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80235fa:	4b0f      	ldr	r3, [pc, #60]	; (8023638 <HAL_MspInit+0x44>)
 80235fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80235fe:	4a0e      	ldr	r2, [pc, #56]	; (8023638 <HAL_MspInit+0x44>)
 8023600:	f043 0301 	orr.w	r3, r3, #1
 8023604:	6613      	str	r3, [r2, #96]	; 0x60
 8023606:	4b0c      	ldr	r3, [pc, #48]	; (8023638 <HAL_MspInit+0x44>)
 8023608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802360a:	f003 0301 	and.w	r3, r3, #1
 802360e:	607b      	str	r3, [r7, #4]
 8023610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8023612:	4b09      	ldr	r3, [pc, #36]	; (8023638 <HAL_MspInit+0x44>)
 8023614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023616:	4a08      	ldr	r2, [pc, #32]	; (8023638 <HAL_MspInit+0x44>)
 8023618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802361c:	6593      	str	r3, [r2, #88]	; 0x58
 802361e:	4b06      	ldr	r3, [pc, #24]	; (8023638 <HAL_MspInit+0x44>)
 8023620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023626:	603b      	str	r3, [r7, #0]
 8023628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802362a:	bf00      	nop
 802362c:	370c      	adds	r7, #12
 802362e:	46bd      	mov	sp, r7
 8023630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023634:	4770      	bx	lr
 8023636:	bf00      	nop
 8023638:	40021000 	.word	0x40021000

0802363c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 802363c:	b580      	push	{r7, lr}
 802363e:	b08a      	sub	sp, #40	; 0x28
 8023640:	af00      	add	r7, sp, #0
 8023642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023644:	f107 0314 	add.w	r3, r7, #20
 8023648:	2200      	movs	r2, #0
 802364a:	601a      	str	r2, [r3, #0]
 802364c:	605a      	str	r2, [r3, #4]
 802364e:	609a      	str	r2, [r3, #8]
 8023650:	60da      	str	r2, [r3, #12]
 8023652:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	681b      	ldr	r3, [r3, #0]
 8023658:	4a2b      	ldr	r2, [pc, #172]	; (8023708 <HAL_DAC_MspInit+0xcc>)
 802365a:	4293      	cmp	r3, r2
 802365c:	d150      	bne.n	8023700 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 802365e:	4b2b      	ldr	r3, [pc, #172]	; (802370c <HAL_DAC_MspInit+0xd0>)
 8023660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023662:	4a2a      	ldr	r2, [pc, #168]	; (802370c <HAL_DAC_MspInit+0xd0>)
 8023664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8023668:	6593      	str	r3, [r2, #88]	; 0x58
 802366a:	4b28      	ldr	r3, [pc, #160]	; (802370c <HAL_DAC_MspInit+0xd0>)
 802366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802366e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8023672:	613b      	str	r3, [r7, #16]
 8023674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023676:	4b25      	ldr	r3, [pc, #148]	; (802370c <HAL_DAC_MspInit+0xd0>)
 8023678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802367a:	4a24      	ldr	r2, [pc, #144]	; (802370c <HAL_DAC_MspInit+0xd0>)
 802367c:	f043 0301 	orr.w	r3, r3, #1
 8023680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8023682:	4b22      	ldr	r3, [pc, #136]	; (802370c <HAL_DAC_MspInit+0xd0>)
 8023684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023686:	f003 0301 	and.w	r3, r3, #1
 802368a:	60fb      	str	r3, [r7, #12]
 802368c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 802368e:	2310      	movs	r3, #16
 8023690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023692:	2303      	movs	r3, #3
 8023694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023696:	2300      	movs	r3, #0
 8023698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802369a:	f107 0314 	add.w	r3, r7, #20
 802369e:	4619      	mov	r1, r3
 80236a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80236a4:	f001 fd9c 	bl	80251e0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80236a8:	4b19      	ldr	r3, [pc, #100]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236aa:	4a1a      	ldr	r2, [pc, #104]	; (8023714 <HAL_DAC_MspInit+0xd8>)
 80236ac:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80236ae:	4b18      	ldr	r3, [pc, #96]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236b0:	2206      	movs	r2, #6
 80236b2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80236b4:	4b16      	ldr	r3, [pc, #88]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236b6:	2210      	movs	r2, #16
 80236b8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80236ba:	4b15      	ldr	r3, [pc, #84]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236bc:	2200      	movs	r2, #0
 80236be:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80236c0:	4b13      	ldr	r3, [pc, #76]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236c2:	2280      	movs	r2, #128	; 0x80
 80236c4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80236c6:	4b12      	ldr	r3, [pc, #72]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80236cc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80236ce:	4b10      	ldr	r3, [pc, #64]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80236d4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 80236d6:	4b0e      	ldr	r3, [pc, #56]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236d8:	2200      	movs	r2, #0
 80236da:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80236dc:	4b0c      	ldr	r3, [pc, #48]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80236e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80236e4:	480a      	ldr	r0, [pc, #40]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236e6:	f001 faad 	bl	8024c44 <HAL_DMA_Init>
 80236ea:	4603      	mov	r3, r0
 80236ec:	2b00      	cmp	r3, #0
 80236ee:	d001      	beq.n	80236f4 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80236f0:	f7fe fc20 	bl	8021f34 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	4a06      	ldr	r2, [pc, #24]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236f8:	609a      	str	r2, [r3, #8]
 80236fa:	4a05      	ldr	r2, [pc, #20]	; (8023710 <HAL_DAC_MspInit+0xd4>)
 80236fc:	687b      	ldr	r3, [r7, #4]
 80236fe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8023700:	bf00      	nop
 8023702:	3728      	adds	r7, #40	; 0x28
 8023704:	46bd      	mov	sp, r7
 8023706:	bd80      	pop	{r7, pc}
 8023708:	40007400 	.word	0x40007400
 802370c:	40021000 	.word	0x40021000
 8023710:	20000380 	.word	0x20000380
 8023714:	40020008 	.word	0x40020008

08023718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8023718:	b580      	push	{r7, lr}
 802371a:	b0b0      	sub	sp, #192	; 0xc0
 802371c:	af00      	add	r7, sp, #0
 802371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023720:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8023724:	2200      	movs	r2, #0
 8023726:	601a      	str	r2, [r3, #0]
 8023728:	605a      	str	r2, [r3, #4]
 802372a:	609a      	str	r2, [r3, #8]
 802372c:	60da      	str	r2, [r3, #12]
 802372e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8023730:	f107 0318 	add.w	r3, r7, #24
 8023734:	2294      	movs	r2, #148	; 0x94
 8023736:	2100      	movs	r1, #0
 8023738:	4618      	mov	r0, r3
 802373a:	f007 f957 	bl	802a9ec <memset>
  if(hi2c->Instance==I2C1)
 802373e:	687b      	ldr	r3, [r7, #4]
 8023740:	681b      	ldr	r3, [r3, #0]
 8023742:	4a42      	ldr	r2, [pc, #264]	; (802384c <HAL_I2C_MspInit+0x134>)
 8023744:	4293      	cmp	r3, r2
 8023746:	d13c      	bne.n	80237c2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8023748:	2340      	movs	r3, #64	; 0x40
 802374a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 802374c:	2300      	movs	r3, #0
 802374e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8023750:	f107 0318 	add.w	r3, r7, #24
 8023754:	4618      	mov	r0, r3
 8023756:	f004 fe21 	bl	802839c <HAL_RCCEx_PeriphCLKConfig>
 802375a:	4603      	mov	r3, r0
 802375c:	2b00      	cmp	r3, #0
 802375e:	d001      	beq.n	8023764 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8023760:	f7fe fbe8 	bl	8021f34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023764:	4b3a      	ldr	r3, [pc, #232]	; (8023850 <HAL_I2C_MspInit+0x138>)
 8023766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023768:	4a39      	ldr	r2, [pc, #228]	; (8023850 <HAL_I2C_MspInit+0x138>)
 802376a:	f043 0302 	orr.w	r3, r3, #2
 802376e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8023770:	4b37      	ldr	r3, [pc, #220]	; (8023850 <HAL_I2C_MspInit+0x138>)
 8023772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023774:	f003 0302 	and.w	r3, r3, #2
 8023778:	617b      	str	r3, [r7, #20]
 802377a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 802377c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8023780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8023784:	2312      	movs	r3, #18
 8023786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802378a:	2300      	movs	r3, #0
 802378c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023790:	2303      	movs	r3, #3
 8023792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8023796:	2304      	movs	r3, #4
 8023798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802379c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80237a0:	4619      	mov	r1, r3
 80237a2:	482c      	ldr	r0, [pc, #176]	; (8023854 <HAL_I2C_MspInit+0x13c>)
 80237a4:	f001 fd1c 	bl	80251e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80237a8:	4b29      	ldr	r3, [pc, #164]	; (8023850 <HAL_I2C_MspInit+0x138>)
 80237aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80237ac:	4a28      	ldr	r2, [pc, #160]	; (8023850 <HAL_I2C_MspInit+0x138>)
 80237ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80237b2:	6593      	str	r3, [r2, #88]	; 0x58
 80237b4:	4b26      	ldr	r3, [pc, #152]	; (8023850 <HAL_I2C_MspInit+0x138>)
 80237b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80237b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80237bc:	613b      	str	r3, [r7, #16]
 80237be:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80237c0:	e040      	b.n	8023844 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80237c2:	687b      	ldr	r3, [r7, #4]
 80237c4:	681b      	ldr	r3, [r3, #0]
 80237c6:	4a24      	ldr	r2, [pc, #144]	; (8023858 <HAL_I2C_MspInit+0x140>)
 80237c8:	4293      	cmp	r3, r2
 80237ca:	d13b      	bne.n	8023844 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80237cc:	2380      	movs	r3, #128	; 0x80
 80237ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80237d0:	2300      	movs	r3, #0
 80237d2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80237d4:	f107 0318 	add.w	r3, r7, #24
 80237d8:	4618      	mov	r0, r3
 80237da:	f004 fddf 	bl	802839c <HAL_RCCEx_PeriphCLKConfig>
 80237de:	4603      	mov	r3, r0
 80237e0:	2b00      	cmp	r3, #0
 80237e2:	d001      	beq.n	80237e8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80237e4:	f7fe fba6 	bl	8021f34 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80237e8:	4b19      	ldr	r3, [pc, #100]	; (8023850 <HAL_I2C_MspInit+0x138>)
 80237ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80237ec:	4a18      	ldr	r2, [pc, #96]	; (8023850 <HAL_I2C_MspInit+0x138>)
 80237ee:	f043 0302 	orr.w	r3, r3, #2
 80237f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80237f4:	4b16      	ldr	r3, [pc, #88]	; (8023850 <HAL_I2C_MspInit+0x138>)
 80237f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80237f8:	f003 0302 	and.w	r3, r3, #2
 80237fc:	60fb      	str	r3, [r7, #12]
 80237fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8023800:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8023804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8023808:	2312      	movs	r3, #18
 802380a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802380e:	2300      	movs	r3, #0
 8023810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023814:	2303      	movs	r3, #3
 8023816:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802381a:	2304      	movs	r3, #4
 802381c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023820:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8023824:	4619      	mov	r1, r3
 8023826:	480b      	ldr	r0, [pc, #44]	; (8023854 <HAL_I2C_MspInit+0x13c>)
 8023828:	f001 fcda 	bl	80251e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 802382c:	4b08      	ldr	r3, [pc, #32]	; (8023850 <HAL_I2C_MspInit+0x138>)
 802382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023830:	4a07      	ldr	r2, [pc, #28]	; (8023850 <HAL_I2C_MspInit+0x138>)
 8023832:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023836:	6593      	str	r3, [r2, #88]	; 0x58
 8023838:	4b05      	ldr	r3, [pc, #20]	; (8023850 <HAL_I2C_MspInit+0x138>)
 802383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802383c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023840:	60bb      	str	r3, [r7, #8]
 8023842:	68bb      	ldr	r3, [r7, #8]
}
 8023844:	bf00      	nop
 8023846:	37c0      	adds	r7, #192	; 0xc0
 8023848:	46bd      	mov	sp, r7
 802384a:	bd80      	pop	{r7, pc}
 802384c:	40005400 	.word	0x40005400
 8023850:	40021000 	.word	0x40021000
 8023854:	48000400 	.word	0x48000400
 8023858:	40005800 	.word	0x40005800

0802385c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 802385c:	b580      	push	{r7, lr}
 802385e:	b082      	sub	sp, #8
 8023860:	af00      	add	r7, sp, #0
 8023862:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	681b      	ldr	r3, [r3, #0]
 8023868:	4a16      	ldr	r2, [pc, #88]	; (80238c4 <HAL_I2C_MspDeInit+0x68>)
 802386a:	4293      	cmp	r3, r2
 802386c:	d110      	bne.n	8023890 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 802386e:	4b16      	ldr	r3, [pc, #88]	; (80238c8 <HAL_I2C_MspDeInit+0x6c>)
 8023870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023872:	4a15      	ldr	r2, [pc, #84]	; (80238c8 <HAL_I2C_MspDeInit+0x6c>)
 8023874:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8023878:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 802387a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802387e:	4813      	ldr	r0, [pc, #76]	; (80238cc <HAL_I2C_MspDeInit+0x70>)
 8023880:	f001 fe40 	bl	8025504 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8023884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8023888:	4810      	ldr	r0, [pc, #64]	; (80238cc <HAL_I2C_MspDeInit+0x70>)
 802388a:	f001 fe3b 	bl	8025504 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 802388e:	e014      	b.n	80238ba <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8023890:	687b      	ldr	r3, [r7, #4]
 8023892:	681b      	ldr	r3, [r3, #0]
 8023894:	4a0e      	ldr	r2, [pc, #56]	; (80238d0 <HAL_I2C_MspDeInit+0x74>)
 8023896:	4293      	cmp	r3, r2
 8023898:	d10f      	bne.n	80238ba <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 802389a:	4b0b      	ldr	r3, [pc, #44]	; (80238c8 <HAL_I2C_MspDeInit+0x6c>)
 802389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802389e:	4a0a      	ldr	r2, [pc, #40]	; (80238c8 <HAL_I2C_MspDeInit+0x6c>)
 80238a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80238a4:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80238a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80238aa:	4808      	ldr	r0, [pc, #32]	; (80238cc <HAL_I2C_MspDeInit+0x70>)
 80238ac:	f001 fe2a 	bl	8025504 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80238b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80238b4:	4805      	ldr	r0, [pc, #20]	; (80238cc <HAL_I2C_MspDeInit+0x70>)
 80238b6:	f001 fe25 	bl	8025504 <HAL_GPIO_DeInit>
}
 80238ba:	bf00      	nop
 80238bc:	3708      	adds	r7, #8
 80238be:	46bd      	mov	sp, r7
 80238c0:	bd80      	pop	{r7, pc}
 80238c2:	bf00      	nop
 80238c4:	40005400 	.word	0x40005400
 80238c8:	40021000 	.word	0x40021000
 80238cc:	48000400 	.word	0x48000400
 80238d0:	40005800 	.word	0x40005800

080238d4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80238d4:	b580      	push	{r7, lr}
 80238d6:	b0b0      	sub	sp, #192	; 0xc0
 80238d8:	af00      	add	r7, sp, #0
 80238da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80238dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80238e0:	2200      	movs	r2, #0
 80238e2:	601a      	str	r2, [r3, #0]
 80238e4:	605a      	str	r2, [r3, #4]
 80238e6:	609a      	str	r2, [r3, #8]
 80238e8:	60da      	str	r2, [r3, #12]
 80238ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80238ec:	f107 0318 	add.w	r3, r7, #24
 80238f0:	2294      	movs	r2, #148	; 0x94
 80238f2:	2100      	movs	r1, #0
 80238f4:	4618      	mov	r0, r3
 80238f6:	f007 f879 	bl	802a9ec <memset>
  if(hospi->Instance==OCTOSPI1)
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	681b      	ldr	r3, [r3, #0]
 80238fe:	4a28      	ldr	r2, [pc, #160]	; (80239a0 <HAL_OSPI_MspInit+0xcc>)
 8023900:	4293      	cmp	r3, r2
 8023902:	d149      	bne.n	8023998 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8023904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023908:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 802390a:	2300      	movs	r3, #0
 802390c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8023910:	f107 0318 	add.w	r3, r7, #24
 8023914:	4618      	mov	r0, r3
 8023916:	f004 fd41 	bl	802839c <HAL_RCCEx_PeriphCLKConfig>
 802391a:	4603      	mov	r3, r0
 802391c:	2b00      	cmp	r3, #0
 802391e:	d001      	beq.n	8023924 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8023920:	f7fe fb08 	bl	8021f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8023924:	4b1f      	ldr	r3, [pc, #124]	; (80239a4 <HAL_OSPI_MspInit+0xd0>)
 8023926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023928:	4a1e      	ldr	r2, [pc, #120]	; (80239a4 <HAL_OSPI_MspInit+0xd0>)
 802392a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802392e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8023930:	4b1c      	ldr	r3, [pc, #112]	; (80239a4 <HAL_OSPI_MspInit+0xd0>)
 8023932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023938:	617b      	str	r3, [r7, #20]
 802393a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 802393c:	4b19      	ldr	r3, [pc, #100]	; (80239a4 <HAL_OSPI_MspInit+0xd0>)
 802393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023940:	4a18      	ldr	r2, [pc, #96]	; (80239a4 <HAL_OSPI_MspInit+0xd0>)
 8023942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023946:	6513      	str	r3, [r2, #80]	; 0x50
 8023948:	4b16      	ldr	r3, [pc, #88]	; (80239a4 <HAL_OSPI_MspInit+0xd0>)
 802394a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023950:	613b      	str	r3, [r7, #16]
 8023952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8023954:	4b13      	ldr	r3, [pc, #76]	; (80239a4 <HAL_OSPI_MspInit+0xd0>)
 8023956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023958:	4a12      	ldr	r2, [pc, #72]	; (80239a4 <HAL_OSPI_MspInit+0xd0>)
 802395a:	f043 0310 	orr.w	r3, r3, #16
 802395e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8023960:	4b10      	ldr	r3, [pc, #64]	; (80239a4 <HAL_OSPI_MspInit+0xd0>)
 8023962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023964:	f003 0310 	and.w	r3, r3, #16
 8023968:	60fb      	str	r3, [r7, #12]
 802396a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 802396c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8023970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023974:	2302      	movs	r3, #2
 8023976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802397a:	2300      	movs	r3, #0
 802397c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023980:	2303      	movs	r3, #3
 8023982:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8023986:	230a      	movs	r3, #10
 8023988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802398c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8023990:	4619      	mov	r1, r3
 8023992:	4805      	ldr	r0, [pc, #20]	; (80239a8 <HAL_OSPI_MspInit+0xd4>)
 8023994:	f001 fc24 	bl	80251e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8023998:	bf00      	nop
 802399a:	37c0      	adds	r7, #192	; 0xc0
 802399c:	46bd      	mov	sp, r7
 802399e:	bd80      	pop	{r7, pc}
 80239a0:	a0001000 	.word	0xa0001000
 80239a4:	40021000 	.word	0x40021000
 80239a8:	48001000 	.word	0x48001000

080239ac <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80239ac:	b580      	push	{r7, lr}
 80239ae:	b082      	sub	sp, #8
 80239b0:	af00      	add	r7, sp, #0
 80239b2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	681b      	ldr	r3, [r3, #0]
 80239b8:	4a0b      	ldr	r2, [pc, #44]	; (80239e8 <HAL_OSPI_MspDeInit+0x3c>)
 80239ba:	4293      	cmp	r3, r2
 80239bc:	d110      	bne.n	80239e0 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 80239be:	4b0b      	ldr	r3, [pc, #44]	; (80239ec <HAL_OSPI_MspDeInit+0x40>)
 80239c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80239c2:	4a0a      	ldr	r2, [pc, #40]	; (80239ec <HAL_OSPI_MspDeInit+0x40>)
 80239c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80239c8:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80239ca:	4b08      	ldr	r3, [pc, #32]	; (80239ec <HAL_OSPI_MspDeInit+0x40>)
 80239cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80239ce:	4a07      	ldr	r2, [pc, #28]	; (80239ec <HAL_OSPI_MspDeInit+0x40>)
 80239d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80239d4:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80239d6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80239da:	4805      	ldr	r0, [pc, #20]	; (80239f0 <HAL_OSPI_MspDeInit+0x44>)
 80239dc:	f001 fd92 	bl	8025504 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80239e0:	bf00      	nop
 80239e2:	3708      	adds	r7, #8
 80239e4:	46bd      	mov	sp, r7
 80239e6:	bd80      	pop	{r7, pc}
 80239e8:	a0001000 	.word	0xa0001000
 80239ec:	40021000 	.word	0x40021000
 80239f0:	48001000 	.word	0x48001000

080239f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80239f4:	b580      	push	{r7, lr}
 80239f6:	b084      	sub	sp, #16
 80239f8:	af00      	add	r7, sp, #0
 80239fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80239fc:	687b      	ldr	r3, [r7, #4]
 80239fe:	681b      	ldr	r3, [r3, #0]
 8023a00:	4a1e      	ldr	r2, [pc, #120]	; (8023a7c <HAL_TIM_Base_MspInit+0x88>)
 8023a02:	4293      	cmp	r3, r2
 8023a04:	d11c      	bne.n	8023a40 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8023a06:	4b1e      	ldr	r3, [pc, #120]	; (8023a80 <HAL_TIM_Base_MspInit+0x8c>)
 8023a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023a0a:	4a1d      	ldr	r2, [pc, #116]	; (8023a80 <HAL_TIM_Base_MspInit+0x8c>)
 8023a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8023a10:	6613      	str	r3, [r2, #96]	; 0x60
 8023a12:	4b1b      	ldr	r3, [pc, #108]	; (8023a80 <HAL_TIM_Base_MspInit+0x8c>)
 8023a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8023a1a:	60fb      	str	r3, [r7, #12]
 8023a1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8023a1e:	2200      	movs	r2, #0
 8023a20:	2100      	movs	r1, #0
 8023a22:	2019      	movs	r0, #25
 8023a24:	f000 fd69 	bl	80244fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8023a28:	2019      	movs	r0, #25
 8023a2a:	f000 fd82 	bl	8024532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8023a2e:	2200      	movs	r2, #0
 8023a30:	2100      	movs	r1, #0
 8023a32:	201a      	movs	r0, #26
 8023a34:	f000 fd61 	bl	80244fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8023a38:	201a      	movs	r0, #26
 8023a3a:	f000 fd7a 	bl	8024532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8023a3e:	e018      	b.n	8023a72 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023a48:	d113      	bne.n	8023a72 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8023a4a:	4b0d      	ldr	r3, [pc, #52]	; (8023a80 <HAL_TIM_Base_MspInit+0x8c>)
 8023a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023a4e:	4a0c      	ldr	r2, [pc, #48]	; (8023a80 <HAL_TIM_Base_MspInit+0x8c>)
 8023a50:	f043 0301 	orr.w	r3, r3, #1
 8023a54:	6593      	str	r3, [r2, #88]	; 0x58
 8023a56:	4b0a      	ldr	r3, [pc, #40]	; (8023a80 <HAL_TIM_Base_MspInit+0x8c>)
 8023a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023a5a:	f003 0301 	and.w	r3, r3, #1
 8023a5e:	60bb      	str	r3, [r7, #8]
 8023a60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8023a62:	2200      	movs	r2, #0
 8023a64:	2100      	movs	r1, #0
 8023a66:	201c      	movs	r0, #28
 8023a68:	f000 fd47 	bl	80244fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8023a6c:	201c      	movs	r0, #28
 8023a6e:	f000 fd60 	bl	8024532 <HAL_NVIC_EnableIRQ>
}
 8023a72:	bf00      	nop
 8023a74:	3710      	adds	r7, #16
 8023a76:	46bd      	mov	sp, r7
 8023a78:	bd80      	pop	{r7, pc}
 8023a7a:	bf00      	nop
 8023a7c:	40012c00 	.word	0x40012c00
 8023a80:	40021000 	.word	0x40021000

08023a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8023a84:	b580      	push	{r7, lr}
 8023a86:	b0ae      	sub	sp, #184	; 0xb8
 8023a88:	af00      	add	r7, sp, #0
 8023a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023a8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8023a90:	2200      	movs	r2, #0
 8023a92:	601a      	str	r2, [r3, #0]
 8023a94:	605a      	str	r2, [r3, #4]
 8023a96:	609a      	str	r2, [r3, #8]
 8023a98:	60da      	str	r2, [r3, #12]
 8023a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8023a9c:	f107 0310 	add.w	r3, r7, #16
 8023aa0:	2294      	movs	r2, #148	; 0x94
 8023aa2:	2100      	movs	r1, #0
 8023aa4:	4618      	mov	r0, r3
 8023aa6:	f006 ffa1 	bl	802a9ec <memset>
  if(huart->Instance==USART1)
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	4a21      	ldr	r2, [pc, #132]	; (8023b34 <HAL_UART_MspInit+0xb0>)
 8023ab0:	4293      	cmp	r3, r2
 8023ab2:	d13a      	bne.n	8023b2a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8023ab4:	2301      	movs	r3, #1
 8023ab6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8023ab8:	2300      	movs	r3, #0
 8023aba:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8023abc:	f107 0310 	add.w	r3, r7, #16
 8023ac0:	4618      	mov	r0, r3
 8023ac2:	f004 fc6b 	bl	802839c <HAL_RCCEx_PeriphCLKConfig>
 8023ac6:	4603      	mov	r3, r0
 8023ac8:	2b00      	cmp	r3, #0
 8023aca:	d001      	beq.n	8023ad0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8023acc:	f7fe fa32 	bl	8021f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8023ad0:	4b19      	ldr	r3, [pc, #100]	; (8023b38 <HAL_UART_MspInit+0xb4>)
 8023ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023ad4:	4a18      	ldr	r2, [pc, #96]	; (8023b38 <HAL_UART_MspInit+0xb4>)
 8023ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023ada:	6613      	str	r3, [r2, #96]	; 0x60
 8023adc:	4b16      	ldr	r3, [pc, #88]	; (8023b38 <HAL_UART_MspInit+0xb4>)
 8023ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023ae4:	60fb      	str	r3, [r7, #12]
 8023ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023ae8:	4b13      	ldr	r3, [pc, #76]	; (8023b38 <HAL_UART_MspInit+0xb4>)
 8023aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023aec:	4a12      	ldr	r2, [pc, #72]	; (8023b38 <HAL_UART_MspInit+0xb4>)
 8023aee:	f043 0302 	orr.w	r3, r3, #2
 8023af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8023af4:	4b10      	ldr	r3, [pc, #64]	; (8023b38 <HAL_UART_MspInit+0xb4>)
 8023af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023af8:	f003 0302 	and.w	r3, r3, #2
 8023afc:	60bb      	str	r3, [r7, #8]
 8023afe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8023b00:	23c0      	movs	r3, #192	; 0xc0
 8023b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023b06:	2302      	movs	r3, #2
 8023b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023b0c:	2300      	movs	r3, #0
 8023b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023b12:	2303      	movs	r3, #3
 8023b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8023b18:	2307      	movs	r3, #7
 8023b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023b1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8023b22:	4619      	mov	r1, r3
 8023b24:	4805      	ldr	r0, [pc, #20]	; (8023b3c <HAL_UART_MspInit+0xb8>)
 8023b26:	f001 fb5b 	bl	80251e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8023b2a:	bf00      	nop
 8023b2c:	37b8      	adds	r7, #184	; 0xb8
 8023b2e:	46bd      	mov	sp, r7
 8023b30:	bd80      	pop	{r7, pc}
 8023b32:	bf00      	nop
 8023b34:	40013800 	.word	0x40013800
 8023b38:	40021000 	.word	0x40021000
 8023b3c:	48000400 	.word	0x48000400

08023b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8023b40:	b480      	push	{r7}
 8023b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8023b44:	e7fe      	b.n	8023b44 <NMI_Handler+0x4>

08023b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8023b46:	b480      	push	{r7}
 8023b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8023b4a:	e7fe      	b.n	8023b4a <HardFault_Handler+0x4>

08023b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8023b4c:	b480      	push	{r7}
 8023b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8023b50:	e7fe      	b.n	8023b50 <MemManage_Handler+0x4>

08023b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8023b52:	b480      	push	{r7}
 8023b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8023b56:	e7fe      	b.n	8023b56 <BusFault_Handler+0x4>

08023b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8023b58:	b480      	push	{r7}
 8023b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8023b5c:	e7fe      	b.n	8023b5c <UsageFault_Handler+0x4>

08023b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8023b5e:	b480      	push	{r7}
 8023b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8023b62:	bf00      	nop
 8023b64:	46bd      	mov	sp, r7
 8023b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b6a:	4770      	bx	lr

08023b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8023b6c:	b480      	push	{r7}
 8023b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8023b70:	bf00      	nop
 8023b72:	46bd      	mov	sp, r7
 8023b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b78:	4770      	bx	lr

08023b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8023b7a:	b480      	push	{r7}
 8023b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8023b7e:	bf00      	nop
 8023b80:	46bd      	mov	sp, r7
 8023b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b86:	4770      	bx	lr

08023b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8023b88:	b580      	push	{r7, lr}
 8023b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8023b8c:	f000 fb96 	bl	80242bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8023b90:	bf00      	nop
 8023b92:	bd80      	pop	{r7, pc}

08023b94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8023b94:	b580      	push	{r7, lr}
 8023b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8023b98:	4802      	ldr	r0, [pc, #8]	; (8023ba4 <DMA1_Channel1_IRQHandler+0x10>)
 8023b9a:	f001 f9d2 	bl	8024f42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8023b9e:	bf00      	nop
 8023ba0:	bd80      	pop	{r7, pc}
 8023ba2:	bf00      	nop
 8023ba4:	20000380 	.word	0x20000380

08023ba8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8023ba8:	b580      	push	{r7, lr}
 8023baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8023bac:	4802      	ldr	r0, [pc, #8]	; (8023bb8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8023bae:	f005 f9d5 	bl	8028f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8023bb2:	bf00      	nop
 8023bb4:	bd80      	pop	{r7, pc}
 8023bb6:	bf00      	nop
 8023bb8:	200004d8 	.word	0x200004d8

08023bbc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8023bbc:	b580      	push	{r7, lr}
 8023bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8023bc0:	4802      	ldr	r0, [pc, #8]	; (8023bcc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8023bc2:	f005 f9cb 	bl	8028f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8023bc6:	bf00      	nop
 8023bc8:	bd80      	pop	{r7, pc}
 8023bca:	bf00      	nop
 8023bcc:	200004d8 	.word	0x200004d8

08023bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8023bd0:	b580      	push	{r7, lr}
 8023bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8023bd4:	4802      	ldr	r0, [pc, #8]	; (8023be0 <TIM2_IRQHandler+0x10>)
 8023bd6:	f005 f9c1 	bl	8028f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8023bda:	bf00      	nop
 8023bdc:	bd80      	pop	{r7, pc}
 8023bde:	bf00      	nop
 8023be0:	20000524 	.word	0x20000524

08023be4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8023be4:	b580      	push	{r7, lr}
 8023be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8023be8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8023bec:	f001 fd7c 	bl	80256e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8023bf0:	bf00      	nop
 8023bf2:	bd80      	pop	{r7, pc}

08023bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8023bf4:	b480      	push	{r7}
 8023bf6:	af00      	add	r7, sp, #0
	return 1;
 8023bf8:	2301      	movs	r3, #1
}
 8023bfa:	4618      	mov	r0, r3
 8023bfc:	46bd      	mov	sp, r7
 8023bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c02:	4770      	bx	lr

08023c04 <_kill>:

int _kill(int pid, int sig)
{
 8023c04:	b580      	push	{r7, lr}
 8023c06:	b082      	sub	sp, #8
 8023c08:	af00      	add	r7, sp, #0
 8023c0a:	6078      	str	r0, [r7, #4]
 8023c0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8023c0e:	f006 fe9b 	bl	802a948 <__errno>
 8023c12:	4603      	mov	r3, r0
 8023c14:	2216      	movs	r2, #22
 8023c16:	601a      	str	r2, [r3, #0]
	return -1;
 8023c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8023c1c:	4618      	mov	r0, r3
 8023c1e:	3708      	adds	r7, #8
 8023c20:	46bd      	mov	sp, r7
 8023c22:	bd80      	pop	{r7, pc}

08023c24 <_exit>:

void _exit (int status)
{
 8023c24:	b580      	push	{r7, lr}
 8023c26:	b082      	sub	sp, #8
 8023c28:	af00      	add	r7, sp, #0
 8023c2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8023c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023c30:	6878      	ldr	r0, [r7, #4]
 8023c32:	f7ff ffe7 	bl	8023c04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8023c36:	e7fe      	b.n	8023c36 <_exit+0x12>

08023c38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8023c38:	b580      	push	{r7, lr}
 8023c3a:	b086      	sub	sp, #24
 8023c3c:	af00      	add	r7, sp, #0
 8023c3e:	60f8      	str	r0, [r7, #12]
 8023c40:	60b9      	str	r1, [r7, #8]
 8023c42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023c44:	2300      	movs	r3, #0
 8023c46:	617b      	str	r3, [r7, #20]
 8023c48:	e00a      	b.n	8023c60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8023c4a:	f3af 8000 	nop.w
 8023c4e:	4601      	mov	r1, r0
 8023c50:	68bb      	ldr	r3, [r7, #8]
 8023c52:	1c5a      	adds	r2, r3, #1
 8023c54:	60ba      	str	r2, [r7, #8]
 8023c56:	b2ca      	uxtb	r2, r1
 8023c58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023c5a:	697b      	ldr	r3, [r7, #20]
 8023c5c:	3301      	adds	r3, #1
 8023c5e:	617b      	str	r3, [r7, #20]
 8023c60:	697a      	ldr	r2, [r7, #20]
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	429a      	cmp	r2, r3
 8023c66:	dbf0      	blt.n	8023c4a <_read+0x12>
	}

return len;
 8023c68:	687b      	ldr	r3, [r7, #4]
}
 8023c6a:	4618      	mov	r0, r3
 8023c6c:	3718      	adds	r7, #24
 8023c6e:	46bd      	mov	sp, r7
 8023c70:	bd80      	pop	{r7, pc}

08023c72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8023c72:	b480      	push	{r7}
 8023c74:	b083      	sub	sp, #12
 8023c76:	af00      	add	r7, sp, #0
 8023c78:	6078      	str	r0, [r7, #4]
	return -1;
 8023c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8023c7e:	4618      	mov	r0, r3
 8023c80:	370c      	adds	r7, #12
 8023c82:	46bd      	mov	sp, r7
 8023c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c88:	4770      	bx	lr

08023c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8023c8a:	b480      	push	{r7}
 8023c8c:	b083      	sub	sp, #12
 8023c8e:	af00      	add	r7, sp, #0
 8023c90:	6078      	str	r0, [r7, #4]
 8023c92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8023c94:	683b      	ldr	r3, [r7, #0]
 8023c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8023c9a:	605a      	str	r2, [r3, #4]
	return 0;
 8023c9c:	2300      	movs	r3, #0
}
 8023c9e:	4618      	mov	r0, r3
 8023ca0:	370c      	adds	r7, #12
 8023ca2:	46bd      	mov	sp, r7
 8023ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ca8:	4770      	bx	lr

08023caa <_isatty>:

int _isatty(int file)
{
 8023caa:	b480      	push	{r7}
 8023cac:	b083      	sub	sp, #12
 8023cae:	af00      	add	r7, sp, #0
 8023cb0:	6078      	str	r0, [r7, #4]
	return 1;
 8023cb2:	2301      	movs	r3, #1
}
 8023cb4:	4618      	mov	r0, r3
 8023cb6:	370c      	adds	r7, #12
 8023cb8:	46bd      	mov	sp, r7
 8023cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cbe:	4770      	bx	lr

08023cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8023cc0:	b480      	push	{r7}
 8023cc2:	b085      	sub	sp, #20
 8023cc4:	af00      	add	r7, sp, #0
 8023cc6:	60f8      	str	r0, [r7, #12]
 8023cc8:	60b9      	str	r1, [r7, #8]
 8023cca:	607a      	str	r2, [r7, #4]
	return 0;
 8023ccc:	2300      	movs	r3, #0
}
 8023cce:	4618      	mov	r0, r3
 8023cd0:	3714      	adds	r7, #20
 8023cd2:	46bd      	mov	sp, r7
 8023cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cd8:	4770      	bx	lr
	...

08023cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8023cdc:	b580      	push	{r7, lr}
 8023cde:	b086      	sub	sp, #24
 8023ce0:	af00      	add	r7, sp, #0
 8023ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8023ce4:	4a14      	ldr	r2, [pc, #80]	; (8023d38 <_sbrk+0x5c>)
 8023ce6:	4b15      	ldr	r3, [pc, #84]	; (8023d3c <_sbrk+0x60>)
 8023ce8:	1ad3      	subs	r3, r2, r3
 8023cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8023cec:	697b      	ldr	r3, [r7, #20]
 8023cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8023cf0:	4b13      	ldr	r3, [pc, #76]	; (8023d40 <_sbrk+0x64>)
 8023cf2:	681b      	ldr	r3, [r3, #0]
 8023cf4:	2b00      	cmp	r3, #0
 8023cf6:	d102      	bne.n	8023cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8023cf8:	4b11      	ldr	r3, [pc, #68]	; (8023d40 <_sbrk+0x64>)
 8023cfa:	4a12      	ldr	r2, [pc, #72]	; (8023d44 <_sbrk+0x68>)
 8023cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8023cfe:	4b10      	ldr	r3, [pc, #64]	; (8023d40 <_sbrk+0x64>)
 8023d00:	681a      	ldr	r2, [r3, #0]
 8023d02:	687b      	ldr	r3, [r7, #4]
 8023d04:	4413      	add	r3, r2
 8023d06:	693a      	ldr	r2, [r7, #16]
 8023d08:	429a      	cmp	r2, r3
 8023d0a:	d207      	bcs.n	8023d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8023d0c:	f006 fe1c 	bl	802a948 <__errno>
 8023d10:	4603      	mov	r3, r0
 8023d12:	220c      	movs	r2, #12
 8023d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8023d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023d1a:	e009      	b.n	8023d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8023d1c:	4b08      	ldr	r3, [pc, #32]	; (8023d40 <_sbrk+0x64>)
 8023d1e:	681b      	ldr	r3, [r3, #0]
 8023d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8023d22:	4b07      	ldr	r3, [pc, #28]	; (8023d40 <_sbrk+0x64>)
 8023d24:	681a      	ldr	r2, [r3, #0]
 8023d26:	687b      	ldr	r3, [r7, #4]
 8023d28:	4413      	add	r3, r2
 8023d2a:	4a05      	ldr	r2, [pc, #20]	; (8023d40 <_sbrk+0x64>)
 8023d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8023d2e:	68fb      	ldr	r3, [r7, #12]
}
 8023d30:	4618      	mov	r0, r3
 8023d32:	3718      	adds	r7, #24
 8023d34:	46bd      	mov	sp, r7
 8023d36:	bd80      	pop	{r7, pc}
 8023d38:	200a0000 	.word	0x200a0000
 8023d3c:	00000400 	.word	0x00000400
 8023d40:	20002798 	.word	0x20002798
 8023d44:	20002bb8 	.word	0x20002bb8

08023d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8023d48:	b480      	push	{r7}
 8023d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8023d4c:	4b06      	ldr	r3, [pc, #24]	; (8023d68 <SystemInit+0x20>)
 8023d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023d52:	4a05      	ldr	r2, [pc, #20]	; (8023d68 <SystemInit+0x20>)
 8023d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8023d5c:	bf00      	nop
 8023d5e:	46bd      	mov	sp, r7
 8023d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d64:	4770      	bx	lr
 8023d66:	bf00      	nop
 8023d68:	e000ed00 	.word	0xe000ed00

08023d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8023d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8023da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8023d70:	f7ff ffea 	bl	8023d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8023d74:	480c      	ldr	r0, [pc, #48]	; (8023da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8023d76:	490d      	ldr	r1, [pc, #52]	; (8023dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8023d78:	4a0d      	ldr	r2, [pc, #52]	; (8023db0 <LoopForever+0xe>)
  movs r3, #0
 8023d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8023d7c:	e002      	b.n	8023d84 <LoopCopyDataInit>

08023d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8023d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8023d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8023d82:	3304      	adds	r3, #4

08023d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8023d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8023d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8023d88:	d3f9      	bcc.n	8023d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8023d8a:	4a0a      	ldr	r2, [pc, #40]	; (8023db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8023d8c:	4c0a      	ldr	r4, [pc, #40]	; (8023db8 <LoopForever+0x16>)
  movs r3, #0
 8023d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8023d90:	e001      	b.n	8023d96 <LoopFillZerobss>

08023d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8023d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8023d94:	3204      	adds	r2, #4

08023d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8023d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8023d98:	d3fb      	bcc.n	8023d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8023d9a:	f006 fddb 	bl	802a954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8023d9e:	f7fd fc89 	bl	80216b4 <main>

08023da2 <LoopForever>:

LoopForever:
    b LoopForever
 8023da2:	e7fe      	b.n	8023da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8023da4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8023da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8023dac:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8023db0:	08078308 	.word	0x08078308
  ldr r2, =_sbss
 8023db4:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8023db8:	20002bb8 	.word	0x20002bb8

08023dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8023dbc:	e7fe      	b.n	8023dbc <ADC1_IRQHandler>

08023dbe <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8023dbe:	b580      	push	{r7, lr}
 8023dc0:	b084      	sub	sp, #16
 8023dc2:	af00      	add	r7, sp, #0
 8023dc4:	4603      	mov	r3, r0
 8023dc6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8023dc8:	2300      	movs	r3, #0
 8023dca:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8023dcc:	2110      	movs	r1, #16
 8023dce:	20d4      	movs	r0, #212	; 0xd4
 8023dd0:	f7fe fe52 	bl	8022a78 <SENSOR_IO_Read>
 8023dd4:	4603      	mov	r3, r0
 8023dd6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8023dd8:	88fb      	ldrh	r3, [r7, #6]
 8023dda:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8023ddc:	7bbb      	ldrb	r3, [r7, #14]
 8023dde:	f003 0303 	and.w	r3, r3, #3
 8023de2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8023de4:	7bba      	ldrb	r2, [r7, #14]
 8023de6:	7bfb      	ldrb	r3, [r7, #15]
 8023de8:	4313      	orrs	r3, r2
 8023dea:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8023dec:	7bbb      	ldrb	r3, [r7, #14]
 8023dee:	461a      	mov	r2, r3
 8023df0:	2110      	movs	r1, #16
 8023df2:	20d4      	movs	r0, #212	; 0xd4
 8023df4:	f7fe fe26 	bl	8022a44 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8023df8:	2112      	movs	r1, #18
 8023dfa:	20d4      	movs	r0, #212	; 0xd4
 8023dfc:	f7fe fe3c 	bl	8022a78 <SENSOR_IO_Read>
 8023e00:	4603      	mov	r3, r0
 8023e02:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8023e04:	88fb      	ldrh	r3, [r7, #6]
 8023e06:	0a1b      	lsrs	r3, r3, #8
 8023e08:	b29b      	uxth	r3, r3
 8023e0a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8023e0c:	7bbb      	ldrb	r3, [r7, #14]
 8023e0e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8023e12:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8023e14:	7bba      	ldrb	r2, [r7, #14]
 8023e16:	7bfb      	ldrb	r3, [r7, #15]
 8023e18:	4313      	orrs	r3, r2
 8023e1a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8023e1c:	7bbb      	ldrb	r3, [r7, #14]
 8023e1e:	461a      	mov	r2, r3
 8023e20:	2112      	movs	r1, #18
 8023e22:	20d4      	movs	r0, #212	; 0xd4
 8023e24:	f7fe fe0e 	bl	8022a44 <SENSOR_IO_Write>
}
 8023e28:	bf00      	nop
 8023e2a:	3710      	adds	r7, #16
 8023e2c:	46bd      	mov	sp, r7
 8023e2e:	bd80      	pop	{r7, pc}

08023e30 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8023e30:	b580      	push	{r7, lr}
 8023e32:	b082      	sub	sp, #8
 8023e34:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8023e36:	2300      	movs	r3, #0
 8023e38:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8023e3a:	2110      	movs	r1, #16
 8023e3c:	20d4      	movs	r0, #212	; 0xd4
 8023e3e:	f7fe fe1b 	bl	8022a78 <SENSOR_IO_Read>
 8023e42:	4603      	mov	r3, r0
 8023e44:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8023e46:	79fb      	ldrb	r3, [r7, #7]
 8023e48:	f003 030f 	and.w	r3, r3, #15
 8023e4c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8023e4e:	79fb      	ldrb	r3, [r7, #7]
 8023e50:	461a      	mov	r2, r3
 8023e52:	2110      	movs	r1, #16
 8023e54:	20d4      	movs	r0, #212	; 0xd4
 8023e56:	f7fe fdf5 	bl	8022a44 <SENSOR_IO_Write>
}
 8023e5a:	bf00      	nop
 8023e5c:	3708      	adds	r7, #8
 8023e5e:	46bd      	mov	sp, r7
 8023e60:	bd80      	pop	{r7, pc}

08023e62 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8023e62:	b580      	push	{r7, lr}
 8023e64:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8023e66:	f7fe fde3 	bl	8022a30 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8023e6a:	210f      	movs	r1, #15
 8023e6c:	20d4      	movs	r0, #212	; 0xd4
 8023e6e:	f7fe fe03 	bl	8022a78 <SENSOR_IO_Read>
 8023e72:	4603      	mov	r3, r0
}
 8023e74:	4618      	mov	r0, r3
 8023e76:	bd80      	pop	{r7, pc}

08023e78 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8023e78:	b580      	push	{r7, lr}
 8023e7a:	b084      	sub	sp, #16
 8023e7c:	af00      	add	r7, sp, #0
 8023e7e:	4603      	mov	r3, r0
 8023e80:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8023e82:	2300      	movs	r3, #0
 8023e84:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8023e86:	2115      	movs	r1, #21
 8023e88:	20d4      	movs	r0, #212	; 0xd4
 8023e8a:	f7fe fdf5 	bl	8022a78 <SENSOR_IO_Read>
 8023e8e:	4603      	mov	r3, r0
 8023e90:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8023e92:	7bfb      	ldrb	r3, [r7, #15]
 8023e94:	f023 0310 	bic.w	r3, r3, #16
 8023e98:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8023e9a:	88fb      	ldrh	r3, [r7, #6]
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	d003      	beq.n	8023ea8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8023ea0:	7bfb      	ldrb	r3, [r7, #15]
 8023ea2:	f043 0310 	orr.w	r3, r3, #16
 8023ea6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8023ea8:	7bfb      	ldrb	r3, [r7, #15]
 8023eaa:	461a      	mov	r2, r3
 8023eac:	2115      	movs	r1, #21
 8023eae:	20d4      	movs	r0, #212	; 0xd4
 8023eb0:	f7fe fdc8 	bl	8022a44 <SENSOR_IO_Write>
}
 8023eb4:	bf00      	nop
 8023eb6:	3710      	adds	r7, #16
 8023eb8:	46bd      	mov	sp, r7
 8023eba:	bd80      	pop	{r7, pc}

08023ebc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8023ebc:	b580      	push	{r7, lr}
 8023ebe:	b088      	sub	sp, #32
 8023ec0:	af00      	add	r7, sp, #0
 8023ec2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8023ec4:	2300      	movs	r3, #0
 8023ec6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8023ec8:	2300      	movs	r3, #0
 8023eca:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8023ecc:	f04f 0300 	mov.w	r3, #0
 8023ed0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8023ed2:	2110      	movs	r1, #16
 8023ed4:	20d4      	movs	r0, #212	; 0xd4
 8023ed6:	f7fe fdcf 	bl	8022a78 <SENSOR_IO_Read>
 8023eda:	4603      	mov	r3, r0
 8023edc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8023ede:	f107 0208 	add.w	r2, r7, #8
 8023ee2:	2306      	movs	r3, #6
 8023ee4:	2128      	movs	r1, #40	; 0x28
 8023ee6:	20d4      	movs	r0, #212	; 0xd4
 8023ee8:	f7fe fde4 	bl	8022ab4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8023eec:	2300      	movs	r3, #0
 8023eee:	77fb      	strb	r3, [r7, #31]
 8023ef0:	e01c      	b.n	8023f2c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8023ef2:	7ffb      	ldrb	r3, [r7, #31]
 8023ef4:	005b      	lsls	r3, r3, #1
 8023ef6:	3301      	adds	r3, #1
 8023ef8:	3320      	adds	r3, #32
 8023efa:	443b      	add	r3, r7
 8023efc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8023f00:	b29b      	uxth	r3, r3
 8023f02:	021b      	lsls	r3, r3, #8
 8023f04:	b29a      	uxth	r2, r3
 8023f06:	7ffb      	ldrb	r3, [r7, #31]
 8023f08:	005b      	lsls	r3, r3, #1
 8023f0a:	3320      	adds	r3, #32
 8023f0c:	443b      	add	r3, r7
 8023f0e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8023f12:	b29b      	uxth	r3, r3
 8023f14:	4413      	add	r3, r2
 8023f16:	b29a      	uxth	r2, r3
 8023f18:	7ffb      	ldrb	r3, [r7, #31]
 8023f1a:	b212      	sxth	r2, r2
 8023f1c:	005b      	lsls	r3, r3, #1
 8023f1e:	3320      	adds	r3, #32
 8023f20:	443b      	add	r3, r7
 8023f22:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8023f26:	7ffb      	ldrb	r3, [r7, #31]
 8023f28:	3301      	adds	r3, #1
 8023f2a:	77fb      	strb	r3, [r7, #31]
 8023f2c:	7ffb      	ldrb	r3, [r7, #31]
 8023f2e:	2b02      	cmp	r3, #2
 8023f30:	d9df      	bls.n	8023ef2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8023f32:	7dfb      	ldrb	r3, [r7, #23]
 8023f34:	f003 030c 	and.w	r3, r3, #12
 8023f38:	2b0c      	cmp	r3, #12
 8023f3a:	d829      	bhi.n	8023f90 <LSM6DSL_AccReadXYZ+0xd4>
 8023f3c:	a201      	add	r2, pc, #4	; (adr r2, 8023f44 <LSM6DSL_AccReadXYZ+0x88>)
 8023f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023f42:	bf00      	nop
 8023f44:	08023f79 	.word	0x08023f79
 8023f48:	08023f91 	.word	0x08023f91
 8023f4c:	08023f91 	.word	0x08023f91
 8023f50:	08023f91 	.word	0x08023f91
 8023f54:	08023f8b 	.word	0x08023f8b
 8023f58:	08023f91 	.word	0x08023f91
 8023f5c:	08023f91 	.word	0x08023f91
 8023f60:	08023f91 	.word	0x08023f91
 8023f64:	08023f7f 	.word	0x08023f7f
 8023f68:	08023f91 	.word	0x08023f91
 8023f6c:	08023f91 	.word	0x08023f91
 8023f70:	08023f91 	.word	0x08023f91
 8023f74:	08023f85 	.word	0x08023f85
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8023f78:	4b18      	ldr	r3, [pc, #96]	; (8023fdc <LSM6DSL_AccReadXYZ+0x120>)
 8023f7a:	61bb      	str	r3, [r7, #24]
    break;
 8023f7c:	e008      	b.n	8023f90 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8023f7e:	4b18      	ldr	r3, [pc, #96]	; (8023fe0 <LSM6DSL_AccReadXYZ+0x124>)
 8023f80:	61bb      	str	r3, [r7, #24]
    break;
 8023f82:	e005      	b.n	8023f90 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8023f84:	4b17      	ldr	r3, [pc, #92]	; (8023fe4 <LSM6DSL_AccReadXYZ+0x128>)
 8023f86:	61bb      	str	r3, [r7, #24]
    break;
 8023f88:	e002      	b.n	8023f90 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8023f8a:	4b17      	ldr	r3, [pc, #92]	; (8023fe8 <LSM6DSL_AccReadXYZ+0x12c>)
 8023f8c:	61bb      	str	r3, [r7, #24]
    break;    
 8023f8e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8023f90:	2300      	movs	r3, #0
 8023f92:	77fb      	strb	r3, [r7, #31]
 8023f94:	e01a      	b.n	8023fcc <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8023f96:	7ffb      	ldrb	r3, [r7, #31]
 8023f98:	005b      	lsls	r3, r3, #1
 8023f9a:	3320      	adds	r3, #32
 8023f9c:	443b      	add	r3, r7
 8023f9e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8023fa2:	ee07 3a90 	vmov	s15, r3
 8023fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023faa:	edd7 7a06 	vldr	s15, [r7, #24]
 8023fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023fb2:	7ffb      	ldrb	r3, [r7, #31]
 8023fb4:	005b      	lsls	r3, r3, #1
 8023fb6:	687a      	ldr	r2, [r7, #4]
 8023fb8:	4413      	add	r3, r2
 8023fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023fbe:	ee17 2a90 	vmov	r2, s15
 8023fc2:	b212      	sxth	r2, r2
 8023fc4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8023fc6:	7ffb      	ldrb	r3, [r7, #31]
 8023fc8:	3301      	adds	r3, #1
 8023fca:	77fb      	strb	r3, [r7, #31]
 8023fcc:	7ffb      	ldrb	r3, [r7, #31]
 8023fce:	2b02      	cmp	r3, #2
 8023fd0:	d9e1      	bls.n	8023f96 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8023fd2:	bf00      	nop
 8023fd4:	bf00      	nop
 8023fd6:	3720      	adds	r7, #32
 8023fd8:	46bd      	mov	sp, r7
 8023fda:	bd80      	pop	{r7, pc}
 8023fdc:	3d79db23 	.word	0x3d79db23
 8023fe0:	3df9db23 	.word	0x3df9db23
 8023fe4:	3e79db23 	.word	0x3e79db23
 8023fe8:	3ef9db23 	.word	0x3ef9db23

08023fec <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8023fec:	b580      	push	{r7, lr}
 8023fee:	b084      	sub	sp, #16
 8023ff0:	af00      	add	r7, sp, #0
 8023ff2:	4603      	mov	r3, r0
 8023ff4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8023ff6:	2300      	movs	r3, #0
 8023ff8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8023ffa:	2111      	movs	r1, #17
 8023ffc:	20d4      	movs	r0, #212	; 0xd4
 8023ffe:	f7fe fd3b 	bl	8022a78 <SENSOR_IO_Read>
 8024002:	4603      	mov	r3, r0
 8024004:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8024006:	88fb      	ldrh	r3, [r7, #6]
 8024008:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 802400a:	7bbb      	ldrb	r3, [r7, #14]
 802400c:	f003 0303 	and.w	r3, r3, #3
 8024010:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8024012:	7bba      	ldrb	r2, [r7, #14]
 8024014:	7bfb      	ldrb	r3, [r7, #15]
 8024016:	4313      	orrs	r3, r2
 8024018:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 802401a:	7bbb      	ldrb	r3, [r7, #14]
 802401c:	461a      	mov	r2, r3
 802401e:	2111      	movs	r1, #17
 8024020:	20d4      	movs	r0, #212	; 0xd4
 8024022:	f7fe fd0f 	bl	8022a44 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8024026:	2112      	movs	r1, #18
 8024028:	20d4      	movs	r0, #212	; 0xd4
 802402a:	f7fe fd25 	bl	8022a78 <SENSOR_IO_Read>
 802402e:	4603      	mov	r3, r0
 8024030:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8024032:	88fb      	ldrh	r3, [r7, #6]
 8024034:	0a1b      	lsrs	r3, r3, #8
 8024036:	b29b      	uxth	r3, r3
 8024038:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 802403a:	7bbb      	ldrb	r3, [r7, #14]
 802403c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8024040:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8024042:	7bba      	ldrb	r2, [r7, #14]
 8024044:	7bfb      	ldrb	r3, [r7, #15]
 8024046:	4313      	orrs	r3, r2
 8024048:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 802404a:	7bbb      	ldrb	r3, [r7, #14]
 802404c:	461a      	mov	r2, r3
 802404e:	2112      	movs	r1, #18
 8024050:	20d4      	movs	r0, #212	; 0xd4
 8024052:	f7fe fcf7 	bl	8022a44 <SENSOR_IO_Write>
}
 8024056:	bf00      	nop
 8024058:	3710      	adds	r7, #16
 802405a:	46bd      	mov	sp, r7
 802405c:	bd80      	pop	{r7, pc}

0802405e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 802405e:	b580      	push	{r7, lr}
 8024060:	b082      	sub	sp, #8
 8024062:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8024064:	2300      	movs	r3, #0
 8024066:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8024068:	2111      	movs	r1, #17
 802406a:	20d4      	movs	r0, #212	; 0xd4
 802406c:	f7fe fd04 	bl	8022a78 <SENSOR_IO_Read>
 8024070:	4603      	mov	r3, r0
 8024072:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8024074:	79fb      	ldrb	r3, [r7, #7]
 8024076:	f003 030f 	and.w	r3, r3, #15
 802407a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 802407c:	79fb      	ldrb	r3, [r7, #7]
 802407e:	461a      	mov	r2, r3
 8024080:	2111      	movs	r1, #17
 8024082:	20d4      	movs	r0, #212	; 0xd4
 8024084:	f7fe fcde 	bl	8022a44 <SENSOR_IO_Write>
}
 8024088:	bf00      	nop
 802408a:	3708      	adds	r7, #8
 802408c:	46bd      	mov	sp, r7
 802408e:	bd80      	pop	{r7, pc}

08024090 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8024090:	b580      	push	{r7, lr}
 8024092:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8024094:	f7fe fccc 	bl	8022a30 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8024098:	210f      	movs	r1, #15
 802409a:	20d4      	movs	r0, #212	; 0xd4
 802409c:	f7fe fcec 	bl	8022a78 <SENSOR_IO_Read>
 80240a0:	4603      	mov	r3, r0
}
 80240a2:	4618      	mov	r0, r3
 80240a4:	bd80      	pop	{r7, pc}

080240a6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80240a6:	b580      	push	{r7, lr}
 80240a8:	b084      	sub	sp, #16
 80240aa:	af00      	add	r7, sp, #0
 80240ac:	4603      	mov	r3, r0
 80240ae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80240b0:	2300      	movs	r3, #0
 80240b2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80240b4:	2116      	movs	r1, #22
 80240b6:	20d4      	movs	r0, #212	; 0xd4
 80240b8:	f7fe fcde 	bl	8022a78 <SENSOR_IO_Read>
 80240bc:	4603      	mov	r3, r0
 80240be:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80240c0:	7bfb      	ldrb	r3, [r7, #15]
 80240c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80240c6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80240c8:	88fb      	ldrh	r3, [r7, #6]
 80240ca:	2b00      	cmp	r3, #0
 80240cc:	d003      	beq.n	80240d6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80240ce:	7bfb      	ldrb	r3, [r7, #15]
 80240d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80240d4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80240d6:	7bfb      	ldrb	r3, [r7, #15]
 80240d8:	461a      	mov	r2, r3
 80240da:	2116      	movs	r1, #22
 80240dc:	20d4      	movs	r0, #212	; 0xd4
 80240de:	f7fe fcb1 	bl	8022a44 <SENSOR_IO_Write>
}
 80240e2:	bf00      	nop
 80240e4:	3710      	adds	r7, #16
 80240e6:	46bd      	mov	sp, r7
 80240e8:	bd80      	pop	{r7, pc}
	...

080240ec <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80240ec:	b580      	push	{r7, lr}
 80240ee:	b088      	sub	sp, #32
 80240f0:	af00      	add	r7, sp, #0
 80240f2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80240f4:	2300      	movs	r3, #0
 80240f6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80240f8:	2300      	movs	r3, #0
 80240fa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80240fc:	f04f 0300 	mov.w	r3, #0
 8024100:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8024102:	2111      	movs	r1, #17
 8024104:	20d4      	movs	r0, #212	; 0xd4
 8024106:	f7fe fcb7 	bl	8022a78 <SENSOR_IO_Read>
 802410a:	4603      	mov	r3, r0
 802410c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 802410e:	f107 0208 	add.w	r2, r7, #8
 8024112:	2306      	movs	r3, #6
 8024114:	2122      	movs	r1, #34	; 0x22
 8024116:	20d4      	movs	r0, #212	; 0xd4
 8024118:	f7fe fccc 	bl	8022ab4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 802411c:	2300      	movs	r3, #0
 802411e:	77fb      	strb	r3, [r7, #31]
 8024120:	e01c      	b.n	802415c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8024122:	7ffb      	ldrb	r3, [r7, #31]
 8024124:	005b      	lsls	r3, r3, #1
 8024126:	3301      	adds	r3, #1
 8024128:	3320      	adds	r3, #32
 802412a:	443b      	add	r3, r7
 802412c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8024130:	b29b      	uxth	r3, r3
 8024132:	021b      	lsls	r3, r3, #8
 8024134:	b29a      	uxth	r2, r3
 8024136:	7ffb      	ldrb	r3, [r7, #31]
 8024138:	005b      	lsls	r3, r3, #1
 802413a:	3320      	adds	r3, #32
 802413c:	443b      	add	r3, r7
 802413e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8024142:	b29b      	uxth	r3, r3
 8024144:	4413      	add	r3, r2
 8024146:	b29a      	uxth	r2, r3
 8024148:	7ffb      	ldrb	r3, [r7, #31]
 802414a:	b212      	sxth	r2, r2
 802414c:	005b      	lsls	r3, r3, #1
 802414e:	3320      	adds	r3, #32
 8024150:	443b      	add	r3, r7
 8024152:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8024156:	7ffb      	ldrb	r3, [r7, #31]
 8024158:	3301      	adds	r3, #1
 802415a:	77fb      	strb	r3, [r7, #31]
 802415c:	7ffb      	ldrb	r3, [r7, #31]
 802415e:	2b02      	cmp	r3, #2
 8024160:	d9df      	bls.n	8024122 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8024162:	7dfb      	ldrb	r3, [r7, #23]
 8024164:	f003 030c 	and.w	r3, r3, #12
 8024168:	2b0c      	cmp	r3, #12
 802416a:	d829      	bhi.n	80241c0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 802416c:	a201      	add	r2, pc, #4	; (adr r2, 8024174 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 802416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024172:	bf00      	nop
 8024174:	080241a9 	.word	0x080241a9
 8024178:	080241c1 	.word	0x080241c1
 802417c:	080241c1 	.word	0x080241c1
 8024180:	080241c1 	.word	0x080241c1
 8024184:	080241af 	.word	0x080241af
 8024188:	080241c1 	.word	0x080241c1
 802418c:	080241c1 	.word	0x080241c1
 8024190:	080241c1 	.word	0x080241c1
 8024194:	080241b5 	.word	0x080241b5
 8024198:	080241c1 	.word	0x080241c1
 802419c:	080241c1 	.word	0x080241c1
 80241a0:	080241c1 	.word	0x080241c1
 80241a4:	080241bb 	.word	0x080241bb
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80241a8:	4b16      	ldr	r3, [pc, #88]	; (8024204 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80241aa:	61bb      	str	r3, [r7, #24]
    break;
 80241ac:	e008      	b.n	80241c0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80241ae:	4b16      	ldr	r3, [pc, #88]	; (8024208 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80241b0:	61bb      	str	r3, [r7, #24]
    break;
 80241b2:	e005      	b.n	80241c0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80241b4:	4b15      	ldr	r3, [pc, #84]	; (802420c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80241b6:	61bb      	str	r3, [r7, #24]
    break;
 80241b8:	e002      	b.n	80241c0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80241ba:	4b15      	ldr	r3, [pc, #84]	; (8024210 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80241bc:	61bb      	str	r3, [r7, #24]
    break;    
 80241be:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80241c0:	2300      	movs	r3, #0
 80241c2:	77fb      	strb	r3, [r7, #31]
 80241c4:	e016      	b.n	80241f4 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80241c6:	7ffb      	ldrb	r3, [r7, #31]
 80241c8:	005b      	lsls	r3, r3, #1
 80241ca:	3320      	adds	r3, #32
 80241cc:	443b      	add	r3, r7
 80241ce:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80241d2:	ee07 3a90 	vmov	s15, r3
 80241d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80241da:	7ffb      	ldrb	r3, [r7, #31]
 80241dc:	009b      	lsls	r3, r3, #2
 80241de:	687a      	ldr	r2, [r7, #4]
 80241e0:	4413      	add	r3, r2
 80241e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80241e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80241ea:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80241ee:	7ffb      	ldrb	r3, [r7, #31]
 80241f0:	3301      	adds	r3, #1
 80241f2:	77fb      	strb	r3, [r7, #31]
 80241f4:	7ffb      	ldrb	r3, [r7, #31]
 80241f6:	2b02      	cmp	r3, #2
 80241f8:	d9e5      	bls.n	80241c6 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80241fa:	bf00      	nop
 80241fc:	bf00      	nop
 80241fe:	3720      	adds	r7, #32
 8024200:	46bd      	mov	sp, r7
 8024202:	bd80      	pop	{r7, pc}
 8024204:	410c0000 	.word	0x410c0000
 8024208:	418c0000 	.word	0x418c0000
 802420c:	420c0000 	.word	0x420c0000
 8024210:	428c0000 	.word	0x428c0000

08024214 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8024214:	b580      	push	{r7, lr}
 8024216:	b082      	sub	sp, #8
 8024218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 802421a:	2300      	movs	r3, #0
 802421c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802421e:	2003      	movs	r0, #3
 8024220:	f000 f960 	bl	80244e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8024224:	200f      	movs	r0, #15
 8024226:	f000 f80d 	bl	8024244 <HAL_InitTick>
 802422a:	4603      	mov	r3, r0
 802422c:	2b00      	cmp	r3, #0
 802422e:	d002      	beq.n	8024236 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8024230:	2301      	movs	r3, #1
 8024232:	71fb      	strb	r3, [r7, #7]
 8024234:	e001      	b.n	802423a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8024236:	f7ff f9dd 	bl	80235f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 802423a:	79fb      	ldrb	r3, [r7, #7]
}
 802423c:	4618      	mov	r0, r3
 802423e:	3708      	adds	r7, #8
 8024240:	46bd      	mov	sp, r7
 8024242:	bd80      	pop	{r7, pc}

08024244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8024244:	b580      	push	{r7, lr}
 8024246:	b084      	sub	sp, #16
 8024248:	af00      	add	r7, sp, #0
 802424a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 802424c:	2300      	movs	r3, #0
 802424e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8024250:	4b17      	ldr	r3, [pc, #92]	; (80242b0 <HAL_InitTick+0x6c>)
 8024252:	781b      	ldrb	r3, [r3, #0]
 8024254:	2b00      	cmp	r3, #0
 8024256:	d023      	beq.n	80242a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8024258:	4b16      	ldr	r3, [pc, #88]	; (80242b4 <HAL_InitTick+0x70>)
 802425a:	681a      	ldr	r2, [r3, #0]
 802425c:	4b14      	ldr	r3, [pc, #80]	; (80242b0 <HAL_InitTick+0x6c>)
 802425e:	781b      	ldrb	r3, [r3, #0]
 8024260:	4619      	mov	r1, r3
 8024262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024266:	fbb3 f3f1 	udiv	r3, r3, r1
 802426a:	fbb2 f3f3 	udiv	r3, r2, r3
 802426e:	4618      	mov	r0, r3
 8024270:	f000 f96d 	bl	802454e <HAL_SYSTICK_Config>
 8024274:	4603      	mov	r3, r0
 8024276:	2b00      	cmp	r3, #0
 8024278:	d10f      	bne.n	802429a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802427a:	687b      	ldr	r3, [r7, #4]
 802427c:	2b0f      	cmp	r3, #15
 802427e:	d809      	bhi.n	8024294 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8024280:	2200      	movs	r2, #0
 8024282:	6879      	ldr	r1, [r7, #4]
 8024284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024288:	f000 f937 	bl	80244fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 802428c:	4a0a      	ldr	r2, [pc, #40]	; (80242b8 <HAL_InitTick+0x74>)
 802428e:	687b      	ldr	r3, [r7, #4]
 8024290:	6013      	str	r3, [r2, #0]
 8024292:	e007      	b.n	80242a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8024294:	2301      	movs	r3, #1
 8024296:	73fb      	strb	r3, [r7, #15]
 8024298:	e004      	b.n	80242a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 802429a:	2301      	movs	r3, #1
 802429c:	73fb      	strb	r3, [r7, #15]
 802429e:	e001      	b.n	80242a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80242a0:	2301      	movs	r3, #1
 80242a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80242a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80242a6:	4618      	mov	r0, r3
 80242a8:	3710      	adds	r7, #16
 80242aa:	46bd      	mov	sp, r7
 80242ac:	bd80      	pop	{r7, pc}
 80242ae:	bf00      	nop
 80242b0:	20000298 	.word	0x20000298
 80242b4:	20000228 	.word	0x20000228
 80242b8:	20000294 	.word	0x20000294

080242bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80242bc:	b480      	push	{r7}
 80242be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80242c0:	4b06      	ldr	r3, [pc, #24]	; (80242dc <HAL_IncTick+0x20>)
 80242c2:	781b      	ldrb	r3, [r3, #0]
 80242c4:	461a      	mov	r2, r3
 80242c6:	4b06      	ldr	r3, [pc, #24]	; (80242e0 <HAL_IncTick+0x24>)
 80242c8:	681b      	ldr	r3, [r3, #0]
 80242ca:	4413      	add	r3, r2
 80242cc:	4a04      	ldr	r2, [pc, #16]	; (80242e0 <HAL_IncTick+0x24>)
 80242ce:	6013      	str	r3, [r2, #0]
}
 80242d0:	bf00      	nop
 80242d2:	46bd      	mov	sp, r7
 80242d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242d8:	4770      	bx	lr
 80242da:	bf00      	nop
 80242dc:	20000298 	.word	0x20000298
 80242e0:	2000279c 	.word	0x2000279c

080242e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80242e4:	b480      	push	{r7}
 80242e6:	af00      	add	r7, sp, #0
  return uwTick;
 80242e8:	4b03      	ldr	r3, [pc, #12]	; (80242f8 <HAL_GetTick+0x14>)
 80242ea:	681b      	ldr	r3, [r3, #0]
}
 80242ec:	4618      	mov	r0, r3
 80242ee:	46bd      	mov	sp, r7
 80242f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242f4:	4770      	bx	lr
 80242f6:	bf00      	nop
 80242f8:	2000279c 	.word	0x2000279c

080242fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80242fc:	b580      	push	{r7, lr}
 80242fe:	b084      	sub	sp, #16
 8024300:	af00      	add	r7, sp, #0
 8024302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8024304:	f7ff ffee 	bl	80242e4 <HAL_GetTick>
 8024308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802430a:	687b      	ldr	r3, [r7, #4]
 802430c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 802430e:	68fb      	ldr	r3, [r7, #12]
 8024310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8024314:	d005      	beq.n	8024322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8024316:	4b0a      	ldr	r3, [pc, #40]	; (8024340 <HAL_Delay+0x44>)
 8024318:	781b      	ldrb	r3, [r3, #0]
 802431a:	461a      	mov	r2, r3
 802431c:	68fb      	ldr	r3, [r7, #12]
 802431e:	4413      	add	r3, r2
 8024320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8024322:	bf00      	nop
 8024324:	f7ff ffde 	bl	80242e4 <HAL_GetTick>
 8024328:	4602      	mov	r2, r0
 802432a:	68bb      	ldr	r3, [r7, #8]
 802432c:	1ad3      	subs	r3, r2, r3
 802432e:	68fa      	ldr	r2, [r7, #12]
 8024330:	429a      	cmp	r2, r3
 8024332:	d8f7      	bhi.n	8024324 <HAL_Delay+0x28>
  {
  }
}
 8024334:	bf00      	nop
 8024336:	bf00      	nop
 8024338:	3710      	adds	r7, #16
 802433a:	46bd      	mov	sp, r7
 802433c:	bd80      	pop	{r7, pc}
 802433e:	bf00      	nop
 8024340:	20000298 	.word	0x20000298

08024344 <__NVIC_SetPriorityGrouping>:
{
 8024344:	b480      	push	{r7}
 8024346:	b085      	sub	sp, #20
 8024348:	af00      	add	r7, sp, #0
 802434a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802434c:	687b      	ldr	r3, [r7, #4]
 802434e:	f003 0307 	and.w	r3, r3, #7
 8024352:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8024354:	4b0c      	ldr	r3, [pc, #48]	; (8024388 <__NVIC_SetPriorityGrouping+0x44>)
 8024356:	68db      	ldr	r3, [r3, #12]
 8024358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802435a:	68ba      	ldr	r2, [r7, #8]
 802435c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8024360:	4013      	ands	r3, r2
 8024362:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8024364:	68fb      	ldr	r3, [r7, #12]
 8024366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8024368:	68bb      	ldr	r3, [r7, #8]
 802436a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802436c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8024370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8024374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8024376:	4a04      	ldr	r2, [pc, #16]	; (8024388 <__NVIC_SetPriorityGrouping+0x44>)
 8024378:	68bb      	ldr	r3, [r7, #8]
 802437a:	60d3      	str	r3, [r2, #12]
}
 802437c:	bf00      	nop
 802437e:	3714      	adds	r7, #20
 8024380:	46bd      	mov	sp, r7
 8024382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024386:	4770      	bx	lr
 8024388:	e000ed00 	.word	0xe000ed00

0802438c <__NVIC_GetPriorityGrouping>:
{
 802438c:	b480      	push	{r7}
 802438e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8024390:	4b04      	ldr	r3, [pc, #16]	; (80243a4 <__NVIC_GetPriorityGrouping+0x18>)
 8024392:	68db      	ldr	r3, [r3, #12]
 8024394:	0a1b      	lsrs	r3, r3, #8
 8024396:	f003 0307 	and.w	r3, r3, #7
}
 802439a:	4618      	mov	r0, r3
 802439c:	46bd      	mov	sp, r7
 802439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243a2:	4770      	bx	lr
 80243a4:	e000ed00 	.word	0xe000ed00

080243a8 <__NVIC_EnableIRQ>:
{
 80243a8:	b480      	push	{r7}
 80243aa:	b083      	sub	sp, #12
 80243ac:	af00      	add	r7, sp, #0
 80243ae:	4603      	mov	r3, r0
 80243b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80243b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80243b6:	2b00      	cmp	r3, #0
 80243b8:	db0b      	blt.n	80243d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80243ba:	79fb      	ldrb	r3, [r7, #7]
 80243bc:	f003 021f 	and.w	r2, r3, #31
 80243c0:	4907      	ldr	r1, [pc, #28]	; (80243e0 <__NVIC_EnableIRQ+0x38>)
 80243c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80243c6:	095b      	lsrs	r3, r3, #5
 80243c8:	2001      	movs	r0, #1
 80243ca:	fa00 f202 	lsl.w	r2, r0, r2
 80243ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80243d2:	bf00      	nop
 80243d4:	370c      	adds	r7, #12
 80243d6:	46bd      	mov	sp, r7
 80243d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243dc:	4770      	bx	lr
 80243de:	bf00      	nop
 80243e0:	e000e100 	.word	0xe000e100

080243e4 <__NVIC_SetPriority>:
{
 80243e4:	b480      	push	{r7}
 80243e6:	b083      	sub	sp, #12
 80243e8:	af00      	add	r7, sp, #0
 80243ea:	4603      	mov	r3, r0
 80243ec:	6039      	str	r1, [r7, #0]
 80243ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80243f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80243f4:	2b00      	cmp	r3, #0
 80243f6:	db0a      	blt.n	802440e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80243f8:	683b      	ldr	r3, [r7, #0]
 80243fa:	b2da      	uxtb	r2, r3
 80243fc:	490c      	ldr	r1, [pc, #48]	; (8024430 <__NVIC_SetPriority+0x4c>)
 80243fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024402:	0112      	lsls	r2, r2, #4
 8024404:	b2d2      	uxtb	r2, r2
 8024406:	440b      	add	r3, r1
 8024408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 802440c:	e00a      	b.n	8024424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802440e:	683b      	ldr	r3, [r7, #0]
 8024410:	b2da      	uxtb	r2, r3
 8024412:	4908      	ldr	r1, [pc, #32]	; (8024434 <__NVIC_SetPriority+0x50>)
 8024414:	79fb      	ldrb	r3, [r7, #7]
 8024416:	f003 030f 	and.w	r3, r3, #15
 802441a:	3b04      	subs	r3, #4
 802441c:	0112      	lsls	r2, r2, #4
 802441e:	b2d2      	uxtb	r2, r2
 8024420:	440b      	add	r3, r1
 8024422:	761a      	strb	r2, [r3, #24]
}
 8024424:	bf00      	nop
 8024426:	370c      	adds	r7, #12
 8024428:	46bd      	mov	sp, r7
 802442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802442e:	4770      	bx	lr
 8024430:	e000e100 	.word	0xe000e100
 8024434:	e000ed00 	.word	0xe000ed00

08024438 <NVIC_EncodePriority>:
{
 8024438:	b480      	push	{r7}
 802443a:	b089      	sub	sp, #36	; 0x24
 802443c:	af00      	add	r7, sp, #0
 802443e:	60f8      	str	r0, [r7, #12]
 8024440:	60b9      	str	r1, [r7, #8]
 8024442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8024444:	68fb      	ldr	r3, [r7, #12]
 8024446:	f003 0307 	and.w	r3, r3, #7
 802444a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802444c:	69fb      	ldr	r3, [r7, #28]
 802444e:	f1c3 0307 	rsb	r3, r3, #7
 8024452:	2b04      	cmp	r3, #4
 8024454:	bf28      	it	cs
 8024456:	2304      	movcs	r3, #4
 8024458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802445a:	69fb      	ldr	r3, [r7, #28]
 802445c:	3304      	adds	r3, #4
 802445e:	2b06      	cmp	r3, #6
 8024460:	d902      	bls.n	8024468 <NVIC_EncodePriority+0x30>
 8024462:	69fb      	ldr	r3, [r7, #28]
 8024464:	3b03      	subs	r3, #3
 8024466:	e000      	b.n	802446a <NVIC_EncodePriority+0x32>
 8024468:	2300      	movs	r3, #0
 802446a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802446c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024470:	69bb      	ldr	r3, [r7, #24]
 8024472:	fa02 f303 	lsl.w	r3, r2, r3
 8024476:	43da      	mvns	r2, r3
 8024478:	68bb      	ldr	r3, [r7, #8]
 802447a:	401a      	ands	r2, r3
 802447c:	697b      	ldr	r3, [r7, #20]
 802447e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8024480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8024484:	697b      	ldr	r3, [r7, #20]
 8024486:	fa01 f303 	lsl.w	r3, r1, r3
 802448a:	43d9      	mvns	r1, r3
 802448c:	687b      	ldr	r3, [r7, #4]
 802448e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8024490:	4313      	orrs	r3, r2
}
 8024492:	4618      	mov	r0, r3
 8024494:	3724      	adds	r7, #36	; 0x24
 8024496:	46bd      	mov	sp, r7
 8024498:	f85d 7b04 	ldr.w	r7, [sp], #4
 802449c:	4770      	bx	lr
	...

080244a0 <SysTick_Config>:
{
 80244a0:	b580      	push	{r7, lr}
 80244a2:	b082      	sub	sp, #8
 80244a4:	af00      	add	r7, sp, #0
 80244a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80244a8:	687b      	ldr	r3, [r7, #4]
 80244aa:	3b01      	subs	r3, #1
 80244ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80244b0:	d301      	bcc.n	80244b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80244b2:	2301      	movs	r3, #1
 80244b4:	e00f      	b.n	80244d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80244b6:	4a0a      	ldr	r2, [pc, #40]	; (80244e0 <SysTick_Config+0x40>)
 80244b8:	687b      	ldr	r3, [r7, #4]
 80244ba:	3b01      	subs	r3, #1
 80244bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80244be:	210f      	movs	r1, #15
 80244c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80244c4:	f7ff ff8e 	bl	80243e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80244c8:	4b05      	ldr	r3, [pc, #20]	; (80244e0 <SysTick_Config+0x40>)
 80244ca:	2200      	movs	r2, #0
 80244cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80244ce:	4b04      	ldr	r3, [pc, #16]	; (80244e0 <SysTick_Config+0x40>)
 80244d0:	2207      	movs	r2, #7
 80244d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80244d4:	2300      	movs	r3, #0
}
 80244d6:	4618      	mov	r0, r3
 80244d8:	3708      	adds	r7, #8
 80244da:	46bd      	mov	sp, r7
 80244dc:	bd80      	pop	{r7, pc}
 80244de:	bf00      	nop
 80244e0:	e000e010 	.word	0xe000e010

080244e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80244e4:	b580      	push	{r7, lr}
 80244e6:	b082      	sub	sp, #8
 80244e8:	af00      	add	r7, sp, #0
 80244ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80244ec:	6878      	ldr	r0, [r7, #4]
 80244ee:	f7ff ff29 	bl	8024344 <__NVIC_SetPriorityGrouping>
}
 80244f2:	bf00      	nop
 80244f4:	3708      	adds	r7, #8
 80244f6:	46bd      	mov	sp, r7
 80244f8:	bd80      	pop	{r7, pc}

080244fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80244fa:	b580      	push	{r7, lr}
 80244fc:	b086      	sub	sp, #24
 80244fe:	af00      	add	r7, sp, #0
 8024500:	4603      	mov	r3, r0
 8024502:	60b9      	str	r1, [r7, #8]
 8024504:	607a      	str	r2, [r7, #4]
 8024506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8024508:	2300      	movs	r3, #0
 802450a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802450c:	f7ff ff3e 	bl	802438c <__NVIC_GetPriorityGrouping>
 8024510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8024512:	687a      	ldr	r2, [r7, #4]
 8024514:	68b9      	ldr	r1, [r7, #8]
 8024516:	6978      	ldr	r0, [r7, #20]
 8024518:	f7ff ff8e 	bl	8024438 <NVIC_EncodePriority>
 802451c:	4602      	mov	r2, r0
 802451e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8024522:	4611      	mov	r1, r2
 8024524:	4618      	mov	r0, r3
 8024526:	f7ff ff5d 	bl	80243e4 <__NVIC_SetPriority>
}
 802452a:	bf00      	nop
 802452c:	3718      	adds	r7, #24
 802452e:	46bd      	mov	sp, r7
 8024530:	bd80      	pop	{r7, pc}

08024532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024532:	b580      	push	{r7, lr}
 8024534:	b082      	sub	sp, #8
 8024536:	af00      	add	r7, sp, #0
 8024538:	4603      	mov	r3, r0
 802453a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802453c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024540:	4618      	mov	r0, r3
 8024542:	f7ff ff31 	bl	80243a8 <__NVIC_EnableIRQ>
}
 8024546:	bf00      	nop
 8024548:	3708      	adds	r7, #8
 802454a:	46bd      	mov	sp, r7
 802454c:	bd80      	pop	{r7, pc}

0802454e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802454e:	b580      	push	{r7, lr}
 8024550:	b082      	sub	sp, #8
 8024552:	af00      	add	r7, sp, #0
 8024554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8024556:	6878      	ldr	r0, [r7, #4]
 8024558:	f7ff ffa2 	bl	80244a0 <SysTick_Config>
 802455c:	4603      	mov	r3, r0
}
 802455e:	4618      	mov	r0, r3
 8024560:	3708      	adds	r7, #8
 8024562:	46bd      	mov	sp, r7
 8024564:	bd80      	pop	{r7, pc}

08024566 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8024566:	b580      	push	{r7, lr}
 8024568:	b082      	sub	sp, #8
 802456a:	af00      	add	r7, sp, #0
 802456c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802456e:	687b      	ldr	r3, [r7, #4]
 8024570:	2b00      	cmp	r3, #0
 8024572:	d101      	bne.n	8024578 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8024574:	2301      	movs	r3, #1
 8024576:	e014      	b.n	80245a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	791b      	ldrb	r3, [r3, #4]
 802457c:	b2db      	uxtb	r3, r3
 802457e:	2b00      	cmp	r3, #0
 8024580:	d105      	bne.n	802458e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8024582:	687b      	ldr	r3, [r7, #4]
 8024584:	2200      	movs	r2, #0
 8024586:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8024588:	6878      	ldr	r0, [r7, #4]
 802458a:	f7ff f857 	bl	802363c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802458e:	687b      	ldr	r3, [r7, #4]
 8024590:	2202      	movs	r2, #2
 8024592:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8024594:	687b      	ldr	r3, [r7, #4]
 8024596:	2200      	movs	r2, #0
 8024598:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802459a:	687b      	ldr	r3, [r7, #4]
 802459c:	2201      	movs	r2, #1
 802459e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80245a0:	2300      	movs	r3, #0
}
 80245a2:	4618      	mov	r0, r3
 80245a4:	3708      	adds	r7, #8
 80245a6:	46bd      	mov	sp, r7
 80245a8:	bd80      	pop	{r7, pc}

080245aa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80245aa:	b480      	push	{r7}
 80245ac:	b083      	sub	sp, #12
 80245ae:	af00      	add	r7, sp, #0
 80245b0:	6078      	str	r0, [r7, #4]
 80245b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	795b      	ldrb	r3, [r3, #5]
 80245b8:	2b01      	cmp	r3, #1
 80245ba:	d101      	bne.n	80245c0 <HAL_DAC_Start+0x16>
 80245bc:	2302      	movs	r3, #2
 80245be:	e040      	b.n	8024642 <HAL_DAC_Start+0x98>
 80245c0:	687b      	ldr	r3, [r7, #4]
 80245c2:	2201      	movs	r2, #1
 80245c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80245c6:	687b      	ldr	r3, [r7, #4]
 80245c8:	2202      	movs	r2, #2
 80245ca:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80245cc:	687b      	ldr	r3, [r7, #4]
 80245ce:	681b      	ldr	r3, [r3, #0]
 80245d0:	6819      	ldr	r1, [r3, #0]
 80245d2:	683b      	ldr	r3, [r7, #0]
 80245d4:	f003 0310 	and.w	r3, r3, #16
 80245d8:	2201      	movs	r2, #1
 80245da:	409a      	lsls	r2, r3
 80245dc:	687b      	ldr	r3, [r7, #4]
 80245de:	681b      	ldr	r3, [r3, #0]
 80245e0:	430a      	orrs	r2, r1
 80245e2:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80245e4:	683b      	ldr	r3, [r7, #0]
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	d10f      	bne.n	802460a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80245ea:	687b      	ldr	r3, [r7, #4]
 80245ec:	681b      	ldr	r3, [r3, #0]
 80245ee:	681b      	ldr	r3, [r3, #0]
 80245f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80245f4:	2b02      	cmp	r3, #2
 80245f6:	d11d      	bne.n	8024634 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80245f8:	687b      	ldr	r3, [r7, #4]
 80245fa:	681b      	ldr	r3, [r3, #0]
 80245fc:	685a      	ldr	r2, [r3, #4]
 80245fe:	687b      	ldr	r3, [r7, #4]
 8024600:	681b      	ldr	r3, [r3, #0]
 8024602:	f042 0201 	orr.w	r2, r2, #1
 8024606:	605a      	str	r2, [r3, #4]
 8024608:	e014      	b.n	8024634 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802460a:	687b      	ldr	r3, [r7, #4]
 802460c:	681b      	ldr	r3, [r3, #0]
 802460e:	681b      	ldr	r3, [r3, #0]
 8024610:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8024614:	683b      	ldr	r3, [r7, #0]
 8024616:	f003 0310 	and.w	r3, r3, #16
 802461a:	2102      	movs	r1, #2
 802461c:	fa01 f303 	lsl.w	r3, r1, r3
 8024620:	429a      	cmp	r2, r3
 8024622:	d107      	bne.n	8024634 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8024624:	687b      	ldr	r3, [r7, #4]
 8024626:	681b      	ldr	r3, [r3, #0]
 8024628:	685a      	ldr	r2, [r3, #4]
 802462a:	687b      	ldr	r3, [r7, #4]
 802462c:	681b      	ldr	r3, [r3, #0]
 802462e:	f042 0202 	orr.w	r2, r2, #2
 8024632:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8024634:	687b      	ldr	r3, [r7, #4]
 8024636:	2201      	movs	r2, #1
 8024638:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802463a:	687b      	ldr	r3, [r7, #4]
 802463c:	2200      	movs	r2, #0
 802463e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8024640:	2300      	movs	r3, #0
}
 8024642:	4618      	mov	r0, r3
 8024644:	370c      	adds	r7, #12
 8024646:	46bd      	mov	sp, r7
 8024648:	f85d 7b04 	ldr.w	r7, [sp], #4
 802464c:	4770      	bx	lr
	...

08024650 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8024650:	b580      	push	{r7, lr}
 8024652:	b086      	sub	sp, #24
 8024654:	af00      	add	r7, sp, #0
 8024656:	60f8      	str	r0, [r7, #12]
 8024658:	60b9      	str	r1, [r7, #8]
 802465a:	607a      	str	r2, [r7, #4]
 802465c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 802465e:	2300      	movs	r3, #0
 8024660:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8024662:	68fb      	ldr	r3, [r7, #12]
 8024664:	795b      	ldrb	r3, [r3, #5]
 8024666:	2b01      	cmp	r3, #1
 8024668:	d101      	bne.n	802466e <HAL_DAC_Start_DMA+0x1e>
 802466a:	2302      	movs	r3, #2
 802466c:	e0ab      	b.n	80247c6 <HAL_DAC_Start_DMA+0x176>
 802466e:	68fb      	ldr	r3, [r7, #12]
 8024670:	2201      	movs	r2, #1
 8024672:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8024674:	68fb      	ldr	r3, [r7, #12]
 8024676:	2202      	movs	r2, #2
 8024678:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 802467a:	68bb      	ldr	r3, [r7, #8]
 802467c:	2b00      	cmp	r3, #0
 802467e:	d12f      	bne.n	80246e0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8024680:	68fb      	ldr	r3, [r7, #12]
 8024682:	689b      	ldr	r3, [r3, #8]
 8024684:	4a52      	ldr	r2, [pc, #328]	; (80247d0 <HAL_DAC_Start_DMA+0x180>)
 8024686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8024688:	68fb      	ldr	r3, [r7, #12]
 802468a:	689b      	ldr	r3, [r3, #8]
 802468c:	4a51      	ldr	r2, [pc, #324]	; (80247d4 <HAL_DAC_Start_DMA+0x184>)
 802468e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8024690:	68fb      	ldr	r3, [r7, #12]
 8024692:	689b      	ldr	r3, [r3, #8]
 8024694:	4a50      	ldr	r2, [pc, #320]	; (80247d8 <HAL_DAC_Start_DMA+0x188>)
 8024696:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8024698:	68fb      	ldr	r3, [r7, #12]
 802469a:	681b      	ldr	r3, [r3, #0]
 802469c:	681a      	ldr	r2, [r3, #0]
 802469e:	68fb      	ldr	r3, [r7, #12]
 80246a0:	681b      	ldr	r3, [r3, #0]
 80246a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80246a6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80246a8:	6a3b      	ldr	r3, [r7, #32]
 80246aa:	2b08      	cmp	r3, #8
 80246ac:	d013      	beq.n	80246d6 <HAL_DAC_Start_DMA+0x86>
 80246ae:	6a3b      	ldr	r3, [r7, #32]
 80246b0:	2b08      	cmp	r3, #8
 80246b2:	d845      	bhi.n	8024740 <HAL_DAC_Start_DMA+0xf0>
 80246b4:	6a3b      	ldr	r3, [r7, #32]
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	d003      	beq.n	80246c2 <HAL_DAC_Start_DMA+0x72>
 80246ba:	6a3b      	ldr	r3, [r7, #32]
 80246bc:	2b04      	cmp	r3, #4
 80246be:	d005      	beq.n	80246cc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80246c0:	e03e      	b.n	8024740 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80246c2:	68fb      	ldr	r3, [r7, #12]
 80246c4:	681b      	ldr	r3, [r3, #0]
 80246c6:	3308      	adds	r3, #8
 80246c8:	613b      	str	r3, [r7, #16]
        break;
 80246ca:	e03c      	b.n	8024746 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80246cc:	68fb      	ldr	r3, [r7, #12]
 80246ce:	681b      	ldr	r3, [r3, #0]
 80246d0:	330c      	adds	r3, #12
 80246d2:	613b      	str	r3, [r7, #16]
        break;
 80246d4:	e037      	b.n	8024746 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80246d6:	68fb      	ldr	r3, [r7, #12]
 80246d8:	681b      	ldr	r3, [r3, #0]
 80246da:	3310      	adds	r3, #16
 80246dc:	613b      	str	r3, [r7, #16]
        break;
 80246de:	e032      	b.n	8024746 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80246e0:	68fb      	ldr	r3, [r7, #12]
 80246e2:	68db      	ldr	r3, [r3, #12]
 80246e4:	4a3d      	ldr	r2, [pc, #244]	; (80247dc <HAL_DAC_Start_DMA+0x18c>)
 80246e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80246e8:	68fb      	ldr	r3, [r7, #12]
 80246ea:	68db      	ldr	r3, [r3, #12]
 80246ec:	4a3c      	ldr	r2, [pc, #240]	; (80247e0 <HAL_DAC_Start_DMA+0x190>)
 80246ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80246f0:	68fb      	ldr	r3, [r7, #12]
 80246f2:	68db      	ldr	r3, [r3, #12]
 80246f4:	4a3b      	ldr	r2, [pc, #236]	; (80247e4 <HAL_DAC_Start_DMA+0x194>)
 80246f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80246f8:	68fb      	ldr	r3, [r7, #12]
 80246fa:	681b      	ldr	r3, [r3, #0]
 80246fc:	681a      	ldr	r2, [r3, #0]
 80246fe:	68fb      	ldr	r3, [r7, #12]
 8024700:	681b      	ldr	r3, [r3, #0]
 8024702:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8024706:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8024708:	6a3b      	ldr	r3, [r7, #32]
 802470a:	2b08      	cmp	r3, #8
 802470c:	d013      	beq.n	8024736 <HAL_DAC_Start_DMA+0xe6>
 802470e:	6a3b      	ldr	r3, [r7, #32]
 8024710:	2b08      	cmp	r3, #8
 8024712:	d817      	bhi.n	8024744 <HAL_DAC_Start_DMA+0xf4>
 8024714:	6a3b      	ldr	r3, [r7, #32]
 8024716:	2b00      	cmp	r3, #0
 8024718:	d003      	beq.n	8024722 <HAL_DAC_Start_DMA+0xd2>
 802471a:	6a3b      	ldr	r3, [r7, #32]
 802471c:	2b04      	cmp	r3, #4
 802471e:	d005      	beq.n	802472c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8024720:	e010      	b.n	8024744 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8024722:	68fb      	ldr	r3, [r7, #12]
 8024724:	681b      	ldr	r3, [r3, #0]
 8024726:	3314      	adds	r3, #20
 8024728:	613b      	str	r3, [r7, #16]
        break;
 802472a:	e00c      	b.n	8024746 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 802472c:	68fb      	ldr	r3, [r7, #12]
 802472e:	681b      	ldr	r3, [r3, #0]
 8024730:	3318      	adds	r3, #24
 8024732:	613b      	str	r3, [r7, #16]
        break;
 8024734:	e007      	b.n	8024746 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8024736:	68fb      	ldr	r3, [r7, #12]
 8024738:	681b      	ldr	r3, [r3, #0]
 802473a:	331c      	adds	r3, #28
 802473c:	613b      	str	r3, [r7, #16]
        break;
 802473e:	e002      	b.n	8024746 <HAL_DAC_Start_DMA+0xf6>
        break;
 8024740:	bf00      	nop
 8024742:	e000      	b.n	8024746 <HAL_DAC_Start_DMA+0xf6>
        break;
 8024744:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8024746:	68bb      	ldr	r3, [r7, #8]
 8024748:	2b00      	cmp	r3, #0
 802474a:	d111      	bne.n	8024770 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 802474c:	68fb      	ldr	r3, [r7, #12]
 802474e:	681b      	ldr	r3, [r3, #0]
 8024750:	681a      	ldr	r2, [r3, #0]
 8024752:	68fb      	ldr	r3, [r7, #12]
 8024754:	681b      	ldr	r3, [r3, #0]
 8024756:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802475a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 802475c:	68fb      	ldr	r3, [r7, #12]
 802475e:	6898      	ldr	r0, [r3, #8]
 8024760:	6879      	ldr	r1, [r7, #4]
 8024762:	683b      	ldr	r3, [r7, #0]
 8024764:	693a      	ldr	r2, [r7, #16]
 8024766:	f000 fb15 	bl	8024d94 <HAL_DMA_Start_IT>
 802476a:	4603      	mov	r3, r0
 802476c:	75fb      	strb	r3, [r7, #23]
 802476e:	e010      	b.n	8024792 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8024770:	68fb      	ldr	r3, [r7, #12]
 8024772:	681b      	ldr	r3, [r3, #0]
 8024774:	681a      	ldr	r2, [r3, #0]
 8024776:	68fb      	ldr	r3, [r7, #12]
 8024778:	681b      	ldr	r3, [r3, #0]
 802477a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 802477e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8024780:	68fb      	ldr	r3, [r7, #12]
 8024782:	68d8      	ldr	r0, [r3, #12]
 8024784:	6879      	ldr	r1, [r7, #4]
 8024786:	683b      	ldr	r3, [r7, #0]
 8024788:	693a      	ldr	r2, [r7, #16]
 802478a:	f000 fb03 	bl	8024d94 <HAL_DMA_Start_IT>
 802478e:	4603      	mov	r3, r0
 8024790:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8024792:	68fb      	ldr	r3, [r7, #12]
 8024794:	2200      	movs	r2, #0
 8024796:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8024798:	7dfb      	ldrb	r3, [r7, #23]
 802479a:	2b00      	cmp	r3, #0
 802479c:	d10c      	bne.n	80247b8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 802479e:	68fb      	ldr	r3, [r7, #12]
 80247a0:	681b      	ldr	r3, [r3, #0]
 80247a2:	6819      	ldr	r1, [r3, #0]
 80247a4:	68bb      	ldr	r3, [r7, #8]
 80247a6:	f003 0310 	and.w	r3, r3, #16
 80247aa:	2201      	movs	r2, #1
 80247ac:	409a      	lsls	r2, r3
 80247ae:	68fb      	ldr	r3, [r7, #12]
 80247b0:	681b      	ldr	r3, [r3, #0]
 80247b2:	430a      	orrs	r2, r1
 80247b4:	601a      	str	r2, [r3, #0]
 80247b6:	e005      	b.n	80247c4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80247b8:	68fb      	ldr	r3, [r7, #12]
 80247ba:	691b      	ldr	r3, [r3, #16]
 80247bc:	f043 0204 	orr.w	r2, r3, #4
 80247c0:	68fb      	ldr	r3, [r7, #12]
 80247c2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80247c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80247c6:	4618      	mov	r0, r3
 80247c8:	3718      	adds	r7, #24
 80247ca:	46bd      	mov	sp, r7
 80247cc:	bd80      	pop	{r7, pc}
 80247ce:	bf00      	nop
 80247d0:	08024b31 	.word	0x08024b31
 80247d4:	08024b53 	.word	0x08024b53
 80247d8:	08024b6f 	.word	0x08024b6f
 80247dc:	08024bd9 	.word	0x08024bd9
 80247e0:	08024bfb 	.word	0x08024bfb
 80247e4:	08024c17 	.word	0x08024c17

080247e8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80247e8:	b580      	push	{r7, lr}
 80247ea:	b082      	sub	sp, #8
 80247ec:	af00      	add	r7, sp, #0
 80247ee:	6078      	str	r0, [r7, #4]
 80247f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	681b      	ldr	r3, [r3, #0]
 80247f6:	6819      	ldr	r1, [r3, #0]
 80247f8:	683b      	ldr	r3, [r7, #0]
 80247fa:	f003 0310 	and.w	r3, r3, #16
 80247fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8024802:	fa02 f303 	lsl.w	r3, r2, r3
 8024806:	43da      	mvns	r2, r3
 8024808:	687b      	ldr	r3, [r7, #4]
 802480a:	681b      	ldr	r3, [r3, #0]
 802480c:	400a      	ands	r2, r1
 802480e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8024810:	687b      	ldr	r3, [r7, #4]
 8024812:	681b      	ldr	r3, [r3, #0]
 8024814:	6819      	ldr	r1, [r3, #0]
 8024816:	683b      	ldr	r3, [r7, #0]
 8024818:	f003 0310 	and.w	r3, r3, #16
 802481c:	2201      	movs	r2, #1
 802481e:	fa02 f303 	lsl.w	r3, r2, r3
 8024822:	43da      	mvns	r2, r3
 8024824:	687b      	ldr	r3, [r7, #4]
 8024826:	681b      	ldr	r3, [r3, #0]
 8024828:	400a      	ands	r2, r1
 802482a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 802482c:	683b      	ldr	r3, [r7, #0]
 802482e:	2b00      	cmp	r3, #0
 8024830:	d10d      	bne.n	802484e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8024832:	687b      	ldr	r3, [r7, #4]
 8024834:	689b      	ldr	r3, [r3, #8]
 8024836:	4618      	mov	r0, r3
 8024838:	f000 fb27 	bl	8024e8a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	681b      	ldr	r3, [r3, #0]
 8024840:	681a      	ldr	r2, [r3, #0]
 8024842:	687b      	ldr	r3, [r7, #4]
 8024844:	681b      	ldr	r3, [r3, #0]
 8024846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802484a:	601a      	str	r2, [r3, #0]
 802484c:	e00c      	b.n	8024868 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 802484e:	687b      	ldr	r3, [r7, #4]
 8024850:	68db      	ldr	r3, [r3, #12]
 8024852:	4618      	mov	r0, r3
 8024854:	f000 fb19 	bl	8024e8a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8024858:	687b      	ldr	r3, [r7, #4]
 802485a:	681b      	ldr	r3, [r3, #0]
 802485c:	681a      	ldr	r2, [r3, #0]
 802485e:	687b      	ldr	r3, [r7, #4]
 8024860:	681b      	ldr	r3, [r3, #0]
 8024862:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8024866:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8024868:	2300      	movs	r3, #0
}
 802486a:	4618      	mov	r0, r3
 802486c:	3708      	adds	r7, #8
 802486e:	46bd      	mov	sp, r7
 8024870:	bd80      	pop	{r7, pc}

08024872 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8024872:	b480      	push	{r7}
 8024874:	b083      	sub	sp, #12
 8024876:	af00      	add	r7, sp, #0
 8024878:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 802487a:	bf00      	nop
 802487c:	370c      	adds	r7, #12
 802487e:	46bd      	mov	sp, r7
 8024880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024884:	4770      	bx	lr

08024886 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8024886:	b480      	push	{r7}
 8024888:	b083      	sub	sp, #12
 802488a:	af00      	add	r7, sp, #0
 802488c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 802488e:	bf00      	nop
 8024890:	370c      	adds	r7, #12
 8024892:	46bd      	mov	sp, r7
 8024894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024898:	4770      	bx	lr

0802489a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 802489a:	b480      	push	{r7}
 802489c:	b083      	sub	sp, #12
 802489e:	af00      	add	r7, sp, #0
 80248a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80248a2:	bf00      	nop
 80248a4:	370c      	adds	r7, #12
 80248a6:	46bd      	mov	sp, r7
 80248a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248ac:	4770      	bx	lr
	...

080248b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80248b0:	b580      	push	{r7, lr}
 80248b2:	b088      	sub	sp, #32
 80248b4:	af00      	add	r7, sp, #0
 80248b6:	60f8      	str	r0, [r7, #12]
 80248b8:	60b9      	str	r1, [r7, #8]
 80248ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80248bc:	2300      	movs	r3, #0
 80248be:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80248c0:	68fb      	ldr	r3, [r7, #12]
 80248c2:	795b      	ldrb	r3, [r3, #5]
 80248c4:	2b01      	cmp	r3, #1
 80248c6:	d101      	bne.n	80248cc <HAL_DAC_ConfigChannel+0x1c>
 80248c8:	2302      	movs	r3, #2
 80248ca:	e12a      	b.n	8024b22 <HAL_DAC_ConfigChannel+0x272>
 80248cc:	68fb      	ldr	r3, [r7, #12]
 80248ce:	2201      	movs	r2, #1
 80248d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80248d2:	68fb      	ldr	r3, [r7, #12]
 80248d4:	2202      	movs	r2, #2
 80248d6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80248d8:	68bb      	ldr	r3, [r7, #8]
 80248da:	685b      	ldr	r3, [r3, #4]
 80248dc:	2b04      	cmp	r3, #4
 80248de:	d174      	bne.n	80249ca <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80248e0:	f7ff fd00 	bl	80242e4 <HAL_GetTick>
 80248e4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80248e6:	687b      	ldr	r3, [r7, #4]
 80248e8:	2b00      	cmp	r3, #0
 80248ea:	d134      	bne.n	8024956 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80248ec:	e011      	b.n	8024912 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80248ee:	f7ff fcf9 	bl	80242e4 <HAL_GetTick>
 80248f2:	4602      	mov	r2, r0
 80248f4:	69bb      	ldr	r3, [r7, #24]
 80248f6:	1ad3      	subs	r3, r2, r3
 80248f8:	2b01      	cmp	r3, #1
 80248fa:	d90a      	bls.n	8024912 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80248fc:	68fb      	ldr	r3, [r7, #12]
 80248fe:	691b      	ldr	r3, [r3, #16]
 8024900:	f043 0208 	orr.w	r2, r3, #8
 8024904:	68fb      	ldr	r3, [r7, #12]
 8024906:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8024908:	68fb      	ldr	r3, [r7, #12]
 802490a:	2203      	movs	r2, #3
 802490c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802490e:	2303      	movs	r3, #3
 8024910:	e107      	b.n	8024b22 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8024912:	68fb      	ldr	r3, [r7, #12]
 8024914:	681b      	ldr	r3, [r3, #0]
 8024916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802491c:	2b00      	cmp	r3, #0
 802491e:	d1e6      	bne.n	80248ee <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8024920:	2001      	movs	r0, #1
 8024922:	f7ff fceb 	bl	80242fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8024926:	68fb      	ldr	r3, [r7, #12]
 8024928:	681b      	ldr	r3, [r3, #0]
 802492a:	68ba      	ldr	r2, [r7, #8]
 802492c:	69d2      	ldr	r2, [r2, #28]
 802492e:	641a      	str	r2, [r3, #64]	; 0x40
 8024930:	e01e      	b.n	8024970 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8024932:	f7ff fcd7 	bl	80242e4 <HAL_GetTick>
 8024936:	4602      	mov	r2, r0
 8024938:	69bb      	ldr	r3, [r7, #24]
 802493a:	1ad3      	subs	r3, r2, r3
 802493c:	2b01      	cmp	r3, #1
 802493e:	d90a      	bls.n	8024956 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	691b      	ldr	r3, [r3, #16]
 8024944:	f043 0208 	orr.w	r2, r3, #8
 8024948:	68fb      	ldr	r3, [r7, #12]
 802494a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802494c:	68fb      	ldr	r3, [r7, #12]
 802494e:	2203      	movs	r2, #3
 8024950:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8024952:	2303      	movs	r3, #3
 8024954:	e0e5      	b.n	8024b22 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8024956:	68fb      	ldr	r3, [r7, #12]
 8024958:	681b      	ldr	r3, [r3, #0]
 802495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802495c:	2b00      	cmp	r3, #0
 802495e:	dbe8      	blt.n	8024932 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8024960:	2001      	movs	r0, #1
 8024962:	f7ff fccb 	bl	80242fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8024966:	68fb      	ldr	r3, [r7, #12]
 8024968:	681b      	ldr	r3, [r3, #0]
 802496a:	68ba      	ldr	r2, [r7, #8]
 802496c:	69d2      	ldr	r2, [r2, #28]
 802496e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8024970:	68fb      	ldr	r3, [r7, #12]
 8024972:	681b      	ldr	r3, [r3, #0]
 8024974:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	f003 0310 	and.w	r3, r3, #16
 802497c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8024980:	fa01 f303 	lsl.w	r3, r1, r3
 8024984:	43db      	mvns	r3, r3
 8024986:	ea02 0103 	and.w	r1, r2, r3
 802498a:	68bb      	ldr	r3, [r7, #8]
 802498c:	6a1a      	ldr	r2, [r3, #32]
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	f003 0310 	and.w	r3, r3, #16
 8024994:	409a      	lsls	r2, r3
 8024996:	68fb      	ldr	r3, [r7, #12]
 8024998:	681b      	ldr	r3, [r3, #0]
 802499a:	430a      	orrs	r2, r1
 802499c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 802499e:	68fb      	ldr	r3, [r7, #12]
 80249a0:	681b      	ldr	r3, [r3, #0]
 80249a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80249a4:	687b      	ldr	r3, [r7, #4]
 80249a6:	f003 0310 	and.w	r3, r3, #16
 80249aa:	21ff      	movs	r1, #255	; 0xff
 80249ac:	fa01 f303 	lsl.w	r3, r1, r3
 80249b0:	43db      	mvns	r3, r3
 80249b2:	ea02 0103 	and.w	r1, r2, r3
 80249b6:	68bb      	ldr	r3, [r7, #8]
 80249b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80249ba:	687b      	ldr	r3, [r7, #4]
 80249bc:	f003 0310 	and.w	r3, r3, #16
 80249c0:	409a      	lsls	r2, r3
 80249c2:	68fb      	ldr	r3, [r7, #12]
 80249c4:	681b      	ldr	r3, [r3, #0]
 80249c6:	430a      	orrs	r2, r1
 80249c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80249ca:	68bb      	ldr	r3, [r7, #8]
 80249cc:	695b      	ldr	r3, [r3, #20]
 80249ce:	2b01      	cmp	r3, #1
 80249d0:	d11d      	bne.n	8024a0e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80249d2:	68fb      	ldr	r3, [r7, #12]
 80249d4:	681b      	ldr	r3, [r3, #0]
 80249d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80249d8:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	f003 0310 	and.w	r3, r3, #16
 80249e0:	221f      	movs	r2, #31
 80249e2:	fa02 f303 	lsl.w	r3, r2, r3
 80249e6:	43db      	mvns	r3, r3
 80249e8:	69fa      	ldr	r2, [r7, #28]
 80249ea:	4013      	ands	r3, r2
 80249ec:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80249ee:	68bb      	ldr	r3, [r7, #8]
 80249f0:	699b      	ldr	r3, [r3, #24]
 80249f2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80249f4:	687b      	ldr	r3, [r7, #4]
 80249f6:	f003 0310 	and.w	r3, r3, #16
 80249fa:	697a      	ldr	r2, [r7, #20]
 80249fc:	fa02 f303 	lsl.w	r3, r2, r3
 8024a00:	69fa      	ldr	r2, [r7, #28]
 8024a02:	4313      	orrs	r3, r2
 8024a04:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8024a06:	68fb      	ldr	r3, [r7, #12]
 8024a08:	681b      	ldr	r3, [r3, #0]
 8024a0a:	69fa      	ldr	r2, [r7, #28]
 8024a0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8024a0e:	68fb      	ldr	r3, [r7, #12]
 8024a10:	681b      	ldr	r3, [r3, #0]
 8024a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024a14:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8024a16:	687b      	ldr	r3, [r7, #4]
 8024a18:	f003 0310 	and.w	r3, r3, #16
 8024a1c:	2207      	movs	r2, #7
 8024a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8024a22:	43db      	mvns	r3, r3
 8024a24:	69fa      	ldr	r2, [r7, #28]
 8024a26:	4013      	ands	r3, r2
 8024a28:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8024a2a:	68bb      	ldr	r3, [r7, #8]
 8024a2c:	685a      	ldr	r2, [r3, #4]
 8024a2e:	68bb      	ldr	r3, [r7, #8]
 8024a30:	68db      	ldr	r3, [r3, #12]
 8024a32:	431a      	orrs	r2, r3
 8024a34:	68bb      	ldr	r3, [r7, #8]
 8024a36:	691b      	ldr	r3, [r3, #16]
 8024a38:	4313      	orrs	r3, r2
 8024a3a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8024a3c:	687b      	ldr	r3, [r7, #4]
 8024a3e:	f003 0310 	and.w	r3, r3, #16
 8024a42:	697a      	ldr	r2, [r7, #20]
 8024a44:	fa02 f303 	lsl.w	r3, r2, r3
 8024a48:	69fa      	ldr	r2, [r7, #28]
 8024a4a:	4313      	orrs	r3, r2
 8024a4c:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8024a4e:	68fb      	ldr	r3, [r7, #12]
 8024a50:	681b      	ldr	r3, [r3, #0]
 8024a52:	69fa      	ldr	r2, [r7, #28]
 8024a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8024a56:	68fb      	ldr	r3, [r7, #12]
 8024a58:	681b      	ldr	r3, [r3, #0]
 8024a5a:	6819      	ldr	r1, [r3, #0]
 8024a5c:	687b      	ldr	r3, [r7, #4]
 8024a5e:	f003 0310 	and.w	r3, r3, #16
 8024a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8024a66:	fa02 f303 	lsl.w	r3, r2, r3
 8024a6a:	43da      	mvns	r2, r3
 8024a6c:	68fb      	ldr	r3, [r7, #12]
 8024a6e:	681b      	ldr	r3, [r3, #0]
 8024a70:	400a      	ands	r2, r1
 8024a72:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8024a74:	68fb      	ldr	r3, [r7, #12]
 8024a76:	681b      	ldr	r3, [r3, #0]
 8024a78:	681b      	ldr	r3, [r3, #0]
 8024a7a:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8024a7c:	687b      	ldr	r3, [r7, #4]
 8024a7e:	f003 0310 	and.w	r3, r3, #16
 8024a82:	f640 72fe 	movw	r2, #4094	; 0xffe
 8024a86:	fa02 f303 	lsl.w	r3, r2, r3
 8024a8a:	43db      	mvns	r3, r3
 8024a8c:	69fa      	ldr	r2, [r7, #28]
 8024a8e:	4013      	ands	r3, r2
 8024a90:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8024a92:	68bb      	ldr	r3, [r7, #8]
 8024a94:	689b      	ldr	r3, [r3, #8]
 8024a96:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	f003 0310 	and.w	r3, r3, #16
 8024a9e:	697a      	ldr	r2, [r7, #20]
 8024aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8024aa4:	69fa      	ldr	r2, [r7, #28]
 8024aa6:	4313      	orrs	r3, r2
 8024aa8:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8024aaa:	68bb      	ldr	r3, [r7, #8]
 8024aac:	681b      	ldr	r3, [r3, #0]
 8024aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024ab2:	d104      	bne.n	8024abe <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8024ab4:	69fb      	ldr	r3, [r7, #28]
 8024ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024aba:	61fb      	str	r3, [r7, #28]
 8024abc:	e018      	b.n	8024af0 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8024abe:	68bb      	ldr	r3, [r7, #8]
 8024ac0:	681b      	ldr	r3, [r3, #0]
 8024ac2:	2b00      	cmp	r3, #0
 8024ac4:	d104      	bne.n	8024ad0 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8024ac6:	69fb      	ldr	r3, [r7, #28]
 8024ac8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8024acc:	61fb      	str	r3, [r7, #28]
 8024ace:	e00f      	b.n	8024af0 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8024ad0:	f003 fb6c 	bl	80281ac <HAL_RCC_GetHCLKFreq>
 8024ad4:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8024ad6:	693b      	ldr	r3, [r7, #16]
 8024ad8:	4a14      	ldr	r2, [pc, #80]	; (8024b2c <HAL_DAC_ConfigChannel+0x27c>)
 8024ada:	4293      	cmp	r3, r2
 8024adc:	d904      	bls.n	8024ae8 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8024ade:	69fb      	ldr	r3, [r7, #28]
 8024ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024ae4:	61fb      	str	r3, [r7, #28]
 8024ae6:	e003      	b.n	8024af0 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8024ae8:	69fb      	ldr	r3, [r7, #28]
 8024aea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8024aee:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8024af0:	68fb      	ldr	r3, [r7, #12]
 8024af2:	681b      	ldr	r3, [r3, #0]
 8024af4:	69fa      	ldr	r2, [r7, #28]
 8024af6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8024af8:	68fb      	ldr	r3, [r7, #12]
 8024afa:	681b      	ldr	r3, [r3, #0]
 8024afc:	6819      	ldr	r1, [r3, #0]
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	f003 0310 	and.w	r3, r3, #16
 8024b04:	22c0      	movs	r2, #192	; 0xc0
 8024b06:	fa02 f303 	lsl.w	r3, r2, r3
 8024b0a:	43da      	mvns	r2, r3
 8024b0c:	68fb      	ldr	r3, [r7, #12]
 8024b0e:	681b      	ldr	r3, [r3, #0]
 8024b10:	400a      	ands	r2, r1
 8024b12:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8024b14:	68fb      	ldr	r3, [r7, #12]
 8024b16:	2201      	movs	r2, #1
 8024b18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8024b1a:	68fb      	ldr	r3, [r7, #12]
 8024b1c:	2200      	movs	r2, #0
 8024b1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8024b20:	2300      	movs	r3, #0
}
 8024b22:	4618      	mov	r0, r3
 8024b24:	3720      	adds	r7, #32
 8024b26:	46bd      	mov	sp, r7
 8024b28:	bd80      	pop	{r7, pc}
 8024b2a:	bf00      	nop
 8024b2c:	04c4b400 	.word	0x04c4b400

08024b30 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8024b30:	b580      	push	{r7, lr}
 8024b32:	b084      	sub	sp, #16
 8024b34:	af00      	add	r7, sp, #0
 8024b36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024b38:	687b      	ldr	r3, [r7, #4]
 8024b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024b3c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8024b3e:	68f8      	ldr	r0, [r7, #12]
 8024b40:	f7ff fe97 	bl	8024872 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8024b44:	68fb      	ldr	r3, [r7, #12]
 8024b46:	2201      	movs	r2, #1
 8024b48:	711a      	strb	r2, [r3, #4]
}
 8024b4a:	bf00      	nop
 8024b4c:	3710      	adds	r7, #16
 8024b4e:	46bd      	mov	sp, r7
 8024b50:	bd80      	pop	{r7, pc}

08024b52 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8024b52:	b580      	push	{r7, lr}
 8024b54:	b084      	sub	sp, #16
 8024b56:	af00      	add	r7, sp, #0
 8024b58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024b5a:	687b      	ldr	r3, [r7, #4]
 8024b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024b5e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8024b60:	68f8      	ldr	r0, [r7, #12]
 8024b62:	f7ff fe90 	bl	8024886 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8024b66:	bf00      	nop
 8024b68:	3710      	adds	r7, #16
 8024b6a:	46bd      	mov	sp, r7
 8024b6c:	bd80      	pop	{r7, pc}

08024b6e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8024b6e:	b580      	push	{r7, lr}
 8024b70:	b084      	sub	sp, #16
 8024b72:	af00      	add	r7, sp, #0
 8024b74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024b76:	687b      	ldr	r3, [r7, #4]
 8024b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024b7a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8024b7c:	68fb      	ldr	r3, [r7, #12]
 8024b7e:	691b      	ldr	r3, [r3, #16]
 8024b80:	f043 0204 	orr.w	r2, r3, #4
 8024b84:	68fb      	ldr	r3, [r7, #12]
 8024b86:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8024b88:	68f8      	ldr	r0, [r7, #12]
 8024b8a:	f7ff fe86 	bl	802489a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8024b8e:	68fb      	ldr	r3, [r7, #12]
 8024b90:	2201      	movs	r2, #1
 8024b92:	711a      	strb	r2, [r3, #4]
}
 8024b94:	bf00      	nop
 8024b96:	3710      	adds	r7, #16
 8024b98:	46bd      	mov	sp, r7
 8024b9a:	bd80      	pop	{r7, pc}

08024b9c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8024b9c:	b480      	push	{r7}
 8024b9e:	b083      	sub	sp, #12
 8024ba0:	af00      	add	r7, sp, #0
 8024ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8024ba4:	bf00      	nop
 8024ba6:	370c      	adds	r7, #12
 8024ba8:	46bd      	mov	sp, r7
 8024baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bae:	4770      	bx	lr

08024bb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8024bb0:	b480      	push	{r7}
 8024bb2:	b083      	sub	sp, #12
 8024bb4:	af00      	add	r7, sp, #0
 8024bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8024bb8:	bf00      	nop
 8024bba:	370c      	adds	r7, #12
 8024bbc:	46bd      	mov	sp, r7
 8024bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bc2:	4770      	bx	lr

08024bc4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8024bc4:	b480      	push	{r7}
 8024bc6:	b083      	sub	sp, #12
 8024bc8:	af00      	add	r7, sp, #0
 8024bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8024bcc:	bf00      	nop
 8024bce:	370c      	adds	r7, #12
 8024bd0:	46bd      	mov	sp, r7
 8024bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bd6:	4770      	bx	lr

08024bd8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8024bd8:	b580      	push	{r7, lr}
 8024bda:	b084      	sub	sp, #16
 8024bdc:	af00      	add	r7, sp, #0
 8024bde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024be0:	687b      	ldr	r3, [r7, #4]
 8024be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024be4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8024be6:	68f8      	ldr	r0, [r7, #12]
 8024be8:	f7ff ffd8 	bl	8024b9c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8024bec:	68fb      	ldr	r3, [r7, #12]
 8024bee:	2201      	movs	r2, #1
 8024bf0:	711a      	strb	r2, [r3, #4]
}
 8024bf2:	bf00      	nop
 8024bf4:	3710      	adds	r7, #16
 8024bf6:	46bd      	mov	sp, r7
 8024bf8:	bd80      	pop	{r7, pc}

08024bfa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8024bfa:	b580      	push	{r7, lr}
 8024bfc:	b084      	sub	sp, #16
 8024bfe:	af00      	add	r7, sp, #0
 8024c00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024c02:	687b      	ldr	r3, [r7, #4]
 8024c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c06:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8024c08:	68f8      	ldr	r0, [r7, #12]
 8024c0a:	f7ff ffd1 	bl	8024bb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8024c0e:	bf00      	nop
 8024c10:	3710      	adds	r7, #16
 8024c12:	46bd      	mov	sp, r7
 8024c14:	bd80      	pop	{r7, pc}

08024c16 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8024c16:	b580      	push	{r7, lr}
 8024c18:	b084      	sub	sp, #16
 8024c1a:	af00      	add	r7, sp, #0
 8024c1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024c1e:	687b      	ldr	r3, [r7, #4]
 8024c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c22:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8024c24:	68fb      	ldr	r3, [r7, #12]
 8024c26:	691b      	ldr	r3, [r3, #16]
 8024c28:	f043 0204 	orr.w	r2, r3, #4
 8024c2c:	68fb      	ldr	r3, [r7, #12]
 8024c2e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8024c30:	68f8      	ldr	r0, [r7, #12]
 8024c32:	f7ff ffc7 	bl	8024bc4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8024c36:	68fb      	ldr	r3, [r7, #12]
 8024c38:	2201      	movs	r2, #1
 8024c3a:	711a      	strb	r2, [r3, #4]
}
 8024c3c:	bf00      	nop
 8024c3e:	3710      	adds	r7, #16
 8024c40:	46bd      	mov	sp, r7
 8024c42:	bd80      	pop	{r7, pc}

08024c44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8024c44:	b580      	push	{r7, lr}
 8024c46:	b084      	sub	sp, #16
 8024c48:	af00      	add	r7, sp, #0
 8024c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8024c4c:	687b      	ldr	r3, [r7, #4]
 8024c4e:	2b00      	cmp	r3, #0
 8024c50:	d101      	bne.n	8024c56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8024c52:	2301      	movs	r3, #1
 8024c54:	e08d      	b.n	8024d72 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8024c56:	687b      	ldr	r3, [r7, #4]
 8024c58:	681b      	ldr	r3, [r3, #0]
 8024c5a:	461a      	mov	r2, r3
 8024c5c:	4b47      	ldr	r3, [pc, #284]	; (8024d7c <HAL_DMA_Init+0x138>)
 8024c5e:	429a      	cmp	r2, r3
 8024c60:	d80f      	bhi.n	8024c82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8024c62:	687b      	ldr	r3, [r7, #4]
 8024c64:	681b      	ldr	r3, [r3, #0]
 8024c66:	461a      	mov	r2, r3
 8024c68:	4b45      	ldr	r3, [pc, #276]	; (8024d80 <HAL_DMA_Init+0x13c>)
 8024c6a:	4413      	add	r3, r2
 8024c6c:	4a45      	ldr	r2, [pc, #276]	; (8024d84 <HAL_DMA_Init+0x140>)
 8024c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8024c72:	091b      	lsrs	r3, r3, #4
 8024c74:	009a      	lsls	r2, r3, #2
 8024c76:	687b      	ldr	r3, [r7, #4]
 8024c78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8024c7a:	687b      	ldr	r3, [r7, #4]
 8024c7c:	4a42      	ldr	r2, [pc, #264]	; (8024d88 <HAL_DMA_Init+0x144>)
 8024c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8024c80:	e00e      	b.n	8024ca0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8024c82:	687b      	ldr	r3, [r7, #4]
 8024c84:	681b      	ldr	r3, [r3, #0]
 8024c86:	461a      	mov	r2, r3
 8024c88:	4b40      	ldr	r3, [pc, #256]	; (8024d8c <HAL_DMA_Init+0x148>)
 8024c8a:	4413      	add	r3, r2
 8024c8c:	4a3d      	ldr	r2, [pc, #244]	; (8024d84 <HAL_DMA_Init+0x140>)
 8024c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8024c92:	091b      	lsrs	r3, r3, #4
 8024c94:	009a      	lsls	r2, r3, #2
 8024c96:	687b      	ldr	r3, [r7, #4]
 8024c98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8024c9a:	687b      	ldr	r3, [r7, #4]
 8024c9c:	4a3c      	ldr	r2, [pc, #240]	; (8024d90 <HAL_DMA_Init+0x14c>)
 8024c9e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8024ca0:	687b      	ldr	r3, [r7, #4]
 8024ca2:	2202      	movs	r2, #2
 8024ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8024ca8:	687b      	ldr	r3, [r7, #4]
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	681b      	ldr	r3, [r3, #0]
 8024cae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8024cb0:	68fb      	ldr	r3, [r7, #12]
 8024cb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8024cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024cba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8024cc0:	687b      	ldr	r3, [r7, #4]
 8024cc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8024cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8024cc6:	687b      	ldr	r3, [r7, #4]
 8024cc8:	691b      	ldr	r3, [r3, #16]
 8024cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8024ccc:	687b      	ldr	r3, [r7, #4]
 8024cce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8024cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8024cd2:	687b      	ldr	r3, [r7, #4]
 8024cd4:	699b      	ldr	r3, [r3, #24]
 8024cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8024cd8:	687b      	ldr	r3, [r7, #4]
 8024cda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8024cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8024cde:	687b      	ldr	r3, [r7, #4]
 8024ce0:	6a1b      	ldr	r3, [r3, #32]
 8024ce2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8024ce4:	68fa      	ldr	r2, [r7, #12]
 8024ce6:	4313      	orrs	r3, r2
 8024ce8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	681b      	ldr	r3, [r3, #0]
 8024cee:	68fa      	ldr	r2, [r7, #12]
 8024cf0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8024cf2:	6878      	ldr	r0, [r7, #4]
 8024cf4:	f000 fa12 	bl	802511c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8024cf8:	687b      	ldr	r3, [r7, #4]
 8024cfa:	689b      	ldr	r3, [r3, #8]
 8024cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8024d00:	d102      	bne.n	8024d08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8024d02:	687b      	ldr	r3, [r7, #4]
 8024d04:	2200      	movs	r2, #0
 8024d06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8024d08:	687b      	ldr	r3, [r7, #4]
 8024d0a:	685a      	ldr	r2, [r3, #4]
 8024d0c:	687b      	ldr	r3, [r7, #4]
 8024d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024d10:	b2d2      	uxtb	r2, r2
 8024d12:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8024d14:	687b      	ldr	r3, [r7, #4]
 8024d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024d18:	687a      	ldr	r2, [r7, #4]
 8024d1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8024d1c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8024d1e:	687b      	ldr	r3, [r7, #4]
 8024d20:	685b      	ldr	r3, [r3, #4]
 8024d22:	2b00      	cmp	r3, #0
 8024d24:	d010      	beq.n	8024d48 <HAL_DMA_Init+0x104>
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	685b      	ldr	r3, [r3, #4]
 8024d2a:	2b04      	cmp	r3, #4
 8024d2c:	d80c      	bhi.n	8024d48 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8024d2e:	6878      	ldr	r0, [r7, #4]
 8024d30:	f000 fa32 	bl	8025198 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8024d34:	687b      	ldr	r3, [r7, #4]
 8024d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024d38:	2200      	movs	r2, #0
 8024d3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8024d3c:	687b      	ldr	r3, [r7, #4]
 8024d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024d40:	687a      	ldr	r2, [r7, #4]
 8024d42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8024d44:	605a      	str	r2, [r3, #4]
 8024d46:	e008      	b.n	8024d5a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8024d48:	687b      	ldr	r3, [r7, #4]
 8024d4a:	2200      	movs	r2, #0
 8024d4c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8024d4e:	687b      	ldr	r3, [r7, #4]
 8024d50:	2200      	movs	r2, #0
 8024d52:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8024d54:	687b      	ldr	r3, [r7, #4]
 8024d56:	2200      	movs	r2, #0
 8024d58:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8024d5a:	687b      	ldr	r3, [r7, #4]
 8024d5c:	2200      	movs	r2, #0
 8024d5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	2201      	movs	r2, #1
 8024d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8024d68:	687b      	ldr	r3, [r7, #4]
 8024d6a:	2200      	movs	r2, #0
 8024d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8024d70:	2300      	movs	r3, #0
}
 8024d72:	4618      	mov	r0, r3
 8024d74:	3710      	adds	r7, #16
 8024d76:	46bd      	mov	sp, r7
 8024d78:	bd80      	pop	{r7, pc}
 8024d7a:	bf00      	nop
 8024d7c:	40020407 	.word	0x40020407
 8024d80:	bffdfff8 	.word	0xbffdfff8
 8024d84:	cccccccd 	.word	0xcccccccd
 8024d88:	40020000 	.word	0x40020000
 8024d8c:	bffdfbf8 	.word	0xbffdfbf8
 8024d90:	40020400 	.word	0x40020400

08024d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8024d94:	b580      	push	{r7, lr}
 8024d96:	b086      	sub	sp, #24
 8024d98:	af00      	add	r7, sp, #0
 8024d9a:	60f8      	str	r0, [r7, #12]
 8024d9c:	60b9      	str	r1, [r7, #8]
 8024d9e:	607a      	str	r2, [r7, #4]
 8024da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8024da2:	2300      	movs	r3, #0
 8024da4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8024da6:	68fb      	ldr	r3, [r7, #12]
 8024da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8024dac:	2b01      	cmp	r3, #1
 8024dae:	d101      	bne.n	8024db4 <HAL_DMA_Start_IT+0x20>
 8024db0:	2302      	movs	r3, #2
 8024db2:	e066      	b.n	8024e82 <HAL_DMA_Start_IT+0xee>
 8024db4:	68fb      	ldr	r3, [r7, #12]
 8024db6:	2201      	movs	r2, #1
 8024db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8024dbc:	68fb      	ldr	r3, [r7, #12]
 8024dbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8024dc2:	b2db      	uxtb	r3, r3
 8024dc4:	2b01      	cmp	r3, #1
 8024dc6:	d155      	bne.n	8024e74 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8024dc8:	68fb      	ldr	r3, [r7, #12]
 8024dca:	2202      	movs	r2, #2
 8024dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8024dd0:	68fb      	ldr	r3, [r7, #12]
 8024dd2:	2200      	movs	r2, #0
 8024dd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8024dd6:	68fb      	ldr	r3, [r7, #12]
 8024dd8:	681b      	ldr	r3, [r3, #0]
 8024dda:	681a      	ldr	r2, [r3, #0]
 8024ddc:	68fb      	ldr	r3, [r7, #12]
 8024dde:	681b      	ldr	r3, [r3, #0]
 8024de0:	f022 0201 	bic.w	r2, r2, #1
 8024de4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8024de6:	683b      	ldr	r3, [r7, #0]
 8024de8:	687a      	ldr	r2, [r7, #4]
 8024dea:	68b9      	ldr	r1, [r7, #8]
 8024dec:	68f8      	ldr	r0, [r7, #12]
 8024dee:	f000 f957 	bl	80250a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8024df2:	68fb      	ldr	r3, [r7, #12]
 8024df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024df6:	2b00      	cmp	r3, #0
 8024df8:	d008      	beq.n	8024e0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8024dfa:	68fb      	ldr	r3, [r7, #12]
 8024dfc:	681b      	ldr	r3, [r3, #0]
 8024dfe:	681a      	ldr	r2, [r3, #0]
 8024e00:	68fb      	ldr	r3, [r7, #12]
 8024e02:	681b      	ldr	r3, [r3, #0]
 8024e04:	f042 020e 	orr.w	r2, r2, #14
 8024e08:	601a      	str	r2, [r3, #0]
 8024e0a:	e00f      	b.n	8024e2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8024e0c:	68fb      	ldr	r3, [r7, #12]
 8024e0e:	681b      	ldr	r3, [r3, #0]
 8024e10:	681a      	ldr	r2, [r3, #0]
 8024e12:	68fb      	ldr	r3, [r7, #12]
 8024e14:	681b      	ldr	r3, [r3, #0]
 8024e16:	f022 0204 	bic.w	r2, r2, #4
 8024e1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8024e1c:	68fb      	ldr	r3, [r7, #12]
 8024e1e:	681b      	ldr	r3, [r3, #0]
 8024e20:	681a      	ldr	r2, [r3, #0]
 8024e22:	68fb      	ldr	r3, [r7, #12]
 8024e24:	681b      	ldr	r3, [r3, #0]
 8024e26:	f042 020a 	orr.w	r2, r2, #10
 8024e2a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8024e2c:	68fb      	ldr	r3, [r7, #12]
 8024e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024e30:	681b      	ldr	r3, [r3, #0]
 8024e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024e36:	2b00      	cmp	r3, #0
 8024e38:	d007      	beq.n	8024e4a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8024e3a:	68fb      	ldr	r3, [r7, #12]
 8024e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024e3e:	681a      	ldr	r2, [r3, #0]
 8024e40:	68fb      	ldr	r3, [r7, #12]
 8024e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024e48:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8024e4a:	68fb      	ldr	r3, [r7, #12]
 8024e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024e4e:	2b00      	cmp	r3, #0
 8024e50:	d007      	beq.n	8024e62 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8024e52:	68fb      	ldr	r3, [r7, #12]
 8024e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024e56:	681a      	ldr	r2, [r3, #0]
 8024e58:	68fb      	ldr	r3, [r7, #12]
 8024e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024e60:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8024e62:	68fb      	ldr	r3, [r7, #12]
 8024e64:	681b      	ldr	r3, [r3, #0]
 8024e66:	681a      	ldr	r2, [r3, #0]
 8024e68:	68fb      	ldr	r3, [r7, #12]
 8024e6a:	681b      	ldr	r3, [r3, #0]
 8024e6c:	f042 0201 	orr.w	r2, r2, #1
 8024e70:	601a      	str	r2, [r3, #0]
 8024e72:	e005      	b.n	8024e80 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8024e74:	68fb      	ldr	r3, [r7, #12]
 8024e76:	2200      	movs	r2, #0
 8024e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8024e7c:	2302      	movs	r3, #2
 8024e7e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8024e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8024e82:	4618      	mov	r0, r3
 8024e84:	3718      	adds	r7, #24
 8024e86:	46bd      	mov	sp, r7
 8024e88:	bd80      	pop	{r7, pc}

08024e8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8024e8a:	b480      	push	{r7}
 8024e8c:	b085      	sub	sp, #20
 8024e8e:	af00      	add	r7, sp, #0
 8024e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8024e92:	2300      	movs	r3, #0
 8024e94:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8024e96:	687b      	ldr	r3, [r7, #4]
 8024e98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8024e9c:	b2db      	uxtb	r3, r3
 8024e9e:	2b02      	cmp	r3, #2
 8024ea0:	d008      	beq.n	8024eb4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8024ea2:	687b      	ldr	r3, [r7, #4]
 8024ea4:	2204      	movs	r2, #4
 8024ea6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	2200      	movs	r2, #0
 8024eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8024eb0:	2301      	movs	r3, #1
 8024eb2:	e040      	b.n	8024f36 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8024eb4:	687b      	ldr	r3, [r7, #4]
 8024eb6:	681b      	ldr	r3, [r3, #0]
 8024eb8:	681a      	ldr	r2, [r3, #0]
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	681b      	ldr	r3, [r3, #0]
 8024ebe:	f022 020e 	bic.w	r2, r2, #14
 8024ec2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024ec8:	681a      	ldr	r2, [r3, #0]
 8024eca:	687b      	ldr	r3, [r7, #4]
 8024ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024ed2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8024ed4:	687b      	ldr	r3, [r7, #4]
 8024ed6:	681b      	ldr	r3, [r3, #0]
 8024ed8:	681a      	ldr	r2, [r3, #0]
 8024eda:	687b      	ldr	r3, [r7, #4]
 8024edc:	681b      	ldr	r3, [r3, #0]
 8024ede:	f022 0201 	bic.w	r2, r2, #1
 8024ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8024ee4:	687b      	ldr	r3, [r7, #4]
 8024ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024ee8:	f003 021c 	and.w	r2, r3, #28
 8024eec:	687b      	ldr	r3, [r7, #4]
 8024eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024ef0:	2101      	movs	r1, #1
 8024ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8024ef6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024efc:	687a      	ldr	r2, [r7, #4]
 8024efe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8024f00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8024f02:	687b      	ldr	r3, [r7, #4]
 8024f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f06:	2b00      	cmp	r3, #0
 8024f08:	d00c      	beq.n	8024f24 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8024f0a:	687b      	ldr	r3, [r7, #4]
 8024f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f0e:	681a      	ldr	r2, [r3, #0]
 8024f10:	687b      	ldr	r3, [r7, #4]
 8024f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024f18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8024f1a:	687b      	ldr	r3, [r7, #4]
 8024f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024f1e:	687a      	ldr	r2, [r7, #4]
 8024f20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8024f22:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8024f24:	687b      	ldr	r3, [r7, #4]
 8024f26:	2201      	movs	r2, #1
 8024f28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8024f2c:	687b      	ldr	r3, [r7, #4]
 8024f2e:	2200      	movs	r2, #0
 8024f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8024f34:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8024f36:	4618      	mov	r0, r3
 8024f38:	3714      	adds	r7, #20
 8024f3a:	46bd      	mov	sp, r7
 8024f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f40:	4770      	bx	lr

08024f42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8024f42:	b580      	push	{r7, lr}
 8024f44:	b084      	sub	sp, #16
 8024f46:	af00      	add	r7, sp, #0
 8024f48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8024f4a:	687b      	ldr	r3, [r7, #4]
 8024f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024f4e:	681b      	ldr	r3, [r3, #0]
 8024f50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8024f52:	687b      	ldr	r3, [r7, #4]
 8024f54:	681b      	ldr	r3, [r3, #0]
 8024f56:	681b      	ldr	r3, [r3, #0]
 8024f58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f5e:	f003 031c 	and.w	r3, r3, #28
 8024f62:	2204      	movs	r2, #4
 8024f64:	409a      	lsls	r2, r3
 8024f66:	68fb      	ldr	r3, [r7, #12]
 8024f68:	4013      	ands	r3, r2
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	d026      	beq.n	8024fbc <HAL_DMA_IRQHandler+0x7a>
 8024f6e:	68bb      	ldr	r3, [r7, #8]
 8024f70:	f003 0304 	and.w	r3, r3, #4
 8024f74:	2b00      	cmp	r3, #0
 8024f76:	d021      	beq.n	8024fbc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	681b      	ldr	r3, [r3, #0]
 8024f7c:	681b      	ldr	r3, [r3, #0]
 8024f7e:	f003 0320 	and.w	r3, r3, #32
 8024f82:	2b00      	cmp	r3, #0
 8024f84:	d107      	bne.n	8024f96 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8024f86:	687b      	ldr	r3, [r7, #4]
 8024f88:	681b      	ldr	r3, [r3, #0]
 8024f8a:	681a      	ldr	r2, [r3, #0]
 8024f8c:	687b      	ldr	r3, [r7, #4]
 8024f8e:	681b      	ldr	r3, [r3, #0]
 8024f90:	f022 0204 	bic.w	r2, r2, #4
 8024f94:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8024f96:	687b      	ldr	r3, [r7, #4]
 8024f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f9a:	f003 021c 	and.w	r2, r3, #28
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024fa2:	2104      	movs	r1, #4
 8024fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8024fa8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	d071      	beq.n	8025096 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8024fb2:	687b      	ldr	r3, [r7, #4]
 8024fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024fb6:	6878      	ldr	r0, [r7, #4]
 8024fb8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8024fba:	e06c      	b.n	8025096 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8024fbc:	687b      	ldr	r3, [r7, #4]
 8024fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024fc0:	f003 031c 	and.w	r3, r3, #28
 8024fc4:	2202      	movs	r2, #2
 8024fc6:	409a      	lsls	r2, r3
 8024fc8:	68fb      	ldr	r3, [r7, #12]
 8024fca:	4013      	ands	r3, r2
 8024fcc:	2b00      	cmp	r3, #0
 8024fce:	d02e      	beq.n	802502e <HAL_DMA_IRQHandler+0xec>
 8024fd0:	68bb      	ldr	r3, [r7, #8]
 8024fd2:	f003 0302 	and.w	r3, r3, #2
 8024fd6:	2b00      	cmp	r3, #0
 8024fd8:	d029      	beq.n	802502e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	681b      	ldr	r3, [r3, #0]
 8024fde:	681b      	ldr	r3, [r3, #0]
 8024fe0:	f003 0320 	and.w	r3, r3, #32
 8024fe4:	2b00      	cmp	r3, #0
 8024fe6:	d10b      	bne.n	8025000 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8024fe8:	687b      	ldr	r3, [r7, #4]
 8024fea:	681b      	ldr	r3, [r3, #0]
 8024fec:	681a      	ldr	r2, [r3, #0]
 8024fee:	687b      	ldr	r3, [r7, #4]
 8024ff0:	681b      	ldr	r3, [r3, #0]
 8024ff2:	f022 020a 	bic.w	r2, r2, #10
 8024ff6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	2201      	movs	r2, #1
 8024ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025004:	f003 021c 	and.w	r2, r3, #28
 8025008:	687b      	ldr	r3, [r7, #4]
 802500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802500c:	2102      	movs	r1, #2
 802500e:	fa01 f202 	lsl.w	r2, r1, r2
 8025012:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8025014:	687b      	ldr	r3, [r7, #4]
 8025016:	2200      	movs	r2, #0
 8025018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 802501c:	687b      	ldr	r3, [r7, #4]
 802501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025020:	2b00      	cmp	r3, #0
 8025022:	d038      	beq.n	8025096 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8025024:	687b      	ldr	r3, [r7, #4]
 8025026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025028:	6878      	ldr	r0, [r7, #4]
 802502a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 802502c:	e033      	b.n	8025096 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 802502e:	687b      	ldr	r3, [r7, #4]
 8025030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025032:	f003 031c 	and.w	r3, r3, #28
 8025036:	2208      	movs	r2, #8
 8025038:	409a      	lsls	r2, r3
 802503a:	68fb      	ldr	r3, [r7, #12]
 802503c:	4013      	ands	r3, r2
 802503e:	2b00      	cmp	r3, #0
 8025040:	d02a      	beq.n	8025098 <HAL_DMA_IRQHandler+0x156>
 8025042:	68bb      	ldr	r3, [r7, #8]
 8025044:	f003 0308 	and.w	r3, r3, #8
 8025048:	2b00      	cmp	r3, #0
 802504a:	d025      	beq.n	8025098 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802504c:	687b      	ldr	r3, [r7, #4]
 802504e:	681b      	ldr	r3, [r3, #0]
 8025050:	681a      	ldr	r2, [r3, #0]
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	681b      	ldr	r3, [r3, #0]
 8025056:	f022 020e 	bic.w	r2, r2, #14
 802505a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 802505c:	687b      	ldr	r3, [r7, #4]
 802505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025060:	f003 021c 	and.w	r2, r3, #28
 8025064:	687b      	ldr	r3, [r7, #4]
 8025066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025068:	2101      	movs	r1, #1
 802506a:	fa01 f202 	lsl.w	r2, r1, r2
 802506e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8025070:	687b      	ldr	r3, [r7, #4]
 8025072:	2201      	movs	r2, #1
 8025074:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8025076:	687b      	ldr	r3, [r7, #4]
 8025078:	2201      	movs	r2, #1
 802507a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802507e:	687b      	ldr	r3, [r7, #4]
 8025080:	2200      	movs	r2, #0
 8025082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8025086:	687b      	ldr	r3, [r7, #4]
 8025088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802508a:	2b00      	cmp	r3, #0
 802508c:	d004      	beq.n	8025098 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802508e:	687b      	ldr	r3, [r7, #4]
 8025090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025092:	6878      	ldr	r0, [r7, #4]
 8025094:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8025096:	bf00      	nop
 8025098:	bf00      	nop
}
 802509a:	3710      	adds	r7, #16
 802509c:	46bd      	mov	sp, r7
 802509e:	bd80      	pop	{r7, pc}

080250a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80250a0:	b480      	push	{r7}
 80250a2:	b085      	sub	sp, #20
 80250a4:	af00      	add	r7, sp, #0
 80250a6:	60f8      	str	r0, [r7, #12]
 80250a8:	60b9      	str	r1, [r7, #8]
 80250aa:	607a      	str	r2, [r7, #4]
 80250ac:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80250ae:	68fb      	ldr	r3, [r7, #12]
 80250b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80250b2:	68fa      	ldr	r2, [r7, #12]
 80250b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80250b6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80250b8:	68fb      	ldr	r3, [r7, #12]
 80250ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80250bc:	2b00      	cmp	r3, #0
 80250be:	d004      	beq.n	80250ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80250c0:	68fb      	ldr	r3, [r7, #12]
 80250c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80250c4:	68fa      	ldr	r2, [r7, #12]
 80250c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80250c8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80250ca:	68fb      	ldr	r3, [r7, #12]
 80250cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80250ce:	f003 021c 	and.w	r2, r3, #28
 80250d2:	68fb      	ldr	r3, [r7, #12]
 80250d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80250d6:	2101      	movs	r1, #1
 80250d8:	fa01 f202 	lsl.w	r2, r1, r2
 80250dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80250de:	68fb      	ldr	r3, [r7, #12]
 80250e0:	681b      	ldr	r3, [r3, #0]
 80250e2:	683a      	ldr	r2, [r7, #0]
 80250e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80250e6:	68fb      	ldr	r3, [r7, #12]
 80250e8:	689b      	ldr	r3, [r3, #8]
 80250ea:	2b10      	cmp	r3, #16
 80250ec:	d108      	bne.n	8025100 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80250ee:	68fb      	ldr	r3, [r7, #12]
 80250f0:	681b      	ldr	r3, [r3, #0]
 80250f2:	687a      	ldr	r2, [r7, #4]
 80250f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80250f6:	68fb      	ldr	r3, [r7, #12]
 80250f8:	681b      	ldr	r3, [r3, #0]
 80250fa:	68ba      	ldr	r2, [r7, #8]
 80250fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80250fe:	e007      	b.n	8025110 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8025100:	68fb      	ldr	r3, [r7, #12]
 8025102:	681b      	ldr	r3, [r3, #0]
 8025104:	68ba      	ldr	r2, [r7, #8]
 8025106:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8025108:	68fb      	ldr	r3, [r7, #12]
 802510a:	681b      	ldr	r3, [r3, #0]
 802510c:	687a      	ldr	r2, [r7, #4]
 802510e:	60da      	str	r2, [r3, #12]
}
 8025110:	bf00      	nop
 8025112:	3714      	adds	r7, #20
 8025114:	46bd      	mov	sp, r7
 8025116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802511a:	4770      	bx	lr

0802511c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802511c:	b480      	push	{r7}
 802511e:	b085      	sub	sp, #20
 8025120:	af00      	add	r7, sp, #0
 8025122:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8025124:	687b      	ldr	r3, [r7, #4]
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	461a      	mov	r2, r3
 802512a:	4b17      	ldr	r3, [pc, #92]	; (8025188 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 802512c:	429a      	cmp	r2, r3
 802512e:	d80a      	bhi.n	8025146 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8025130:	687b      	ldr	r3, [r7, #4]
 8025132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025134:	089b      	lsrs	r3, r3, #2
 8025136:	009b      	lsls	r3, r3, #2
 8025138:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802513c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8025140:	687a      	ldr	r2, [r7, #4]
 8025142:	6493      	str	r3, [r2, #72]	; 0x48
 8025144:	e007      	b.n	8025156 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802514a:	089b      	lsrs	r3, r3, #2
 802514c:	009a      	lsls	r2, r3, #2
 802514e:	4b0f      	ldr	r3, [pc, #60]	; (802518c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8025150:	4413      	add	r3, r2
 8025152:	687a      	ldr	r2, [r7, #4]
 8025154:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8025156:	687b      	ldr	r3, [r7, #4]
 8025158:	681b      	ldr	r3, [r3, #0]
 802515a:	b2db      	uxtb	r3, r3
 802515c:	3b08      	subs	r3, #8
 802515e:	4a0c      	ldr	r2, [pc, #48]	; (8025190 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8025160:	fba2 2303 	umull	r2, r3, r2, r3
 8025164:	091b      	lsrs	r3, r3, #4
 8025166:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8025168:	687b      	ldr	r3, [r7, #4]
 802516a:	4a0a      	ldr	r2, [pc, #40]	; (8025194 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 802516c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 802516e:	68fb      	ldr	r3, [r7, #12]
 8025170:	f003 031f 	and.w	r3, r3, #31
 8025174:	2201      	movs	r2, #1
 8025176:	409a      	lsls	r2, r3
 8025178:	687b      	ldr	r3, [r7, #4]
 802517a:	651a      	str	r2, [r3, #80]	; 0x50
}
 802517c:	bf00      	nop
 802517e:	3714      	adds	r7, #20
 8025180:	46bd      	mov	sp, r7
 8025182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025186:	4770      	bx	lr
 8025188:	40020407 	.word	0x40020407
 802518c:	4002081c 	.word	0x4002081c
 8025190:	cccccccd 	.word	0xcccccccd
 8025194:	40020880 	.word	0x40020880

08025198 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8025198:	b480      	push	{r7}
 802519a:	b085      	sub	sp, #20
 802519c:	af00      	add	r7, sp, #0
 802519e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	685b      	ldr	r3, [r3, #4]
 80251a4:	b2db      	uxtb	r3, r3
 80251a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80251a8:	68fa      	ldr	r2, [r7, #12]
 80251aa:	4b0b      	ldr	r3, [pc, #44]	; (80251d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80251ac:	4413      	add	r3, r2
 80251ae:	009b      	lsls	r3, r3, #2
 80251b0:	461a      	mov	r2, r3
 80251b2:	687b      	ldr	r3, [r7, #4]
 80251b4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80251b6:	687b      	ldr	r3, [r7, #4]
 80251b8:	4a08      	ldr	r2, [pc, #32]	; (80251dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80251ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80251bc:	68fb      	ldr	r3, [r7, #12]
 80251be:	3b01      	subs	r3, #1
 80251c0:	f003 0303 	and.w	r3, r3, #3
 80251c4:	2201      	movs	r2, #1
 80251c6:	409a      	lsls	r2, r3
 80251c8:	687b      	ldr	r3, [r7, #4]
 80251ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80251cc:	bf00      	nop
 80251ce:	3714      	adds	r7, #20
 80251d0:	46bd      	mov	sp, r7
 80251d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251d6:	4770      	bx	lr
 80251d8:	1000823f 	.word	0x1000823f
 80251dc:	40020940 	.word	0x40020940

080251e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80251e0:	b480      	push	{r7}
 80251e2:	b087      	sub	sp, #28
 80251e4:	af00      	add	r7, sp, #0
 80251e6:	6078      	str	r0, [r7, #4]
 80251e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80251ea:	2300      	movs	r3, #0
 80251ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80251ee:	e166      	b.n	80254be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80251f0:	683b      	ldr	r3, [r7, #0]
 80251f2:	681a      	ldr	r2, [r3, #0]
 80251f4:	2101      	movs	r1, #1
 80251f6:	697b      	ldr	r3, [r7, #20]
 80251f8:	fa01 f303 	lsl.w	r3, r1, r3
 80251fc:	4013      	ands	r3, r2
 80251fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8025200:	68fb      	ldr	r3, [r7, #12]
 8025202:	2b00      	cmp	r3, #0
 8025204:	f000 8158 	beq.w	80254b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8025208:	683b      	ldr	r3, [r7, #0]
 802520a:	685b      	ldr	r3, [r3, #4]
 802520c:	f003 0303 	and.w	r3, r3, #3
 8025210:	2b01      	cmp	r3, #1
 8025212:	d005      	beq.n	8025220 <HAL_GPIO_Init+0x40>
 8025214:	683b      	ldr	r3, [r7, #0]
 8025216:	685b      	ldr	r3, [r3, #4]
 8025218:	f003 0303 	and.w	r3, r3, #3
 802521c:	2b02      	cmp	r3, #2
 802521e:	d130      	bne.n	8025282 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8025220:	687b      	ldr	r3, [r7, #4]
 8025222:	689b      	ldr	r3, [r3, #8]
 8025224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8025226:	697b      	ldr	r3, [r7, #20]
 8025228:	005b      	lsls	r3, r3, #1
 802522a:	2203      	movs	r2, #3
 802522c:	fa02 f303 	lsl.w	r3, r2, r3
 8025230:	43db      	mvns	r3, r3
 8025232:	693a      	ldr	r2, [r7, #16]
 8025234:	4013      	ands	r3, r2
 8025236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8025238:	683b      	ldr	r3, [r7, #0]
 802523a:	68da      	ldr	r2, [r3, #12]
 802523c:	697b      	ldr	r3, [r7, #20]
 802523e:	005b      	lsls	r3, r3, #1
 8025240:	fa02 f303 	lsl.w	r3, r2, r3
 8025244:	693a      	ldr	r2, [r7, #16]
 8025246:	4313      	orrs	r3, r2
 8025248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 802524a:	687b      	ldr	r3, [r7, #4]
 802524c:	693a      	ldr	r2, [r7, #16]
 802524e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8025250:	687b      	ldr	r3, [r7, #4]
 8025252:	685b      	ldr	r3, [r3, #4]
 8025254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8025256:	2201      	movs	r2, #1
 8025258:	697b      	ldr	r3, [r7, #20]
 802525a:	fa02 f303 	lsl.w	r3, r2, r3
 802525e:	43db      	mvns	r3, r3
 8025260:	693a      	ldr	r2, [r7, #16]
 8025262:	4013      	ands	r3, r2
 8025264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8025266:	683b      	ldr	r3, [r7, #0]
 8025268:	685b      	ldr	r3, [r3, #4]
 802526a:	091b      	lsrs	r3, r3, #4
 802526c:	f003 0201 	and.w	r2, r3, #1
 8025270:	697b      	ldr	r3, [r7, #20]
 8025272:	fa02 f303 	lsl.w	r3, r2, r3
 8025276:	693a      	ldr	r2, [r7, #16]
 8025278:	4313      	orrs	r3, r2
 802527a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	693a      	ldr	r2, [r7, #16]
 8025280:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8025282:	683b      	ldr	r3, [r7, #0]
 8025284:	685b      	ldr	r3, [r3, #4]
 8025286:	f003 0303 	and.w	r3, r3, #3
 802528a:	2b03      	cmp	r3, #3
 802528c:	d017      	beq.n	80252be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 802528e:	687b      	ldr	r3, [r7, #4]
 8025290:	68db      	ldr	r3, [r3, #12]
 8025292:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8025294:	697b      	ldr	r3, [r7, #20]
 8025296:	005b      	lsls	r3, r3, #1
 8025298:	2203      	movs	r2, #3
 802529a:	fa02 f303 	lsl.w	r3, r2, r3
 802529e:	43db      	mvns	r3, r3
 80252a0:	693a      	ldr	r2, [r7, #16]
 80252a2:	4013      	ands	r3, r2
 80252a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80252a6:	683b      	ldr	r3, [r7, #0]
 80252a8:	689a      	ldr	r2, [r3, #8]
 80252aa:	697b      	ldr	r3, [r7, #20]
 80252ac:	005b      	lsls	r3, r3, #1
 80252ae:	fa02 f303 	lsl.w	r3, r2, r3
 80252b2:	693a      	ldr	r2, [r7, #16]
 80252b4:	4313      	orrs	r3, r2
 80252b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80252b8:	687b      	ldr	r3, [r7, #4]
 80252ba:	693a      	ldr	r2, [r7, #16]
 80252bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80252be:	683b      	ldr	r3, [r7, #0]
 80252c0:	685b      	ldr	r3, [r3, #4]
 80252c2:	f003 0303 	and.w	r3, r3, #3
 80252c6:	2b02      	cmp	r3, #2
 80252c8:	d123      	bne.n	8025312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80252ca:	697b      	ldr	r3, [r7, #20]
 80252cc:	08da      	lsrs	r2, r3, #3
 80252ce:	687b      	ldr	r3, [r7, #4]
 80252d0:	3208      	adds	r2, #8
 80252d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80252d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80252d8:	697b      	ldr	r3, [r7, #20]
 80252da:	f003 0307 	and.w	r3, r3, #7
 80252de:	009b      	lsls	r3, r3, #2
 80252e0:	220f      	movs	r2, #15
 80252e2:	fa02 f303 	lsl.w	r3, r2, r3
 80252e6:	43db      	mvns	r3, r3
 80252e8:	693a      	ldr	r2, [r7, #16]
 80252ea:	4013      	ands	r3, r2
 80252ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80252ee:	683b      	ldr	r3, [r7, #0]
 80252f0:	691a      	ldr	r2, [r3, #16]
 80252f2:	697b      	ldr	r3, [r7, #20]
 80252f4:	f003 0307 	and.w	r3, r3, #7
 80252f8:	009b      	lsls	r3, r3, #2
 80252fa:	fa02 f303 	lsl.w	r3, r2, r3
 80252fe:	693a      	ldr	r2, [r7, #16]
 8025300:	4313      	orrs	r3, r2
 8025302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8025304:	697b      	ldr	r3, [r7, #20]
 8025306:	08da      	lsrs	r2, r3, #3
 8025308:	687b      	ldr	r3, [r7, #4]
 802530a:	3208      	adds	r2, #8
 802530c:	6939      	ldr	r1, [r7, #16]
 802530e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8025312:	687b      	ldr	r3, [r7, #4]
 8025314:	681b      	ldr	r3, [r3, #0]
 8025316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8025318:	697b      	ldr	r3, [r7, #20]
 802531a:	005b      	lsls	r3, r3, #1
 802531c:	2203      	movs	r2, #3
 802531e:	fa02 f303 	lsl.w	r3, r2, r3
 8025322:	43db      	mvns	r3, r3
 8025324:	693a      	ldr	r2, [r7, #16]
 8025326:	4013      	ands	r3, r2
 8025328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 802532a:	683b      	ldr	r3, [r7, #0]
 802532c:	685b      	ldr	r3, [r3, #4]
 802532e:	f003 0203 	and.w	r2, r3, #3
 8025332:	697b      	ldr	r3, [r7, #20]
 8025334:	005b      	lsls	r3, r3, #1
 8025336:	fa02 f303 	lsl.w	r3, r2, r3
 802533a:	693a      	ldr	r2, [r7, #16]
 802533c:	4313      	orrs	r3, r2
 802533e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8025340:	687b      	ldr	r3, [r7, #4]
 8025342:	693a      	ldr	r2, [r7, #16]
 8025344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8025346:	683b      	ldr	r3, [r7, #0]
 8025348:	685b      	ldr	r3, [r3, #4]
 802534a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802534e:	2b00      	cmp	r3, #0
 8025350:	f000 80b2 	beq.w	80254b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025354:	4b61      	ldr	r3, [pc, #388]	; (80254dc <HAL_GPIO_Init+0x2fc>)
 8025356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8025358:	4a60      	ldr	r2, [pc, #384]	; (80254dc <HAL_GPIO_Init+0x2fc>)
 802535a:	f043 0301 	orr.w	r3, r3, #1
 802535e:	6613      	str	r3, [r2, #96]	; 0x60
 8025360:	4b5e      	ldr	r3, [pc, #376]	; (80254dc <HAL_GPIO_Init+0x2fc>)
 8025362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8025364:	f003 0301 	and.w	r3, r3, #1
 8025368:	60bb      	str	r3, [r7, #8]
 802536a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 802536c:	4a5c      	ldr	r2, [pc, #368]	; (80254e0 <HAL_GPIO_Init+0x300>)
 802536e:	697b      	ldr	r3, [r7, #20]
 8025370:	089b      	lsrs	r3, r3, #2
 8025372:	3302      	adds	r3, #2
 8025374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 802537a:	697b      	ldr	r3, [r7, #20]
 802537c:	f003 0303 	and.w	r3, r3, #3
 8025380:	009b      	lsls	r3, r3, #2
 8025382:	220f      	movs	r2, #15
 8025384:	fa02 f303 	lsl.w	r3, r2, r3
 8025388:	43db      	mvns	r3, r3
 802538a:	693a      	ldr	r2, [r7, #16]
 802538c:	4013      	ands	r3, r2
 802538e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8025396:	d02b      	beq.n	80253f0 <HAL_GPIO_Init+0x210>
 8025398:	687b      	ldr	r3, [r7, #4]
 802539a:	4a52      	ldr	r2, [pc, #328]	; (80254e4 <HAL_GPIO_Init+0x304>)
 802539c:	4293      	cmp	r3, r2
 802539e:	d025      	beq.n	80253ec <HAL_GPIO_Init+0x20c>
 80253a0:	687b      	ldr	r3, [r7, #4]
 80253a2:	4a51      	ldr	r2, [pc, #324]	; (80254e8 <HAL_GPIO_Init+0x308>)
 80253a4:	4293      	cmp	r3, r2
 80253a6:	d01f      	beq.n	80253e8 <HAL_GPIO_Init+0x208>
 80253a8:	687b      	ldr	r3, [r7, #4]
 80253aa:	4a50      	ldr	r2, [pc, #320]	; (80254ec <HAL_GPIO_Init+0x30c>)
 80253ac:	4293      	cmp	r3, r2
 80253ae:	d019      	beq.n	80253e4 <HAL_GPIO_Init+0x204>
 80253b0:	687b      	ldr	r3, [r7, #4]
 80253b2:	4a4f      	ldr	r2, [pc, #316]	; (80254f0 <HAL_GPIO_Init+0x310>)
 80253b4:	4293      	cmp	r3, r2
 80253b6:	d013      	beq.n	80253e0 <HAL_GPIO_Init+0x200>
 80253b8:	687b      	ldr	r3, [r7, #4]
 80253ba:	4a4e      	ldr	r2, [pc, #312]	; (80254f4 <HAL_GPIO_Init+0x314>)
 80253bc:	4293      	cmp	r3, r2
 80253be:	d00d      	beq.n	80253dc <HAL_GPIO_Init+0x1fc>
 80253c0:	687b      	ldr	r3, [r7, #4]
 80253c2:	4a4d      	ldr	r2, [pc, #308]	; (80254f8 <HAL_GPIO_Init+0x318>)
 80253c4:	4293      	cmp	r3, r2
 80253c6:	d007      	beq.n	80253d8 <HAL_GPIO_Init+0x1f8>
 80253c8:	687b      	ldr	r3, [r7, #4]
 80253ca:	4a4c      	ldr	r2, [pc, #304]	; (80254fc <HAL_GPIO_Init+0x31c>)
 80253cc:	4293      	cmp	r3, r2
 80253ce:	d101      	bne.n	80253d4 <HAL_GPIO_Init+0x1f4>
 80253d0:	2307      	movs	r3, #7
 80253d2:	e00e      	b.n	80253f2 <HAL_GPIO_Init+0x212>
 80253d4:	2308      	movs	r3, #8
 80253d6:	e00c      	b.n	80253f2 <HAL_GPIO_Init+0x212>
 80253d8:	2306      	movs	r3, #6
 80253da:	e00a      	b.n	80253f2 <HAL_GPIO_Init+0x212>
 80253dc:	2305      	movs	r3, #5
 80253de:	e008      	b.n	80253f2 <HAL_GPIO_Init+0x212>
 80253e0:	2304      	movs	r3, #4
 80253e2:	e006      	b.n	80253f2 <HAL_GPIO_Init+0x212>
 80253e4:	2303      	movs	r3, #3
 80253e6:	e004      	b.n	80253f2 <HAL_GPIO_Init+0x212>
 80253e8:	2302      	movs	r3, #2
 80253ea:	e002      	b.n	80253f2 <HAL_GPIO_Init+0x212>
 80253ec:	2301      	movs	r3, #1
 80253ee:	e000      	b.n	80253f2 <HAL_GPIO_Init+0x212>
 80253f0:	2300      	movs	r3, #0
 80253f2:	697a      	ldr	r2, [r7, #20]
 80253f4:	f002 0203 	and.w	r2, r2, #3
 80253f8:	0092      	lsls	r2, r2, #2
 80253fa:	4093      	lsls	r3, r2
 80253fc:	693a      	ldr	r2, [r7, #16]
 80253fe:	4313      	orrs	r3, r2
 8025400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8025402:	4937      	ldr	r1, [pc, #220]	; (80254e0 <HAL_GPIO_Init+0x300>)
 8025404:	697b      	ldr	r3, [r7, #20]
 8025406:	089b      	lsrs	r3, r3, #2
 8025408:	3302      	adds	r3, #2
 802540a:	693a      	ldr	r2, [r7, #16]
 802540c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8025410:	4b3b      	ldr	r3, [pc, #236]	; (8025500 <HAL_GPIO_Init+0x320>)
 8025412:	689b      	ldr	r3, [r3, #8]
 8025414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8025416:	68fb      	ldr	r3, [r7, #12]
 8025418:	43db      	mvns	r3, r3
 802541a:	693a      	ldr	r2, [r7, #16]
 802541c:	4013      	ands	r3, r2
 802541e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8025420:	683b      	ldr	r3, [r7, #0]
 8025422:	685b      	ldr	r3, [r3, #4]
 8025424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025428:	2b00      	cmp	r3, #0
 802542a:	d003      	beq.n	8025434 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 802542c:	693a      	ldr	r2, [r7, #16]
 802542e:	68fb      	ldr	r3, [r7, #12]
 8025430:	4313      	orrs	r3, r2
 8025432:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8025434:	4a32      	ldr	r2, [pc, #200]	; (8025500 <HAL_GPIO_Init+0x320>)
 8025436:	693b      	ldr	r3, [r7, #16]
 8025438:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 802543a:	4b31      	ldr	r3, [pc, #196]	; (8025500 <HAL_GPIO_Init+0x320>)
 802543c:	68db      	ldr	r3, [r3, #12]
 802543e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8025440:	68fb      	ldr	r3, [r7, #12]
 8025442:	43db      	mvns	r3, r3
 8025444:	693a      	ldr	r2, [r7, #16]
 8025446:	4013      	ands	r3, r2
 8025448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 802544a:	683b      	ldr	r3, [r7, #0]
 802544c:	685b      	ldr	r3, [r3, #4]
 802544e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025452:	2b00      	cmp	r3, #0
 8025454:	d003      	beq.n	802545e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8025456:	693a      	ldr	r2, [r7, #16]
 8025458:	68fb      	ldr	r3, [r7, #12]
 802545a:	4313      	orrs	r3, r2
 802545c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 802545e:	4a28      	ldr	r2, [pc, #160]	; (8025500 <HAL_GPIO_Init+0x320>)
 8025460:	693b      	ldr	r3, [r7, #16]
 8025462:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8025464:	4b26      	ldr	r3, [pc, #152]	; (8025500 <HAL_GPIO_Init+0x320>)
 8025466:	685b      	ldr	r3, [r3, #4]
 8025468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 802546a:	68fb      	ldr	r3, [r7, #12]
 802546c:	43db      	mvns	r3, r3
 802546e:	693a      	ldr	r2, [r7, #16]
 8025470:	4013      	ands	r3, r2
 8025472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8025474:	683b      	ldr	r3, [r7, #0]
 8025476:	685b      	ldr	r3, [r3, #4]
 8025478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802547c:	2b00      	cmp	r3, #0
 802547e:	d003      	beq.n	8025488 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8025480:	693a      	ldr	r2, [r7, #16]
 8025482:	68fb      	ldr	r3, [r7, #12]
 8025484:	4313      	orrs	r3, r2
 8025486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8025488:	4a1d      	ldr	r2, [pc, #116]	; (8025500 <HAL_GPIO_Init+0x320>)
 802548a:	693b      	ldr	r3, [r7, #16]
 802548c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 802548e:	4b1c      	ldr	r3, [pc, #112]	; (8025500 <HAL_GPIO_Init+0x320>)
 8025490:	681b      	ldr	r3, [r3, #0]
 8025492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8025494:	68fb      	ldr	r3, [r7, #12]
 8025496:	43db      	mvns	r3, r3
 8025498:	693a      	ldr	r2, [r7, #16]
 802549a:	4013      	ands	r3, r2
 802549c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 802549e:	683b      	ldr	r3, [r7, #0]
 80254a0:	685b      	ldr	r3, [r3, #4]
 80254a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80254a6:	2b00      	cmp	r3, #0
 80254a8:	d003      	beq.n	80254b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80254aa:	693a      	ldr	r2, [r7, #16]
 80254ac:	68fb      	ldr	r3, [r7, #12]
 80254ae:	4313      	orrs	r3, r2
 80254b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80254b2:	4a13      	ldr	r2, [pc, #76]	; (8025500 <HAL_GPIO_Init+0x320>)
 80254b4:	693b      	ldr	r3, [r7, #16]
 80254b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80254b8:	697b      	ldr	r3, [r7, #20]
 80254ba:	3301      	adds	r3, #1
 80254bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80254be:	683b      	ldr	r3, [r7, #0]
 80254c0:	681a      	ldr	r2, [r3, #0]
 80254c2:	697b      	ldr	r3, [r7, #20]
 80254c4:	fa22 f303 	lsr.w	r3, r2, r3
 80254c8:	2b00      	cmp	r3, #0
 80254ca:	f47f ae91 	bne.w	80251f0 <HAL_GPIO_Init+0x10>
  }
}
 80254ce:	bf00      	nop
 80254d0:	bf00      	nop
 80254d2:	371c      	adds	r7, #28
 80254d4:	46bd      	mov	sp, r7
 80254d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254da:	4770      	bx	lr
 80254dc:	40021000 	.word	0x40021000
 80254e0:	40010000 	.word	0x40010000
 80254e4:	48000400 	.word	0x48000400
 80254e8:	48000800 	.word	0x48000800
 80254ec:	48000c00 	.word	0x48000c00
 80254f0:	48001000 	.word	0x48001000
 80254f4:	48001400 	.word	0x48001400
 80254f8:	48001800 	.word	0x48001800
 80254fc:	48001c00 	.word	0x48001c00
 8025500:	40010400 	.word	0x40010400

08025504 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8025504:	b480      	push	{r7}
 8025506:	b087      	sub	sp, #28
 8025508:	af00      	add	r7, sp, #0
 802550a:	6078      	str	r0, [r7, #4]
 802550c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 802550e:	2300      	movs	r3, #0
 8025510:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8025512:	e0c9      	b.n	80256a8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8025514:	2201      	movs	r2, #1
 8025516:	697b      	ldr	r3, [r7, #20]
 8025518:	fa02 f303 	lsl.w	r3, r2, r3
 802551c:	683a      	ldr	r2, [r7, #0]
 802551e:	4013      	ands	r3, r2
 8025520:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8025522:	693b      	ldr	r3, [r7, #16]
 8025524:	2b00      	cmp	r3, #0
 8025526:	f000 80bc 	beq.w	80256a2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 802552a:	4a66      	ldr	r2, [pc, #408]	; (80256c4 <HAL_GPIO_DeInit+0x1c0>)
 802552c:	697b      	ldr	r3, [r7, #20]
 802552e:	089b      	lsrs	r3, r3, #2
 8025530:	3302      	adds	r3, #2
 8025532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025536:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8025538:	697b      	ldr	r3, [r7, #20]
 802553a:	f003 0303 	and.w	r3, r3, #3
 802553e:	009b      	lsls	r3, r3, #2
 8025540:	220f      	movs	r2, #15
 8025542:	fa02 f303 	lsl.w	r3, r2, r3
 8025546:	68fa      	ldr	r2, [r7, #12]
 8025548:	4013      	ands	r3, r2
 802554a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 802554c:	687b      	ldr	r3, [r7, #4]
 802554e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8025552:	d02b      	beq.n	80255ac <HAL_GPIO_DeInit+0xa8>
 8025554:	687b      	ldr	r3, [r7, #4]
 8025556:	4a5c      	ldr	r2, [pc, #368]	; (80256c8 <HAL_GPIO_DeInit+0x1c4>)
 8025558:	4293      	cmp	r3, r2
 802555a:	d025      	beq.n	80255a8 <HAL_GPIO_DeInit+0xa4>
 802555c:	687b      	ldr	r3, [r7, #4]
 802555e:	4a5b      	ldr	r2, [pc, #364]	; (80256cc <HAL_GPIO_DeInit+0x1c8>)
 8025560:	4293      	cmp	r3, r2
 8025562:	d01f      	beq.n	80255a4 <HAL_GPIO_DeInit+0xa0>
 8025564:	687b      	ldr	r3, [r7, #4]
 8025566:	4a5a      	ldr	r2, [pc, #360]	; (80256d0 <HAL_GPIO_DeInit+0x1cc>)
 8025568:	4293      	cmp	r3, r2
 802556a:	d019      	beq.n	80255a0 <HAL_GPIO_DeInit+0x9c>
 802556c:	687b      	ldr	r3, [r7, #4]
 802556e:	4a59      	ldr	r2, [pc, #356]	; (80256d4 <HAL_GPIO_DeInit+0x1d0>)
 8025570:	4293      	cmp	r3, r2
 8025572:	d013      	beq.n	802559c <HAL_GPIO_DeInit+0x98>
 8025574:	687b      	ldr	r3, [r7, #4]
 8025576:	4a58      	ldr	r2, [pc, #352]	; (80256d8 <HAL_GPIO_DeInit+0x1d4>)
 8025578:	4293      	cmp	r3, r2
 802557a:	d00d      	beq.n	8025598 <HAL_GPIO_DeInit+0x94>
 802557c:	687b      	ldr	r3, [r7, #4]
 802557e:	4a57      	ldr	r2, [pc, #348]	; (80256dc <HAL_GPIO_DeInit+0x1d8>)
 8025580:	4293      	cmp	r3, r2
 8025582:	d007      	beq.n	8025594 <HAL_GPIO_DeInit+0x90>
 8025584:	687b      	ldr	r3, [r7, #4]
 8025586:	4a56      	ldr	r2, [pc, #344]	; (80256e0 <HAL_GPIO_DeInit+0x1dc>)
 8025588:	4293      	cmp	r3, r2
 802558a:	d101      	bne.n	8025590 <HAL_GPIO_DeInit+0x8c>
 802558c:	2307      	movs	r3, #7
 802558e:	e00e      	b.n	80255ae <HAL_GPIO_DeInit+0xaa>
 8025590:	2308      	movs	r3, #8
 8025592:	e00c      	b.n	80255ae <HAL_GPIO_DeInit+0xaa>
 8025594:	2306      	movs	r3, #6
 8025596:	e00a      	b.n	80255ae <HAL_GPIO_DeInit+0xaa>
 8025598:	2305      	movs	r3, #5
 802559a:	e008      	b.n	80255ae <HAL_GPIO_DeInit+0xaa>
 802559c:	2304      	movs	r3, #4
 802559e:	e006      	b.n	80255ae <HAL_GPIO_DeInit+0xaa>
 80255a0:	2303      	movs	r3, #3
 80255a2:	e004      	b.n	80255ae <HAL_GPIO_DeInit+0xaa>
 80255a4:	2302      	movs	r3, #2
 80255a6:	e002      	b.n	80255ae <HAL_GPIO_DeInit+0xaa>
 80255a8:	2301      	movs	r3, #1
 80255aa:	e000      	b.n	80255ae <HAL_GPIO_DeInit+0xaa>
 80255ac:	2300      	movs	r3, #0
 80255ae:	697a      	ldr	r2, [r7, #20]
 80255b0:	f002 0203 	and.w	r2, r2, #3
 80255b4:	0092      	lsls	r2, r2, #2
 80255b6:	4093      	lsls	r3, r2
 80255b8:	68fa      	ldr	r2, [r7, #12]
 80255ba:	429a      	cmp	r2, r3
 80255bc:	d132      	bne.n	8025624 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80255be:	4b49      	ldr	r3, [pc, #292]	; (80256e4 <HAL_GPIO_DeInit+0x1e0>)
 80255c0:	681a      	ldr	r2, [r3, #0]
 80255c2:	693b      	ldr	r3, [r7, #16]
 80255c4:	43db      	mvns	r3, r3
 80255c6:	4947      	ldr	r1, [pc, #284]	; (80256e4 <HAL_GPIO_DeInit+0x1e0>)
 80255c8:	4013      	ands	r3, r2
 80255ca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80255cc:	4b45      	ldr	r3, [pc, #276]	; (80256e4 <HAL_GPIO_DeInit+0x1e0>)
 80255ce:	685a      	ldr	r2, [r3, #4]
 80255d0:	693b      	ldr	r3, [r7, #16]
 80255d2:	43db      	mvns	r3, r3
 80255d4:	4943      	ldr	r1, [pc, #268]	; (80256e4 <HAL_GPIO_DeInit+0x1e0>)
 80255d6:	4013      	ands	r3, r2
 80255d8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80255da:	4b42      	ldr	r3, [pc, #264]	; (80256e4 <HAL_GPIO_DeInit+0x1e0>)
 80255dc:	68da      	ldr	r2, [r3, #12]
 80255de:	693b      	ldr	r3, [r7, #16]
 80255e0:	43db      	mvns	r3, r3
 80255e2:	4940      	ldr	r1, [pc, #256]	; (80256e4 <HAL_GPIO_DeInit+0x1e0>)
 80255e4:	4013      	ands	r3, r2
 80255e6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80255e8:	4b3e      	ldr	r3, [pc, #248]	; (80256e4 <HAL_GPIO_DeInit+0x1e0>)
 80255ea:	689a      	ldr	r2, [r3, #8]
 80255ec:	693b      	ldr	r3, [r7, #16]
 80255ee:	43db      	mvns	r3, r3
 80255f0:	493c      	ldr	r1, [pc, #240]	; (80256e4 <HAL_GPIO_DeInit+0x1e0>)
 80255f2:	4013      	ands	r3, r2
 80255f4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80255f6:	697b      	ldr	r3, [r7, #20]
 80255f8:	f003 0303 	and.w	r3, r3, #3
 80255fc:	009b      	lsls	r3, r3, #2
 80255fe:	220f      	movs	r2, #15
 8025600:	fa02 f303 	lsl.w	r3, r2, r3
 8025604:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8025606:	4a2f      	ldr	r2, [pc, #188]	; (80256c4 <HAL_GPIO_DeInit+0x1c0>)
 8025608:	697b      	ldr	r3, [r7, #20]
 802560a:	089b      	lsrs	r3, r3, #2
 802560c:	3302      	adds	r3, #2
 802560e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8025612:	68fb      	ldr	r3, [r7, #12]
 8025614:	43da      	mvns	r2, r3
 8025616:	482b      	ldr	r0, [pc, #172]	; (80256c4 <HAL_GPIO_DeInit+0x1c0>)
 8025618:	697b      	ldr	r3, [r7, #20]
 802561a:	089b      	lsrs	r3, r3, #2
 802561c:	400a      	ands	r2, r1
 802561e:	3302      	adds	r3, #2
 8025620:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8025624:	687b      	ldr	r3, [r7, #4]
 8025626:	681a      	ldr	r2, [r3, #0]
 8025628:	697b      	ldr	r3, [r7, #20]
 802562a:	005b      	lsls	r3, r3, #1
 802562c:	2103      	movs	r1, #3
 802562e:	fa01 f303 	lsl.w	r3, r1, r3
 8025632:	431a      	orrs	r2, r3
 8025634:	687b      	ldr	r3, [r7, #4]
 8025636:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8025638:	697b      	ldr	r3, [r7, #20]
 802563a:	08da      	lsrs	r2, r3, #3
 802563c:	687b      	ldr	r3, [r7, #4]
 802563e:	3208      	adds	r2, #8
 8025640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025644:	697b      	ldr	r3, [r7, #20]
 8025646:	f003 0307 	and.w	r3, r3, #7
 802564a:	009b      	lsls	r3, r3, #2
 802564c:	220f      	movs	r2, #15
 802564e:	fa02 f303 	lsl.w	r3, r2, r3
 8025652:	43db      	mvns	r3, r3
 8025654:	697a      	ldr	r2, [r7, #20]
 8025656:	08d2      	lsrs	r2, r2, #3
 8025658:	4019      	ands	r1, r3
 802565a:	687b      	ldr	r3, [r7, #4]
 802565c:	3208      	adds	r2, #8
 802565e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8025662:	687b      	ldr	r3, [r7, #4]
 8025664:	689a      	ldr	r2, [r3, #8]
 8025666:	697b      	ldr	r3, [r7, #20]
 8025668:	005b      	lsls	r3, r3, #1
 802566a:	2103      	movs	r1, #3
 802566c:	fa01 f303 	lsl.w	r3, r1, r3
 8025670:	43db      	mvns	r3, r3
 8025672:	401a      	ands	r2, r3
 8025674:	687b      	ldr	r3, [r7, #4]
 8025676:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8025678:	687b      	ldr	r3, [r7, #4]
 802567a:	685a      	ldr	r2, [r3, #4]
 802567c:	2101      	movs	r1, #1
 802567e:	697b      	ldr	r3, [r7, #20]
 8025680:	fa01 f303 	lsl.w	r3, r1, r3
 8025684:	43db      	mvns	r3, r3
 8025686:	401a      	ands	r2, r3
 8025688:	687b      	ldr	r3, [r7, #4]
 802568a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 802568c:	687b      	ldr	r3, [r7, #4]
 802568e:	68da      	ldr	r2, [r3, #12]
 8025690:	697b      	ldr	r3, [r7, #20]
 8025692:	005b      	lsls	r3, r3, #1
 8025694:	2103      	movs	r1, #3
 8025696:	fa01 f303 	lsl.w	r3, r1, r3
 802569a:	43db      	mvns	r3, r3
 802569c:	401a      	ands	r2, r3
 802569e:	687b      	ldr	r3, [r7, #4]
 80256a0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80256a2:	697b      	ldr	r3, [r7, #20]
 80256a4:	3301      	adds	r3, #1
 80256a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80256a8:	683a      	ldr	r2, [r7, #0]
 80256aa:	697b      	ldr	r3, [r7, #20]
 80256ac:	fa22 f303 	lsr.w	r3, r2, r3
 80256b0:	2b00      	cmp	r3, #0
 80256b2:	f47f af2f 	bne.w	8025514 <HAL_GPIO_DeInit+0x10>
  }
}
 80256b6:	bf00      	nop
 80256b8:	bf00      	nop
 80256ba:	371c      	adds	r7, #28
 80256bc:	46bd      	mov	sp, r7
 80256be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256c2:	4770      	bx	lr
 80256c4:	40010000 	.word	0x40010000
 80256c8:	48000400 	.word	0x48000400
 80256cc:	48000800 	.word	0x48000800
 80256d0:	48000c00 	.word	0x48000c00
 80256d4:	48001000 	.word	0x48001000
 80256d8:	48001400 	.word	0x48001400
 80256dc:	48001800 	.word	0x48001800
 80256e0:	48001c00 	.word	0x48001c00
 80256e4:	40010400 	.word	0x40010400

080256e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80256e8:	b580      	push	{r7, lr}
 80256ea:	b082      	sub	sp, #8
 80256ec:	af00      	add	r7, sp, #0
 80256ee:	4603      	mov	r3, r0
 80256f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80256f2:	4b08      	ldr	r3, [pc, #32]	; (8025714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80256f4:	695a      	ldr	r2, [r3, #20]
 80256f6:	88fb      	ldrh	r3, [r7, #6]
 80256f8:	4013      	ands	r3, r2
 80256fa:	2b00      	cmp	r3, #0
 80256fc:	d006      	beq.n	802570c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80256fe:	4a05      	ldr	r2, [pc, #20]	; (8025714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8025700:	88fb      	ldrh	r3, [r7, #6]
 8025702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8025704:	88fb      	ldrh	r3, [r7, #6]
 8025706:	4618      	mov	r0, r3
 8025708:	f7fc fbb2 	bl	8021e70 <HAL_GPIO_EXTI_Callback>
  }
}
 802570c:	bf00      	nop
 802570e:	3708      	adds	r7, #8
 8025710:	46bd      	mov	sp, r7
 8025712:	bd80      	pop	{r7, pc}
 8025714:	40010400 	.word	0x40010400

08025718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025718:	b580      	push	{r7, lr}
 802571a:	b082      	sub	sp, #8
 802571c:	af00      	add	r7, sp, #0
 802571e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025720:	687b      	ldr	r3, [r7, #4]
 8025722:	2b00      	cmp	r3, #0
 8025724:	d101      	bne.n	802572a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8025726:	2301      	movs	r3, #1
 8025728:	e081      	b.n	802582e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802572a:	687b      	ldr	r3, [r7, #4]
 802572c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025730:	b2db      	uxtb	r3, r3
 8025732:	2b00      	cmp	r3, #0
 8025734:	d106      	bne.n	8025744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8025736:	687b      	ldr	r3, [r7, #4]
 8025738:	2200      	movs	r2, #0
 802573a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 802573e:	6878      	ldr	r0, [r7, #4]
 8025740:	f7fd ffea 	bl	8023718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025744:	687b      	ldr	r3, [r7, #4]
 8025746:	2224      	movs	r2, #36	; 0x24
 8025748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802574c:	687b      	ldr	r3, [r7, #4]
 802574e:	681b      	ldr	r3, [r3, #0]
 8025750:	681a      	ldr	r2, [r3, #0]
 8025752:	687b      	ldr	r3, [r7, #4]
 8025754:	681b      	ldr	r3, [r3, #0]
 8025756:	f022 0201 	bic.w	r2, r2, #1
 802575a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 802575c:	687b      	ldr	r3, [r7, #4]
 802575e:	685a      	ldr	r2, [r3, #4]
 8025760:	687b      	ldr	r3, [r7, #4]
 8025762:	681b      	ldr	r3, [r3, #0]
 8025764:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8025768:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802576a:	687b      	ldr	r3, [r7, #4]
 802576c:	681b      	ldr	r3, [r3, #0]
 802576e:	689a      	ldr	r2, [r3, #8]
 8025770:	687b      	ldr	r3, [r7, #4]
 8025772:	681b      	ldr	r3, [r3, #0]
 8025774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025778:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802577a:	687b      	ldr	r3, [r7, #4]
 802577c:	68db      	ldr	r3, [r3, #12]
 802577e:	2b01      	cmp	r3, #1
 8025780:	d107      	bne.n	8025792 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8025782:	687b      	ldr	r3, [r7, #4]
 8025784:	689a      	ldr	r2, [r3, #8]
 8025786:	687b      	ldr	r3, [r7, #4]
 8025788:	681b      	ldr	r3, [r3, #0]
 802578a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802578e:	609a      	str	r2, [r3, #8]
 8025790:	e006      	b.n	80257a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	689a      	ldr	r2, [r3, #8]
 8025796:	687b      	ldr	r3, [r7, #4]
 8025798:	681b      	ldr	r3, [r3, #0]
 802579a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 802579e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80257a0:	687b      	ldr	r3, [r7, #4]
 80257a2:	68db      	ldr	r3, [r3, #12]
 80257a4:	2b02      	cmp	r3, #2
 80257a6:	d104      	bne.n	80257b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80257a8:	687b      	ldr	r3, [r7, #4]
 80257aa:	681b      	ldr	r3, [r3, #0]
 80257ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80257b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80257b2:	687b      	ldr	r3, [r7, #4]
 80257b4:	681b      	ldr	r3, [r3, #0]
 80257b6:	685b      	ldr	r3, [r3, #4]
 80257b8:	687a      	ldr	r2, [r7, #4]
 80257ba:	6812      	ldr	r2, [r2, #0]
 80257bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80257c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80257c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80257c6:	687b      	ldr	r3, [r7, #4]
 80257c8:	681b      	ldr	r3, [r3, #0]
 80257ca:	68da      	ldr	r2, [r3, #12]
 80257cc:	687b      	ldr	r3, [r7, #4]
 80257ce:	681b      	ldr	r3, [r3, #0]
 80257d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80257d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80257d6:	687b      	ldr	r3, [r7, #4]
 80257d8:	691a      	ldr	r2, [r3, #16]
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	695b      	ldr	r3, [r3, #20]
 80257de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80257e2:	687b      	ldr	r3, [r7, #4]
 80257e4:	699b      	ldr	r3, [r3, #24]
 80257e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80257e8:	687b      	ldr	r3, [r7, #4]
 80257ea:	681b      	ldr	r3, [r3, #0]
 80257ec:	430a      	orrs	r2, r1
 80257ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80257f0:	687b      	ldr	r3, [r7, #4]
 80257f2:	69d9      	ldr	r1, [r3, #28]
 80257f4:	687b      	ldr	r3, [r7, #4]
 80257f6:	6a1a      	ldr	r2, [r3, #32]
 80257f8:	687b      	ldr	r3, [r7, #4]
 80257fa:	681b      	ldr	r3, [r3, #0]
 80257fc:	430a      	orrs	r2, r1
 80257fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8025800:	687b      	ldr	r3, [r7, #4]
 8025802:	681b      	ldr	r3, [r3, #0]
 8025804:	681a      	ldr	r2, [r3, #0]
 8025806:	687b      	ldr	r3, [r7, #4]
 8025808:	681b      	ldr	r3, [r3, #0]
 802580a:	f042 0201 	orr.w	r2, r2, #1
 802580e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025810:	687b      	ldr	r3, [r7, #4]
 8025812:	2200      	movs	r2, #0
 8025814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8025816:	687b      	ldr	r3, [r7, #4]
 8025818:	2220      	movs	r2, #32
 802581a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802581e:	687b      	ldr	r3, [r7, #4]
 8025820:	2200      	movs	r2, #0
 8025822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8025824:	687b      	ldr	r3, [r7, #4]
 8025826:	2200      	movs	r2, #0
 8025828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 802582c:	2300      	movs	r3, #0
}
 802582e:	4618      	mov	r0, r3
 8025830:	3708      	adds	r7, #8
 8025832:	46bd      	mov	sp, r7
 8025834:	bd80      	pop	{r7, pc}

08025836 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8025836:	b580      	push	{r7, lr}
 8025838:	b082      	sub	sp, #8
 802583a:	af00      	add	r7, sp, #0
 802583c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802583e:	687b      	ldr	r3, [r7, #4]
 8025840:	2b00      	cmp	r3, #0
 8025842:	d101      	bne.n	8025848 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8025844:	2301      	movs	r3, #1
 8025846:	e021      	b.n	802588c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025848:	687b      	ldr	r3, [r7, #4]
 802584a:	2224      	movs	r2, #36	; 0x24
 802584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8025850:	687b      	ldr	r3, [r7, #4]
 8025852:	681b      	ldr	r3, [r3, #0]
 8025854:	681a      	ldr	r2, [r3, #0]
 8025856:	687b      	ldr	r3, [r7, #4]
 8025858:	681b      	ldr	r3, [r3, #0]
 802585a:	f022 0201 	bic.w	r2, r2, #1
 802585e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8025860:	6878      	ldr	r0, [r7, #4]
 8025862:	f7fd fffb 	bl	802385c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025866:	687b      	ldr	r3, [r7, #4]
 8025868:	2200      	movs	r2, #0
 802586a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 802586c:	687b      	ldr	r3, [r7, #4]
 802586e:	2200      	movs	r2, #0
 8025870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8025874:	687b      	ldr	r3, [r7, #4]
 8025876:	2200      	movs	r2, #0
 8025878:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802587a:	687b      	ldr	r3, [r7, #4]
 802587c:	2200      	movs	r2, #0
 802587e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8025882:	687b      	ldr	r3, [r7, #4]
 8025884:	2200      	movs	r2, #0
 8025886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 802588a:	2300      	movs	r3, #0
}
 802588c:	4618      	mov	r0, r3
 802588e:	3708      	adds	r7, #8
 8025890:	46bd      	mov	sp, r7
 8025892:	bd80      	pop	{r7, pc}

08025894 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8025894:	b580      	push	{r7, lr}
 8025896:	b088      	sub	sp, #32
 8025898:	af02      	add	r7, sp, #8
 802589a:	60f8      	str	r0, [r7, #12]
 802589c:	4608      	mov	r0, r1
 802589e:	4611      	mov	r1, r2
 80258a0:	461a      	mov	r2, r3
 80258a2:	4603      	mov	r3, r0
 80258a4:	817b      	strh	r3, [r7, #10]
 80258a6:	460b      	mov	r3, r1
 80258a8:	813b      	strh	r3, [r7, #8]
 80258aa:	4613      	mov	r3, r2
 80258ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80258ae:	68fb      	ldr	r3, [r7, #12]
 80258b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80258b4:	b2db      	uxtb	r3, r3
 80258b6:	2b20      	cmp	r3, #32
 80258b8:	f040 80f9 	bne.w	8025aae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80258bc:	6a3b      	ldr	r3, [r7, #32]
 80258be:	2b00      	cmp	r3, #0
 80258c0:	d002      	beq.n	80258c8 <HAL_I2C_Mem_Write+0x34>
 80258c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80258c4:	2b00      	cmp	r3, #0
 80258c6:	d105      	bne.n	80258d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80258c8:	68fb      	ldr	r3, [r7, #12]
 80258ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80258ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80258d0:	2301      	movs	r3, #1
 80258d2:	e0ed      	b.n	8025ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80258d4:	68fb      	ldr	r3, [r7, #12]
 80258d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80258da:	2b01      	cmp	r3, #1
 80258dc:	d101      	bne.n	80258e2 <HAL_I2C_Mem_Write+0x4e>
 80258de:	2302      	movs	r3, #2
 80258e0:	e0e6      	b.n	8025ab0 <HAL_I2C_Mem_Write+0x21c>
 80258e2:	68fb      	ldr	r3, [r7, #12]
 80258e4:	2201      	movs	r2, #1
 80258e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80258ea:	f7fe fcfb 	bl	80242e4 <HAL_GetTick>
 80258ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80258f0:	697b      	ldr	r3, [r7, #20]
 80258f2:	9300      	str	r3, [sp, #0]
 80258f4:	2319      	movs	r3, #25
 80258f6:	2201      	movs	r2, #1
 80258f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80258fc:	68f8      	ldr	r0, [r7, #12]
 80258fe:	f000 fac3 	bl	8025e88 <I2C_WaitOnFlagUntilTimeout>
 8025902:	4603      	mov	r3, r0
 8025904:	2b00      	cmp	r3, #0
 8025906:	d001      	beq.n	802590c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8025908:	2301      	movs	r3, #1
 802590a:	e0d1      	b.n	8025ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 802590c:	68fb      	ldr	r3, [r7, #12]
 802590e:	2221      	movs	r2, #33	; 0x21
 8025910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8025914:	68fb      	ldr	r3, [r7, #12]
 8025916:	2240      	movs	r2, #64	; 0x40
 8025918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802591c:	68fb      	ldr	r3, [r7, #12]
 802591e:	2200      	movs	r2, #0
 8025920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8025922:	68fb      	ldr	r3, [r7, #12]
 8025924:	6a3a      	ldr	r2, [r7, #32]
 8025926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8025928:	68fb      	ldr	r3, [r7, #12]
 802592a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802592c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 802592e:	68fb      	ldr	r3, [r7, #12]
 8025930:	2200      	movs	r2, #0
 8025932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8025934:	88f8      	ldrh	r0, [r7, #6]
 8025936:	893a      	ldrh	r2, [r7, #8]
 8025938:	8979      	ldrh	r1, [r7, #10]
 802593a:	697b      	ldr	r3, [r7, #20]
 802593c:	9301      	str	r3, [sp, #4]
 802593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025940:	9300      	str	r3, [sp, #0]
 8025942:	4603      	mov	r3, r0
 8025944:	68f8      	ldr	r0, [r7, #12]
 8025946:	f000 f9d3 	bl	8025cf0 <I2C_RequestMemoryWrite>
 802594a:	4603      	mov	r3, r0
 802594c:	2b00      	cmp	r3, #0
 802594e:	d005      	beq.n	802595c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8025950:	68fb      	ldr	r3, [r7, #12]
 8025952:	2200      	movs	r2, #0
 8025954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8025958:	2301      	movs	r3, #1
 802595a:	e0a9      	b.n	8025ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 802595c:	68fb      	ldr	r3, [r7, #12]
 802595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025960:	b29b      	uxth	r3, r3
 8025962:	2bff      	cmp	r3, #255	; 0xff
 8025964:	d90e      	bls.n	8025984 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8025966:	68fb      	ldr	r3, [r7, #12]
 8025968:	22ff      	movs	r2, #255	; 0xff
 802596a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 802596c:	68fb      	ldr	r3, [r7, #12]
 802596e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025970:	b2da      	uxtb	r2, r3
 8025972:	8979      	ldrh	r1, [r7, #10]
 8025974:	2300      	movs	r3, #0
 8025976:	9300      	str	r3, [sp, #0]
 8025978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802597c:	68f8      	ldr	r0, [r7, #12]
 802597e:	f000 fc2b 	bl	80261d8 <I2C_TransferConfig>
 8025982:	e00f      	b.n	80259a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8025984:	68fb      	ldr	r3, [r7, #12]
 8025986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025988:	b29a      	uxth	r2, r3
 802598a:	68fb      	ldr	r3, [r7, #12]
 802598c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 802598e:	68fb      	ldr	r3, [r7, #12]
 8025990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025992:	b2da      	uxtb	r2, r3
 8025994:	8979      	ldrh	r1, [r7, #10]
 8025996:	2300      	movs	r3, #0
 8025998:	9300      	str	r3, [sp, #0]
 802599a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802599e:	68f8      	ldr	r0, [r7, #12]
 80259a0:	f000 fc1a 	bl	80261d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80259a4:	697a      	ldr	r2, [r7, #20]
 80259a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80259a8:	68f8      	ldr	r0, [r7, #12]
 80259aa:	f000 faad 	bl	8025f08 <I2C_WaitOnTXISFlagUntilTimeout>
 80259ae:	4603      	mov	r3, r0
 80259b0:	2b00      	cmp	r3, #0
 80259b2:	d001      	beq.n	80259b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80259b4:	2301      	movs	r3, #1
 80259b6:	e07b      	b.n	8025ab0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80259b8:	68fb      	ldr	r3, [r7, #12]
 80259ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80259bc:	781a      	ldrb	r2, [r3, #0]
 80259be:	68fb      	ldr	r3, [r7, #12]
 80259c0:	681b      	ldr	r3, [r3, #0]
 80259c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80259c4:	68fb      	ldr	r3, [r7, #12]
 80259c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80259c8:	1c5a      	adds	r2, r3, #1
 80259ca:	68fb      	ldr	r3, [r7, #12]
 80259cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80259ce:	68fb      	ldr	r3, [r7, #12]
 80259d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80259d2:	b29b      	uxth	r3, r3
 80259d4:	3b01      	subs	r3, #1
 80259d6:	b29a      	uxth	r2, r3
 80259d8:	68fb      	ldr	r3, [r7, #12]
 80259da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80259dc:	68fb      	ldr	r3, [r7, #12]
 80259de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80259e0:	3b01      	subs	r3, #1
 80259e2:	b29a      	uxth	r2, r3
 80259e4:	68fb      	ldr	r3, [r7, #12]
 80259e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80259e8:	68fb      	ldr	r3, [r7, #12]
 80259ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80259ec:	b29b      	uxth	r3, r3
 80259ee:	2b00      	cmp	r3, #0
 80259f0:	d034      	beq.n	8025a5c <HAL_I2C_Mem_Write+0x1c8>
 80259f2:	68fb      	ldr	r3, [r7, #12]
 80259f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80259f6:	2b00      	cmp	r3, #0
 80259f8:	d130      	bne.n	8025a5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80259fa:	697b      	ldr	r3, [r7, #20]
 80259fc:	9300      	str	r3, [sp, #0]
 80259fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a00:	2200      	movs	r2, #0
 8025a02:	2180      	movs	r1, #128	; 0x80
 8025a04:	68f8      	ldr	r0, [r7, #12]
 8025a06:	f000 fa3f 	bl	8025e88 <I2C_WaitOnFlagUntilTimeout>
 8025a0a:	4603      	mov	r3, r0
 8025a0c:	2b00      	cmp	r3, #0
 8025a0e:	d001      	beq.n	8025a14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8025a10:	2301      	movs	r3, #1
 8025a12:	e04d      	b.n	8025ab0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8025a14:	68fb      	ldr	r3, [r7, #12]
 8025a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025a18:	b29b      	uxth	r3, r3
 8025a1a:	2bff      	cmp	r3, #255	; 0xff
 8025a1c:	d90e      	bls.n	8025a3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8025a1e:	68fb      	ldr	r3, [r7, #12]
 8025a20:	22ff      	movs	r2, #255	; 0xff
 8025a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8025a24:	68fb      	ldr	r3, [r7, #12]
 8025a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025a28:	b2da      	uxtb	r2, r3
 8025a2a:	8979      	ldrh	r1, [r7, #10]
 8025a2c:	2300      	movs	r3, #0
 8025a2e:	9300      	str	r3, [sp, #0]
 8025a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025a34:	68f8      	ldr	r0, [r7, #12]
 8025a36:	f000 fbcf 	bl	80261d8 <I2C_TransferConfig>
 8025a3a:	e00f      	b.n	8025a5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8025a3c:	68fb      	ldr	r3, [r7, #12]
 8025a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025a40:	b29a      	uxth	r2, r3
 8025a42:	68fb      	ldr	r3, [r7, #12]
 8025a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8025a46:	68fb      	ldr	r3, [r7, #12]
 8025a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025a4a:	b2da      	uxtb	r2, r3
 8025a4c:	8979      	ldrh	r1, [r7, #10]
 8025a4e:	2300      	movs	r3, #0
 8025a50:	9300      	str	r3, [sp, #0]
 8025a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8025a56:	68f8      	ldr	r0, [r7, #12]
 8025a58:	f000 fbbe 	bl	80261d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8025a5c:	68fb      	ldr	r3, [r7, #12]
 8025a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025a60:	b29b      	uxth	r3, r3
 8025a62:	2b00      	cmp	r3, #0
 8025a64:	d19e      	bne.n	80259a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8025a66:	697a      	ldr	r2, [r7, #20]
 8025a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025a6a:	68f8      	ldr	r0, [r7, #12]
 8025a6c:	f000 fa8c 	bl	8025f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8025a70:	4603      	mov	r3, r0
 8025a72:	2b00      	cmp	r3, #0
 8025a74:	d001      	beq.n	8025a7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8025a76:	2301      	movs	r3, #1
 8025a78:	e01a      	b.n	8025ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8025a7a:	68fb      	ldr	r3, [r7, #12]
 8025a7c:	681b      	ldr	r3, [r3, #0]
 8025a7e:	2220      	movs	r2, #32
 8025a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8025a82:	68fb      	ldr	r3, [r7, #12]
 8025a84:	681b      	ldr	r3, [r3, #0]
 8025a86:	6859      	ldr	r1, [r3, #4]
 8025a88:	68fb      	ldr	r3, [r7, #12]
 8025a8a:	681a      	ldr	r2, [r3, #0]
 8025a8c:	4b0a      	ldr	r3, [pc, #40]	; (8025ab8 <HAL_I2C_Mem_Write+0x224>)
 8025a8e:	400b      	ands	r3, r1
 8025a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8025a92:	68fb      	ldr	r3, [r7, #12]
 8025a94:	2220      	movs	r2, #32
 8025a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8025a9a:	68fb      	ldr	r3, [r7, #12]
 8025a9c:	2200      	movs	r2, #0
 8025a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8025aa2:	68fb      	ldr	r3, [r7, #12]
 8025aa4:	2200      	movs	r2, #0
 8025aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8025aaa:	2300      	movs	r3, #0
 8025aac:	e000      	b.n	8025ab0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8025aae:	2302      	movs	r3, #2
  }
}
 8025ab0:	4618      	mov	r0, r3
 8025ab2:	3718      	adds	r7, #24
 8025ab4:	46bd      	mov	sp, r7
 8025ab6:	bd80      	pop	{r7, pc}
 8025ab8:	fe00e800 	.word	0xfe00e800

08025abc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8025abc:	b580      	push	{r7, lr}
 8025abe:	b088      	sub	sp, #32
 8025ac0:	af02      	add	r7, sp, #8
 8025ac2:	60f8      	str	r0, [r7, #12]
 8025ac4:	4608      	mov	r0, r1
 8025ac6:	4611      	mov	r1, r2
 8025ac8:	461a      	mov	r2, r3
 8025aca:	4603      	mov	r3, r0
 8025acc:	817b      	strh	r3, [r7, #10]
 8025ace:	460b      	mov	r3, r1
 8025ad0:	813b      	strh	r3, [r7, #8]
 8025ad2:	4613      	mov	r3, r2
 8025ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8025ad6:	68fb      	ldr	r3, [r7, #12]
 8025ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025adc:	b2db      	uxtb	r3, r3
 8025ade:	2b20      	cmp	r3, #32
 8025ae0:	f040 80fd 	bne.w	8025cde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8025ae4:	6a3b      	ldr	r3, [r7, #32]
 8025ae6:	2b00      	cmp	r3, #0
 8025ae8:	d002      	beq.n	8025af0 <HAL_I2C_Mem_Read+0x34>
 8025aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025aec:	2b00      	cmp	r3, #0
 8025aee:	d105      	bne.n	8025afc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8025af0:	68fb      	ldr	r3, [r7, #12]
 8025af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8025af6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8025af8:	2301      	movs	r3, #1
 8025afa:	e0f1      	b.n	8025ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8025afc:	68fb      	ldr	r3, [r7, #12]
 8025afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8025b02:	2b01      	cmp	r3, #1
 8025b04:	d101      	bne.n	8025b0a <HAL_I2C_Mem_Read+0x4e>
 8025b06:	2302      	movs	r3, #2
 8025b08:	e0ea      	b.n	8025ce0 <HAL_I2C_Mem_Read+0x224>
 8025b0a:	68fb      	ldr	r3, [r7, #12]
 8025b0c:	2201      	movs	r2, #1
 8025b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8025b12:	f7fe fbe7 	bl	80242e4 <HAL_GetTick>
 8025b16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8025b18:	697b      	ldr	r3, [r7, #20]
 8025b1a:	9300      	str	r3, [sp, #0]
 8025b1c:	2319      	movs	r3, #25
 8025b1e:	2201      	movs	r2, #1
 8025b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025b24:	68f8      	ldr	r0, [r7, #12]
 8025b26:	f000 f9af 	bl	8025e88 <I2C_WaitOnFlagUntilTimeout>
 8025b2a:	4603      	mov	r3, r0
 8025b2c:	2b00      	cmp	r3, #0
 8025b2e:	d001      	beq.n	8025b34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8025b30:	2301      	movs	r3, #1
 8025b32:	e0d5      	b.n	8025ce0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8025b34:	68fb      	ldr	r3, [r7, #12]
 8025b36:	2222      	movs	r2, #34	; 0x22
 8025b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8025b3c:	68fb      	ldr	r3, [r7, #12]
 8025b3e:	2240      	movs	r2, #64	; 0x40
 8025b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025b44:	68fb      	ldr	r3, [r7, #12]
 8025b46:	2200      	movs	r2, #0
 8025b48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8025b4a:	68fb      	ldr	r3, [r7, #12]
 8025b4c:	6a3a      	ldr	r2, [r7, #32]
 8025b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8025b50:	68fb      	ldr	r3, [r7, #12]
 8025b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8025b56:	68fb      	ldr	r3, [r7, #12]
 8025b58:	2200      	movs	r2, #0
 8025b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8025b5c:	88f8      	ldrh	r0, [r7, #6]
 8025b5e:	893a      	ldrh	r2, [r7, #8]
 8025b60:	8979      	ldrh	r1, [r7, #10]
 8025b62:	697b      	ldr	r3, [r7, #20]
 8025b64:	9301      	str	r3, [sp, #4]
 8025b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b68:	9300      	str	r3, [sp, #0]
 8025b6a:	4603      	mov	r3, r0
 8025b6c:	68f8      	ldr	r0, [r7, #12]
 8025b6e:	f000 f913 	bl	8025d98 <I2C_RequestMemoryRead>
 8025b72:	4603      	mov	r3, r0
 8025b74:	2b00      	cmp	r3, #0
 8025b76:	d005      	beq.n	8025b84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8025b78:	68fb      	ldr	r3, [r7, #12]
 8025b7a:	2200      	movs	r2, #0
 8025b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8025b80:	2301      	movs	r3, #1
 8025b82:	e0ad      	b.n	8025ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8025b84:	68fb      	ldr	r3, [r7, #12]
 8025b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025b88:	b29b      	uxth	r3, r3
 8025b8a:	2bff      	cmp	r3, #255	; 0xff
 8025b8c:	d90e      	bls.n	8025bac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8025b8e:	68fb      	ldr	r3, [r7, #12]
 8025b90:	22ff      	movs	r2, #255	; 0xff
 8025b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8025b94:	68fb      	ldr	r3, [r7, #12]
 8025b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025b98:	b2da      	uxtb	r2, r3
 8025b9a:	8979      	ldrh	r1, [r7, #10]
 8025b9c:	4b52      	ldr	r3, [pc, #328]	; (8025ce8 <HAL_I2C_Mem_Read+0x22c>)
 8025b9e:	9300      	str	r3, [sp, #0]
 8025ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025ba4:	68f8      	ldr	r0, [r7, #12]
 8025ba6:	f000 fb17 	bl	80261d8 <I2C_TransferConfig>
 8025baa:	e00f      	b.n	8025bcc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8025bac:	68fb      	ldr	r3, [r7, #12]
 8025bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025bb0:	b29a      	uxth	r2, r3
 8025bb2:	68fb      	ldr	r3, [r7, #12]
 8025bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8025bb6:	68fb      	ldr	r3, [r7, #12]
 8025bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025bba:	b2da      	uxtb	r2, r3
 8025bbc:	8979      	ldrh	r1, [r7, #10]
 8025bbe:	4b4a      	ldr	r3, [pc, #296]	; (8025ce8 <HAL_I2C_Mem_Read+0x22c>)
 8025bc0:	9300      	str	r3, [sp, #0]
 8025bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8025bc6:	68f8      	ldr	r0, [r7, #12]
 8025bc8:	f000 fb06 	bl	80261d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8025bcc:	697b      	ldr	r3, [r7, #20]
 8025bce:	9300      	str	r3, [sp, #0]
 8025bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bd2:	2200      	movs	r2, #0
 8025bd4:	2104      	movs	r1, #4
 8025bd6:	68f8      	ldr	r0, [r7, #12]
 8025bd8:	f000 f956 	bl	8025e88 <I2C_WaitOnFlagUntilTimeout>
 8025bdc:	4603      	mov	r3, r0
 8025bde:	2b00      	cmp	r3, #0
 8025be0:	d001      	beq.n	8025be6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8025be2:	2301      	movs	r3, #1
 8025be4:	e07c      	b.n	8025ce0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8025be6:	68fb      	ldr	r3, [r7, #12]
 8025be8:	681b      	ldr	r3, [r3, #0]
 8025bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025bec:	68fb      	ldr	r3, [r7, #12]
 8025bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025bf0:	b2d2      	uxtb	r2, r2
 8025bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8025bf4:	68fb      	ldr	r3, [r7, #12]
 8025bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025bf8:	1c5a      	adds	r2, r3, #1
 8025bfa:	68fb      	ldr	r3, [r7, #12]
 8025bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8025bfe:	68fb      	ldr	r3, [r7, #12]
 8025c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025c02:	3b01      	subs	r3, #1
 8025c04:	b29a      	uxth	r2, r3
 8025c06:	68fb      	ldr	r3, [r7, #12]
 8025c08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8025c0a:	68fb      	ldr	r3, [r7, #12]
 8025c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c0e:	b29b      	uxth	r3, r3
 8025c10:	3b01      	subs	r3, #1
 8025c12:	b29a      	uxth	r2, r3
 8025c14:	68fb      	ldr	r3, [r7, #12]
 8025c16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8025c18:	68fb      	ldr	r3, [r7, #12]
 8025c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c1c:	b29b      	uxth	r3, r3
 8025c1e:	2b00      	cmp	r3, #0
 8025c20:	d034      	beq.n	8025c8c <HAL_I2C_Mem_Read+0x1d0>
 8025c22:	68fb      	ldr	r3, [r7, #12]
 8025c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025c26:	2b00      	cmp	r3, #0
 8025c28:	d130      	bne.n	8025c8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8025c2a:	697b      	ldr	r3, [r7, #20]
 8025c2c:	9300      	str	r3, [sp, #0]
 8025c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c30:	2200      	movs	r2, #0
 8025c32:	2180      	movs	r1, #128	; 0x80
 8025c34:	68f8      	ldr	r0, [r7, #12]
 8025c36:	f000 f927 	bl	8025e88 <I2C_WaitOnFlagUntilTimeout>
 8025c3a:	4603      	mov	r3, r0
 8025c3c:	2b00      	cmp	r3, #0
 8025c3e:	d001      	beq.n	8025c44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8025c40:	2301      	movs	r3, #1
 8025c42:	e04d      	b.n	8025ce0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8025c44:	68fb      	ldr	r3, [r7, #12]
 8025c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c48:	b29b      	uxth	r3, r3
 8025c4a:	2bff      	cmp	r3, #255	; 0xff
 8025c4c:	d90e      	bls.n	8025c6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8025c4e:	68fb      	ldr	r3, [r7, #12]
 8025c50:	22ff      	movs	r2, #255	; 0xff
 8025c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8025c54:	68fb      	ldr	r3, [r7, #12]
 8025c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025c58:	b2da      	uxtb	r2, r3
 8025c5a:	8979      	ldrh	r1, [r7, #10]
 8025c5c:	2300      	movs	r3, #0
 8025c5e:	9300      	str	r3, [sp, #0]
 8025c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025c64:	68f8      	ldr	r0, [r7, #12]
 8025c66:	f000 fab7 	bl	80261d8 <I2C_TransferConfig>
 8025c6a:	e00f      	b.n	8025c8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8025c6c:	68fb      	ldr	r3, [r7, #12]
 8025c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c70:	b29a      	uxth	r2, r3
 8025c72:	68fb      	ldr	r3, [r7, #12]
 8025c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8025c76:	68fb      	ldr	r3, [r7, #12]
 8025c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025c7a:	b2da      	uxtb	r2, r3
 8025c7c:	8979      	ldrh	r1, [r7, #10]
 8025c7e:	2300      	movs	r3, #0
 8025c80:	9300      	str	r3, [sp, #0]
 8025c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8025c86:	68f8      	ldr	r0, [r7, #12]
 8025c88:	f000 faa6 	bl	80261d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8025c8c:	68fb      	ldr	r3, [r7, #12]
 8025c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c90:	b29b      	uxth	r3, r3
 8025c92:	2b00      	cmp	r3, #0
 8025c94:	d19a      	bne.n	8025bcc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8025c96:	697a      	ldr	r2, [r7, #20]
 8025c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025c9a:	68f8      	ldr	r0, [r7, #12]
 8025c9c:	f000 f974 	bl	8025f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8025ca0:	4603      	mov	r3, r0
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	d001      	beq.n	8025caa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8025ca6:	2301      	movs	r3, #1
 8025ca8:	e01a      	b.n	8025ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8025caa:	68fb      	ldr	r3, [r7, #12]
 8025cac:	681b      	ldr	r3, [r3, #0]
 8025cae:	2220      	movs	r2, #32
 8025cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8025cb2:	68fb      	ldr	r3, [r7, #12]
 8025cb4:	681b      	ldr	r3, [r3, #0]
 8025cb6:	6859      	ldr	r1, [r3, #4]
 8025cb8:	68fb      	ldr	r3, [r7, #12]
 8025cba:	681a      	ldr	r2, [r3, #0]
 8025cbc:	4b0b      	ldr	r3, [pc, #44]	; (8025cec <HAL_I2C_Mem_Read+0x230>)
 8025cbe:	400b      	ands	r3, r1
 8025cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8025cc2:	68fb      	ldr	r3, [r7, #12]
 8025cc4:	2220      	movs	r2, #32
 8025cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8025cca:	68fb      	ldr	r3, [r7, #12]
 8025ccc:	2200      	movs	r2, #0
 8025cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8025cd2:	68fb      	ldr	r3, [r7, #12]
 8025cd4:	2200      	movs	r2, #0
 8025cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8025cda:	2300      	movs	r3, #0
 8025cdc:	e000      	b.n	8025ce0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8025cde:	2302      	movs	r3, #2
  }
}
 8025ce0:	4618      	mov	r0, r3
 8025ce2:	3718      	adds	r7, #24
 8025ce4:	46bd      	mov	sp, r7
 8025ce6:	bd80      	pop	{r7, pc}
 8025ce8:	80002400 	.word	0x80002400
 8025cec:	fe00e800 	.word	0xfe00e800

08025cf0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8025cf0:	b580      	push	{r7, lr}
 8025cf2:	b086      	sub	sp, #24
 8025cf4:	af02      	add	r7, sp, #8
 8025cf6:	60f8      	str	r0, [r7, #12]
 8025cf8:	4608      	mov	r0, r1
 8025cfa:	4611      	mov	r1, r2
 8025cfc:	461a      	mov	r2, r3
 8025cfe:	4603      	mov	r3, r0
 8025d00:	817b      	strh	r3, [r7, #10]
 8025d02:	460b      	mov	r3, r1
 8025d04:	813b      	strh	r3, [r7, #8]
 8025d06:	4613      	mov	r3, r2
 8025d08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8025d0a:	88fb      	ldrh	r3, [r7, #6]
 8025d0c:	b2da      	uxtb	r2, r3
 8025d0e:	8979      	ldrh	r1, [r7, #10]
 8025d10:	4b20      	ldr	r3, [pc, #128]	; (8025d94 <I2C_RequestMemoryWrite+0xa4>)
 8025d12:	9300      	str	r3, [sp, #0]
 8025d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025d18:	68f8      	ldr	r0, [r7, #12]
 8025d1a:	f000 fa5d 	bl	80261d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025d1e:	69fa      	ldr	r2, [r7, #28]
 8025d20:	69b9      	ldr	r1, [r7, #24]
 8025d22:	68f8      	ldr	r0, [r7, #12]
 8025d24:	f000 f8f0 	bl	8025f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8025d28:	4603      	mov	r3, r0
 8025d2a:	2b00      	cmp	r3, #0
 8025d2c:	d001      	beq.n	8025d32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8025d2e:	2301      	movs	r3, #1
 8025d30:	e02c      	b.n	8025d8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8025d32:	88fb      	ldrh	r3, [r7, #6]
 8025d34:	2b01      	cmp	r3, #1
 8025d36:	d105      	bne.n	8025d44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025d38:	893b      	ldrh	r3, [r7, #8]
 8025d3a:	b2da      	uxtb	r2, r3
 8025d3c:	68fb      	ldr	r3, [r7, #12]
 8025d3e:	681b      	ldr	r3, [r3, #0]
 8025d40:	629a      	str	r2, [r3, #40]	; 0x28
 8025d42:	e015      	b.n	8025d70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8025d44:	893b      	ldrh	r3, [r7, #8]
 8025d46:	0a1b      	lsrs	r3, r3, #8
 8025d48:	b29b      	uxth	r3, r3
 8025d4a:	b2da      	uxtb	r2, r3
 8025d4c:	68fb      	ldr	r3, [r7, #12]
 8025d4e:	681b      	ldr	r3, [r3, #0]
 8025d50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025d52:	69fa      	ldr	r2, [r7, #28]
 8025d54:	69b9      	ldr	r1, [r7, #24]
 8025d56:	68f8      	ldr	r0, [r7, #12]
 8025d58:	f000 f8d6 	bl	8025f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8025d5c:	4603      	mov	r3, r0
 8025d5e:	2b00      	cmp	r3, #0
 8025d60:	d001      	beq.n	8025d66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8025d62:	2301      	movs	r3, #1
 8025d64:	e012      	b.n	8025d8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025d66:	893b      	ldrh	r3, [r7, #8]
 8025d68:	b2da      	uxtb	r2, r3
 8025d6a:	68fb      	ldr	r3, [r7, #12]
 8025d6c:	681b      	ldr	r3, [r3, #0]
 8025d6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8025d70:	69fb      	ldr	r3, [r7, #28]
 8025d72:	9300      	str	r3, [sp, #0]
 8025d74:	69bb      	ldr	r3, [r7, #24]
 8025d76:	2200      	movs	r2, #0
 8025d78:	2180      	movs	r1, #128	; 0x80
 8025d7a:	68f8      	ldr	r0, [r7, #12]
 8025d7c:	f000 f884 	bl	8025e88 <I2C_WaitOnFlagUntilTimeout>
 8025d80:	4603      	mov	r3, r0
 8025d82:	2b00      	cmp	r3, #0
 8025d84:	d001      	beq.n	8025d8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8025d86:	2301      	movs	r3, #1
 8025d88:	e000      	b.n	8025d8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8025d8a:	2300      	movs	r3, #0
}
 8025d8c:	4618      	mov	r0, r3
 8025d8e:	3710      	adds	r7, #16
 8025d90:	46bd      	mov	sp, r7
 8025d92:	bd80      	pop	{r7, pc}
 8025d94:	80002000 	.word	0x80002000

08025d98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8025d98:	b580      	push	{r7, lr}
 8025d9a:	b086      	sub	sp, #24
 8025d9c:	af02      	add	r7, sp, #8
 8025d9e:	60f8      	str	r0, [r7, #12]
 8025da0:	4608      	mov	r0, r1
 8025da2:	4611      	mov	r1, r2
 8025da4:	461a      	mov	r2, r3
 8025da6:	4603      	mov	r3, r0
 8025da8:	817b      	strh	r3, [r7, #10]
 8025daa:	460b      	mov	r3, r1
 8025dac:	813b      	strh	r3, [r7, #8]
 8025dae:	4613      	mov	r3, r2
 8025db0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8025db2:	88fb      	ldrh	r3, [r7, #6]
 8025db4:	b2da      	uxtb	r2, r3
 8025db6:	8979      	ldrh	r1, [r7, #10]
 8025db8:	4b20      	ldr	r3, [pc, #128]	; (8025e3c <I2C_RequestMemoryRead+0xa4>)
 8025dba:	9300      	str	r3, [sp, #0]
 8025dbc:	2300      	movs	r3, #0
 8025dbe:	68f8      	ldr	r0, [r7, #12]
 8025dc0:	f000 fa0a 	bl	80261d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025dc4:	69fa      	ldr	r2, [r7, #28]
 8025dc6:	69b9      	ldr	r1, [r7, #24]
 8025dc8:	68f8      	ldr	r0, [r7, #12]
 8025dca:	f000 f89d 	bl	8025f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8025dce:	4603      	mov	r3, r0
 8025dd0:	2b00      	cmp	r3, #0
 8025dd2:	d001      	beq.n	8025dd8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8025dd4:	2301      	movs	r3, #1
 8025dd6:	e02c      	b.n	8025e32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8025dd8:	88fb      	ldrh	r3, [r7, #6]
 8025dda:	2b01      	cmp	r3, #1
 8025ddc:	d105      	bne.n	8025dea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025dde:	893b      	ldrh	r3, [r7, #8]
 8025de0:	b2da      	uxtb	r2, r3
 8025de2:	68fb      	ldr	r3, [r7, #12]
 8025de4:	681b      	ldr	r3, [r3, #0]
 8025de6:	629a      	str	r2, [r3, #40]	; 0x28
 8025de8:	e015      	b.n	8025e16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8025dea:	893b      	ldrh	r3, [r7, #8]
 8025dec:	0a1b      	lsrs	r3, r3, #8
 8025dee:	b29b      	uxth	r3, r3
 8025df0:	b2da      	uxtb	r2, r3
 8025df2:	68fb      	ldr	r3, [r7, #12]
 8025df4:	681b      	ldr	r3, [r3, #0]
 8025df6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025df8:	69fa      	ldr	r2, [r7, #28]
 8025dfa:	69b9      	ldr	r1, [r7, #24]
 8025dfc:	68f8      	ldr	r0, [r7, #12]
 8025dfe:	f000 f883 	bl	8025f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8025e02:	4603      	mov	r3, r0
 8025e04:	2b00      	cmp	r3, #0
 8025e06:	d001      	beq.n	8025e0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8025e08:	2301      	movs	r3, #1
 8025e0a:	e012      	b.n	8025e32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025e0c:	893b      	ldrh	r3, [r7, #8]
 8025e0e:	b2da      	uxtb	r2, r3
 8025e10:	68fb      	ldr	r3, [r7, #12]
 8025e12:	681b      	ldr	r3, [r3, #0]
 8025e14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8025e16:	69fb      	ldr	r3, [r7, #28]
 8025e18:	9300      	str	r3, [sp, #0]
 8025e1a:	69bb      	ldr	r3, [r7, #24]
 8025e1c:	2200      	movs	r2, #0
 8025e1e:	2140      	movs	r1, #64	; 0x40
 8025e20:	68f8      	ldr	r0, [r7, #12]
 8025e22:	f000 f831 	bl	8025e88 <I2C_WaitOnFlagUntilTimeout>
 8025e26:	4603      	mov	r3, r0
 8025e28:	2b00      	cmp	r3, #0
 8025e2a:	d001      	beq.n	8025e30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8025e2c:	2301      	movs	r3, #1
 8025e2e:	e000      	b.n	8025e32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8025e30:	2300      	movs	r3, #0
}
 8025e32:	4618      	mov	r0, r3
 8025e34:	3710      	adds	r7, #16
 8025e36:	46bd      	mov	sp, r7
 8025e38:	bd80      	pop	{r7, pc}
 8025e3a:	bf00      	nop
 8025e3c:	80002000 	.word	0x80002000

08025e40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8025e40:	b480      	push	{r7}
 8025e42:	b083      	sub	sp, #12
 8025e44:	af00      	add	r7, sp, #0
 8025e46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8025e48:	687b      	ldr	r3, [r7, #4]
 8025e4a:	681b      	ldr	r3, [r3, #0]
 8025e4c:	699b      	ldr	r3, [r3, #24]
 8025e4e:	f003 0302 	and.w	r3, r3, #2
 8025e52:	2b02      	cmp	r3, #2
 8025e54:	d103      	bne.n	8025e5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8025e56:	687b      	ldr	r3, [r7, #4]
 8025e58:	681b      	ldr	r3, [r3, #0]
 8025e5a:	2200      	movs	r2, #0
 8025e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8025e5e:	687b      	ldr	r3, [r7, #4]
 8025e60:	681b      	ldr	r3, [r3, #0]
 8025e62:	699b      	ldr	r3, [r3, #24]
 8025e64:	f003 0301 	and.w	r3, r3, #1
 8025e68:	2b01      	cmp	r3, #1
 8025e6a:	d007      	beq.n	8025e7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8025e6c:	687b      	ldr	r3, [r7, #4]
 8025e6e:	681b      	ldr	r3, [r3, #0]
 8025e70:	699a      	ldr	r2, [r3, #24]
 8025e72:	687b      	ldr	r3, [r7, #4]
 8025e74:	681b      	ldr	r3, [r3, #0]
 8025e76:	f042 0201 	orr.w	r2, r2, #1
 8025e7a:	619a      	str	r2, [r3, #24]
  }
}
 8025e7c:	bf00      	nop
 8025e7e:	370c      	adds	r7, #12
 8025e80:	46bd      	mov	sp, r7
 8025e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e86:	4770      	bx	lr

08025e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8025e88:	b580      	push	{r7, lr}
 8025e8a:	b084      	sub	sp, #16
 8025e8c:	af00      	add	r7, sp, #0
 8025e8e:	60f8      	str	r0, [r7, #12]
 8025e90:	60b9      	str	r1, [r7, #8]
 8025e92:	603b      	str	r3, [r7, #0]
 8025e94:	4613      	mov	r3, r2
 8025e96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8025e98:	e022      	b.n	8025ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8025e9a:	683b      	ldr	r3, [r7, #0]
 8025e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025ea0:	d01e      	beq.n	8025ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025ea2:	f7fe fa1f 	bl	80242e4 <HAL_GetTick>
 8025ea6:	4602      	mov	r2, r0
 8025ea8:	69bb      	ldr	r3, [r7, #24]
 8025eaa:	1ad3      	subs	r3, r2, r3
 8025eac:	683a      	ldr	r2, [r7, #0]
 8025eae:	429a      	cmp	r2, r3
 8025eb0:	d302      	bcc.n	8025eb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8025eb2:	683b      	ldr	r3, [r7, #0]
 8025eb4:	2b00      	cmp	r3, #0
 8025eb6:	d113      	bne.n	8025ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8025eb8:	68fb      	ldr	r3, [r7, #12]
 8025eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025ebc:	f043 0220 	orr.w	r2, r3, #32
 8025ec0:	68fb      	ldr	r3, [r7, #12]
 8025ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8025ec4:	68fb      	ldr	r3, [r7, #12]
 8025ec6:	2220      	movs	r2, #32
 8025ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8025ecc:	68fb      	ldr	r3, [r7, #12]
 8025ece:	2200      	movs	r2, #0
 8025ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8025ed4:	68fb      	ldr	r3, [r7, #12]
 8025ed6:	2200      	movs	r2, #0
 8025ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8025edc:	2301      	movs	r3, #1
 8025ede:	e00f      	b.n	8025f00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8025ee0:	68fb      	ldr	r3, [r7, #12]
 8025ee2:	681b      	ldr	r3, [r3, #0]
 8025ee4:	699a      	ldr	r2, [r3, #24]
 8025ee6:	68bb      	ldr	r3, [r7, #8]
 8025ee8:	4013      	ands	r3, r2
 8025eea:	68ba      	ldr	r2, [r7, #8]
 8025eec:	429a      	cmp	r2, r3
 8025eee:	bf0c      	ite	eq
 8025ef0:	2301      	moveq	r3, #1
 8025ef2:	2300      	movne	r3, #0
 8025ef4:	b2db      	uxtb	r3, r3
 8025ef6:	461a      	mov	r2, r3
 8025ef8:	79fb      	ldrb	r3, [r7, #7]
 8025efa:	429a      	cmp	r2, r3
 8025efc:	d0cd      	beq.n	8025e9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8025efe:	2300      	movs	r3, #0
}
 8025f00:	4618      	mov	r0, r3
 8025f02:	3710      	adds	r7, #16
 8025f04:	46bd      	mov	sp, r7
 8025f06:	bd80      	pop	{r7, pc}

08025f08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8025f08:	b580      	push	{r7, lr}
 8025f0a:	b084      	sub	sp, #16
 8025f0c:	af00      	add	r7, sp, #0
 8025f0e:	60f8      	str	r0, [r7, #12]
 8025f10:	60b9      	str	r1, [r7, #8]
 8025f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8025f14:	e02c      	b.n	8025f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8025f16:	687a      	ldr	r2, [r7, #4]
 8025f18:	68b9      	ldr	r1, [r7, #8]
 8025f1a:	68f8      	ldr	r0, [r7, #12]
 8025f1c:	f000 f870 	bl	8026000 <I2C_IsErrorOccurred>
 8025f20:	4603      	mov	r3, r0
 8025f22:	2b00      	cmp	r3, #0
 8025f24:	d001      	beq.n	8025f2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8025f26:	2301      	movs	r3, #1
 8025f28:	e02a      	b.n	8025f80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8025f2a:	68bb      	ldr	r3, [r7, #8]
 8025f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025f30:	d01e      	beq.n	8025f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025f32:	f7fe f9d7 	bl	80242e4 <HAL_GetTick>
 8025f36:	4602      	mov	r2, r0
 8025f38:	687b      	ldr	r3, [r7, #4]
 8025f3a:	1ad3      	subs	r3, r2, r3
 8025f3c:	68ba      	ldr	r2, [r7, #8]
 8025f3e:	429a      	cmp	r2, r3
 8025f40:	d302      	bcc.n	8025f48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8025f42:	68bb      	ldr	r3, [r7, #8]
 8025f44:	2b00      	cmp	r3, #0
 8025f46:	d113      	bne.n	8025f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8025f48:	68fb      	ldr	r3, [r7, #12]
 8025f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025f4c:	f043 0220 	orr.w	r2, r3, #32
 8025f50:	68fb      	ldr	r3, [r7, #12]
 8025f52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8025f54:	68fb      	ldr	r3, [r7, #12]
 8025f56:	2220      	movs	r2, #32
 8025f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8025f5c:	68fb      	ldr	r3, [r7, #12]
 8025f5e:	2200      	movs	r2, #0
 8025f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8025f64:	68fb      	ldr	r3, [r7, #12]
 8025f66:	2200      	movs	r2, #0
 8025f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8025f6c:	2301      	movs	r3, #1
 8025f6e:	e007      	b.n	8025f80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8025f70:	68fb      	ldr	r3, [r7, #12]
 8025f72:	681b      	ldr	r3, [r3, #0]
 8025f74:	699b      	ldr	r3, [r3, #24]
 8025f76:	f003 0302 	and.w	r3, r3, #2
 8025f7a:	2b02      	cmp	r3, #2
 8025f7c:	d1cb      	bne.n	8025f16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8025f7e:	2300      	movs	r3, #0
}
 8025f80:	4618      	mov	r0, r3
 8025f82:	3710      	adds	r7, #16
 8025f84:	46bd      	mov	sp, r7
 8025f86:	bd80      	pop	{r7, pc}

08025f88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8025f88:	b580      	push	{r7, lr}
 8025f8a:	b084      	sub	sp, #16
 8025f8c:	af00      	add	r7, sp, #0
 8025f8e:	60f8      	str	r0, [r7, #12]
 8025f90:	60b9      	str	r1, [r7, #8]
 8025f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8025f94:	e028      	b.n	8025fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8025f96:	687a      	ldr	r2, [r7, #4]
 8025f98:	68b9      	ldr	r1, [r7, #8]
 8025f9a:	68f8      	ldr	r0, [r7, #12]
 8025f9c:	f000 f830 	bl	8026000 <I2C_IsErrorOccurred>
 8025fa0:	4603      	mov	r3, r0
 8025fa2:	2b00      	cmp	r3, #0
 8025fa4:	d001      	beq.n	8025faa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8025fa6:	2301      	movs	r3, #1
 8025fa8:	e026      	b.n	8025ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025faa:	f7fe f99b 	bl	80242e4 <HAL_GetTick>
 8025fae:	4602      	mov	r2, r0
 8025fb0:	687b      	ldr	r3, [r7, #4]
 8025fb2:	1ad3      	subs	r3, r2, r3
 8025fb4:	68ba      	ldr	r2, [r7, #8]
 8025fb6:	429a      	cmp	r2, r3
 8025fb8:	d302      	bcc.n	8025fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8025fba:	68bb      	ldr	r3, [r7, #8]
 8025fbc:	2b00      	cmp	r3, #0
 8025fbe:	d113      	bne.n	8025fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8025fc0:	68fb      	ldr	r3, [r7, #12]
 8025fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025fc4:	f043 0220 	orr.w	r2, r3, #32
 8025fc8:	68fb      	ldr	r3, [r7, #12]
 8025fca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8025fcc:	68fb      	ldr	r3, [r7, #12]
 8025fce:	2220      	movs	r2, #32
 8025fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8025fd4:	68fb      	ldr	r3, [r7, #12]
 8025fd6:	2200      	movs	r2, #0
 8025fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8025fdc:	68fb      	ldr	r3, [r7, #12]
 8025fde:	2200      	movs	r2, #0
 8025fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8025fe4:	2301      	movs	r3, #1
 8025fe6:	e007      	b.n	8025ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8025fe8:	68fb      	ldr	r3, [r7, #12]
 8025fea:	681b      	ldr	r3, [r3, #0]
 8025fec:	699b      	ldr	r3, [r3, #24]
 8025fee:	f003 0320 	and.w	r3, r3, #32
 8025ff2:	2b20      	cmp	r3, #32
 8025ff4:	d1cf      	bne.n	8025f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8025ff6:	2300      	movs	r3, #0
}
 8025ff8:	4618      	mov	r0, r3
 8025ffa:	3710      	adds	r7, #16
 8025ffc:	46bd      	mov	sp, r7
 8025ffe:	bd80      	pop	{r7, pc}

08026000 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8026000:	b580      	push	{r7, lr}
 8026002:	b08a      	sub	sp, #40	; 0x28
 8026004:	af00      	add	r7, sp, #0
 8026006:	60f8      	str	r0, [r7, #12]
 8026008:	60b9      	str	r1, [r7, #8]
 802600a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802600c:	2300      	movs	r3, #0
 802600e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8026012:	68fb      	ldr	r3, [r7, #12]
 8026014:	681b      	ldr	r3, [r3, #0]
 8026016:	699b      	ldr	r3, [r3, #24]
 8026018:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 802601a:	2300      	movs	r3, #0
 802601c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 802601e:	687b      	ldr	r3, [r7, #4]
 8026020:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8026022:	69bb      	ldr	r3, [r7, #24]
 8026024:	f003 0310 	and.w	r3, r3, #16
 8026028:	2b00      	cmp	r3, #0
 802602a:	d075      	beq.n	8026118 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802602c:	68fb      	ldr	r3, [r7, #12]
 802602e:	681b      	ldr	r3, [r3, #0]
 8026030:	2210      	movs	r2, #16
 8026032:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8026034:	e056      	b.n	80260e4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8026036:	68bb      	ldr	r3, [r7, #8]
 8026038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802603c:	d052      	beq.n	80260e4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802603e:	f7fe f951 	bl	80242e4 <HAL_GetTick>
 8026042:	4602      	mov	r2, r0
 8026044:	69fb      	ldr	r3, [r7, #28]
 8026046:	1ad3      	subs	r3, r2, r3
 8026048:	68ba      	ldr	r2, [r7, #8]
 802604a:	429a      	cmp	r2, r3
 802604c:	d302      	bcc.n	8026054 <I2C_IsErrorOccurred+0x54>
 802604e:	68bb      	ldr	r3, [r7, #8]
 8026050:	2b00      	cmp	r3, #0
 8026052:	d147      	bne.n	80260e4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8026054:	68fb      	ldr	r3, [r7, #12]
 8026056:	681b      	ldr	r3, [r3, #0]
 8026058:	685b      	ldr	r3, [r3, #4]
 802605a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802605e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8026060:	68fb      	ldr	r3, [r7, #12]
 8026062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8026066:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8026068:	68fb      	ldr	r3, [r7, #12]
 802606a:	681b      	ldr	r3, [r3, #0]
 802606c:	699b      	ldr	r3, [r3, #24]
 802606e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8026072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8026076:	d12e      	bne.n	80260d6 <I2C_IsErrorOccurred+0xd6>
 8026078:	697b      	ldr	r3, [r7, #20]
 802607a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802607e:	d02a      	beq.n	80260d6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8026080:	7cfb      	ldrb	r3, [r7, #19]
 8026082:	2b20      	cmp	r3, #32
 8026084:	d027      	beq.n	80260d6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8026086:	68fb      	ldr	r3, [r7, #12]
 8026088:	681b      	ldr	r3, [r3, #0]
 802608a:	685a      	ldr	r2, [r3, #4]
 802608c:	68fb      	ldr	r3, [r7, #12]
 802608e:	681b      	ldr	r3, [r3, #0]
 8026090:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8026094:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8026096:	f7fe f925 	bl	80242e4 <HAL_GetTick>
 802609a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 802609c:	e01b      	b.n	80260d6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 802609e:	f7fe f921 	bl	80242e4 <HAL_GetTick>
 80260a2:	4602      	mov	r2, r0
 80260a4:	69fb      	ldr	r3, [r7, #28]
 80260a6:	1ad3      	subs	r3, r2, r3
 80260a8:	2b19      	cmp	r3, #25
 80260aa:	d914      	bls.n	80260d6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80260ac:	68fb      	ldr	r3, [r7, #12]
 80260ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80260b0:	f043 0220 	orr.w	r2, r3, #32
 80260b4:	68fb      	ldr	r3, [r7, #12]
 80260b6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80260b8:	68fb      	ldr	r3, [r7, #12]
 80260ba:	2220      	movs	r2, #32
 80260bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80260c0:	68fb      	ldr	r3, [r7, #12]
 80260c2:	2200      	movs	r2, #0
 80260c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80260c8:	68fb      	ldr	r3, [r7, #12]
 80260ca:	2200      	movs	r2, #0
 80260cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80260d0:	2301      	movs	r3, #1
 80260d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80260d6:	68fb      	ldr	r3, [r7, #12]
 80260d8:	681b      	ldr	r3, [r3, #0]
 80260da:	699b      	ldr	r3, [r3, #24]
 80260dc:	f003 0320 	and.w	r3, r3, #32
 80260e0:	2b20      	cmp	r3, #32
 80260e2:	d1dc      	bne.n	802609e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80260e4:	68fb      	ldr	r3, [r7, #12]
 80260e6:	681b      	ldr	r3, [r3, #0]
 80260e8:	699b      	ldr	r3, [r3, #24]
 80260ea:	f003 0320 	and.w	r3, r3, #32
 80260ee:	2b20      	cmp	r3, #32
 80260f0:	d003      	beq.n	80260fa <I2C_IsErrorOccurred+0xfa>
 80260f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80260f6:	2b00      	cmp	r3, #0
 80260f8:	d09d      	beq.n	8026036 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80260fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80260fe:	2b00      	cmp	r3, #0
 8026100:	d103      	bne.n	802610a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8026102:	68fb      	ldr	r3, [r7, #12]
 8026104:	681b      	ldr	r3, [r3, #0]
 8026106:	2220      	movs	r2, #32
 8026108:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 802610a:	6a3b      	ldr	r3, [r7, #32]
 802610c:	f043 0304 	orr.w	r3, r3, #4
 8026110:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8026112:	2301      	movs	r3, #1
 8026114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8026118:	68fb      	ldr	r3, [r7, #12]
 802611a:	681b      	ldr	r3, [r3, #0]
 802611c:	699b      	ldr	r3, [r3, #24]
 802611e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8026120:	69bb      	ldr	r3, [r7, #24]
 8026122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026126:	2b00      	cmp	r3, #0
 8026128:	d00b      	beq.n	8026142 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 802612a:	6a3b      	ldr	r3, [r7, #32]
 802612c:	f043 0301 	orr.w	r3, r3, #1
 8026130:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8026132:	68fb      	ldr	r3, [r7, #12]
 8026134:	681b      	ldr	r3, [r3, #0]
 8026136:	f44f 7280 	mov.w	r2, #256	; 0x100
 802613a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 802613c:	2301      	movs	r3, #1
 802613e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8026142:	69bb      	ldr	r3, [r7, #24]
 8026144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8026148:	2b00      	cmp	r3, #0
 802614a:	d00b      	beq.n	8026164 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 802614c:	6a3b      	ldr	r3, [r7, #32]
 802614e:	f043 0308 	orr.w	r3, r3, #8
 8026152:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8026154:	68fb      	ldr	r3, [r7, #12]
 8026156:	681b      	ldr	r3, [r3, #0]
 8026158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802615c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 802615e:	2301      	movs	r3, #1
 8026160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8026164:	69bb      	ldr	r3, [r7, #24]
 8026166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802616a:	2b00      	cmp	r3, #0
 802616c:	d00b      	beq.n	8026186 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 802616e:	6a3b      	ldr	r3, [r7, #32]
 8026170:	f043 0302 	orr.w	r3, r3, #2
 8026174:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8026176:	68fb      	ldr	r3, [r7, #12]
 8026178:	681b      	ldr	r3, [r3, #0]
 802617a:	f44f 7200 	mov.w	r2, #512	; 0x200
 802617e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8026180:	2301      	movs	r3, #1
 8026182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8026186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802618a:	2b00      	cmp	r3, #0
 802618c:	d01c      	beq.n	80261c8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 802618e:	68f8      	ldr	r0, [r7, #12]
 8026190:	f7ff fe56 	bl	8025e40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8026194:	68fb      	ldr	r3, [r7, #12]
 8026196:	681b      	ldr	r3, [r3, #0]
 8026198:	6859      	ldr	r1, [r3, #4]
 802619a:	68fb      	ldr	r3, [r7, #12]
 802619c:	681a      	ldr	r2, [r3, #0]
 802619e:	4b0d      	ldr	r3, [pc, #52]	; (80261d4 <I2C_IsErrorOccurred+0x1d4>)
 80261a0:	400b      	ands	r3, r1
 80261a2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80261a4:	68fb      	ldr	r3, [r7, #12]
 80261a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80261a8:	6a3b      	ldr	r3, [r7, #32]
 80261aa:	431a      	orrs	r2, r3
 80261ac:	68fb      	ldr	r3, [r7, #12]
 80261ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80261b0:	68fb      	ldr	r3, [r7, #12]
 80261b2:	2220      	movs	r2, #32
 80261b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80261b8:	68fb      	ldr	r3, [r7, #12]
 80261ba:	2200      	movs	r2, #0
 80261bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80261c0:	68fb      	ldr	r3, [r7, #12]
 80261c2:	2200      	movs	r2, #0
 80261c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80261c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80261cc:	4618      	mov	r0, r3
 80261ce:	3728      	adds	r7, #40	; 0x28
 80261d0:	46bd      	mov	sp, r7
 80261d2:	bd80      	pop	{r7, pc}
 80261d4:	fe00e800 	.word	0xfe00e800

080261d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80261d8:	b480      	push	{r7}
 80261da:	b087      	sub	sp, #28
 80261dc:	af00      	add	r7, sp, #0
 80261de:	60f8      	str	r0, [r7, #12]
 80261e0:	607b      	str	r3, [r7, #4]
 80261e2:	460b      	mov	r3, r1
 80261e4:	817b      	strh	r3, [r7, #10]
 80261e6:	4613      	mov	r3, r2
 80261e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80261ea:	897b      	ldrh	r3, [r7, #10]
 80261ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80261f0:	7a7b      	ldrb	r3, [r7, #9]
 80261f2:	041b      	lsls	r3, r3, #16
 80261f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80261f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80261fa:	687b      	ldr	r3, [r7, #4]
 80261fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80261fe:	6a3b      	ldr	r3, [r7, #32]
 8026200:	4313      	orrs	r3, r2
 8026202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026206:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8026208:	68fb      	ldr	r3, [r7, #12]
 802620a:	681b      	ldr	r3, [r3, #0]
 802620c:	685a      	ldr	r2, [r3, #4]
 802620e:	6a3b      	ldr	r3, [r7, #32]
 8026210:	0d5b      	lsrs	r3, r3, #21
 8026212:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8026216:	4b08      	ldr	r3, [pc, #32]	; (8026238 <I2C_TransferConfig+0x60>)
 8026218:	430b      	orrs	r3, r1
 802621a:	43db      	mvns	r3, r3
 802621c:	ea02 0103 	and.w	r1, r2, r3
 8026220:	68fb      	ldr	r3, [r7, #12]
 8026222:	681b      	ldr	r3, [r3, #0]
 8026224:	697a      	ldr	r2, [r7, #20]
 8026226:	430a      	orrs	r2, r1
 8026228:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 802622a:	bf00      	nop
 802622c:	371c      	adds	r7, #28
 802622e:	46bd      	mov	sp, r7
 8026230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026234:	4770      	bx	lr
 8026236:	bf00      	nop
 8026238:	03ff63ff 	.word	0x03ff63ff

0802623c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 802623c:	b480      	push	{r7}
 802623e:	b083      	sub	sp, #12
 8026240:	af00      	add	r7, sp, #0
 8026242:	6078      	str	r0, [r7, #4]
 8026244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026246:	687b      	ldr	r3, [r7, #4]
 8026248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802624c:	b2db      	uxtb	r3, r3
 802624e:	2b20      	cmp	r3, #32
 8026250:	d138      	bne.n	80262c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8026252:	687b      	ldr	r3, [r7, #4]
 8026254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8026258:	2b01      	cmp	r3, #1
 802625a:	d101      	bne.n	8026260 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 802625c:	2302      	movs	r3, #2
 802625e:	e032      	b.n	80262c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8026260:	687b      	ldr	r3, [r7, #4]
 8026262:	2201      	movs	r2, #1
 8026264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8026268:	687b      	ldr	r3, [r7, #4]
 802626a:	2224      	movs	r2, #36	; 0x24
 802626c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026270:	687b      	ldr	r3, [r7, #4]
 8026272:	681b      	ldr	r3, [r3, #0]
 8026274:	681a      	ldr	r2, [r3, #0]
 8026276:	687b      	ldr	r3, [r7, #4]
 8026278:	681b      	ldr	r3, [r3, #0]
 802627a:	f022 0201 	bic.w	r2, r2, #1
 802627e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8026280:	687b      	ldr	r3, [r7, #4]
 8026282:	681b      	ldr	r3, [r3, #0]
 8026284:	681a      	ldr	r2, [r3, #0]
 8026286:	687b      	ldr	r3, [r7, #4]
 8026288:	681b      	ldr	r3, [r3, #0]
 802628a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802628e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8026290:	687b      	ldr	r3, [r7, #4]
 8026292:	681b      	ldr	r3, [r3, #0]
 8026294:	6819      	ldr	r1, [r3, #0]
 8026296:	687b      	ldr	r3, [r7, #4]
 8026298:	681b      	ldr	r3, [r3, #0]
 802629a:	683a      	ldr	r2, [r7, #0]
 802629c:	430a      	orrs	r2, r1
 802629e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80262a0:	687b      	ldr	r3, [r7, #4]
 80262a2:	681b      	ldr	r3, [r3, #0]
 80262a4:	681a      	ldr	r2, [r3, #0]
 80262a6:	687b      	ldr	r3, [r7, #4]
 80262a8:	681b      	ldr	r3, [r3, #0]
 80262aa:	f042 0201 	orr.w	r2, r2, #1
 80262ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80262b0:	687b      	ldr	r3, [r7, #4]
 80262b2:	2220      	movs	r2, #32
 80262b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80262b8:	687b      	ldr	r3, [r7, #4]
 80262ba:	2200      	movs	r2, #0
 80262bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80262c0:	2300      	movs	r3, #0
 80262c2:	e000      	b.n	80262c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80262c4:	2302      	movs	r3, #2
  }
}
 80262c6:	4618      	mov	r0, r3
 80262c8:	370c      	adds	r7, #12
 80262ca:	46bd      	mov	sp, r7
 80262cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262d0:	4770      	bx	lr

080262d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80262d2:	b480      	push	{r7}
 80262d4:	b085      	sub	sp, #20
 80262d6:	af00      	add	r7, sp, #0
 80262d8:	6078      	str	r0, [r7, #4]
 80262da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80262dc:	687b      	ldr	r3, [r7, #4]
 80262de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80262e2:	b2db      	uxtb	r3, r3
 80262e4:	2b20      	cmp	r3, #32
 80262e6:	d139      	bne.n	802635c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80262e8:	687b      	ldr	r3, [r7, #4]
 80262ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80262ee:	2b01      	cmp	r3, #1
 80262f0:	d101      	bne.n	80262f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80262f2:	2302      	movs	r3, #2
 80262f4:	e033      	b.n	802635e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80262f6:	687b      	ldr	r3, [r7, #4]
 80262f8:	2201      	movs	r2, #1
 80262fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80262fe:	687b      	ldr	r3, [r7, #4]
 8026300:	2224      	movs	r2, #36	; 0x24
 8026302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026306:	687b      	ldr	r3, [r7, #4]
 8026308:	681b      	ldr	r3, [r3, #0]
 802630a:	681a      	ldr	r2, [r3, #0]
 802630c:	687b      	ldr	r3, [r7, #4]
 802630e:	681b      	ldr	r3, [r3, #0]
 8026310:	f022 0201 	bic.w	r2, r2, #1
 8026314:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8026316:	687b      	ldr	r3, [r7, #4]
 8026318:	681b      	ldr	r3, [r3, #0]
 802631a:	681b      	ldr	r3, [r3, #0]
 802631c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 802631e:	68fb      	ldr	r3, [r7, #12]
 8026320:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8026324:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8026326:	683b      	ldr	r3, [r7, #0]
 8026328:	021b      	lsls	r3, r3, #8
 802632a:	68fa      	ldr	r2, [r7, #12]
 802632c:	4313      	orrs	r3, r2
 802632e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8026330:	687b      	ldr	r3, [r7, #4]
 8026332:	681b      	ldr	r3, [r3, #0]
 8026334:	68fa      	ldr	r2, [r7, #12]
 8026336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8026338:	687b      	ldr	r3, [r7, #4]
 802633a:	681b      	ldr	r3, [r3, #0]
 802633c:	681a      	ldr	r2, [r3, #0]
 802633e:	687b      	ldr	r3, [r7, #4]
 8026340:	681b      	ldr	r3, [r3, #0]
 8026342:	f042 0201 	orr.w	r2, r2, #1
 8026346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026348:	687b      	ldr	r3, [r7, #4]
 802634a:	2220      	movs	r2, #32
 802634c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026350:	687b      	ldr	r3, [r7, #4]
 8026352:	2200      	movs	r2, #0
 8026354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8026358:	2300      	movs	r3, #0
 802635a:	e000      	b.n	802635e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 802635c:	2302      	movs	r3, #2
  }
}
 802635e:	4618      	mov	r0, r3
 8026360:	3714      	adds	r7, #20
 8026362:	46bd      	mov	sp, r7
 8026364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026368:	4770      	bx	lr
	...

0802636c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 802636c:	b580      	push	{r7, lr}
 802636e:	b086      	sub	sp, #24
 8026370:	af02      	add	r7, sp, #8
 8026372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8026374:	2300      	movs	r3, #0
 8026376:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8026378:	f7fd ffb4 	bl	80242e4 <HAL_GetTick>
 802637c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 802637e:	687b      	ldr	r3, [r7, #4]
 8026380:	2b00      	cmp	r3, #0
 8026382:	d102      	bne.n	802638a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8026384:	2301      	movs	r3, #1
 8026386:	73fb      	strb	r3, [r7, #15]
 8026388:	e092      	b.n	80264b0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 802638a:	687b      	ldr	r3, [r7, #4]
 802638c:	2200      	movs	r2, #0
 802638e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8026390:	687b      	ldr	r3, [r7, #4]
 8026392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026394:	2b00      	cmp	r3, #0
 8026396:	f040 808b 	bne.w	80264b0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 802639a:	6878      	ldr	r0, [r7, #4]
 802639c:	f7fd fa9a 	bl	80238d4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80263a0:	f241 3188 	movw	r1, #5000	; 0x1388
 80263a4:	6878      	ldr	r0, [r7, #4]
 80263a6:	f000 fad0 	bl	802694a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80263aa:	687b      	ldr	r3, [r7, #4]
 80263ac:	681b      	ldr	r3, [r3, #0]
 80263ae:	689a      	ldr	r2, [r3, #8]
 80263b0:	4b42      	ldr	r3, [pc, #264]	; (80264bc <HAL_OSPI_Init+0x150>)
 80263b2:	4013      	ands	r3, r2
 80263b4:	687a      	ldr	r2, [r7, #4]
 80263b6:	68d1      	ldr	r1, [r2, #12]
 80263b8:	687a      	ldr	r2, [r7, #4]
 80263ba:	6912      	ldr	r2, [r2, #16]
 80263bc:	3a01      	subs	r2, #1
 80263be:	0412      	lsls	r2, r2, #16
 80263c0:	4311      	orrs	r1, r2
 80263c2:	687a      	ldr	r2, [r7, #4]
 80263c4:	6952      	ldr	r2, [r2, #20]
 80263c6:	3a01      	subs	r2, #1
 80263c8:	0212      	lsls	r2, r2, #8
 80263ca:	4311      	orrs	r1, r2
 80263cc:	687a      	ldr	r2, [r7, #4]
 80263ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80263d0:	4311      	orrs	r1, r2
 80263d2:	687a      	ldr	r2, [r7, #4]
 80263d4:	69d2      	ldr	r2, [r2, #28]
 80263d6:	4311      	orrs	r1, r2
 80263d8:	687a      	ldr	r2, [r7, #4]
 80263da:	6812      	ldr	r2, [r2, #0]
 80263dc:	430b      	orrs	r3, r1
 80263de:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80263e0:	687b      	ldr	r3, [r7, #4]
 80263e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80263e4:	687b      	ldr	r3, [r7, #4]
 80263e6:	681b      	ldr	r3, [r3, #0]
 80263e8:	0412      	lsls	r2, r2, #16
 80263ea:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80263ec:	687b      	ldr	r3, [r7, #4]
 80263ee:	681b      	ldr	r3, [r3, #0]
 80263f0:	681b      	ldr	r3, [r3, #0]
 80263f2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80263f6:	687b      	ldr	r3, [r7, #4]
 80263f8:	685b      	ldr	r3, [r3, #4]
 80263fa:	3b01      	subs	r3, #1
 80263fc:	021a      	lsls	r2, r3, #8
 80263fe:	687b      	ldr	r3, [r7, #4]
 8026400:	681b      	ldr	r3, [r3, #0]
 8026402:	430a      	orrs	r2, r1
 8026404:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8026406:	687b      	ldr	r3, [r7, #4]
 8026408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802640a:	9300      	str	r3, [sp, #0]
 802640c:	68bb      	ldr	r3, [r7, #8]
 802640e:	2200      	movs	r2, #0
 8026410:	2120      	movs	r1, #32
 8026412:	6878      	ldr	r0, [r7, #4]
 8026414:	f000 fddc 	bl	8026fd0 <OSPI_WaitFlagStateUntilTimeout>
 8026418:	4603      	mov	r3, r0
 802641a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 802641c:	7bfb      	ldrb	r3, [r7, #15]
 802641e:	2b00      	cmp	r3, #0
 8026420:	d146      	bne.n	80264b0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8026422:	687b      	ldr	r3, [r7, #4]
 8026424:	681b      	ldr	r3, [r3, #0]
 8026426:	68db      	ldr	r3, [r3, #12]
 8026428:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 802642c:	687b      	ldr	r3, [r7, #4]
 802642e:	6a1b      	ldr	r3, [r3, #32]
 8026430:	1e5a      	subs	r2, r3, #1
 8026432:	687b      	ldr	r3, [r7, #4]
 8026434:	681b      	ldr	r3, [r3, #0]
 8026436:	430a      	orrs	r2, r1
 8026438:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	681b      	ldr	r3, [r3, #0]
 802643e:	681b      	ldr	r3, [r3, #0]
 8026440:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8026444:	687b      	ldr	r3, [r7, #4]
 8026446:	689a      	ldr	r2, [r3, #8]
 8026448:	687b      	ldr	r3, [r7, #4]
 802644a:	681b      	ldr	r3, [r3, #0]
 802644c:	430a      	orrs	r2, r1
 802644e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8026450:	687b      	ldr	r3, [r7, #4]
 8026452:	681b      	ldr	r3, [r3, #0]
 8026454:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8026458:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 802645c:	687b      	ldr	r3, [r7, #4]
 802645e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026460:	687b      	ldr	r3, [r7, #4]
 8026462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026464:	431a      	orrs	r2, r3
 8026466:	687b      	ldr	r3, [r7, #4]
 8026468:	681b      	ldr	r3, [r3, #0]
 802646a:	430a      	orrs	r2, r1
 802646c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8026470:	687b      	ldr	r3, [r7, #4]
 8026472:	681b      	ldr	r3, [r3, #0]
 8026474:	681a      	ldr	r2, [r3, #0]
 8026476:	687b      	ldr	r3, [r7, #4]
 8026478:	681b      	ldr	r3, [r3, #0]
 802647a:	f042 0201 	orr.w	r2, r2, #1
 802647e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8026480:	687b      	ldr	r3, [r7, #4]
 8026482:	699b      	ldr	r3, [r3, #24]
 8026484:	2b02      	cmp	r3, #2
 8026486:	d107      	bne.n	8026498 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8026488:	687b      	ldr	r3, [r7, #4]
 802648a:	681b      	ldr	r3, [r3, #0]
 802648c:	689a      	ldr	r2, [r3, #8]
 802648e:	687b      	ldr	r3, [r7, #4]
 8026490:	681b      	ldr	r3, [r3, #0]
 8026492:	f042 0202 	orr.w	r2, r2, #2
 8026496:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8026498:	687b      	ldr	r3, [r7, #4]
 802649a:	68db      	ldr	r3, [r3, #12]
 802649c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80264a0:	d103      	bne.n	80264aa <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80264a2:	687b      	ldr	r3, [r7, #4]
 80264a4:	2201      	movs	r2, #1
 80264a6:	645a      	str	r2, [r3, #68]	; 0x44
 80264a8:	e002      	b.n	80264b0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	2202      	movs	r2, #2
 80264ae:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80264b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80264b2:	4618      	mov	r0, r3
 80264b4:	3710      	adds	r7, #16
 80264b6:	46bd      	mov	sp, r7
 80264b8:	bd80      	pop	{r7, pc}
 80264ba:	bf00      	nop
 80264bc:	f8e0f8f4 	.word	0xf8e0f8f4

080264c0 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80264c0:	b580      	push	{r7, lr}
 80264c2:	b084      	sub	sp, #16
 80264c4:	af00      	add	r7, sp, #0
 80264c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80264c8:	2300      	movs	r3, #0
 80264ca:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80264cc:	687b      	ldr	r3, [r7, #4]
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	d102      	bne.n	80264d8 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80264d2:	2301      	movs	r3, #1
 80264d4:	73fb      	strb	r3, [r7, #15]
 80264d6:	e015      	b.n	8026504 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 80264d8:	687b      	ldr	r3, [r7, #4]
 80264da:	681b      	ldr	r3, [r3, #0]
 80264dc:	681a      	ldr	r2, [r3, #0]
 80264de:	687b      	ldr	r3, [r7, #4]
 80264e0:	681b      	ldr	r3, [r3, #0]
 80264e2:	f022 0201 	bic.w	r2, r2, #1
 80264e6:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80264e8:	687b      	ldr	r3, [r7, #4]
 80264ea:	681b      	ldr	r3, [r3, #0]
 80264ec:	689a      	ldr	r2, [r3, #8]
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	681b      	ldr	r3, [r3, #0]
 80264f2:	f022 0202 	bic.w	r2, r2, #2
 80264f6:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 80264f8:	6878      	ldr	r0, [r7, #4]
 80264fa:	f7fd fa57 	bl	80239ac <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 80264fe:	687b      	ldr	r3, [r7, #4]
 8026500:	2200      	movs	r2, #0
 8026502:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8026504:	7bfb      	ldrb	r3, [r7, #15]
}
 8026506:	4618      	mov	r0, r3
 8026508:	3710      	adds	r7, #16
 802650a:	46bd      	mov	sp, r7
 802650c:	bd80      	pop	{r7, pc}

0802650e <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 802650e:	b580      	push	{r7, lr}
 8026510:	b08a      	sub	sp, #40	; 0x28
 8026512:	af02      	add	r7, sp, #8
 8026514:	60f8      	str	r0, [r7, #12]
 8026516:	60b9      	str	r1, [r7, #8]
 8026518:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 802651a:	f7fd fee3 	bl	80242e4 <HAL_GetTick>
 802651e:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8026520:	68bb      	ldr	r3, [r7, #8]
 8026522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026524:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8026526:	68fb      	ldr	r3, [r7, #12]
 8026528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802652a:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 802652c:	697b      	ldr	r3, [r7, #20]
 802652e:	2b02      	cmp	r3, #2
 8026530:	d104      	bne.n	802653c <HAL_OSPI_Command+0x2e>
 8026532:	68fb      	ldr	r3, [r7, #12]
 8026534:	68db      	ldr	r3, [r3, #12]
 8026536:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802653a:	d10d      	bne.n	8026558 <HAL_OSPI_Command+0x4a>
 802653c:	697b      	ldr	r3, [r7, #20]
 802653e:	2b14      	cmp	r3, #20
 8026540:	d103      	bne.n	802654a <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8026542:	68bb      	ldr	r3, [r7, #8]
 8026544:	681b      	ldr	r3, [r3, #0]
 8026546:	2b02      	cmp	r3, #2
 8026548:	d006      	beq.n	8026558 <HAL_OSPI_Command+0x4a>
 802654a:	697b      	ldr	r3, [r7, #20]
 802654c:	2b24      	cmp	r3, #36	; 0x24
 802654e:	d153      	bne.n	80265f8 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8026550:	68bb      	ldr	r3, [r7, #8]
 8026552:	681b      	ldr	r3, [r3, #0]
 8026554:	2b01      	cmp	r3, #1
 8026556:	d14f      	bne.n	80265f8 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8026558:	687b      	ldr	r3, [r7, #4]
 802655a:	9300      	str	r3, [sp, #0]
 802655c:	69bb      	ldr	r3, [r7, #24]
 802655e:	2200      	movs	r2, #0
 8026560:	2120      	movs	r1, #32
 8026562:	68f8      	ldr	r0, [r7, #12]
 8026564:	f000 fd34 	bl	8026fd0 <OSPI_WaitFlagStateUntilTimeout>
 8026568:	4603      	mov	r3, r0
 802656a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 802656c:	7ffb      	ldrb	r3, [r7, #31]
 802656e:	2b00      	cmp	r3, #0
 8026570:	d148      	bne.n	8026604 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8026572:	68fb      	ldr	r3, [r7, #12]
 8026574:	2200      	movs	r2, #0
 8026576:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8026578:	68b9      	ldr	r1, [r7, #8]
 802657a:	68f8      	ldr	r0, [r7, #12]
 802657c:	f000 fd60 	bl	8027040 <OSPI_ConfigCmd>
 8026580:	4603      	mov	r3, r0
 8026582:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8026584:	7ffb      	ldrb	r3, [r7, #31]
 8026586:	2b00      	cmp	r3, #0
 8026588:	d13c      	bne.n	8026604 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 802658a:	68bb      	ldr	r3, [r7, #8]
 802658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802658e:	2b00      	cmp	r3, #0
 8026590:	d10e      	bne.n	80265b0 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8026592:	687b      	ldr	r3, [r7, #4]
 8026594:	9300      	str	r3, [sp, #0]
 8026596:	69bb      	ldr	r3, [r7, #24]
 8026598:	2201      	movs	r2, #1
 802659a:	2102      	movs	r1, #2
 802659c:	68f8      	ldr	r0, [r7, #12]
 802659e:	f000 fd17 	bl	8026fd0 <OSPI_WaitFlagStateUntilTimeout>
 80265a2:	4603      	mov	r3, r0
 80265a4:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80265a6:	68fb      	ldr	r3, [r7, #12]
 80265a8:	681b      	ldr	r3, [r3, #0]
 80265aa:	2202      	movs	r2, #2
 80265ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80265ae:	e029      	b.n	8026604 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80265b0:	68bb      	ldr	r3, [r7, #8]
 80265b2:	681b      	ldr	r3, [r3, #0]
 80265b4:	2b00      	cmp	r3, #0
 80265b6:	d103      	bne.n	80265c0 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80265b8:	68fb      	ldr	r3, [r7, #12]
 80265ba:	2204      	movs	r2, #4
 80265bc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80265be:	e021      	b.n	8026604 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80265c0:	68bb      	ldr	r3, [r7, #8]
 80265c2:	681b      	ldr	r3, [r3, #0]
 80265c4:	2b01      	cmp	r3, #1
 80265c6:	d10b      	bne.n	80265e0 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80265c8:	68fb      	ldr	r3, [r7, #12]
 80265ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80265cc:	2b24      	cmp	r3, #36	; 0x24
 80265ce:	d103      	bne.n	80265d8 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80265d0:	68fb      	ldr	r3, [r7, #12]
 80265d2:	2204      	movs	r2, #4
 80265d4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80265d6:	e015      	b.n	8026604 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80265d8:	68fb      	ldr	r3, [r7, #12]
 80265da:	2214      	movs	r2, #20
 80265dc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80265de:	e011      	b.n	8026604 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80265e0:	68fb      	ldr	r3, [r7, #12]
 80265e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80265e4:	2b14      	cmp	r3, #20
 80265e6:	d103      	bne.n	80265f0 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80265e8:	68fb      	ldr	r3, [r7, #12]
 80265ea:	2204      	movs	r2, #4
 80265ec:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80265ee:	e009      	b.n	8026604 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80265f0:	68fb      	ldr	r3, [r7, #12]
 80265f2:	2224      	movs	r2, #36	; 0x24
 80265f4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80265f6:	e005      	b.n	8026604 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80265f8:	2301      	movs	r3, #1
 80265fa:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80265fc:	68fb      	ldr	r3, [r7, #12]
 80265fe:	2210      	movs	r2, #16
 8026600:	649a      	str	r2, [r3, #72]	; 0x48
 8026602:	e000      	b.n	8026606 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8026604:	bf00      	nop
  }

  /* Return function status */
  return status;
 8026606:	7ffb      	ldrb	r3, [r7, #31]
}
 8026608:	4618      	mov	r0, r3
 802660a:	3720      	adds	r7, #32
 802660c:	46bd      	mov	sp, r7
 802660e:	bd80      	pop	{r7, pc}

08026610 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8026610:	b580      	push	{r7, lr}
 8026612:	b08a      	sub	sp, #40	; 0x28
 8026614:	af02      	add	r7, sp, #8
 8026616:	60f8      	str	r0, [r7, #12]
 8026618:	60b9      	str	r1, [r7, #8]
 802661a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 802661c:	f7fd fe62 	bl	80242e4 <HAL_GetTick>
 8026620:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8026622:	68fb      	ldr	r3, [r7, #12]
 8026624:	681b      	ldr	r3, [r3, #0]
 8026626:	3350      	adds	r3, #80	; 0x50
 8026628:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 802662a:	68bb      	ldr	r3, [r7, #8]
 802662c:	2b00      	cmp	r3, #0
 802662e:	d105      	bne.n	802663c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8026630:	2301      	movs	r3, #1
 8026632:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8026634:	68fb      	ldr	r3, [r7, #12]
 8026636:	2208      	movs	r2, #8
 8026638:	649a      	str	r2, [r3, #72]	; 0x48
 802663a:	e057      	b.n	80266ec <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 802663c:	68fb      	ldr	r3, [r7, #12]
 802663e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026640:	2b04      	cmp	r3, #4
 8026642:	d14e      	bne.n	80266e2 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8026644:	68fb      	ldr	r3, [r7, #12]
 8026646:	681b      	ldr	r3, [r3, #0]
 8026648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802664a:	1c5a      	adds	r2, r3, #1
 802664c:	68fb      	ldr	r3, [r7, #12]
 802664e:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8026650:	68fb      	ldr	r3, [r7, #12]
 8026652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8026654:	68fb      	ldr	r3, [r7, #12]
 8026656:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8026658:	68fb      	ldr	r3, [r7, #12]
 802665a:	68ba      	ldr	r2, [r7, #8]
 802665c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 802665e:	68fb      	ldr	r3, [r7, #12]
 8026660:	681b      	ldr	r3, [r3, #0]
 8026662:	681a      	ldr	r2, [r3, #0]
 8026664:	68fb      	ldr	r3, [r7, #12]
 8026666:	681b      	ldr	r3, [r3, #0]
 8026668:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802666c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 802666e:	687b      	ldr	r3, [r7, #4]
 8026670:	9300      	str	r3, [sp, #0]
 8026672:	69bb      	ldr	r3, [r7, #24]
 8026674:	2201      	movs	r2, #1
 8026676:	2104      	movs	r1, #4
 8026678:	68f8      	ldr	r0, [r7, #12]
 802667a:	f000 fca9 	bl	8026fd0 <OSPI_WaitFlagStateUntilTimeout>
 802667e:	4603      	mov	r3, r0
 8026680:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8026682:	7ffb      	ldrb	r3, [r7, #31]
 8026684:	2b00      	cmp	r3, #0
 8026686:	d113      	bne.n	80266b0 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8026688:	68fb      	ldr	r3, [r7, #12]
 802668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802668c:	781a      	ldrb	r2, [r3, #0]
 802668e:	697b      	ldr	r3, [r7, #20]
 8026690:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8026692:	68fb      	ldr	r3, [r7, #12]
 8026694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026696:	1c5a      	adds	r2, r3, #1
 8026698:	68fb      	ldr	r3, [r7, #12]
 802669a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 802669c:	68fb      	ldr	r3, [r7, #12]
 802669e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266a0:	1e5a      	subs	r2, r3, #1
 80266a2:	68fb      	ldr	r3, [r7, #12]
 80266a4:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80266a6:	68fb      	ldr	r3, [r7, #12]
 80266a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266aa:	2b00      	cmp	r3, #0
 80266ac:	d1df      	bne.n	802666e <HAL_OSPI_Transmit+0x5e>
 80266ae:	e000      	b.n	80266b2 <HAL_OSPI_Transmit+0xa2>
          break;
 80266b0:	bf00      	nop

      if (status == HAL_OK)
 80266b2:	7ffb      	ldrb	r3, [r7, #31]
 80266b4:	2b00      	cmp	r3, #0
 80266b6:	d119      	bne.n	80266ec <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80266b8:	687b      	ldr	r3, [r7, #4]
 80266ba:	9300      	str	r3, [sp, #0]
 80266bc:	69bb      	ldr	r3, [r7, #24]
 80266be:	2201      	movs	r2, #1
 80266c0:	2102      	movs	r1, #2
 80266c2:	68f8      	ldr	r0, [r7, #12]
 80266c4:	f000 fc84 	bl	8026fd0 <OSPI_WaitFlagStateUntilTimeout>
 80266c8:	4603      	mov	r3, r0
 80266ca:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80266cc:	7ffb      	ldrb	r3, [r7, #31]
 80266ce:	2b00      	cmp	r3, #0
 80266d0:	d10c      	bne.n	80266ec <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80266d2:	68fb      	ldr	r3, [r7, #12]
 80266d4:	681b      	ldr	r3, [r3, #0]
 80266d6:	2202      	movs	r2, #2
 80266d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80266da:	68fb      	ldr	r3, [r7, #12]
 80266dc:	2202      	movs	r2, #2
 80266de:	645a      	str	r2, [r3, #68]	; 0x44
 80266e0:	e004      	b.n	80266ec <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80266e2:	2301      	movs	r3, #1
 80266e4:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80266e6:	68fb      	ldr	r3, [r7, #12]
 80266e8:	2210      	movs	r2, #16
 80266ea:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80266ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80266ee:	4618      	mov	r0, r3
 80266f0:	3720      	adds	r7, #32
 80266f2:	46bd      	mov	sp, r7
 80266f4:	bd80      	pop	{r7, pc}

080266f6 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80266f6:	b580      	push	{r7, lr}
 80266f8:	b08c      	sub	sp, #48	; 0x30
 80266fa:	af02      	add	r7, sp, #8
 80266fc:	60f8      	str	r0, [r7, #12]
 80266fe:	60b9      	str	r1, [r7, #8]
 8026700:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8026702:	f7fd fdef 	bl	80242e4 <HAL_GetTick>
 8026706:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8026708:	68fb      	ldr	r3, [r7, #12]
 802670a:	681b      	ldr	r3, [r3, #0]
 802670c:	3350      	adds	r3, #80	; 0x50
 802670e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8026710:	68fb      	ldr	r3, [r7, #12]
 8026712:	681b      	ldr	r3, [r3, #0]
 8026714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026716:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8026718:	68fb      	ldr	r3, [r7, #12]
 802671a:	681b      	ldr	r3, [r3, #0]
 802671c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8026720:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8026722:	68bb      	ldr	r3, [r7, #8]
 8026724:	2b00      	cmp	r3, #0
 8026726:	d106      	bne.n	8026736 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8026728:	2301      	movs	r3, #1
 802672a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 802672e:	68fb      	ldr	r3, [r7, #12]
 8026730:	2208      	movs	r2, #8
 8026732:	649a      	str	r2, [r3, #72]	; 0x48
 8026734:	e07c      	b.n	8026830 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8026736:	68fb      	ldr	r3, [r7, #12]
 8026738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802673a:	2b04      	cmp	r3, #4
 802673c:	d172      	bne.n	8026824 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 802673e:	68fb      	ldr	r3, [r7, #12]
 8026740:	681b      	ldr	r3, [r3, #0]
 8026742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026744:	1c5a      	adds	r2, r3, #1
 8026746:	68fb      	ldr	r3, [r7, #12]
 8026748:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 802674a:	68fb      	ldr	r3, [r7, #12]
 802674c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802674e:	68fb      	ldr	r3, [r7, #12]
 8026750:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8026752:	68fb      	ldr	r3, [r7, #12]
 8026754:	68ba      	ldr	r2, [r7, #8]
 8026756:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8026758:	68fb      	ldr	r3, [r7, #12]
 802675a:	681b      	ldr	r3, [r3, #0]
 802675c:	681b      	ldr	r3, [r3, #0]
 802675e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8026762:	68fb      	ldr	r3, [r7, #12]
 8026764:	681b      	ldr	r3, [r3, #0]
 8026766:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802676a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 802676c:	68fb      	ldr	r3, [r7, #12]
 802676e:	68db      	ldr	r3, [r3, #12]
 8026770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8026774:	d104      	bne.n	8026780 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8026776:	68fb      	ldr	r3, [r7, #12]
 8026778:	681b      	ldr	r3, [r3, #0]
 802677a:	69ba      	ldr	r2, [r7, #24]
 802677c:	649a      	str	r2, [r3, #72]	; 0x48
 802677e:	e011      	b.n	80267a4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8026780:	68fb      	ldr	r3, [r7, #12]
 8026782:	681b      	ldr	r3, [r3, #0]
 8026784:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8026788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802678c:	2b00      	cmp	r3, #0
 802678e:	d004      	beq.n	802679a <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8026790:	68fb      	ldr	r3, [r7, #12]
 8026792:	681b      	ldr	r3, [r3, #0]
 8026794:	69ba      	ldr	r2, [r7, #24]
 8026796:	649a      	str	r2, [r3, #72]	; 0x48
 8026798:	e004      	b.n	80267a4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 802679a:	68fb      	ldr	r3, [r7, #12]
 802679c:	681b      	ldr	r3, [r3, #0]
 802679e:	697a      	ldr	r2, [r7, #20]
 80267a0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80267a4:	687b      	ldr	r3, [r7, #4]
 80267a6:	9300      	str	r3, [sp, #0]
 80267a8:	6a3b      	ldr	r3, [r7, #32]
 80267aa:	2201      	movs	r2, #1
 80267ac:	2106      	movs	r1, #6
 80267ae:	68f8      	ldr	r0, [r7, #12]
 80267b0:	f000 fc0e 	bl	8026fd0 <OSPI_WaitFlagStateUntilTimeout>
 80267b4:	4603      	mov	r3, r0
 80267b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80267ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80267be:	2b00      	cmp	r3, #0
 80267c0:	d114      	bne.n	80267ec <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80267c2:	68fb      	ldr	r3, [r7, #12]
 80267c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80267c6:	69fa      	ldr	r2, [r7, #28]
 80267c8:	7812      	ldrb	r2, [r2, #0]
 80267ca:	b2d2      	uxtb	r2, r2
 80267cc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80267ce:	68fb      	ldr	r3, [r7, #12]
 80267d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80267d2:	1c5a      	adds	r2, r3, #1
 80267d4:	68fb      	ldr	r3, [r7, #12]
 80267d6:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80267d8:	68fb      	ldr	r3, [r7, #12]
 80267da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80267dc:	1e5a      	subs	r2, r3, #1
 80267de:	68fb      	ldr	r3, [r7, #12]
 80267e0:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 80267e2:	68fb      	ldr	r3, [r7, #12]
 80267e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80267e6:	2b00      	cmp	r3, #0
 80267e8:	d1dc      	bne.n	80267a4 <HAL_OSPI_Receive+0xae>
 80267ea:	e000      	b.n	80267ee <HAL_OSPI_Receive+0xf8>
          break;
 80267ec:	bf00      	nop

      if (status == HAL_OK)
 80267ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80267f2:	2b00      	cmp	r3, #0
 80267f4:	d11c      	bne.n	8026830 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	9300      	str	r3, [sp, #0]
 80267fa:	6a3b      	ldr	r3, [r7, #32]
 80267fc:	2201      	movs	r2, #1
 80267fe:	2102      	movs	r1, #2
 8026800:	68f8      	ldr	r0, [r7, #12]
 8026802:	f000 fbe5 	bl	8026fd0 <OSPI_WaitFlagStateUntilTimeout>
 8026806:	4603      	mov	r3, r0
 8026808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 802680c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8026810:	2b00      	cmp	r3, #0
 8026812:	d10d      	bne.n	8026830 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8026814:	68fb      	ldr	r3, [r7, #12]
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	2202      	movs	r2, #2
 802681a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 802681c:	68fb      	ldr	r3, [r7, #12]
 802681e:	2202      	movs	r2, #2
 8026820:	645a      	str	r2, [r3, #68]	; 0x44
 8026822:	e005      	b.n	8026830 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8026824:	2301      	movs	r3, #1
 8026826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 802682a:	68fb      	ldr	r3, [r7, #12]
 802682c:	2210      	movs	r2, #16
 802682e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8026830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8026834:	4618      	mov	r0, r3
 8026836:	3728      	adds	r7, #40	; 0x28
 8026838:	46bd      	mov	sp, r7
 802683a:	bd80      	pop	{r7, pc}

0802683c <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 802683c:	b580      	push	{r7, lr}
 802683e:	b08a      	sub	sp, #40	; 0x28
 8026840:	af02      	add	r7, sp, #8
 8026842:	60f8      	str	r0, [r7, #12]
 8026844:	60b9      	str	r1, [r7, #8]
 8026846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8026848:	f7fd fd4c 	bl	80242e4 <HAL_GetTick>
 802684c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 802684e:	68fb      	ldr	r3, [r7, #12]
 8026850:	681b      	ldr	r3, [r3, #0]
 8026852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026854:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8026856:	68fb      	ldr	r3, [r7, #12]
 8026858:	681b      	ldr	r3, [r3, #0]
 802685a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 802685e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8026860:	68fb      	ldr	r3, [r7, #12]
 8026862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026864:	2b04      	cmp	r3, #4
 8026866:	d164      	bne.n	8026932 <HAL_OSPI_AutoPolling+0xf6>
 8026868:	68bb      	ldr	r3, [r7, #8]
 802686a:	68db      	ldr	r3, [r3, #12]
 802686c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026870:	d15f      	bne.n	8026932 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8026872:	687b      	ldr	r3, [r7, #4]
 8026874:	9300      	str	r3, [sp, #0]
 8026876:	69bb      	ldr	r3, [r7, #24]
 8026878:	2200      	movs	r2, #0
 802687a:	2120      	movs	r1, #32
 802687c:	68f8      	ldr	r0, [r7, #12]
 802687e:	f000 fba7 	bl	8026fd0 <OSPI_WaitFlagStateUntilTimeout>
 8026882:	4603      	mov	r3, r0
 8026884:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8026886:	7ffb      	ldrb	r3, [r7, #31]
 8026888:	2b00      	cmp	r3, #0
 802688a:	d158      	bne.n	802693e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 802688c:	68fb      	ldr	r3, [r7, #12]
 802688e:	681b      	ldr	r3, [r3, #0]
 8026890:	68ba      	ldr	r2, [r7, #8]
 8026892:	6812      	ldr	r2, [r2, #0]
 8026894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8026898:	68fb      	ldr	r3, [r7, #12]
 802689a:	681b      	ldr	r3, [r3, #0]
 802689c:	68ba      	ldr	r2, [r7, #8]
 802689e:	6852      	ldr	r2, [r2, #4]
 80268a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80268a4:	68fb      	ldr	r3, [r7, #12]
 80268a6:	681b      	ldr	r3, [r3, #0]
 80268a8:	68ba      	ldr	r2, [r7, #8]
 80268aa:	6912      	ldr	r2, [r2, #16]
 80268ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80268b0:	68fb      	ldr	r3, [r7, #12]
 80268b2:	681b      	ldr	r3, [r3, #0]
 80268b4:	681b      	ldr	r3, [r3, #0]
 80268b6:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80268ba:	68bb      	ldr	r3, [r7, #8]
 80268bc:	6899      	ldr	r1, [r3, #8]
 80268be:	68bb      	ldr	r3, [r7, #8]
 80268c0:	68db      	ldr	r3, [r3, #12]
 80268c2:	430b      	orrs	r3, r1
 80268c4:	431a      	orrs	r2, r3
 80268c6:	68fb      	ldr	r3, [r7, #12]
 80268c8:	681b      	ldr	r3, [r3, #0]
 80268ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80268ce:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80268d0:	68fb      	ldr	r3, [r7, #12]
 80268d2:	68db      	ldr	r3, [r3, #12]
 80268d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80268d8:	d104      	bne.n	80268e4 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80268da:	68fb      	ldr	r3, [r7, #12]
 80268dc:	681b      	ldr	r3, [r3, #0]
 80268de:	697a      	ldr	r2, [r7, #20]
 80268e0:	649a      	str	r2, [r3, #72]	; 0x48
 80268e2:	e011      	b.n	8026908 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80268e4:	68fb      	ldr	r3, [r7, #12]
 80268e6:	681b      	ldr	r3, [r3, #0]
 80268e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80268ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80268f0:	2b00      	cmp	r3, #0
 80268f2:	d004      	beq.n	80268fe <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80268f4:	68fb      	ldr	r3, [r7, #12]
 80268f6:	681b      	ldr	r3, [r3, #0]
 80268f8:	697a      	ldr	r2, [r7, #20]
 80268fa:	649a      	str	r2, [r3, #72]	; 0x48
 80268fc:	e004      	b.n	8026908 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80268fe:	68fb      	ldr	r3, [r7, #12]
 8026900:	681b      	ldr	r3, [r3, #0]
 8026902:	693a      	ldr	r2, [r7, #16]
 8026904:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8026908:	687b      	ldr	r3, [r7, #4]
 802690a:	9300      	str	r3, [sp, #0]
 802690c:	69bb      	ldr	r3, [r7, #24]
 802690e:	2201      	movs	r2, #1
 8026910:	2108      	movs	r1, #8
 8026912:	68f8      	ldr	r0, [r7, #12]
 8026914:	f000 fb5c 	bl	8026fd0 <OSPI_WaitFlagStateUntilTimeout>
 8026918:	4603      	mov	r3, r0
 802691a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 802691c:	7ffb      	ldrb	r3, [r7, #31]
 802691e:	2b00      	cmp	r3, #0
 8026920:	d10d      	bne.n	802693e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8026922:	68fb      	ldr	r3, [r7, #12]
 8026924:	681b      	ldr	r3, [r3, #0]
 8026926:	2208      	movs	r2, #8
 8026928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 802692a:	68fb      	ldr	r3, [r7, #12]
 802692c:	2202      	movs	r2, #2
 802692e:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8026930:	e005      	b.n	802693e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8026932:	2301      	movs	r3, #1
 8026934:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8026936:	68fb      	ldr	r3, [r7, #12]
 8026938:	2210      	movs	r2, #16
 802693a:	649a      	str	r2, [r3, #72]	; 0x48
 802693c:	e000      	b.n	8026940 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 802693e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8026940:	7ffb      	ldrb	r3, [r7, #31]
}
 8026942:	4618      	mov	r0, r3
 8026944:	3720      	adds	r7, #32
 8026946:	46bd      	mov	sp, r7
 8026948:	bd80      	pop	{r7, pc}

0802694a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 802694a:	b480      	push	{r7}
 802694c:	b083      	sub	sp, #12
 802694e:	af00      	add	r7, sp, #0
 8026950:	6078      	str	r0, [r7, #4]
 8026952:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	683a      	ldr	r2, [r7, #0]
 8026958:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 802695a:	2300      	movs	r3, #0
}
 802695c:	4618      	mov	r0, r3
 802695e:	370c      	adds	r7, #12
 8026960:	46bd      	mov	sp, r7
 8026962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026966:	4770      	bx	lr

08026968 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8026968:	b580      	push	{r7, lr}
 802696a:	b092      	sub	sp, #72	; 0x48
 802696c:	af00      	add	r7, sp, #0
 802696e:	60f8      	str	r0, [r7, #12]
 8026970:	60b9      	str	r1, [r7, #8]
 8026972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8026974:	2300      	movs	r3, #0
 8026976:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 802697a:	2300      	movs	r3, #0
 802697c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8026980:	68fb      	ldr	r3, [r7, #12]
 8026982:	681b      	ldr	r3, [r3, #0]
 8026984:	4a08      	ldr	r2, [pc, #32]	; (80269a8 <HAL_OSPIM_Config+0x40>)
 8026986:	4293      	cmp	r3, r2
 8026988:	d105      	bne.n	8026996 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 802698a:	2300      	movs	r3, #0
 802698c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 802698e:	2301      	movs	r3, #1
 8026990:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8026994:	e004      	b.n	80269a0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8026996:	2301      	movs	r3, #1
 8026998:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 802699a:	2300      	movs	r3, #0
 802699c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80269a0:	2300      	movs	r3, #0
 80269a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80269a6:	e01f      	b.n	80269e8 <HAL_OSPIM_Config+0x80>
 80269a8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80269ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80269b0:	3301      	adds	r3, #1
 80269b2:	b2d8      	uxtb	r0, r3
 80269b4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80269b8:	f107 0114 	add.w	r1, r7, #20
 80269bc:	4613      	mov	r3, r2
 80269be:	009b      	lsls	r3, r3, #2
 80269c0:	4413      	add	r3, r2
 80269c2:	009b      	lsls	r3, r3, #2
 80269c4:	440b      	add	r3, r1
 80269c6:	4619      	mov	r1, r3
 80269c8:	f000 fc9c 	bl	8027304 <OSPIM_GetConfig>
 80269cc:	4603      	mov	r3, r0
 80269ce:	2b00      	cmp	r3, #0
 80269d0:	d005      	beq.n	80269de <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80269d2:	2301      	movs	r3, #1
 80269d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80269d8:	68fb      	ldr	r3, [r7, #12]
 80269da:	2208      	movs	r2, #8
 80269dc:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80269de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80269e2:	3301      	adds	r3, #1
 80269e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80269e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80269ec:	2b01      	cmp	r3, #1
 80269ee:	d9dd      	bls.n	80269ac <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80269f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80269f4:	2b00      	cmp	r3, #0
 80269f6:	f040 82de 	bne.w	8026fb6 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80269fa:	4bc6      	ldr	r3, [pc, #792]	; (8026d14 <HAL_OSPIM_Config+0x3ac>)
 80269fc:	681b      	ldr	r3, [r3, #0]
 80269fe:	f003 0301 	and.w	r3, r3, #1
 8026a02:	2b00      	cmp	r3, #0
 8026a04:	d00b      	beq.n	8026a1e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8026a06:	4bc3      	ldr	r3, [pc, #780]	; (8026d14 <HAL_OSPIM_Config+0x3ac>)
 8026a08:	681b      	ldr	r3, [r3, #0]
 8026a0a:	4ac2      	ldr	r2, [pc, #776]	; (8026d14 <HAL_OSPIM_Config+0x3ac>)
 8026a0c:	f023 0301 	bic.w	r3, r3, #1
 8026a10:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8026a12:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026a16:	f043 0301 	orr.w	r3, r3, #1
 8026a1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8026a1e:	4bbe      	ldr	r3, [pc, #760]	; (8026d18 <HAL_OSPIM_Config+0x3b0>)
 8026a20:	681b      	ldr	r3, [r3, #0]
 8026a22:	f003 0301 	and.w	r3, r3, #1
 8026a26:	2b00      	cmp	r3, #0
 8026a28:	d00b      	beq.n	8026a42 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8026a2a:	4bbb      	ldr	r3, [pc, #748]	; (8026d18 <HAL_OSPIM_Config+0x3b0>)
 8026a2c:	681b      	ldr	r3, [r3, #0]
 8026a2e:	4aba      	ldr	r2, [pc, #744]	; (8026d18 <HAL_OSPIM_Config+0x3b0>)
 8026a30:	f023 0301 	bic.w	r3, r3, #1
 8026a34:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8026a36:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026a3a:	f043 0302 	orr.w	r3, r3, #2
 8026a3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8026a42:	49b6      	ldr	r1, [pc, #728]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026a46:	4613      	mov	r3, r2
 8026a48:	009b      	lsls	r3, r3, #2
 8026a4a:	4413      	add	r3, r2
 8026a4c:	009b      	lsls	r3, r3, #2
 8026a4e:	3348      	adds	r3, #72	; 0x48
 8026a50:	443b      	add	r3, r7
 8026a52:	3b2c      	subs	r3, #44	; 0x2c
 8026a54:	681b      	ldr	r3, [r3, #0]
 8026a56:	3b01      	subs	r3, #1
 8026a58:	009b      	lsls	r3, r3, #2
 8026a5a:	440b      	add	r3, r1
 8026a5c:	6859      	ldr	r1, [r3, #4]
 8026a5e:	48af      	ldr	r0, [pc, #700]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026a60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026a62:	4613      	mov	r3, r2
 8026a64:	009b      	lsls	r3, r3, #2
 8026a66:	4413      	add	r3, r2
 8026a68:	009b      	lsls	r3, r3, #2
 8026a6a:	3348      	adds	r3, #72	; 0x48
 8026a6c:	443b      	add	r3, r7
 8026a6e:	3b2c      	subs	r3, #44	; 0x2c
 8026a70:	681b      	ldr	r3, [r3, #0]
 8026a72:	3b01      	subs	r3, #1
 8026a74:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8026a78:	009b      	lsls	r3, r3, #2
 8026a7a:	4403      	add	r3, r0
 8026a7c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8026a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026a80:	4613      	mov	r3, r2
 8026a82:	009b      	lsls	r3, r3, #2
 8026a84:	4413      	add	r3, r2
 8026a86:	009b      	lsls	r3, r3, #2
 8026a88:	3348      	adds	r3, #72	; 0x48
 8026a8a:	443b      	add	r3, r7
 8026a8c:	3b34      	subs	r3, #52	; 0x34
 8026a8e:	681b      	ldr	r3, [r3, #0]
 8026a90:	2b00      	cmp	r3, #0
 8026a92:	f000 80a1 	beq.w	8026bd8 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8026a96:	49a1      	ldr	r1, [pc, #644]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026a9a:	4613      	mov	r3, r2
 8026a9c:	009b      	lsls	r3, r3, #2
 8026a9e:	4413      	add	r3, r2
 8026aa0:	009b      	lsls	r3, r3, #2
 8026aa2:	3348      	adds	r3, #72	; 0x48
 8026aa4:	443b      	add	r3, r7
 8026aa6:	3b34      	subs	r3, #52	; 0x34
 8026aa8:	681b      	ldr	r3, [r3, #0]
 8026aaa:	3b01      	subs	r3, #1
 8026aac:	009b      	lsls	r3, r3, #2
 8026aae:	440b      	add	r3, r1
 8026ab0:	6859      	ldr	r1, [r3, #4]
 8026ab2:	489a      	ldr	r0, [pc, #616]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026ab4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026ab6:	4613      	mov	r3, r2
 8026ab8:	009b      	lsls	r3, r3, #2
 8026aba:	4413      	add	r3, r2
 8026abc:	009b      	lsls	r3, r3, #2
 8026abe:	3348      	adds	r3, #72	; 0x48
 8026ac0:	443b      	add	r3, r7
 8026ac2:	3b34      	subs	r3, #52	; 0x34
 8026ac4:	681b      	ldr	r3, [r3, #0]
 8026ac6:	3b01      	subs	r3, #1
 8026ac8:	f021 0201 	bic.w	r2, r1, #1
 8026acc:	009b      	lsls	r3, r3, #2
 8026ace:	4403      	add	r3, r0
 8026ad0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8026ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026ad4:	4613      	mov	r3, r2
 8026ad6:	009b      	lsls	r3, r3, #2
 8026ad8:	4413      	add	r3, r2
 8026ada:	009b      	lsls	r3, r3, #2
 8026adc:	3348      	adds	r3, #72	; 0x48
 8026ade:	443b      	add	r3, r7
 8026ae0:	3b30      	subs	r3, #48	; 0x30
 8026ae2:	681b      	ldr	r3, [r3, #0]
 8026ae4:	2b00      	cmp	r3, #0
 8026ae6:	d01d      	beq.n	8026b24 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8026ae8:	498c      	ldr	r1, [pc, #560]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026aec:	4613      	mov	r3, r2
 8026aee:	009b      	lsls	r3, r3, #2
 8026af0:	4413      	add	r3, r2
 8026af2:	009b      	lsls	r3, r3, #2
 8026af4:	3348      	adds	r3, #72	; 0x48
 8026af6:	443b      	add	r3, r7
 8026af8:	3b30      	subs	r3, #48	; 0x30
 8026afa:	681b      	ldr	r3, [r3, #0]
 8026afc:	3b01      	subs	r3, #1
 8026afe:	009b      	lsls	r3, r3, #2
 8026b00:	440b      	add	r3, r1
 8026b02:	6859      	ldr	r1, [r3, #4]
 8026b04:	4885      	ldr	r0, [pc, #532]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b08:	4613      	mov	r3, r2
 8026b0a:	009b      	lsls	r3, r3, #2
 8026b0c:	4413      	add	r3, r2
 8026b0e:	009b      	lsls	r3, r3, #2
 8026b10:	3348      	adds	r3, #72	; 0x48
 8026b12:	443b      	add	r3, r7
 8026b14:	3b30      	subs	r3, #48	; 0x30
 8026b16:	681b      	ldr	r3, [r3, #0]
 8026b18:	3b01      	subs	r3, #1
 8026b1a:	f021 0210 	bic.w	r2, r1, #16
 8026b1e:	009b      	lsls	r3, r3, #2
 8026b20:	4403      	add	r3, r0
 8026b22:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8026b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b26:	4613      	mov	r3, r2
 8026b28:	009b      	lsls	r3, r3, #2
 8026b2a:	4413      	add	r3, r2
 8026b2c:	009b      	lsls	r3, r3, #2
 8026b2e:	3348      	adds	r3, #72	; 0x48
 8026b30:	443b      	add	r3, r7
 8026b32:	3b28      	subs	r3, #40	; 0x28
 8026b34:	681b      	ldr	r3, [r3, #0]
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	d021      	beq.n	8026b7e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8026b3a:	4978      	ldr	r1, [pc, #480]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b3e:	4613      	mov	r3, r2
 8026b40:	009b      	lsls	r3, r3, #2
 8026b42:	4413      	add	r3, r2
 8026b44:	009b      	lsls	r3, r3, #2
 8026b46:	3348      	adds	r3, #72	; 0x48
 8026b48:	443b      	add	r3, r7
 8026b4a:	3b28      	subs	r3, #40	; 0x28
 8026b4c:	681b      	ldr	r3, [r3, #0]
 8026b4e:	3b01      	subs	r3, #1
 8026b50:	f003 0301 	and.w	r3, r3, #1
 8026b54:	009b      	lsls	r3, r3, #2
 8026b56:	440b      	add	r3, r1
 8026b58:	6859      	ldr	r1, [r3, #4]
 8026b5a:	4870      	ldr	r0, [pc, #448]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b5e:	4613      	mov	r3, r2
 8026b60:	009b      	lsls	r3, r3, #2
 8026b62:	4413      	add	r3, r2
 8026b64:	009b      	lsls	r3, r3, #2
 8026b66:	3348      	adds	r3, #72	; 0x48
 8026b68:	443b      	add	r3, r7
 8026b6a:	3b28      	subs	r3, #40	; 0x28
 8026b6c:	681b      	ldr	r3, [r3, #0]
 8026b6e:	3b01      	subs	r3, #1
 8026b70:	f003 0301 	and.w	r3, r3, #1
 8026b74:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8026b78:	009b      	lsls	r3, r3, #2
 8026b7a:	4403      	add	r3, r0
 8026b7c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8026b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b80:	4613      	mov	r3, r2
 8026b82:	009b      	lsls	r3, r3, #2
 8026b84:	4413      	add	r3, r2
 8026b86:	009b      	lsls	r3, r3, #2
 8026b88:	3348      	adds	r3, #72	; 0x48
 8026b8a:	443b      	add	r3, r7
 8026b8c:	3b24      	subs	r3, #36	; 0x24
 8026b8e:	681b      	ldr	r3, [r3, #0]
 8026b90:	2b00      	cmp	r3, #0
 8026b92:	d021      	beq.n	8026bd8 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8026b94:	4961      	ldr	r1, [pc, #388]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026b96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026b98:	4613      	mov	r3, r2
 8026b9a:	009b      	lsls	r3, r3, #2
 8026b9c:	4413      	add	r3, r2
 8026b9e:	009b      	lsls	r3, r3, #2
 8026ba0:	3348      	adds	r3, #72	; 0x48
 8026ba2:	443b      	add	r3, r7
 8026ba4:	3b24      	subs	r3, #36	; 0x24
 8026ba6:	681b      	ldr	r3, [r3, #0]
 8026ba8:	3b01      	subs	r3, #1
 8026baa:	f003 0301 	and.w	r3, r3, #1
 8026bae:	009b      	lsls	r3, r3, #2
 8026bb0:	440b      	add	r3, r1
 8026bb2:	6859      	ldr	r1, [r3, #4]
 8026bb4:	4859      	ldr	r0, [pc, #356]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026bb8:	4613      	mov	r3, r2
 8026bba:	009b      	lsls	r3, r3, #2
 8026bbc:	4413      	add	r3, r2
 8026bbe:	009b      	lsls	r3, r3, #2
 8026bc0:	3348      	adds	r3, #72	; 0x48
 8026bc2:	443b      	add	r3, r7
 8026bc4:	3b24      	subs	r3, #36	; 0x24
 8026bc6:	681b      	ldr	r3, [r3, #0]
 8026bc8:	3b01      	subs	r3, #1
 8026bca:	f003 0301 	and.w	r3, r3, #1
 8026bce:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8026bd2:	009b      	lsls	r3, r3, #2
 8026bd4:	4403      	add	r3, r0
 8026bd6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8026bd8:	68bb      	ldr	r3, [r7, #8]
 8026bda:	6819      	ldr	r1, [r3, #0]
 8026bdc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026be0:	4613      	mov	r3, r2
 8026be2:	009b      	lsls	r3, r3, #2
 8026be4:	4413      	add	r3, r2
 8026be6:	009b      	lsls	r3, r3, #2
 8026be8:	3348      	adds	r3, #72	; 0x48
 8026bea:	443b      	add	r3, r7
 8026bec:	3b34      	subs	r3, #52	; 0x34
 8026bee:	681b      	ldr	r3, [r3, #0]
 8026bf0:	4299      	cmp	r1, r3
 8026bf2:	d038      	beq.n	8026c66 <HAL_OSPIM_Config+0x2fe>
 8026bf4:	68bb      	ldr	r3, [r7, #8]
 8026bf6:	6859      	ldr	r1, [r3, #4]
 8026bf8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026bfc:	4613      	mov	r3, r2
 8026bfe:	009b      	lsls	r3, r3, #2
 8026c00:	4413      	add	r3, r2
 8026c02:	009b      	lsls	r3, r3, #2
 8026c04:	3348      	adds	r3, #72	; 0x48
 8026c06:	443b      	add	r3, r7
 8026c08:	3b30      	subs	r3, #48	; 0x30
 8026c0a:	681b      	ldr	r3, [r3, #0]
 8026c0c:	4299      	cmp	r1, r3
 8026c0e:	d02a      	beq.n	8026c66 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8026c10:	68bb      	ldr	r3, [r7, #8]
 8026c12:	6899      	ldr	r1, [r3, #8]
 8026c14:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c18:	4613      	mov	r3, r2
 8026c1a:	009b      	lsls	r3, r3, #2
 8026c1c:	4413      	add	r3, r2
 8026c1e:	009b      	lsls	r3, r3, #2
 8026c20:	3348      	adds	r3, #72	; 0x48
 8026c22:	443b      	add	r3, r7
 8026c24:	3b2c      	subs	r3, #44	; 0x2c
 8026c26:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8026c28:	4299      	cmp	r1, r3
 8026c2a:	d01c      	beq.n	8026c66 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8026c2c:	68bb      	ldr	r3, [r7, #8]
 8026c2e:	68d9      	ldr	r1, [r3, #12]
 8026c30:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c34:	4613      	mov	r3, r2
 8026c36:	009b      	lsls	r3, r3, #2
 8026c38:	4413      	add	r3, r2
 8026c3a:	009b      	lsls	r3, r3, #2
 8026c3c:	3348      	adds	r3, #72	; 0x48
 8026c3e:	443b      	add	r3, r7
 8026c40:	3b28      	subs	r3, #40	; 0x28
 8026c42:	681b      	ldr	r3, [r3, #0]
 8026c44:	4299      	cmp	r1, r3
 8026c46:	d00e      	beq.n	8026c66 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8026c48:	68bb      	ldr	r3, [r7, #8]
 8026c4a:	6919      	ldr	r1, [r3, #16]
 8026c4c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c50:	4613      	mov	r3, r2
 8026c52:	009b      	lsls	r3, r3, #2
 8026c54:	4413      	add	r3, r2
 8026c56:	009b      	lsls	r3, r3, #2
 8026c58:	3348      	adds	r3, #72	; 0x48
 8026c5a:	443b      	add	r3, r7
 8026c5c:	3b24      	subs	r3, #36	; 0x24
 8026c5e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8026c60:	4299      	cmp	r1, r3
 8026c62:	f040 80d3 	bne.w	8026e0c <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8026c66:	492d      	ldr	r1, [pc, #180]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026c68:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c6c:	4613      	mov	r3, r2
 8026c6e:	009b      	lsls	r3, r3, #2
 8026c70:	4413      	add	r3, r2
 8026c72:	009b      	lsls	r3, r3, #2
 8026c74:	3348      	adds	r3, #72	; 0x48
 8026c76:	443b      	add	r3, r7
 8026c78:	3b34      	subs	r3, #52	; 0x34
 8026c7a:	681b      	ldr	r3, [r3, #0]
 8026c7c:	3b01      	subs	r3, #1
 8026c7e:	009b      	lsls	r3, r3, #2
 8026c80:	440b      	add	r3, r1
 8026c82:	6859      	ldr	r1, [r3, #4]
 8026c84:	4825      	ldr	r0, [pc, #148]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026c86:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026c8a:	4613      	mov	r3, r2
 8026c8c:	009b      	lsls	r3, r3, #2
 8026c8e:	4413      	add	r3, r2
 8026c90:	009b      	lsls	r3, r3, #2
 8026c92:	3348      	adds	r3, #72	; 0x48
 8026c94:	443b      	add	r3, r7
 8026c96:	3b34      	subs	r3, #52	; 0x34
 8026c98:	681b      	ldr	r3, [r3, #0]
 8026c9a:	3b01      	subs	r3, #1
 8026c9c:	f021 0201 	bic.w	r2, r1, #1
 8026ca0:	009b      	lsls	r3, r3, #2
 8026ca2:	4403      	add	r3, r0
 8026ca4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8026ca6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026caa:	4613      	mov	r3, r2
 8026cac:	009b      	lsls	r3, r3, #2
 8026cae:	4413      	add	r3, r2
 8026cb0:	009b      	lsls	r3, r3, #2
 8026cb2:	3348      	adds	r3, #72	; 0x48
 8026cb4:	443b      	add	r3, r7
 8026cb6:	3b30      	subs	r3, #48	; 0x30
 8026cb8:	681b      	ldr	r3, [r3, #0]
 8026cba:	2b00      	cmp	r3, #0
 8026cbc:	d01f      	beq.n	8026cfe <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8026cbe:	4917      	ldr	r1, [pc, #92]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026cc0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026cc4:	4613      	mov	r3, r2
 8026cc6:	009b      	lsls	r3, r3, #2
 8026cc8:	4413      	add	r3, r2
 8026cca:	009b      	lsls	r3, r3, #2
 8026ccc:	3348      	adds	r3, #72	; 0x48
 8026cce:	443b      	add	r3, r7
 8026cd0:	3b30      	subs	r3, #48	; 0x30
 8026cd2:	681b      	ldr	r3, [r3, #0]
 8026cd4:	3b01      	subs	r3, #1
 8026cd6:	009b      	lsls	r3, r3, #2
 8026cd8:	440b      	add	r3, r1
 8026cda:	6859      	ldr	r1, [r3, #4]
 8026cdc:	480f      	ldr	r0, [pc, #60]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026cde:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026ce2:	4613      	mov	r3, r2
 8026ce4:	009b      	lsls	r3, r3, #2
 8026ce6:	4413      	add	r3, r2
 8026ce8:	009b      	lsls	r3, r3, #2
 8026cea:	3348      	adds	r3, #72	; 0x48
 8026cec:	443b      	add	r3, r7
 8026cee:	3b30      	subs	r3, #48	; 0x30
 8026cf0:	681b      	ldr	r3, [r3, #0]
 8026cf2:	3b01      	subs	r3, #1
 8026cf4:	f021 0210 	bic.w	r2, r1, #16
 8026cf8:	009b      	lsls	r3, r3, #2
 8026cfa:	4403      	add	r3, r0
 8026cfc:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8026cfe:	4907      	ldr	r1, [pc, #28]	; (8026d1c <HAL_OSPIM_Config+0x3b4>)
 8026d00:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d04:	4613      	mov	r3, r2
 8026d06:	009b      	lsls	r3, r3, #2
 8026d08:	4413      	add	r3, r2
 8026d0a:	009b      	lsls	r3, r3, #2
 8026d0c:	3348      	adds	r3, #72	; 0x48
 8026d0e:	443b      	add	r3, r7
 8026d10:	3b2c      	subs	r3, #44	; 0x2c
 8026d12:	e005      	b.n	8026d20 <HAL_OSPIM_Config+0x3b8>
 8026d14:	a0001000 	.word	0xa0001000
 8026d18:	a0001400 	.word	0xa0001400
 8026d1c:	50061c00 	.word	0x50061c00
 8026d20:	681b      	ldr	r3, [r3, #0]
 8026d22:	3b01      	subs	r3, #1
 8026d24:	009b      	lsls	r3, r3, #2
 8026d26:	440b      	add	r3, r1
 8026d28:	6859      	ldr	r1, [r3, #4]
 8026d2a:	48a6      	ldr	r0, [pc, #664]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026d2c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d30:	4613      	mov	r3, r2
 8026d32:	009b      	lsls	r3, r3, #2
 8026d34:	4413      	add	r3, r2
 8026d36:	009b      	lsls	r3, r3, #2
 8026d38:	3348      	adds	r3, #72	; 0x48
 8026d3a:	443b      	add	r3, r7
 8026d3c:	3b2c      	subs	r3, #44	; 0x2c
 8026d3e:	681b      	ldr	r3, [r3, #0]
 8026d40:	3b01      	subs	r3, #1
 8026d42:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8026d46:	009b      	lsls	r3, r3, #2
 8026d48:	4403      	add	r3, r0
 8026d4a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8026d4c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d50:	4613      	mov	r3, r2
 8026d52:	009b      	lsls	r3, r3, #2
 8026d54:	4413      	add	r3, r2
 8026d56:	009b      	lsls	r3, r3, #2
 8026d58:	3348      	adds	r3, #72	; 0x48
 8026d5a:	443b      	add	r3, r7
 8026d5c:	3b28      	subs	r3, #40	; 0x28
 8026d5e:	681b      	ldr	r3, [r3, #0]
 8026d60:	2b00      	cmp	r3, #0
 8026d62:	d023      	beq.n	8026dac <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8026d64:	4997      	ldr	r1, [pc, #604]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026d66:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d6a:	4613      	mov	r3, r2
 8026d6c:	009b      	lsls	r3, r3, #2
 8026d6e:	4413      	add	r3, r2
 8026d70:	009b      	lsls	r3, r3, #2
 8026d72:	3348      	adds	r3, #72	; 0x48
 8026d74:	443b      	add	r3, r7
 8026d76:	3b28      	subs	r3, #40	; 0x28
 8026d78:	681b      	ldr	r3, [r3, #0]
 8026d7a:	3b01      	subs	r3, #1
 8026d7c:	f003 0301 	and.w	r3, r3, #1
 8026d80:	009b      	lsls	r3, r3, #2
 8026d82:	440b      	add	r3, r1
 8026d84:	6859      	ldr	r1, [r3, #4]
 8026d86:	488f      	ldr	r0, [pc, #572]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026d88:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026d8c:	4613      	mov	r3, r2
 8026d8e:	009b      	lsls	r3, r3, #2
 8026d90:	4413      	add	r3, r2
 8026d92:	009b      	lsls	r3, r3, #2
 8026d94:	3348      	adds	r3, #72	; 0x48
 8026d96:	443b      	add	r3, r7
 8026d98:	3b28      	subs	r3, #40	; 0x28
 8026d9a:	681b      	ldr	r3, [r3, #0]
 8026d9c:	3b01      	subs	r3, #1
 8026d9e:	f003 0301 	and.w	r3, r3, #1
 8026da2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8026da6:	009b      	lsls	r3, r3, #2
 8026da8:	4403      	add	r3, r0
 8026daa:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8026dac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026db0:	4613      	mov	r3, r2
 8026db2:	009b      	lsls	r3, r3, #2
 8026db4:	4413      	add	r3, r2
 8026db6:	009b      	lsls	r3, r3, #2
 8026db8:	3348      	adds	r3, #72	; 0x48
 8026dba:	443b      	add	r3, r7
 8026dbc:	3b24      	subs	r3, #36	; 0x24
 8026dbe:	681b      	ldr	r3, [r3, #0]
 8026dc0:	2b00      	cmp	r3, #0
 8026dc2:	d023      	beq.n	8026e0c <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8026dc4:	497f      	ldr	r1, [pc, #508]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026dc6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026dca:	4613      	mov	r3, r2
 8026dcc:	009b      	lsls	r3, r3, #2
 8026dce:	4413      	add	r3, r2
 8026dd0:	009b      	lsls	r3, r3, #2
 8026dd2:	3348      	adds	r3, #72	; 0x48
 8026dd4:	443b      	add	r3, r7
 8026dd6:	3b24      	subs	r3, #36	; 0x24
 8026dd8:	681b      	ldr	r3, [r3, #0]
 8026dda:	3b01      	subs	r3, #1
 8026ddc:	f003 0301 	and.w	r3, r3, #1
 8026de0:	009b      	lsls	r3, r3, #2
 8026de2:	440b      	add	r3, r1
 8026de4:	6859      	ldr	r1, [r3, #4]
 8026de6:	4877      	ldr	r0, [pc, #476]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026de8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8026dec:	4613      	mov	r3, r2
 8026dee:	009b      	lsls	r3, r3, #2
 8026df0:	4413      	add	r3, r2
 8026df2:	009b      	lsls	r3, r3, #2
 8026df4:	3348      	adds	r3, #72	; 0x48
 8026df6:	443b      	add	r3, r7
 8026df8:	3b24      	subs	r3, #36	; 0x24
 8026dfa:	681b      	ldr	r3, [r3, #0]
 8026dfc:	3b01      	subs	r3, #1
 8026dfe:	f003 0301 	and.w	r3, r3, #1
 8026e02:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8026e06:	009b      	lsls	r3, r3, #2
 8026e08:	4403      	add	r3, r0
 8026e0a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8026e0c:	4a6d      	ldr	r2, [pc, #436]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026e0e:	68bb      	ldr	r3, [r7, #8]
 8026e10:	689b      	ldr	r3, [r3, #8]
 8026e12:	3b01      	subs	r3, #1
 8026e14:	009b      	lsls	r3, r3, #2
 8026e16:	4413      	add	r3, r2
 8026e18:	685b      	ldr	r3, [r3, #4]
 8026e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8026e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026e20:	025b      	lsls	r3, r3, #9
 8026e22:	431a      	orrs	r2, r3
 8026e24:	4967      	ldr	r1, [pc, #412]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026e26:	68bb      	ldr	r3, [r7, #8]
 8026e28:	689b      	ldr	r3, [r3, #8]
 8026e2a:	3b01      	subs	r3, #1
 8026e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026e30:	009b      	lsls	r3, r3, #2
 8026e32:	440b      	add	r3, r1
 8026e34:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8026e36:	4a63      	ldr	r2, [pc, #396]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026e38:	68bb      	ldr	r3, [r7, #8]
 8026e3a:	681b      	ldr	r3, [r3, #0]
 8026e3c:	3b01      	subs	r3, #1
 8026e3e:	009b      	lsls	r3, r3, #2
 8026e40:	4413      	add	r3, r2
 8026e42:	685b      	ldr	r3, [r3, #4]
 8026e44:	f023 0203 	bic.w	r2, r3, #3
 8026e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026e4a:	005b      	lsls	r3, r3, #1
 8026e4c:	431a      	orrs	r2, r3
 8026e4e:	495d      	ldr	r1, [pc, #372]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026e50:	68bb      	ldr	r3, [r7, #8]
 8026e52:	681b      	ldr	r3, [r3, #0]
 8026e54:	3b01      	subs	r3, #1
 8026e56:	f042 0201 	orr.w	r2, r2, #1
 8026e5a:	009b      	lsls	r3, r3, #2
 8026e5c:	440b      	add	r3, r1
 8026e5e:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8026e60:	68bb      	ldr	r3, [r7, #8]
 8026e62:	685b      	ldr	r3, [r3, #4]
 8026e64:	2b00      	cmp	r3, #0
 8026e66:	d014      	beq.n	8026e92 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8026e68:	4a56      	ldr	r2, [pc, #344]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026e6a:	68bb      	ldr	r3, [r7, #8]
 8026e6c:	685b      	ldr	r3, [r3, #4]
 8026e6e:	3b01      	subs	r3, #1
 8026e70:	009b      	lsls	r3, r3, #2
 8026e72:	4413      	add	r3, r2
 8026e74:	685b      	ldr	r3, [r3, #4]
 8026e76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8026e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026e7c:	015b      	lsls	r3, r3, #5
 8026e7e:	431a      	orrs	r2, r3
 8026e80:	4950      	ldr	r1, [pc, #320]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026e82:	68bb      	ldr	r3, [r7, #8]
 8026e84:	685b      	ldr	r3, [r3, #4]
 8026e86:	3b01      	subs	r3, #1
 8026e88:	f042 0210 	orr.w	r2, r2, #16
 8026e8c:	009b      	lsls	r3, r3, #2
 8026e8e:	440b      	add	r3, r1
 8026e90:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8026e92:	68bb      	ldr	r3, [r7, #8]
 8026e94:	68db      	ldr	r3, [r3, #12]
 8026e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026e9a:	2b00      	cmp	r3, #0
 8026e9c:	d019      	beq.n	8026ed2 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8026e9e:	4a49      	ldr	r2, [pc, #292]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026ea0:	68bb      	ldr	r3, [r7, #8]
 8026ea2:	68db      	ldr	r3, [r3, #12]
 8026ea4:	3b01      	subs	r3, #1
 8026ea6:	f003 0301 	and.w	r3, r3, #1
 8026eaa:	009b      	lsls	r3, r3, #2
 8026eac:	4413      	add	r3, r2
 8026eae:	685b      	ldr	r3, [r3, #4]
 8026eb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8026eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026eb6:	049b      	lsls	r3, r3, #18
 8026eb8:	431a      	orrs	r2, r3
 8026eba:	4942      	ldr	r1, [pc, #264]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026ebc:	68bb      	ldr	r3, [r7, #8]
 8026ebe:	68db      	ldr	r3, [r3, #12]
 8026ec0:	3b01      	subs	r3, #1
 8026ec2:	f003 0301 	and.w	r3, r3, #1
 8026ec6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8026eca:	009b      	lsls	r3, r3, #2
 8026ecc:	440b      	add	r3, r1
 8026ece:	605a      	str	r2, [r3, #4]
 8026ed0:	e01c      	b.n	8026f0c <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8026ed2:	68bb      	ldr	r3, [r7, #8]
 8026ed4:	68db      	ldr	r3, [r3, #12]
 8026ed6:	2b00      	cmp	r3, #0
 8026ed8:	d018      	beq.n	8026f0c <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8026eda:	4a3a      	ldr	r2, [pc, #232]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026edc:	68bb      	ldr	r3, [r7, #8]
 8026ede:	68db      	ldr	r3, [r3, #12]
 8026ee0:	3b01      	subs	r3, #1
 8026ee2:	f003 0301 	and.w	r3, r3, #1
 8026ee6:	009b      	lsls	r3, r3, #2
 8026ee8:	4413      	add	r3, r2
 8026eea:	685b      	ldr	r3, [r3, #4]
 8026eec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8026ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026ef2:	069b      	lsls	r3, r3, #26
 8026ef4:	431a      	orrs	r2, r3
 8026ef6:	4933      	ldr	r1, [pc, #204]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026ef8:	68bb      	ldr	r3, [r7, #8]
 8026efa:	68db      	ldr	r3, [r3, #12]
 8026efc:	3b01      	subs	r3, #1
 8026efe:	f003 0301 	and.w	r3, r3, #1
 8026f02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8026f06:	009b      	lsls	r3, r3, #2
 8026f08:	440b      	add	r3, r1
 8026f0a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8026f0c:	68bb      	ldr	r3, [r7, #8]
 8026f0e:	691b      	ldr	r3, [r3, #16]
 8026f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026f14:	2b00      	cmp	r3, #0
 8026f16:	d019      	beq.n	8026f4c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8026f18:	4a2a      	ldr	r2, [pc, #168]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026f1a:	68bb      	ldr	r3, [r7, #8]
 8026f1c:	691b      	ldr	r3, [r3, #16]
 8026f1e:	3b01      	subs	r3, #1
 8026f20:	f003 0301 	and.w	r3, r3, #1
 8026f24:	009b      	lsls	r3, r3, #2
 8026f26:	4413      	add	r3, r2
 8026f28:	685b      	ldr	r3, [r3, #4]
 8026f2a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8026f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026f30:	049b      	lsls	r3, r3, #18
 8026f32:	431a      	orrs	r2, r3
 8026f34:	4923      	ldr	r1, [pc, #140]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026f36:	68bb      	ldr	r3, [r7, #8]
 8026f38:	691b      	ldr	r3, [r3, #16]
 8026f3a:	3b01      	subs	r3, #1
 8026f3c:	f003 0301 	and.w	r3, r3, #1
 8026f40:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8026f44:	009b      	lsls	r3, r3, #2
 8026f46:	440b      	add	r3, r1
 8026f48:	605a      	str	r2, [r3, #4]
 8026f4a:	e01c      	b.n	8026f86 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8026f4c:	68bb      	ldr	r3, [r7, #8]
 8026f4e:	691b      	ldr	r3, [r3, #16]
 8026f50:	2b00      	cmp	r3, #0
 8026f52:	d018      	beq.n	8026f86 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8026f54:	4a1b      	ldr	r2, [pc, #108]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026f56:	68bb      	ldr	r3, [r7, #8]
 8026f58:	691b      	ldr	r3, [r3, #16]
 8026f5a:	3b01      	subs	r3, #1
 8026f5c:	f003 0301 	and.w	r3, r3, #1
 8026f60:	009b      	lsls	r3, r3, #2
 8026f62:	4413      	add	r3, r2
 8026f64:	685b      	ldr	r3, [r3, #4]
 8026f66:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8026f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026f6c:	069b      	lsls	r3, r3, #26
 8026f6e:	431a      	orrs	r2, r3
 8026f70:	4914      	ldr	r1, [pc, #80]	; (8026fc4 <HAL_OSPIM_Config+0x65c>)
 8026f72:	68bb      	ldr	r3, [r7, #8]
 8026f74:	691b      	ldr	r3, [r3, #16]
 8026f76:	3b01      	subs	r3, #1
 8026f78:	f003 0301 	and.w	r3, r3, #1
 8026f7c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8026f80:	009b      	lsls	r3, r3, #2
 8026f82:	440b      	add	r3, r1
 8026f84:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8026f86:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026f8a:	f003 0301 	and.w	r3, r3, #1
 8026f8e:	2b00      	cmp	r3, #0
 8026f90:	d005      	beq.n	8026f9e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8026f92:	4b0d      	ldr	r3, [pc, #52]	; (8026fc8 <HAL_OSPIM_Config+0x660>)
 8026f94:	681b      	ldr	r3, [r3, #0]
 8026f96:	4a0c      	ldr	r2, [pc, #48]	; (8026fc8 <HAL_OSPIM_Config+0x660>)
 8026f98:	f043 0301 	orr.w	r3, r3, #1
 8026f9c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8026f9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026fa2:	f003 0302 	and.w	r3, r3, #2
 8026fa6:	2b00      	cmp	r3, #0
 8026fa8:	d005      	beq.n	8026fb6 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8026faa:	4b08      	ldr	r3, [pc, #32]	; (8026fcc <HAL_OSPIM_Config+0x664>)
 8026fac:	681b      	ldr	r3, [r3, #0]
 8026fae:	4a07      	ldr	r2, [pc, #28]	; (8026fcc <HAL_OSPIM_Config+0x664>)
 8026fb0:	f043 0301 	orr.w	r3, r3, #1
 8026fb4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8026fb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8026fba:	4618      	mov	r0, r3
 8026fbc:	3748      	adds	r7, #72	; 0x48
 8026fbe:	46bd      	mov	sp, r7
 8026fc0:	bd80      	pop	{r7, pc}
 8026fc2:	bf00      	nop
 8026fc4:	50061c00 	.word	0x50061c00
 8026fc8:	a0001000 	.word	0xa0001000
 8026fcc:	a0001400 	.word	0xa0001400

08026fd0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8026fd0:	b580      	push	{r7, lr}
 8026fd2:	b084      	sub	sp, #16
 8026fd4:	af00      	add	r7, sp, #0
 8026fd6:	60f8      	str	r0, [r7, #12]
 8026fd8:	60b9      	str	r1, [r7, #8]
 8026fda:	603b      	str	r3, [r7, #0]
 8026fdc:	4613      	mov	r3, r2
 8026fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8026fe0:	e01a      	b.n	8027018 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8026fe2:	69bb      	ldr	r3, [r7, #24]
 8026fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8026fe8:	d016      	beq.n	8027018 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8026fea:	f7fd f97b 	bl	80242e4 <HAL_GetTick>
 8026fee:	4602      	mov	r2, r0
 8026ff0:	683b      	ldr	r3, [r7, #0]
 8026ff2:	1ad3      	subs	r3, r2, r3
 8026ff4:	69ba      	ldr	r2, [r7, #24]
 8026ff6:	429a      	cmp	r2, r3
 8026ff8:	d302      	bcc.n	8027000 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8026ffa:	69bb      	ldr	r3, [r7, #24]
 8026ffc:	2b00      	cmp	r3, #0
 8026ffe:	d10b      	bne.n	8027018 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8027000:	68fb      	ldr	r3, [r7, #12]
 8027002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8027006:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8027008:	68fb      	ldr	r3, [r7, #12]
 802700a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802700c:	f043 0201 	orr.w	r2, r3, #1
 8027010:	68fb      	ldr	r3, [r7, #12]
 8027012:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8027014:	2301      	movs	r3, #1
 8027016:	e00e      	b.n	8027036 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8027018:	68fb      	ldr	r3, [r7, #12]
 802701a:	681b      	ldr	r3, [r3, #0]
 802701c:	6a1a      	ldr	r2, [r3, #32]
 802701e:	68bb      	ldr	r3, [r7, #8]
 8027020:	4013      	ands	r3, r2
 8027022:	2b00      	cmp	r3, #0
 8027024:	bf14      	ite	ne
 8027026:	2301      	movne	r3, #1
 8027028:	2300      	moveq	r3, #0
 802702a:	b2db      	uxtb	r3, r3
 802702c:	461a      	mov	r2, r3
 802702e:	79fb      	ldrb	r3, [r7, #7]
 8027030:	429a      	cmp	r2, r3
 8027032:	d1d6      	bne.n	8026fe2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8027034:	2300      	movs	r3, #0
}
 8027036:	4618      	mov	r0, r3
 8027038:	3710      	adds	r7, #16
 802703a:	46bd      	mov	sp, r7
 802703c:	bd80      	pop	{r7, pc}
	...

08027040 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8027040:	b480      	push	{r7}
 8027042:	b089      	sub	sp, #36	; 0x24
 8027044:	af00      	add	r7, sp, #0
 8027046:	6078      	str	r0, [r7, #4]
 8027048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802704a:	2300      	movs	r3, #0
 802704c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 802704e:	687b      	ldr	r3, [r7, #4]
 8027050:	681b      	ldr	r3, [r3, #0]
 8027052:	681a      	ldr	r2, [r3, #0]
 8027054:	687b      	ldr	r3, [r7, #4]
 8027056:	681b      	ldr	r3, [r3, #0]
 8027058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802705c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 802705e:	687b      	ldr	r3, [r7, #4]
 8027060:	689b      	ldr	r3, [r3, #8]
 8027062:	2b00      	cmp	r3, #0
 8027064:	d10a      	bne.n	802707c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8027066:	687b      	ldr	r3, [r7, #4]
 8027068:	681b      	ldr	r3, [r3, #0]
 802706a:	681b      	ldr	r3, [r3, #0]
 802706c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8027070:	683b      	ldr	r3, [r7, #0]
 8027072:	685a      	ldr	r2, [r3, #4]
 8027074:	687b      	ldr	r3, [r7, #4]
 8027076:	681b      	ldr	r3, [r3, #0]
 8027078:	430a      	orrs	r2, r1
 802707a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 802707c:	683b      	ldr	r3, [r7, #0]
 802707e:	681b      	ldr	r3, [r3, #0]
 8027080:	2b02      	cmp	r3, #2
 8027082:	d114      	bne.n	80270ae <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8027084:	687b      	ldr	r3, [r7, #4]
 8027086:	681b      	ldr	r3, [r3, #0]
 8027088:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 802708c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 802708e:	687b      	ldr	r3, [r7, #4]
 8027090:	681b      	ldr	r3, [r3, #0]
 8027092:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8027096:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8027098:	687b      	ldr	r3, [r7, #4]
 802709a:	681b      	ldr	r3, [r3, #0]
 802709c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80270a0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80270a2:	687b      	ldr	r3, [r7, #4]
 80270a4:	681b      	ldr	r3, [r3, #0]
 80270a6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80270aa:	60fb      	str	r3, [r7, #12]
 80270ac:	e013      	b.n	80270d6 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80270ae:	687b      	ldr	r3, [r7, #4]
 80270b0:	681b      	ldr	r3, [r3, #0]
 80270b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80270b6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80270b8:	687b      	ldr	r3, [r7, #4]
 80270ba:	681b      	ldr	r3, [r3, #0]
 80270bc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80270c0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80270c2:	687b      	ldr	r3, [r7, #4]
 80270c4:	681b      	ldr	r3, [r3, #0]
 80270c6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80270ca:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80270cc:	687b      	ldr	r3, [r7, #4]
 80270ce:	681b      	ldr	r3, [r3, #0]
 80270d0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80270d4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80270d6:	683b      	ldr	r3, [r7, #0]
 80270d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80270da:	683b      	ldr	r3, [r7, #0]
 80270dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80270de:	431a      	orrs	r2, r3
 80270e0:	69bb      	ldr	r3, [r7, #24]
 80270e2:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80270e4:	683b      	ldr	r3, [r7, #0]
 80270e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80270e8:	2b00      	cmp	r3, #0
 80270ea:	d012      	beq.n	8027112 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80270ec:	683b      	ldr	r3, [r7, #0]
 80270ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80270f0:	68fb      	ldr	r3, [r7, #12]
 80270f2:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80270f4:	69bb      	ldr	r3, [r7, #24]
 80270f6:	681b      	ldr	r3, [r3, #0]
 80270f8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80270fc:	683b      	ldr	r3, [r7, #0]
 80270fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8027100:	683b      	ldr	r3, [r7, #0]
 8027102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027104:	4319      	orrs	r1, r3
 8027106:	683b      	ldr	r3, [r7, #0]
 8027108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802710a:	430b      	orrs	r3, r1
 802710c:	431a      	orrs	r2, r3
 802710e:	69bb      	ldr	r3, [r7, #24]
 8027110:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8027112:	697b      	ldr	r3, [r7, #20]
 8027114:	681b      	ldr	r3, [r3, #0]
 8027116:	f023 021f 	bic.w	r2, r3, #31
 802711a:	683b      	ldr	r3, [r7, #0]
 802711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802711e:	431a      	orrs	r2, r3
 8027120:	697b      	ldr	r3, [r7, #20]
 8027122:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8027124:	683b      	ldr	r3, [r7, #0]
 8027126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027128:	2b00      	cmp	r3, #0
 802712a:	d009      	beq.n	8027140 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 802712c:	683b      	ldr	r3, [r7, #0]
 802712e:	681b      	ldr	r3, [r3, #0]
 8027130:	2b00      	cmp	r3, #0
 8027132:	d105      	bne.n	8027140 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8027134:	683b      	ldr	r3, [r7, #0]
 8027136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8027138:	687b      	ldr	r3, [r7, #4]
 802713a:	681b      	ldr	r3, [r3, #0]
 802713c:	3a01      	subs	r2, #1
 802713e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8027140:	683b      	ldr	r3, [r7, #0]
 8027142:	68db      	ldr	r3, [r3, #12]
 8027144:	2b00      	cmp	r3, #0
 8027146:	f000 8099 	beq.w	802727c <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 802714a:	683b      	ldr	r3, [r7, #0]
 802714c:	69db      	ldr	r3, [r3, #28]
 802714e:	2b00      	cmp	r3, #0
 8027150:	d055      	beq.n	80271fe <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8027152:	683b      	ldr	r3, [r7, #0]
 8027154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027156:	2b00      	cmp	r3, #0
 8027158:	d01e      	beq.n	8027198 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 802715a:	69bb      	ldr	r3, [r7, #24]
 802715c:	681a      	ldr	r2, [r3, #0]
 802715e:	4b68      	ldr	r3, [pc, #416]	; (8027300 <OSPI_ConfigCmd+0x2c0>)
 8027160:	4013      	ands	r3, r2
 8027162:	683a      	ldr	r2, [r7, #0]
 8027164:	68d1      	ldr	r1, [r2, #12]
 8027166:	683a      	ldr	r2, [r7, #0]
 8027168:	6952      	ldr	r2, [r2, #20]
 802716a:	4311      	orrs	r1, r2
 802716c:	683a      	ldr	r2, [r7, #0]
 802716e:	6912      	ldr	r2, [r2, #16]
 8027170:	4311      	orrs	r1, r2
 8027172:	683a      	ldr	r2, [r7, #0]
 8027174:	69d2      	ldr	r2, [r2, #28]
 8027176:	4311      	orrs	r1, r2
 8027178:	683a      	ldr	r2, [r7, #0]
 802717a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802717c:	4311      	orrs	r1, r2
 802717e:	683a      	ldr	r2, [r7, #0]
 8027180:	6a12      	ldr	r2, [r2, #32]
 8027182:	4311      	orrs	r1, r2
 8027184:	683a      	ldr	r2, [r7, #0]
 8027186:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8027188:	4311      	orrs	r1, r2
 802718a:	683a      	ldr	r2, [r7, #0]
 802718c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 802718e:	430a      	orrs	r2, r1
 8027190:	431a      	orrs	r2, r3
 8027192:	69bb      	ldr	r3, [r7, #24]
 8027194:	601a      	str	r2, [r3, #0]
 8027196:	e028      	b.n	80271ea <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8027198:	69bb      	ldr	r3, [r7, #24]
 802719a:	681b      	ldr	r3, [r3, #0]
 802719c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80271a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80271a4:	683a      	ldr	r2, [r7, #0]
 80271a6:	68d1      	ldr	r1, [r2, #12]
 80271a8:	683a      	ldr	r2, [r7, #0]
 80271aa:	6952      	ldr	r2, [r2, #20]
 80271ac:	4311      	orrs	r1, r2
 80271ae:	683a      	ldr	r2, [r7, #0]
 80271b0:	6912      	ldr	r2, [r2, #16]
 80271b2:	4311      	orrs	r1, r2
 80271b4:	683a      	ldr	r2, [r7, #0]
 80271b6:	69d2      	ldr	r2, [r2, #28]
 80271b8:	4311      	orrs	r1, r2
 80271ba:	683a      	ldr	r2, [r7, #0]
 80271bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80271be:	4311      	orrs	r1, r2
 80271c0:	683a      	ldr	r2, [r7, #0]
 80271c2:	6a12      	ldr	r2, [r2, #32]
 80271c4:	430a      	orrs	r2, r1
 80271c6:	431a      	orrs	r2, r3
 80271c8:	69bb      	ldr	r3, [r7, #24]
 80271ca:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80271cc:	687b      	ldr	r3, [r7, #4]
 80271ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80271d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80271d4:	d109      	bne.n	80271ea <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80271d6:	683b      	ldr	r3, [r7, #0]
 80271d8:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80271da:	2b08      	cmp	r3, #8
 80271dc:	d105      	bne.n	80271ea <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80271de:	69bb      	ldr	r3, [r7, #24]
 80271e0:	681b      	ldr	r3, [r3, #0]
 80271e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80271e6:	69bb      	ldr	r3, [r7, #24]
 80271e8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80271ea:	683b      	ldr	r3, [r7, #0]
 80271ec:	689a      	ldr	r2, [r3, #8]
 80271ee:	693b      	ldr	r3, [r7, #16]
 80271f0:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80271f2:	687b      	ldr	r3, [r7, #4]
 80271f4:	681b      	ldr	r3, [r3, #0]
 80271f6:	683a      	ldr	r2, [r7, #0]
 80271f8:	6992      	ldr	r2, [r2, #24]
 80271fa:	649a      	str	r2, [r3, #72]	; 0x48
 80271fc:	e078      	b.n	80272f0 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80271fe:	683b      	ldr	r3, [r7, #0]
 8027200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027202:	2b00      	cmp	r3, #0
 8027204:	d017      	beq.n	8027236 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8027206:	69bb      	ldr	r3, [r7, #24]
 8027208:	681b      	ldr	r3, [r3, #0]
 802720a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 802720e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8027212:	683a      	ldr	r2, [r7, #0]
 8027214:	68d1      	ldr	r1, [r2, #12]
 8027216:	683a      	ldr	r2, [r7, #0]
 8027218:	6952      	ldr	r2, [r2, #20]
 802721a:	4311      	orrs	r1, r2
 802721c:	683a      	ldr	r2, [r7, #0]
 802721e:	6912      	ldr	r2, [r2, #16]
 8027220:	4311      	orrs	r1, r2
 8027222:	683a      	ldr	r2, [r7, #0]
 8027224:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8027226:	4311      	orrs	r1, r2
 8027228:	683a      	ldr	r2, [r7, #0]
 802722a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 802722c:	430a      	orrs	r2, r1
 802722e:	431a      	orrs	r2, r3
 8027230:	69bb      	ldr	r3, [r7, #24]
 8027232:	601a      	str	r2, [r3, #0]
 8027234:	e01d      	b.n	8027272 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8027236:	69bb      	ldr	r3, [r7, #24]
 8027238:	681b      	ldr	r3, [r3, #0]
 802723a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 802723e:	683b      	ldr	r3, [r7, #0]
 8027240:	68d9      	ldr	r1, [r3, #12]
 8027242:	683b      	ldr	r3, [r7, #0]
 8027244:	695b      	ldr	r3, [r3, #20]
 8027246:	4319      	orrs	r1, r3
 8027248:	683b      	ldr	r3, [r7, #0]
 802724a:	691b      	ldr	r3, [r3, #16]
 802724c:	430b      	orrs	r3, r1
 802724e:	431a      	orrs	r2, r3
 8027250:	69bb      	ldr	r3, [r7, #24]
 8027252:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8027254:	687b      	ldr	r3, [r7, #4]
 8027256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802725c:	d109      	bne.n	8027272 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 802725e:	683b      	ldr	r3, [r7, #0]
 8027260:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8027262:	2b08      	cmp	r3, #8
 8027264:	d105      	bne.n	8027272 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8027266:	69bb      	ldr	r3, [r7, #24]
 8027268:	681b      	ldr	r3, [r3, #0]
 802726a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 802726e:	69bb      	ldr	r3, [r7, #24]
 8027270:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8027272:	683b      	ldr	r3, [r7, #0]
 8027274:	689a      	ldr	r2, [r3, #8]
 8027276:	693b      	ldr	r3, [r7, #16]
 8027278:	601a      	str	r2, [r3, #0]
 802727a:	e039      	b.n	80272f0 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 802727c:	683b      	ldr	r3, [r7, #0]
 802727e:	69db      	ldr	r3, [r3, #28]
 8027280:	2b00      	cmp	r3, #0
 8027282:	d030      	beq.n	80272e6 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8027284:	683b      	ldr	r3, [r7, #0]
 8027286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027288:	2b00      	cmp	r3, #0
 802728a:	d017      	beq.n	80272bc <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 802728c:	69bb      	ldr	r3, [r7, #24]
 802728e:	681b      	ldr	r3, [r3, #0]
 8027290:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8027294:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8027298:	683a      	ldr	r2, [r7, #0]
 802729a:	69d1      	ldr	r1, [r2, #28]
 802729c:	683a      	ldr	r2, [r7, #0]
 802729e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80272a0:	4311      	orrs	r1, r2
 80272a2:	683a      	ldr	r2, [r7, #0]
 80272a4:	6a12      	ldr	r2, [r2, #32]
 80272a6:	4311      	orrs	r1, r2
 80272a8:	683a      	ldr	r2, [r7, #0]
 80272aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80272ac:	4311      	orrs	r1, r2
 80272ae:	683a      	ldr	r2, [r7, #0]
 80272b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80272b2:	430a      	orrs	r2, r1
 80272b4:	431a      	orrs	r2, r3
 80272b6:	69bb      	ldr	r3, [r7, #24]
 80272b8:	601a      	str	r2, [r3, #0]
 80272ba:	e00e      	b.n	80272da <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80272bc:	69bb      	ldr	r3, [r7, #24]
 80272be:	681b      	ldr	r3, [r3, #0]
 80272c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80272c4:	683b      	ldr	r3, [r7, #0]
 80272c6:	69d9      	ldr	r1, [r3, #28]
 80272c8:	683b      	ldr	r3, [r7, #0]
 80272ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80272cc:	4319      	orrs	r1, r3
 80272ce:	683b      	ldr	r3, [r7, #0]
 80272d0:	6a1b      	ldr	r3, [r3, #32]
 80272d2:	430b      	orrs	r3, r1
 80272d4:	431a      	orrs	r2, r3
 80272d6:	69bb      	ldr	r3, [r7, #24]
 80272d8:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80272da:	687b      	ldr	r3, [r7, #4]
 80272dc:	681b      	ldr	r3, [r3, #0]
 80272de:	683a      	ldr	r2, [r7, #0]
 80272e0:	6992      	ldr	r2, [r2, #24]
 80272e2:	649a      	str	r2, [r3, #72]	; 0x48
 80272e4:	e004      	b.n	80272f0 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80272e6:	2301      	movs	r3, #1
 80272e8:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80272ea:	687b      	ldr	r3, [r7, #4]
 80272ec:	2208      	movs	r2, #8
 80272ee:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80272f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80272f2:	4618      	mov	r0, r3
 80272f4:	3724      	adds	r7, #36	; 0x24
 80272f6:	46bd      	mov	sp, r7
 80272f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272fc:	4770      	bx	lr
 80272fe:	bf00      	nop
 8027300:	f0ffc0c0 	.word	0xf0ffc0c0

08027304 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8027304:	b480      	push	{r7}
 8027306:	b087      	sub	sp, #28
 8027308:	af00      	add	r7, sp, #0
 802730a:	4603      	mov	r3, r0
 802730c:	6039      	str	r1, [r7, #0]
 802730e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8027310:	2300      	movs	r3, #0
 8027312:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8027314:	2300      	movs	r3, #0
 8027316:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8027318:	79fb      	ldrb	r3, [r7, #7]
 802731a:	2b00      	cmp	r3, #0
 802731c:	d005      	beq.n	802732a <OSPIM_GetConfig+0x26>
 802731e:	79fb      	ldrb	r3, [r7, #7]
 8027320:	2b02      	cmp	r3, #2
 8027322:	d802      	bhi.n	802732a <OSPIM_GetConfig+0x26>
 8027324:	683b      	ldr	r3, [r7, #0]
 8027326:	2b00      	cmp	r3, #0
 8027328:	d102      	bne.n	8027330 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 802732a:	2301      	movs	r3, #1
 802732c:	75fb      	strb	r3, [r7, #23]
 802732e:	e08e      	b.n	802744e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8027330:	683b      	ldr	r3, [r7, #0]
 8027332:	2200      	movs	r2, #0
 8027334:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8027336:	683b      	ldr	r3, [r7, #0]
 8027338:	2200      	movs	r2, #0
 802733a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 802733c:	683b      	ldr	r3, [r7, #0]
 802733e:	2200      	movs	r2, #0
 8027340:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8027342:	683b      	ldr	r3, [r7, #0]
 8027344:	2200      	movs	r2, #0
 8027346:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8027348:	683b      	ldr	r3, [r7, #0]
 802734a:	2200      	movs	r2, #0
 802734c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 802734e:	79fb      	ldrb	r3, [r7, #7]
 8027350:	2b02      	cmp	r3, #2
 8027352:	d101      	bne.n	8027358 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8027354:	4b41      	ldr	r3, [pc, #260]	; (802745c <OSPIM_GetConfig+0x158>)
 8027356:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8027358:	2300      	movs	r3, #0
 802735a:	60fb      	str	r3, [r7, #12]
 802735c:	e074      	b.n	8027448 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 802735e:	4a40      	ldr	r2, [pc, #256]	; (8027460 <OSPIM_GetConfig+0x15c>)
 8027360:	68fb      	ldr	r3, [r7, #12]
 8027362:	009b      	lsls	r3, r3, #2
 8027364:	4413      	add	r3, r2
 8027366:	685b      	ldr	r3, [r3, #4]
 8027368:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 802736a:	68bb      	ldr	r3, [r7, #8]
 802736c:	f003 0301 	and.w	r3, r3, #1
 8027370:	2b00      	cmp	r3, #0
 8027372:	d00a      	beq.n	802738a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8027374:	68ba      	ldr	r2, [r7, #8]
 8027376:	693b      	ldr	r3, [r7, #16]
 8027378:	4053      	eors	r3, r2
 802737a:	f003 0302 	and.w	r3, r3, #2
 802737e:	2b00      	cmp	r3, #0
 8027380:	d103      	bne.n	802738a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8027382:	68fb      	ldr	r3, [r7, #12]
 8027384:	1c5a      	adds	r2, r3, #1
 8027386:	683b      	ldr	r3, [r7, #0]
 8027388:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 802738a:	68bb      	ldr	r3, [r7, #8]
 802738c:	f003 0310 	and.w	r3, r3, #16
 8027390:	2b00      	cmp	r3, #0
 8027392:	d00a      	beq.n	80273aa <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8027394:	68ba      	ldr	r2, [r7, #8]
 8027396:	693b      	ldr	r3, [r7, #16]
 8027398:	4053      	eors	r3, r2
 802739a:	f003 0320 	and.w	r3, r3, #32
 802739e:	2b00      	cmp	r3, #0
 80273a0:	d103      	bne.n	80273aa <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80273a2:	68fb      	ldr	r3, [r7, #12]
 80273a4:	1c5a      	adds	r2, r3, #1
 80273a6:	683b      	ldr	r3, [r7, #0]
 80273a8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80273aa:	68bb      	ldr	r3, [r7, #8]
 80273ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80273b0:	2b00      	cmp	r3, #0
 80273b2:	d00a      	beq.n	80273ca <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80273b4:	68ba      	ldr	r2, [r7, #8]
 80273b6:	693b      	ldr	r3, [r7, #16]
 80273b8:	4053      	eors	r3, r2
 80273ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80273be:	2b00      	cmp	r3, #0
 80273c0:	d103      	bne.n	80273ca <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80273c2:	68fb      	ldr	r3, [r7, #12]
 80273c4:	1c5a      	adds	r2, r3, #1
 80273c6:	683b      	ldr	r3, [r7, #0]
 80273c8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80273ca:	68bb      	ldr	r3, [r7, #8]
 80273cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80273d0:	2b00      	cmp	r3, #0
 80273d2:	d018      	beq.n	8027406 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80273d4:	68ba      	ldr	r2, [r7, #8]
 80273d6:	693b      	ldr	r3, [r7, #16]
 80273d8:	4053      	eors	r3, r2
 80273da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80273de:	2b00      	cmp	r3, #0
 80273e0:	d111      	bne.n	8027406 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80273e2:	68bb      	ldr	r3, [r7, #8]
 80273e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80273e8:	2b00      	cmp	r3, #0
 80273ea:	d106      	bne.n	80273fa <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80273ec:	68fb      	ldr	r3, [r7, #12]
 80273ee:	3301      	adds	r3, #1
 80273f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80273f4:	683b      	ldr	r3, [r7, #0]
 80273f6:	60da      	str	r2, [r3, #12]
 80273f8:	e005      	b.n	8027406 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80273fa:	68fb      	ldr	r3, [r7, #12]
 80273fc:	3301      	adds	r3, #1
 80273fe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8027402:	683b      	ldr	r3, [r7, #0]
 8027404:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8027406:	68bb      	ldr	r3, [r7, #8]
 8027408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802740c:	2b00      	cmp	r3, #0
 802740e:	d018      	beq.n	8027442 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8027410:	68ba      	ldr	r2, [r7, #8]
 8027412:	693b      	ldr	r3, [r7, #16]
 8027414:	4053      	eors	r3, r2
 8027416:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802741a:	2b00      	cmp	r3, #0
 802741c:	d111      	bne.n	8027442 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 802741e:	68bb      	ldr	r3, [r7, #8]
 8027420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027424:	2b00      	cmp	r3, #0
 8027426:	d106      	bne.n	8027436 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8027428:	68fb      	ldr	r3, [r7, #12]
 802742a:	3301      	adds	r3, #1
 802742c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027430:	683b      	ldr	r3, [r7, #0]
 8027432:	611a      	str	r2, [r3, #16]
 8027434:	e005      	b.n	8027442 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8027436:	68fb      	ldr	r3, [r7, #12]
 8027438:	3301      	adds	r3, #1
 802743a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 802743e:	683b      	ldr	r3, [r7, #0]
 8027440:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8027442:	68fb      	ldr	r3, [r7, #12]
 8027444:	3301      	adds	r3, #1
 8027446:	60fb      	str	r3, [r7, #12]
 8027448:	68fb      	ldr	r3, [r7, #12]
 802744a:	2b01      	cmp	r3, #1
 802744c:	d987      	bls.n	802735e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 802744e:	7dfb      	ldrb	r3, [r7, #23]
}
 8027450:	4618      	mov	r0, r3
 8027452:	371c      	adds	r7, #28
 8027454:	46bd      	mov	sp, r7
 8027456:	f85d 7b04 	ldr.w	r7, [sp], #4
 802745a:	4770      	bx	lr
 802745c:	04040222 	.word	0x04040222
 8027460:	50061c00 	.word	0x50061c00

08027464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8027464:	b480      	push	{r7}
 8027466:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8027468:	4b0d      	ldr	r3, [pc, #52]	; (80274a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 802746a:	681b      	ldr	r3, [r3, #0]
 802746c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8027470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027474:	d102      	bne.n	802747c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8027476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802747a:	e00b      	b.n	8027494 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 802747c:	4b08      	ldr	r3, [pc, #32]	; (80274a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 802747e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8027482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802748a:	d102      	bne.n	8027492 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 802748c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8027490:	e000      	b.n	8027494 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8027492:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8027494:	4618      	mov	r0, r3
 8027496:	46bd      	mov	sp, r7
 8027498:	f85d 7b04 	ldr.w	r7, [sp], #4
 802749c:	4770      	bx	lr
 802749e:	bf00      	nop
 80274a0:	40007000 	.word	0x40007000

080274a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80274a4:	b480      	push	{r7}
 80274a6:	b085      	sub	sp, #20
 80274a8:	af00      	add	r7, sp, #0
 80274aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80274ac:	687b      	ldr	r3, [r7, #4]
 80274ae:	2b00      	cmp	r3, #0
 80274b0:	d141      	bne.n	8027536 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80274b2:	4b4b      	ldr	r3, [pc, #300]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80274b4:	681b      	ldr	r3, [r3, #0]
 80274b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80274ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80274be:	d131      	bne.n	8027524 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80274c0:	4b47      	ldr	r3, [pc, #284]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80274c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80274c6:	4a46      	ldr	r2, [pc, #280]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80274c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80274cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80274d0:	4b43      	ldr	r3, [pc, #268]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80274d2:	681b      	ldr	r3, [r3, #0]
 80274d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80274d8:	4a41      	ldr	r2, [pc, #260]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80274da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80274de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80274e0:	4b40      	ldr	r3, [pc, #256]	; (80275e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80274e2:	681b      	ldr	r3, [r3, #0]
 80274e4:	2232      	movs	r2, #50	; 0x32
 80274e6:	fb02 f303 	mul.w	r3, r2, r3
 80274ea:	4a3f      	ldr	r2, [pc, #252]	; (80275e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80274ec:	fba2 2303 	umull	r2, r3, r2, r3
 80274f0:	0c9b      	lsrs	r3, r3, #18
 80274f2:	3301      	adds	r3, #1
 80274f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80274f6:	e002      	b.n	80274fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80274f8:	68fb      	ldr	r3, [r7, #12]
 80274fa:	3b01      	subs	r3, #1
 80274fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80274fe:	4b38      	ldr	r3, [pc, #224]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027500:	695b      	ldr	r3, [r3, #20]
 8027502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802750a:	d102      	bne.n	8027512 <HAL_PWREx_ControlVoltageScaling+0x6e>
 802750c:	68fb      	ldr	r3, [r7, #12]
 802750e:	2b00      	cmp	r3, #0
 8027510:	d1f2      	bne.n	80274f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8027512:	4b33      	ldr	r3, [pc, #204]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027514:	695b      	ldr	r3, [r3, #20]
 8027516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802751a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802751e:	d158      	bne.n	80275d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8027520:	2303      	movs	r3, #3
 8027522:	e057      	b.n	80275d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8027524:	4b2e      	ldr	r3, [pc, #184]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802752a:	4a2d      	ldr	r2, [pc, #180]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802752c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8027530:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8027534:	e04d      	b.n	80275d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8027536:	687b      	ldr	r3, [r7, #4]
 8027538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802753c:	d141      	bne.n	80275c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 802753e:	4b28      	ldr	r3, [pc, #160]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027540:	681b      	ldr	r3, [r3, #0]
 8027542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8027546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802754a:	d131      	bne.n	80275b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 802754c:	4b24      	ldr	r3, [pc, #144]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802754e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8027552:	4a23      	ldr	r2, [pc, #140]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027558:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 802755c:	4b20      	ldr	r3, [pc, #128]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802755e:	681b      	ldr	r3, [r3, #0]
 8027560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8027564:	4a1e      	ldr	r2, [pc, #120]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8027566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802756a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 802756c:	4b1d      	ldr	r3, [pc, #116]	; (80275e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 802756e:	681b      	ldr	r3, [r3, #0]
 8027570:	2232      	movs	r2, #50	; 0x32
 8027572:	fb02 f303 	mul.w	r3, r2, r3
 8027576:	4a1c      	ldr	r2, [pc, #112]	; (80275e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8027578:	fba2 2303 	umull	r2, r3, r2, r3
 802757c:	0c9b      	lsrs	r3, r3, #18
 802757e:	3301      	adds	r3, #1
 8027580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8027582:	e002      	b.n	802758a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8027584:	68fb      	ldr	r3, [r7, #12]
 8027586:	3b01      	subs	r3, #1
 8027588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 802758a:	4b15      	ldr	r3, [pc, #84]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802758c:	695b      	ldr	r3, [r3, #20]
 802758e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027596:	d102      	bne.n	802759e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8027598:	68fb      	ldr	r3, [r7, #12]
 802759a:	2b00      	cmp	r3, #0
 802759c:	d1f2      	bne.n	8027584 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 802759e:	4b10      	ldr	r3, [pc, #64]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275a0:	695b      	ldr	r3, [r3, #20]
 80275a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80275a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80275aa:	d112      	bne.n	80275d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80275ac:	2303      	movs	r3, #3
 80275ae:	e011      	b.n	80275d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80275b0:	4b0b      	ldr	r3, [pc, #44]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80275b6:	4a0a      	ldr	r2, [pc, #40]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80275bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80275c0:	e007      	b.n	80275d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80275c2:	4b07      	ldr	r3, [pc, #28]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275c4:	681b      	ldr	r3, [r3, #0]
 80275c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80275ca:	4a05      	ldr	r2, [pc, #20]	; (80275e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80275cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80275d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80275d2:	2300      	movs	r3, #0
}
 80275d4:	4618      	mov	r0, r3
 80275d6:	3714      	adds	r7, #20
 80275d8:	46bd      	mov	sp, r7
 80275da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275de:	4770      	bx	lr
 80275e0:	40007000 	.word	0x40007000
 80275e4:	20000228 	.word	0x20000228
 80275e8:	431bde83 	.word	0x431bde83

080275ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80275ec:	b580      	push	{r7, lr}
 80275ee:	b088      	sub	sp, #32
 80275f0:	af00      	add	r7, sp, #0
 80275f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80275f4:	687b      	ldr	r3, [r7, #4]
 80275f6:	2b00      	cmp	r3, #0
 80275f8:	d102      	bne.n	8027600 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80275fa:	2301      	movs	r3, #1
 80275fc:	f000 bc08 	b.w	8027e10 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8027600:	4b96      	ldr	r3, [pc, #600]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027602:	689b      	ldr	r3, [r3, #8]
 8027604:	f003 030c 	and.w	r3, r3, #12
 8027608:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 802760a:	4b94      	ldr	r3, [pc, #592]	; (802785c <HAL_RCC_OscConfig+0x270>)
 802760c:	68db      	ldr	r3, [r3, #12]
 802760e:	f003 0303 	and.w	r3, r3, #3
 8027612:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8027614:	687b      	ldr	r3, [r7, #4]
 8027616:	681b      	ldr	r3, [r3, #0]
 8027618:	f003 0310 	and.w	r3, r3, #16
 802761c:	2b00      	cmp	r3, #0
 802761e:	f000 80e4 	beq.w	80277ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8027622:	69bb      	ldr	r3, [r7, #24]
 8027624:	2b00      	cmp	r3, #0
 8027626:	d007      	beq.n	8027638 <HAL_RCC_OscConfig+0x4c>
 8027628:	69bb      	ldr	r3, [r7, #24]
 802762a:	2b0c      	cmp	r3, #12
 802762c:	f040 808b 	bne.w	8027746 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8027630:	697b      	ldr	r3, [r7, #20]
 8027632:	2b01      	cmp	r3, #1
 8027634:	f040 8087 	bne.w	8027746 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8027638:	4b88      	ldr	r3, [pc, #544]	; (802785c <HAL_RCC_OscConfig+0x270>)
 802763a:	681b      	ldr	r3, [r3, #0]
 802763c:	f003 0302 	and.w	r3, r3, #2
 8027640:	2b00      	cmp	r3, #0
 8027642:	d005      	beq.n	8027650 <HAL_RCC_OscConfig+0x64>
 8027644:	687b      	ldr	r3, [r7, #4]
 8027646:	699b      	ldr	r3, [r3, #24]
 8027648:	2b00      	cmp	r3, #0
 802764a:	d101      	bne.n	8027650 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 802764c:	2301      	movs	r3, #1
 802764e:	e3df      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8027650:	687b      	ldr	r3, [r7, #4]
 8027652:	6a1a      	ldr	r2, [r3, #32]
 8027654:	4b81      	ldr	r3, [pc, #516]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027656:	681b      	ldr	r3, [r3, #0]
 8027658:	f003 0308 	and.w	r3, r3, #8
 802765c:	2b00      	cmp	r3, #0
 802765e:	d004      	beq.n	802766a <HAL_RCC_OscConfig+0x7e>
 8027660:	4b7e      	ldr	r3, [pc, #504]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027662:	681b      	ldr	r3, [r3, #0]
 8027664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027668:	e005      	b.n	8027676 <HAL_RCC_OscConfig+0x8a>
 802766a:	4b7c      	ldr	r3, [pc, #496]	; (802785c <HAL_RCC_OscConfig+0x270>)
 802766c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8027670:	091b      	lsrs	r3, r3, #4
 8027672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027676:	4293      	cmp	r3, r2
 8027678:	d223      	bcs.n	80276c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 802767a:	687b      	ldr	r3, [r7, #4]
 802767c:	6a1b      	ldr	r3, [r3, #32]
 802767e:	4618      	mov	r0, r3
 8027680:	f000 fdcc 	bl	802821c <RCC_SetFlashLatencyFromMSIRange>
 8027684:	4603      	mov	r3, r0
 8027686:	2b00      	cmp	r3, #0
 8027688:	d001      	beq.n	802768e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 802768a:	2301      	movs	r3, #1
 802768c:	e3c0      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 802768e:	4b73      	ldr	r3, [pc, #460]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027690:	681b      	ldr	r3, [r3, #0]
 8027692:	4a72      	ldr	r2, [pc, #456]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027694:	f043 0308 	orr.w	r3, r3, #8
 8027698:	6013      	str	r3, [r2, #0]
 802769a:	4b70      	ldr	r3, [pc, #448]	; (802785c <HAL_RCC_OscConfig+0x270>)
 802769c:	681b      	ldr	r3, [r3, #0]
 802769e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80276a2:	687b      	ldr	r3, [r7, #4]
 80276a4:	6a1b      	ldr	r3, [r3, #32]
 80276a6:	496d      	ldr	r1, [pc, #436]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80276a8:	4313      	orrs	r3, r2
 80276aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80276ac:	4b6b      	ldr	r3, [pc, #428]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80276ae:	685b      	ldr	r3, [r3, #4]
 80276b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80276b4:	687b      	ldr	r3, [r7, #4]
 80276b6:	69db      	ldr	r3, [r3, #28]
 80276b8:	021b      	lsls	r3, r3, #8
 80276ba:	4968      	ldr	r1, [pc, #416]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80276bc:	4313      	orrs	r3, r2
 80276be:	604b      	str	r3, [r1, #4]
 80276c0:	e025      	b.n	802770e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80276c2:	4b66      	ldr	r3, [pc, #408]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80276c4:	681b      	ldr	r3, [r3, #0]
 80276c6:	4a65      	ldr	r2, [pc, #404]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80276c8:	f043 0308 	orr.w	r3, r3, #8
 80276cc:	6013      	str	r3, [r2, #0]
 80276ce:	4b63      	ldr	r3, [pc, #396]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80276d0:	681b      	ldr	r3, [r3, #0]
 80276d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80276d6:	687b      	ldr	r3, [r7, #4]
 80276d8:	6a1b      	ldr	r3, [r3, #32]
 80276da:	4960      	ldr	r1, [pc, #384]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80276dc:	4313      	orrs	r3, r2
 80276de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80276e0:	4b5e      	ldr	r3, [pc, #376]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80276e2:	685b      	ldr	r3, [r3, #4]
 80276e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80276e8:	687b      	ldr	r3, [r7, #4]
 80276ea:	69db      	ldr	r3, [r3, #28]
 80276ec:	021b      	lsls	r3, r3, #8
 80276ee:	495b      	ldr	r1, [pc, #364]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80276f0:	4313      	orrs	r3, r2
 80276f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80276f4:	69bb      	ldr	r3, [r7, #24]
 80276f6:	2b00      	cmp	r3, #0
 80276f8:	d109      	bne.n	802770e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80276fa:	687b      	ldr	r3, [r7, #4]
 80276fc:	6a1b      	ldr	r3, [r3, #32]
 80276fe:	4618      	mov	r0, r3
 8027700:	f000 fd8c 	bl	802821c <RCC_SetFlashLatencyFromMSIRange>
 8027704:	4603      	mov	r3, r0
 8027706:	2b00      	cmp	r3, #0
 8027708:	d001      	beq.n	802770e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 802770a:	2301      	movs	r3, #1
 802770c:	e380      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 802770e:	f000 fcc1 	bl	8028094 <HAL_RCC_GetSysClockFreq>
 8027712:	4602      	mov	r2, r0
 8027714:	4b51      	ldr	r3, [pc, #324]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027716:	689b      	ldr	r3, [r3, #8]
 8027718:	091b      	lsrs	r3, r3, #4
 802771a:	f003 030f 	and.w	r3, r3, #15
 802771e:	4950      	ldr	r1, [pc, #320]	; (8027860 <HAL_RCC_OscConfig+0x274>)
 8027720:	5ccb      	ldrb	r3, [r1, r3]
 8027722:	f003 031f 	and.w	r3, r3, #31
 8027726:	fa22 f303 	lsr.w	r3, r2, r3
 802772a:	4a4e      	ldr	r2, [pc, #312]	; (8027864 <HAL_RCC_OscConfig+0x278>)
 802772c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 802772e:	4b4e      	ldr	r3, [pc, #312]	; (8027868 <HAL_RCC_OscConfig+0x27c>)
 8027730:	681b      	ldr	r3, [r3, #0]
 8027732:	4618      	mov	r0, r3
 8027734:	f7fc fd86 	bl	8024244 <HAL_InitTick>
 8027738:	4603      	mov	r3, r0
 802773a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 802773c:	7bfb      	ldrb	r3, [r7, #15]
 802773e:	2b00      	cmp	r3, #0
 8027740:	d052      	beq.n	80277e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8027742:	7bfb      	ldrb	r3, [r7, #15]
 8027744:	e364      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8027746:	687b      	ldr	r3, [r7, #4]
 8027748:	699b      	ldr	r3, [r3, #24]
 802774a:	2b00      	cmp	r3, #0
 802774c:	d032      	beq.n	80277b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 802774e:	4b43      	ldr	r3, [pc, #268]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027750:	681b      	ldr	r3, [r3, #0]
 8027752:	4a42      	ldr	r2, [pc, #264]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027754:	f043 0301 	orr.w	r3, r3, #1
 8027758:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 802775a:	f7fc fdc3 	bl	80242e4 <HAL_GetTick>
 802775e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8027760:	e008      	b.n	8027774 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8027762:	f7fc fdbf 	bl	80242e4 <HAL_GetTick>
 8027766:	4602      	mov	r2, r0
 8027768:	693b      	ldr	r3, [r7, #16]
 802776a:	1ad3      	subs	r3, r2, r3
 802776c:	2b02      	cmp	r3, #2
 802776e:	d901      	bls.n	8027774 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8027770:	2303      	movs	r3, #3
 8027772:	e34d      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8027774:	4b39      	ldr	r3, [pc, #228]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027776:	681b      	ldr	r3, [r3, #0]
 8027778:	f003 0302 	and.w	r3, r3, #2
 802777c:	2b00      	cmp	r3, #0
 802777e:	d0f0      	beq.n	8027762 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8027780:	4b36      	ldr	r3, [pc, #216]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027782:	681b      	ldr	r3, [r3, #0]
 8027784:	4a35      	ldr	r2, [pc, #212]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027786:	f043 0308 	orr.w	r3, r3, #8
 802778a:	6013      	str	r3, [r2, #0]
 802778c:	4b33      	ldr	r3, [pc, #204]	; (802785c <HAL_RCC_OscConfig+0x270>)
 802778e:	681b      	ldr	r3, [r3, #0]
 8027790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027794:	687b      	ldr	r3, [r7, #4]
 8027796:	6a1b      	ldr	r3, [r3, #32]
 8027798:	4930      	ldr	r1, [pc, #192]	; (802785c <HAL_RCC_OscConfig+0x270>)
 802779a:	4313      	orrs	r3, r2
 802779c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 802779e:	4b2f      	ldr	r3, [pc, #188]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80277a0:	685b      	ldr	r3, [r3, #4]
 80277a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80277a6:	687b      	ldr	r3, [r7, #4]
 80277a8:	69db      	ldr	r3, [r3, #28]
 80277aa:	021b      	lsls	r3, r3, #8
 80277ac:	492b      	ldr	r1, [pc, #172]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80277ae:	4313      	orrs	r3, r2
 80277b0:	604b      	str	r3, [r1, #4]
 80277b2:	e01a      	b.n	80277ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80277b4:	4b29      	ldr	r3, [pc, #164]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80277b6:	681b      	ldr	r3, [r3, #0]
 80277b8:	4a28      	ldr	r2, [pc, #160]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80277ba:	f023 0301 	bic.w	r3, r3, #1
 80277be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80277c0:	f7fc fd90 	bl	80242e4 <HAL_GetTick>
 80277c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80277c6:	e008      	b.n	80277da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80277c8:	f7fc fd8c 	bl	80242e4 <HAL_GetTick>
 80277cc:	4602      	mov	r2, r0
 80277ce:	693b      	ldr	r3, [r7, #16]
 80277d0:	1ad3      	subs	r3, r2, r3
 80277d2:	2b02      	cmp	r3, #2
 80277d4:	d901      	bls.n	80277da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80277d6:	2303      	movs	r3, #3
 80277d8:	e31a      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80277da:	4b20      	ldr	r3, [pc, #128]	; (802785c <HAL_RCC_OscConfig+0x270>)
 80277dc:	681b      	ldr	r3, [r3, #0]
 80277de:	f003 0302 	and.w	r3, r3, #2
 80277e2:	2b00      	cmp	r3, #0
 80277e4:	d1f0      	bne.n	80277c8 <HAL_RCC_OscConfig+0x1dc>
 80277e6:	e000      	b.n	80277ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80277e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80277ea:	687b      	ldr	r3, [r7, #4]
 80277ec:	681b      	ldr	r3, [r3, #0]
 80277ee:	f003 0301 	and.w	r3, r3, #1
 80277f2:	2b00      	cmp	r3, #0
 80277f4:	d073      	beq.n	80278de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80277f6:	69bb      	ldr	r3, [r7, #24]
 80277f8:	2b08      	cmp	r3, #8
 80277fa:	d005      	beq.n	8027808 <HAL_RCC_OscConfig+0x21c>
 80277fc:	69bb      	ldr	r3, [r7, #24]
 80277fe:	2b0c      	cmp	r3, #12
 8027800:	d10e      	bne.n	8027820 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8027802:	697b      	ldr	r3, [r7, #20]
 8027804:	2b03      	cmp	r3, #3
 8027806:	d10b      	bne.n	8027820 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027808:	4b14      	ldr	r3, [pc, #80]	; (802785c <HAL_RCC_OscConfig+0x270>)
 802780a:	681b      	ldr	r3, [r3, #0]
 802780c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027810:	2b00      	cmp	r3, #0
 8027812:	d063      	beq.n	80278dc <HAL_RCC_OscConfig+0x2f0>
 8027814:	687b      	ldr	r3, [r7, #4]
 8027816:	685b      	ldr	r3, [r3, #4]
 8027818:	2b00      	cmp	r3, #0
 802781a:	d15f      	bne.n	80278dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 802781c:	2301      	movs	r3, #1
 802781e:	e2f7      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027820:	687b      	ldr	r3, [r7, #4]
 8027822:	685b      	ldr	r3, [r3, #4]
 8027824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027828:	d106      	bne.n	8027838 <HAL_RCC_OscConfig+0x24c>
 802782a:	4b0c      	ldr	r3, [pc, #48]	; (802785c <HAL_RCC_OscConfig+0x270>)
 802782c:	681b      	ldr	r3, [r3, #0]
 802782e:	4a0b      	ldr	r2, [pc, #44]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027834:	6013      	str	r3, [r2, #0]
 8027836:	e025      	b.n	8027884 <HAL_RCC_OscConfig+0x298>
 8027838:	687b      	ldr	r3, [r7, #4]
 802783a:	685b      	ldr	r3, [r3, #4]
 802783c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027840:	d114      	bne.n	802786c <HAL_RCC_OscConfig+0x280>
 8027842:	4b06      	ldr	r3, [pc, #24]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027844:	681b      	ldr	r3, [r3, #0]
 8027846:	4a05      	ldr	r2, [pc, #20]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802784c:	6013      	str	r3, [r2, #0]
 802784e:	4b03      	ldr	r3, [pc, #12]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027850:	681b      	ldr	r3, [r3, #0]
 8027852:	4a02      	ldr	r2, [pc, #8]	; (802785c <HAL_RCC_OscConfig+0x270>)
 8027854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027858:	6013      	str	r3, [r2, #0]
 802785a:	e013      	b.n	8027884 <HAL_RCC_OscConfig+0x298>
 802785c:	40021000 	.word	0x40021000
 8027860:	08076580 	.word	0x08076580
 8027864:	20000228 	.word	0x20000228
 8027868:	20000294 	.word	0x20000294
 802786c:	4ba0      	ldr	r3, [pc, #640]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 802786e:	681b      	ldr	r3, [r3, #0]
 8027870:	4a9f      	ldr	r2, [pc, #636]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027876:	6013      	str	r3, [r2, #0]
 8027878:	4b9d      	ldr	r3, [pc, #628]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 802787a:	681b      	ldr	r3, [r3, #0]
 802787c:	4a9c      	ldr	r2, [pc, #624]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 802787e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8027882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8027884:	687b      	ldr	r3, [r7, #4]
 8027886:	685b      	ldr	r3, [r3, #4]
 8027888:	2b00      	cmp	r3, #0
 802788a:	d013      	beq.n	80278b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802788c:	f7fc fd2a 	bl	80242e4 <HAL_GetTick>
 8027890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8027892:	e008      	b.n	80278a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8027894:	f7fc fd26 	bl	80242e4 <HAL_GetTick>
 8027898:	4602      	mov	r2, r0
 802789a:	693b      	ldr	r3, [r7, #16]
 802789c:	1ad3      	subs	r3, r2, r3
 802789e:	2b64      	cmp	r3, #100	; 0x64
 80278a0:	d901      	bls.n	80278a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80278a2:	2303      	movs	r3, #3
 80278a4:	e2b4      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80278a6:	4b92      	ldr	r3, [pc, #584]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 80278a8:	681b      	ldr	r3, [r3, #0]
 80278aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	d0f0      	beq.n	8027894 <HAL_RCC_OscConfig+0x2a8>
 80278b2:	e014      	b.n	80278de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80278b4:	f7fc fd16 	bl	80242e4 <HAL_GetTick>
 80278b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80278ba:	e008      	b.n	80278ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80278bc:	f7fc fd12 	bl	80242e4 <HAL_GetTick>
 80278c0:	4602      	mov	r2, r0
 80278c2:	693b      	ldr	r3, [r7, #16]
 80278c4:	1ad3      	subs	r3, r2, r3
 80278c6:	2b64      	cmp	r3, #100	; 0x64
 80278c8:	d901      	bls.n	80278ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80278ca:	2303      	movs	r3, #3
 80278cc:	e2a0      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80278ce:	4b88      	ldr	r3, [pc, #544]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 80278d0:	681b      	ldr	r3, [r3, #0]
 80278d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80278d6:	2b00      	cmp	r3, #0
 80278d8:	d1f0      	bne.n	80278bc <HAL_RCC_OscConfig+0x2d0>
 80278da:	e000      	b.n	80278de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80278dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80278de:	687b      	ldr	r3, [r7, #4]
 80278e0:	681b      	ldr	r3, [r3, #0]
 80278e2:	f003 0302 	and.w	r3, r3, #2
 80278e6:	2b00      	cmp	r3, #0
 80278e8:	d060      	beq.n	80279ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80278ea:	69bb      	ldr	r3, [r7, #24]
 80278ec:	2b04      	cmp	r3, #4
 80278ee:	d005      	beq.n	80278fc <HAL_RCC_OscConfig+0x310>
 80278f0:	69bb      	ldr	r3, [r7, #24]
 80278f2:	2b0c      	cmp	r3, #12
 80278f4:	d119      	bne.n	802792a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80278f6:	697b      	ldr	r3, [r7, #20]
 80278f8:	2b02      	cmp	r3, #2
 80278fa:	d116      	bne.n	802792a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80278fc:	4b7c      	ldr	r3, [pc, #496]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 80278fe:	681b      	ldr	r3, [r3, #0]
 8027900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027904:	2b00      	cmp	r3, #0
 8027906:	d005      	beq.n	8027914 <HAL_RCC_OscConfig+0x328>
 8027908:	687b      	ldr	r3, [r7, #4]
 802790a:	68db      	ldr	r3, [r3, #12]
 802790c:	2b00      	cmp	r3, #0
 802790e:	d101      	bne.n	8027914 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8027910:	2301      	movs	r3, #1
 8027912:	e27d      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027914:	4b76      	ldr	r3, [pc, #472]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027916:	685b      	ldr	r3, [r3, #4]
 8027918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802791c:	687b      	ldr	r3, [r7, #4]
 802791e:	691b      	ldr	r3, [r3, #16]
 8027920:	061b      	lsls	r3, r3, #24
 8027922:	4973      	ldr	r1, [pc, #460]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027924:	4313      	orrs	r3, r2
 8027926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8027928:	e040      	b.n	80279ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 802792a:	687b      	ldr	r3, [r7, #4]
 802792c:	68db      	ldr	r3, [r3, #12]
 802792e:	2b00      	cmp	r3, #0
 8027930:	d023      	beq.n	802797a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8027932:	4b6f      	ldr	r3, [pc, #444]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027934:	681b      	ldr	r3, [r3, #0]
 8027936:	4a6e      	ldr	r2, [pc, #440]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802793c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802793e:	f7fc fcd1 	bl	80242e4 <HAL_GetTick>
 8027942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8027944:	e008      	b.n	8027958 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8027946:	f7fc fccd 	bl	80242e4 <HAL_GetTick>
 802794a:	4602      	mov	r2, r0
 802794c:	693b      	ldr	r3, [r7, #16]
 802794e:	1ad3      	subs	r3, r2, r3
 8027950:	2b02      	cmp	r3, #2
 8027952:	d901      	bls.n	8027958 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8027954:	2303      	movs	r3, #3
 8027956:	e25b      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8027958:	4b65      	ldr	r3, [pc, #404]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 802795a:	681b      	ldr	r3, [r3, #0]
 802795c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027960:	2b00      	cmp	r3, #0
 8027962:	d0f0      	beq.n	8027946 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027964:	4b62      	ldr	r3, [pc, #392]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027966:	685b      	ldr	r3, [r3, #4]
 8027968:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802796c:	687b      	ldr	r3, [r7, #4]
 802796e:	691b      	ldr	r3, [r3, #16]
 8027970:	061b      	lsls	r3, r3, #24
 8027972:	495f      	ldr	r1, [pc, #380]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027974:	4313      	orrs	r3, r2
 8027976:	604b      	str	r3, [r1, #4]
 8027978:	e018      	b.n	80279ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802797a:	4b5d      	ldr	r3, [pc, #372]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 802797c:	681b      	ldr	r3, [r3, #0]
 802797e:	4a5c      	ldr	r2, [pc, #368]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8027984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027986:	f7fc fcad 	bl	80242e4 <HAL_GetTick>
 802798a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 802798c:	e008      	b.n	80279a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802798e:	f7fc fca9 	bl	80242e4 <HAL_GetTick>
 8027992:	4602      	mov	r2, r0
 8027994:	693b      	ldr	r3, [r7, #16]
 8027996:	1ad3      	subs	r3, r2, r3
 8027998:	2b02      	cmp	r3, #2
 802799a:	d901      	bls.n	80279a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 802799c:	2303      	movs	r3, #3
 802799e:	e237      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80279a0:	4b53      	ldr	r3, [pc, #332]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 80279a2:	681b      	ldr	r3, [r3, #0]
 80279a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80279a8:	2b00      	cmp	r3, #0
 80279aa:	d1f0      	bne.n	802798e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80279ac:	687b      	ldr	r3, [r7, #4]
 80279ae:	681b      	ldr	r3, [r3, #0]
 80279b0:	f003 0308 	and.w	r3, r3, #8
 80279b4:	2b00      	cmp	r3, #0
 80279b6:	d03c      	beq.n	8027a32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80279b8:	687b      	ldr	r3, [r7, #4]
 80279ba:	695b      	ldr	r3, [r3, #20]
 80279bc:	2b00      	cmp	r3, #0
 80279be:	d01c      	beq.n	80279fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80279c0:	4b4b      	ldr	r3, [pc, #300]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 80279c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80279c6:	4a4a      	ldr	r2, [pc, #296]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 80279c8:	f043 0301 	orr.w	r3, r3, #1
 80279cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80279d0:	f7fc fc88 	bl	80242e4 <HAL_GetTick>
 80279d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80279d6:	e008      	b.n	80279ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80279d8:	f7fc fc84 	bl	80242e4 <HAL_GetTick>
 80279dc:	4602      	mov	r2, r0
 80279de:	693b      	ldr	r3, [r7, #16]
 80279e0:	1ad3      	subs	r3, r2, r3
 80279e2:	2b02      	cmp	r3, #2
 80279e4:	d901      	bls.n	80279ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80279e6:	2303      	movs	r3, #3
 80279e8:	e212      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80279ea:	4b41      	ldr	r3, [pc, #260]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 80279ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80279f0:	f003 0302 	and.w	r3, r3, #2
 80279f4:	2b00      	cmp	r3, #0
 80279f6:	d0ef      	beq.n	80279d8 <HAL_RCC_OscConfig+0x3ec>
 80279f8:	e01b      	b.n	8027a32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80279fa:	4b3d      	ldr	r3, [pc, #244]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 80279fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8027a00:	4a3b      	ldr	r2, [pc, #236]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027a02:	f023 0301 	bic.w	r3, r3, #1
 8027a06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027a0a:	f7fc fc6b 	bl	80242e4 <HAL_GetTick>
 8027a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8027a10:	e008      	b.n	8027a24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8027a12:	f7fc fc67 	bl	80242e4 <HAL_GetTick>
 8027a16:	4602      	mov	r2, r0
 8027a18:	693b      	ldr	r3, [r7, #16]
 8027a1a:	1ad3      	subs	r3, r2, r3
 8027a1c:	2b02      	cmp	r3, #2
 8027a1e:	d901      	bls.n	8027a24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8027a20:	2303      	movs	r3, #3
 8027a22:	e1f5      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8027a24:	4b32      	ldr	r3, [pc, #200]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8027a2a:	f003 0302 	and.w	r3, r3, #2
 8027a2e:	2b00      	cmp	r3, #0
 8027a30:	d1ef      	bne.n	8027a12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8027a32:	687b      	ldr	r3, [r7, #4]
 8027a34:	681b      	ldr	r3, [r3, #0]
 8027a36:	f003 0304 	and.w	r3, r3, #4
 8027a3a:	2b00      	cmp	r3, #0
 8027a3c:	f000 80a6 	beq.w	8027b8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8027a40:	2300      	movs	r3, #0
 8027a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8027a44:	4b2a      	ldr	r3, [pc, #168]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027a4c:	2b00      	cmp	r3, #0
 8027a4e:	d10d      	bne.n	8027a6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8027a50:	4b27      	ldr	r3, [pc, #156]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027a54:	4a26      	ldr	r2, [pc, #152]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8027a5c:	4b24      	ldr	r3, [pc, #144]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027a64:	60bb      	str	r3, [r7, #8]
 8027a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8027a68:	2301      	movs	r3, #1
 8027a6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8027a6c:	4b21      	ldr	r3, [pc, #132]	; (8027af4 <HAL_RCC_OscConfig+0x508>)
 8027a6e:	681b      	ldr	r3, [r3, #0]
 8027a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027a74:	2b00      	cmp	r3, #0
 8027a76:	d118      	bne.n	8027aaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8027a78:	4b1e      	ldr	r3, [pc, #120]	; (8027af4 <HAL_RCC_OscConfig+0x508>)
 8027a7a:	681b      	ldr	r3, [r3, #0]
 8027a7c:	4a1d      	ldr	r2, [pc, #116]	; (8027af4 <HAL_RCC_OscConfig+0x508>)
 8027a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8027a84:	f7fc fc2e 	bl	80242e4 <HAL_GetTick>
 8027a88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8027a8a:	e008      	b.n	8027a9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8027a8c:	f7fc fc2a 	bl	80242e4 <HAL_GetTick>
 8027a90:	4602      	mov	r2, r0
 8027a92:	693b      	ldr	r3, [r7, #16]
 8027a94:	1ad3      	subs	r3, r2, r3
 8027a96:	2b02      	cmp	r3, #2
 8027a98:	d901      	bls.n	8027a9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8027a9a:	2303      	movs	r3, #3
 8027a9c:	e1b8      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8027a9e:	4b15      	ldr	r3, [pc, #84]	; (8027af4 <HAL_RCC_OscConfig+0x508>)
 8027aa0:	681b      	ldr	r3, [r3, #0]
 8027aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027aa6:	2b00      	cmp	r3, #0
 8027aa8:	d0f0      	beq.n	8027a8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027aaa:	687b      	ldr	r3, [r7, #4]
 8027aac:	689b      	ldr	r3, [r3, #8]
 8027aae:	2b01      	cmp	r3, #1
 8027ab0:	d108      	bne.n	8027ac4 <HAL_RCC_OscConfig+0x4d8>
 8027ab2:	4b0f      	ldr	r3, [pc, #60]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027ab8:	4a0d      	ldr	r2, [pc, #52]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027aba:	f043 0301 	orr.w	r3, r3, #1
 8027abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8027ac2:	e029      	b.n	8027b18 <HAL_RCC_OscConfig+0x52c>
 8027ac4:	687b      	ldr	r3, [r7, #4]
 8027ac6:	689b      	ldr	r3, [r3, #8]
 8027ac8:	2b05      	cmp	r3, #5
 8027aca:	d115      	bne.n	8027af8 <HAL_RCC_OscConfig+0x50c>
 8027acc:	4b08      	ldr	r3, [pc, #32]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027ad2:	4a07      	ldr	r2, [pc, #28]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027ad4:	f043 0304 	orr.w	r3, r3, #4
 8027ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8027adc:	4b04      	ldr	r3, [pc, #16]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027ae2:	4a03      	ldr	r2, [pc, #12]	; (8027af0 <HAL_RCC_OscConfig+0x504>)
 8027ae4:	f043 0301 	orr.w	r3, r3, #1
 8027ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8027aec:	e014      	b.n	8027b18 <HAL_RCC_OscConfig+0x52c>
 8027aee:	bf00      	nop
 8027af0:	40021000 	.word	0x40021000
 8027af4:	40007000 	.word	0x40007000
 8027af8:	4b9d      	ldr	r3, [pc, #628]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027afe:	4a9c      	ldr	r2, [pc, #624]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027b00:	f023 0301 	bic.w	r3, r3, #1
 8027b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8027b08:	4b99      	ldr	r3, [pc, #612]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b0e:	4a98      	ldr	r2, [pc, #608]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027b10:	f023 0304 	bic.w	r3, r3, #4
 8027b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8027b18:	687b      	ldr	r3, [r7, #4]
 8027b1a:	689b      	ldr	r3, [r3, #8]
 8027b1c:	2b00      	cmp	r3, #0
 8027b1e:	d016      	beq.n	8027b4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027b20:	f7fc fbe0 	bl	80242e4 <HAL_GetTick>
 8027b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8027b26:	e00a      	b.n	8027b3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8027b28:	f7fc fbdc 	bl	80242e4 <HAL_GetTick>
 8027b2c:	4602      	mov	r2, r0
 8027b2e:	693b      	ldr	r3, [r7, #16]
 8027b30:	1ad3      	subs	r3, r2, r3
 8027b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8027b36:	4293      	cmp	r3, r2
 8027b38:	d901      	bls.n	8027b3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8027b3a:	2303      	movs	r3, #3
 8027b3c:	e168      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8027b3e:	4b8c      	ldr	r3, [pc, #560]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b44:	f003 0302 	and.w	r3, r3, #2
 8027b48:	2b00      	cmp	r3, #0
 8027b4a:	d0ed      	beq.n	8027b28 <HAL_RCC_OscConfig+0x53c>
 8027b4c:	e015      	b.n	8027b7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027b4e:	f7fc fbc9 	bl	80242e4 <HAL_GetTick>
 8027b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8027b54:	e00a      	b.n	8027b6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8027b56:	f7fc fbc5 	bl	80242e4 <HAL_GetTick>
 8027b5a:	4602      	mov	r2, r0
 8027b5c:	693b      	ldr	r3, [r7, #16]
 8027b5e:	1ad3      	subs	r3, r2, r3
 8027b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8027b64:	4293      	cmp	r3, r2
 8027b66:	d901      	bls.n	8027b6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8027b68:	2303      	movs	r3, #3
 8027b6a:	e151      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8027b6c:	4b80      	ldr	r3, [pc, #512]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b72:	f003 0302 	and.w	r3, r3, #2
 8027b76:	2b00      	cmp	r3, #0
 8027b78:	d1ed      	bne.n	8027b56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8027b7a:	7ffb      	ldrb	r3, [r7, #31]
 8027b7c:	2b01      	cmp	r3, #1
 8027b7e:	d105      	bne.n	8027b8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8027b80:	4b7b      	ldr	r3, [pc, #492]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027b84:	4a7a      	ldr	r2, [pc, #488]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027b8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8027b8c:	687b      	ldr	r3, [r7, #4]
 8027b8e:	681b      	ldr	r3, [r3, #0]
 8027b90:	f003 0320 	and.w	r3, r3, #32
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	d03c      	beq.n	8027c12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8027b98:	687b      	ldr	r3, [r7, #4]
 8027b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027b9c:	2b00      	cmp	r3, #0
 8027b9e:	d01c      	beq.n	8027bda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8027ba0:	4b73      	ldr	r3, [pc, #460]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8027ba6:	4a72      	ldr	r2, [pc, #456]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027ba8:	f043 0301 	orr.w	r3, r3, #1
 8027bac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027bb0:	f7fc fb98 	bl	80242e4 <HAL_GetTick>
 8027bb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8027bb6:	e008      	b.n	8027bca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8027bb8:	f7fc fb94 	bl	80242e4 <HAL_GetTick>
 8027bbc:	4602      	mov	r2, r0
 8027bbe:	693b      	ldr	r3, [r7, #16]
 8027bc0:	1ad3      	subs	r3, r2, r3
 8027bc2:	2b02      	cmp	r3, #2
 8027bc4:	d901      	bls.n	8027bca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8027bc6:	2303      	movs	r3, #3
 8027bc8:	e122      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8027bca:	4b69      	ldr	r3, [pc, #420]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8027bd0:	f003 0302 	and.w	r3, r3, #2
 8027bd4:	2b00      	cmp	r3, #0
 8027bd6:	d0ef      	beq.n	8027bb8 <HAL_RCC_OscConfig+0x5cc>
 8027bd8:	e01b      	b.n	8027c12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8027bda:	4b65      	ldr	r3, [pc, #404]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8027be0:	4a63      	ldr	r2, [pc, #396]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027be2:	f023 0301 	bic.w	r3, r3, #1
 8027be6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027bea:	f7fc fb7b 	bl	80242e4 <HAL_GetTick>
 8027bee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8027bf0:	e008      	b.n	8027c04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8027bf2:	f7fc fb77 	bl	80242e4 <HAL_GetTick>
 8027bf6:	4602      	mov	r2, r0
 8027bf8:	693b      	ldr	r3, [r7, #16]
 8027bfa:	1ad3      	subs	r3, r2, r3
 8027bfc:	2b02      	cmp	r3, #2
 8027bfe:	d901      	bls.n	8027c04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8027c00:	2303      	movs	r3, #3
 8027c02:	e105      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8027c04:	4b5a      	ldr	r3, [pc, #360]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8027c0a:	f003 0302 	and.w	r3, r3, #2
 8027c0e:	2b00      	cmp	r3, #0
 8027c10:	d1ef      	bne.n	8027bf2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8027c12:	687b      	ldr	r3, [r7, #4]
 8027c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c16:	2b00      	cmp	r3, #0
 8027c18:	f000 80f9 	beq.w	8027e0e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8027c1c:	687b      	ldr	r3, [r7, #4]
 8027c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c20:	2b02      	cmp	r3, #2
 8027c22:	f040 80cf 	bne.w	8027dc4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8027c26:	4b52      	ldr	r3, [pc, #328]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027c28:	68db      	ldr	r3, [r3, #12]
 8027c2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8027c2c:	697b      	ldr	r3, [r7, #20]
 8027c2e:	f003 0203 	and.w	r2, r3, #3
 8027c32:	687b      	ldr	r3, [r7, #4]
 8027c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027c36:	429a      	cmp	r2, r3
 8027c38:	d12c      	bne.n	8027c94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8027c3a:	697b      	ldr	r3, [r7, #20]
 8027c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027c40:	687b      	ldr	r3, [r7, #4]
 8027c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c44:	3b01      	subs	r3, #1
 8027c46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8027c48:	429a      	cmp	r2, r3
 8027c4a:	d123      	bne.n	8027c94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8027c4c:	697b      	ldr	r3, [r7, #20]
 8027c4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8027c52:	687b      	ldr	r3, [r7, #4]
 8027c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027c56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8027c58:	429a      	cmp	r2, r3
 8027c5a:	d11b      	bne.n	8027c94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8027c5c:	697b      	ldr	r3, [r7, #20]
 8027c5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8027c62:	687b      	ldr	r3, [r7, #4]
 8027c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8027c68:	429a      	cmp	r2, r3
 8027c6a:	d113      	bne.n	8027c94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8027c6c:	697b      	ldr	r3, [r7, #20]
 8027c6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8027c72:	687b      	ldr	r3, [r7, #4]
 8027c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027c76:	085b      	lsrs	r3, r3, #1
 8027c78:	3b01      	subs	r3, #1
 8027c7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8027c7c:	429a      	cmp	r2, r3
 8027c7e:	d109      	bne.n	8027c94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8027c80:	697b      	ldr	r3, [r7, #20]
 8027c82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8027c86:	687b      	ldr	r3, [r7, #4]
 8027c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c8a:	085b      	lsrs	r3, r3, #1
 8027c8c:	3b01      	subs	r3, #1
 8027c8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8027c90:	429a      	cmp	r2, r3
 8027c92:	d071      	beq.n	8027d78 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8027c94:	69bb      	ldr	r3, [r7, #24]
 8027c96:	2b0c      	cmp	r3, #12
 8027c98:	d068      	beq.n	8027d6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8027c9a:	4b35      	ldr	r3, [pc, #212]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027c9c:	681b      	ldr	r3, [r3, #0]
 8027c9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8027ca2:	2b00      	cmp	r3, #0
 8027ca4:	d105      	bne.n	8027cb2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8027ca6:	4b32      	ldr	r3, [pc, #200]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027ca8:	681b      	ldr	r3, [r3, #0]
 8027caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027cae:	2b00      	cmp	r3, #0
 8027cb0:	d001      	beq.n	8027cb6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8027cb2:	2301      	movs	r3, #1
 8027cb4:	e0ac      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8027cb6:	4b2e      	ldr	r3, [pc, #184]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027cb8:	681b      	ldr	r3, [r3, #0]
 8027cba:	4a2d      	ldr	r2, [pc, #180]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027cc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8027cc2:	f7fc fb0f 	bl	80242e4 <HAL_GetTick>
 8027cc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8027cc8:	e008      	b.n	8027cdc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027cca:	f7fc fb0b 	bl	80242e4 <HAL_GetTick>
 8027cce:	4602      	mov	r2, r0
 8027cd0:	693b      	ldr	r3, [r7, #16]
 8027cd2:	1ad3      	subs	r3, r2, r3
 8027cd4:	2b02      	cmp	r3, #2
 8027cd6:	d901      	bls.n	8027cdc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8027cd8:	2303      	movs	r3, #3
 8027cda:	e099      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8027cdc:	4b24      	ldr	r3, [pc, #144]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027cde:	681b      	ldr	r3, [r3, #0]
 8027ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027ce4:	2b00      	cmp	r3, #0
 8027ce6:	d1f0      	bne.n	8027cca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8027ce8:	4b21      	ldr	r3, [pc, #132]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027cea:	68da      	ldr	r2, [r3, #12]
 8027cec:	4b21      	ldr	r3, [pc, #132]	; (8027d74 <HAL_RCC_OscConfig+0x788>)
 8027cee:	4013      	ands	r3, r2
 8027cf0:	687a      	ldr	r2, [r7, #4]
 8027cf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8027cf4:	687a      	ldr	r2, [r7, #4]
 8027cf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8027cf8:	3a01      	subs	r2, #1
 8027cfa:	0112      	lsls	r2, r2, #4
 8027cfc:	4311      	orrs	r1, r2
 8027cfe:	687a      	ldr	r2, [r7, #4]
 8027d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8027d02:	0212      	lsls	r2, r2, #8
 8027d04:	4311      	orrs	r1, r2
 8027d06:	687a      	ldr	r2, [r7, #4]
 8027d08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8027d0a:	0852      	lsrs	r2, r2, #1
 8027d0c:	3a01      	subs	r2, #1
 8027d0e:	0552      	lsls	r2, r2, #21
 8027d10:	4311      	orrs	r1, r2
 8027d12:	687a      	ldr	r2, [r7, #4]
 8027d14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8027d16:	0852      	lsrs	r2, r2, #1
 8027d18:	3a01      	subs	r2, #1
 8027d1a:	0652      	lsls	r2, r2, #25
 8027d1c:	4311      	orrs	r1, r2
 8027d1e:	687a      	ldr	r2, [r7, #4]
 8027d20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8027d22:	06d2      	lsls	r2, r2, #27
 8027d24:	430a      	orrs	r2, r1
 8027d26:	4912      	ldr	r1, [pc, #72]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027d28:	4313      	orrs	r3, r2
 8027d2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8027d2c:	4b10      	ldr	r3, [pc, #64]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027d2e:	681b      	ldr	r3, [r3, #0]
 8027d30:	4a0f      	ldr	r2, [pc, #60]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8027d38:	4b0d      	ldr	r3, [pc, #52]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027d3a:	68db      	ldr	r3, [r3, #12]
 8027d3c:	4a0c      	ldr	r2, [pc, #48]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8027d44:	f7fc face 	bl	80242e4 <HAL_GetTick>
 8027d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027d4a:	e008      	b.n	8027d5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027d4c:	f7fc faca 	bl	80242e4 <HAL_GetTick>
 8027d50:	4602      	mov	r2, r0
 8027d52:	693b      	ldr	r3, [r7, #16]
 8027d54:	1ad3      	subs	r3, r2, r3
 8027d56:	2b02      	cmp	r3, #2
 8027d58:	d901      	bls.n	8027d5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8027d5a:	2303      	movs	r3, #3
 8027d5c:	e058      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027d5e:	4b04      	ldr	r3, [pc, #16]	; (8027d70 <HAL_RCC_OscConfig+0x784>)
 8027d60:	681b      	ldr	r3, [r3, #0]
 8027d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027d66:	2b00      	cmp	r3, #0
 8027d68:	d0f0      	beq.n	8027d4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8027d6a:	e050      	b.n	8027e0e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8027d6c:	2301      	movs	r3, #1
 8027d6e:	e04f      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
 8027d70:	40021000 	.word	0x40021000
 8027d74:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027d78:	4b27      	ldr	r3, [pc, #156]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027d7a:	681b      	ldr	r3, [r3, #0]
 8027d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027d80:	2b00      	cmp	r3, #0
 8027d82:	d144      	bne.n	8027e0e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8027d84:	4b24      	ldr	r3, [pc, #144]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027d86:	681b      	ldr	r3, [r3, #0]
 8027d88:	4a23      	ldr	r2, [pc, #140]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027d8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8027d90:	4b21      	ldr	r3, [pc, #132]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027d92:	68db      	ldr	r3, [r3, #12]
 8027d94:	4a20      	ldr	r2, [pc, #128]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027d9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8027d9c:	f7fc faa2 	bl	80242e4 <HAL_GetTick>
 8027da0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027da2:	e008      	b.n	8027db6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027da4:	f7fc fa9e 	bl	80242e4 <HAL_GetTick>
 8027da8:	4602      	mov	r2, r0
 8027daa:	693b      	ldr	r3, [r7, #16]
 8027dac:	1ad3      	subs	r3, r2, r3
 8027dae:	2b02      	cmp	r3, #2
 8027db0:	d901      	bls.n	8027db6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8027db2:	2303      	movs	r3, #3
 8027db4:	e02c      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027db6:	4b18      	ldr	r3, [pc, #96]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027db8:	681b      	ldr	r3, [r3, #0]
 8027dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027dbe:	2b00      	cmp	r3, #0
 8027dc0:	d0f0      	beq.n	8027da4 <HAL_RCC_OscConfig+0x7b8>
 8027dc2:	e024      	b.n	8027e0e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8027dc4:	69bb      	ldr	r3, [r7, #24]
 8027dc6:	2b0c      	cmp	r3, #12
 8027dc8:	d01f      	beq.n	8027e0a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027dca:	4b13      	ldr	r3, [pc, #76]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027dcc:	681b      	ldr	r3, [r3, #0]
 8027dce:	4a12      	ldr	r2, [pc, #72]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027dd6:	f7fc fa85 	bl	80242e4 <HAL_GetTick>
 8027dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8027ddc:	e008      	b.n	8027df0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027dde:	f7fc fa81 	bl	80242e4 <HAL_GetTick>
 8027de2:	4602      	mov	r2, r0
 8027de4:	693b      	ldr	r3, [r7, #16]
 8027de6:	1ad3      	subs	r3, r2, r3
 8027de8:	2b02      	cmp	r3, #2
 8027dea:	d901      	bls.n	8027df0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8027dec:	2303      	movs	r3, #3
 8027dee:	e00f      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8027df0:	4b09      	ldr	r3, [pc, #36]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027df2:	681b      	ldr	r3, [r3, #0]
 8027df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027df8:	2b00      	cmp	r3, #0
 8027dfa:	d1f0      	bne.n	8027dde <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8027dfc:	4b06      	ldr	r3, [pc, #24]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027dfe:	68da      	ldr	r2, [r3, #12]
 8027e00:	4905      	ldr	r1, [pc, #20]	; (8027e18 <HAL_RCC_OscConfig+0x82c>)
 8027e02:	4b06      	ldr	r3, [pc, #24]	; (8027e1c <HAL_RCC_OscConfig+0x830>)
 8027e04:	4013      	ands	r3, r2
 8027e06:	60cb      	str	r3, [r1, #12]
 8027e08:	e001      	b.n	8027e0e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8027e0a:	2301      	movs	r3, #1
 8027e0c:	e000      	b.n	8027e10 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8027e0e:	2300      	movs	r3, #0
}
 8027e10:	4618      	mov	r0, r3
 8027e12:	3720      	adds	r7, #32
 8027e14:	46bd      	mov	sp, r7
 8027e16:	bd80      	pop	{r7, pc}
 8027e18:	40021000 	.word	0x40021000
 8027e1c:	feeefffc 	.word	0xfeeefffc

08027e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027e20:	b580      	push	{r7, lr}
 8027e22:	b086      	sub	sp, #24
 8027e24:	af00      	add	r7, sp, #0
 8027e26:	6078      	str	r0, [r7, #4]
 8027e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8027e2a:	2300      	movs	r3, #0
 8027e2c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8027e2e:	687b      	ldr	r3, [r7, #4]
 8027e30:	2b00      	cmp	r3, #0
 8027e32:	d101      	bne.n	8027e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8027e34:	2301      	movs	r3, #1
 8027e36:	e11d      	b.n	8028074 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027e38:	4b90      	ldr	r3, [pc, #576]	; (802807c <HAL_RCC_ClockConfig+0x25c>)
 8027e3a:	681b      	ldr	r3, [r3, #0]
 8027e3c:	f003 030f 	and.w	r3, r3, #15
 8027e40:	683a      	ldr	r2, [r7, #0]
 8027e42:	429a      	cmp	r2, r3
 8027e44:	d910      	bls.n	8027e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027e46:	4b8d      	ldr	r3, [pc, #564]	; (802807c <HAL_RCC_ClockConfig+0x25c>)
 8027e48:	681b      	ldr	r3, [r3, #0]
 8027e4a:	f023 020f 	bic.w	r2, r3, #15
 8027e4e:	498b      	ldr	r1, [pc, #556]	; (802807c <HAL_RCC_ClockConfig+0x25c>)
 8027e50:	683b      	ldr	r3, [r7, #0]
 8027e52:	4313      	orrs	r3, r2
 8027e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027e56:	4b89      	ldr	r3, [pc, #548]	; (802807c <HAL_RCC_ClockConfig+0x25c>)
 8027e58:	681b      	ldr	r3, [r3, #0]
 8027e5a:	f003 030f 	and.w	r3, r3, #15
 8027e5e:	683a      	ldr	r2, [r7, #0]
 8027e60:	429a      	cmp	r2, r3
 8027e62:	d001      	beq.n	8027e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8027e64:	2301      	movs	r3, #1
 8027e66:	e105      	b.n	8028074 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027e68:	687b      	ldr	r3, [r7, #4]
 8027e6a:	681b      	ldr	r3, [r3, #0]
 8027e6c:	f003 0302 	and.w	r3, r3, #2
 8027e70:	2b00      	cmp	r3, #0
 8027e72:	d010      	beq.n	8027e96 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8027e74:	687b      	ldr	r3, [r7, #4]
 8027e76:	689a      	ldr	r2, [r3, #8]
 8027e78:	4b81      	ldr	r3, [pc, #516]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027e7a:	689b      	ldr	r3, [r3, #8]
 8027e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027e80:	429a      	cmp	r2, r3
 8027e82:	d908      	bls.n	8027e96 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027e84:	4b7e      	ldr	r3, [pc, #504]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027e86:	689b      	ldr	r3, [r3, #8]
 8027e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027e8c:	687b      	ldr	r3, [r7, #4]
 8027e8e:	689b      	ldr	r3, [r3, #8]
 8027e90:	497b      	ldr	r1, [pc, #492]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027e92:	4313      	orrs	r3, r2
 8027e94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8027e96:	687b      	ldr	r3, [r7, #4]
 8027e98:	681b      	ldr	r3, [r3, #0]
 8027e9a:	f003 0301 	and.w	r3, r3, #1
 8027e9e:	2b00      	cmp	r3, #0
 8027ea0:	d079      	beq.n	8027f96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8027ea2:	687b      	ldr	r3, [r7, #4]
 8027ea4:	685b      	ldr	r3, [r3, #4]
 8027ea6:	2b03      	cmp	r3, #3
 8027ea8:	d11e      	bne.n	8027ee8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8027eaa:	4b75      	ldr	r3, [pc, #468]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027eac:	681b      	ldr	r3, [r3, #0]
 8027eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027eb2:	2b00      	cmp	r3, #0
 8027eb4:	d101      	bne.n	8027eba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8027eb6:	2301      	movs	r3, #1
 8027eb8:	e0dc      	b.n	8028074 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8027eba:	f000 fa09 	bl	80282d0 <RCC_GetSysClockFreqFromPLLSource>
 8027ebe:	4603      	mov	r3, r0
 8027ec0:	4a70      	ldr	r2, [pc, #448]	; (8028084 <HAL_RCC_ClockConfig+0x264>)
 8027ec2:	4293      	cmp	r3, r2
 8027ec4:	d946      	bls.n	8027f54 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8027ec6:	4b6e      	ldr	r3, [pc, #440]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027ec8:	689b      	ldr	r3, [r3, #8]
 8027eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027ece:	2b00      	cmp	r3, #0
 8027ed0:	d140      	bne.n	8027f54 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8027ed2:	4b6b      	ldr	r3, [pc, #428]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027ed4:	689b      	ldr	r3, [r3, #8]
 8027ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027eda:	4a69      	ldr	r2, [pc, #420]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027ee0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8027ee2:	2380      	movs	r3, #128	; 0x80
 8027ee4:	617b      	str	r3, [r7, #20]
 8027ee6:	e035      	b.n	8027f54 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8027ee8:	687b      	ldr	r3, [r7, #4]
 8027eea:	685b      	ldr	r3, [r3, #4]
 8027eec:	2b02      	cmp	r3, #2
 8027eee:	d107      	bne.n	8027f00 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8027ef0:	4b63      	ldr	r3, [pc, #396]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027ef2:	681b      	ldr	r3, [r3, #0]
 8027ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027ef8:	2b00      	cmp	r3, #0
 8027efa:	d115      	bne.n	8027f28 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8027efc:	2301      	movs	r3, #1
 8027efe:	e0b9      	b.n	8028074 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8027f00:	687b      	ldr	r3, [r7, #4]
 8027f02:	685b      	ldr	r3, [r3, #4]
 8027f04:	2b00      	cmp	r3, #0
 8027f06:	d107      	bne.n	8027f18 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8027f08:	4b5d      	ldr	r3, [pc, #372]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027f0a:	681b      	ldr	r3, [r3, #0]
 8027f0c:	f003 0302 	and.w	r3, r3, #2
 8027f10:	2b00      	cmp	r3, #0
 8027f12:	d109      	bne.n	8027f28 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8027f14:	2301      	movs	r3, #1
 8027f16:	e0ad      	b.n	8028074 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8027f18:	4b59      	ldr	r3, [pc, #356]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027f1a:	681b      	ldr	r3, [r3, #0]
 8027f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027f20:	2b00      	cmp	r3, #0
 8027f22:	d101      	bne.n	8027f28 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8027f24:	2301      	movs	r3, #1
 8027f26:	e0a5      	b.n	8028074 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8027f28:	f000 f8b4 	bl	8028094 <HAL_RCC_GetSysClockFreq>
 8027f2c:	4603      	mov	r3, r0
 8027f2e:	4a55      	ldr	r2, [pc, #340]	; (8028084 <HAL_RCC_ClockConfig+0x264>)
 8027f30:	4293      	cmp	r3, r2
 8027f32:	d90f      	bls.n	8027f54 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8027f34:	4b52      	ldr	r3, [pc, #328]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027f36:	689b      	ldr	r3, [r3, #8]
 8027f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027f3c:	2b00      	cmp	r3, #0
 8027f3e:	d109      	bne.n	8027f54 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8027f40:	4b4f      	ldr	r3, [pc, #316]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027f42:	689b      	ldr	r3, [r3, #8]
 8027f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027f48:	4a4d      	ldr	r2, [pc, #308]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027f4e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8027f50:	2380      	movs	r3, #128	; 0x80
 8027f52:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8027f54:	4b4a      	ldr	r3, [pc, #296]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027f56:	689b      	ldr	r3, [r3, #8]
 8027f58:	f023 0203 	bic.w	r2, r3, #3
 8027f5c:	687b      	ldr	r3, [r7, #4]
 8027f5e:	685b      	ldr	r3, [r3, #4]
 8027f60:	4947      	ldr	r1, [pc, #284]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027f62:	4313      	orrs	r3, r2
 8027f64:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027f66:	f7fc f9bd 	bl	80242e4 <HAL_GetTick>
 8027f6a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027f6c:	e00a      	b.n	8027f84 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027f6e:	f7fc f9b9 	bl	80242e4 <HAL_GetTick>
 8027f72:	4602      	mov	r2, r0
 8027f74:	693b      	ldr	r3, [r7, #16]
 8027f76:	1ad3      	subs	r3, r2, r3
 8027f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8027f7c:	4293      	cmp	r3, r2
 8027f7e:	d901      	bls.n	8027f84 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8027f80:	2303      	movs	r3, #3
 8027f82:	e077      	b.n	8028074 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027f84:	4b3e      	ldr	r3, [pc, #248]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027f86:	689b      	ldr	r3, [r3, #8]
 8027f88:	f003 020c 	and.w	r2, r3, #12
 8027f8c:	687b      	ldr	r3, [r7, #4]
 8027f8e:	685b      	ldr	r3, [r3, #4]
 8027f90:	009b      	lsls	r3, r3, #2
 8027f92:	429a      	cmp	r2, r3
 8027f94:	d1eb      	bne.n	8027f6e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8027f96:	697b      	ldr	r3, [r7, #20]
 8027f98:	2b80      	cmp	r3, #128	; 0x80
 8027f9a:	d105      	bne.n	8027fa8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8027f9c:	4b38      	ldr	r3, [pc, #224]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027f9e:	689b      	ldr	r3, [r3, #8]
 8027fa0:	4a37      	ldr	r2, [pc, #220]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027fa6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027fa8:	687b      	ldr	r3, [r7, #4]
 8027faa:	681b      	ldr	r3, [r3, #0]
 8027fac:	f003 0302 	and.w	r3, r3, #2
 8027fb0:	2b00      	cmp	r3, #0
 8027fb2:	d010      	beq.n	8027fd6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8027fb4:	687b      	ldr	r3, [r7, #4]
 8027fb6:	689a      	ldr	r2, [r3, #8]
 8027fb8:	4b31      	ldr	r3, [pc, #196]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027fba:	689b      	ldr	r3, [r3, #8]
 8027fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027fc0:	429a      	cmp	r2, r3
 8027fc2:	d208      	bcs.n	8027fd6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027fc4:	4b2e      	ldr	r3, [pc, #184]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027fc6:	689b      	ldr	r3, [r3, #8]
 8027fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027fcc:	687b      	ldr	r3, [r7, #4]
 8027fce:	689b      	ldr	r3, [r3, #8]
 8027fd0:	492b      	ldr	r1, [pc, #172]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8027fd2:	4313      	orrs	r3, r2
 8027fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027fd6:	4b29      	ldr	r3, [pc, #164]	; (802807c <HAL_RCC_ClockConfig+0x25c>)
 8027fd8:	681b      	ldr	r3, [r3, #0]
 8027fda:	f003 030f 	and.w	r3, r3, #15
 8027fde:	683a      	ldr	r2, [r7, #0]
 8027fe0:	429a      	cmp	r2, r3
 8027fe2:	d210      	bcs.n	8028006 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027fe4:	4b25      	ldr	r3, [pc, #148]	; (802807c <HAL_RCC_ClockConfig+0x25c>)
 8027fe6:	681b      	ldr	r3, [r3, #0]
 8027fe8:	f023 020f 	bic.w	r2, r3, #15
 8027fec:	4923      	ldr	r1, [pc, #140]	; (802807c <HAL_RCC_ClockConfig+0x25c>)
 8027fee:	683b      	ldr	r3, [r7, #0]
 8027ff0:	4313      	orrs	r3, r2
 8027ff2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027ff4:	4b21      	ldr	r3, [pc, #132]	; (802807c <HAL_RCC_ClockConfig+0x25c>)
 8027ff6:	681b      	ldr	r3, [r3, #0]
 8027ff8:	f003 030f 	and.w	r3, r3, #15
 8027ffc:	683a      	ldr	r2, [r7, #0]
 8027ffe:	429a      	cmp	r2, r3
 8028000:	d001      	beq.n	8028006 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8028002:	2301      	movs	r3, #1
 8028004:	e036      	b.n	8028074 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028006:	687b      	ldr	r3, [r7, #4]
 8028008:	681b      	ldr	r3, [r3, #0]
 802800a:	f003 0304 	and.w	r3, r3, #4
 802800e:	2b00      	cmp	r3, #0
 8028010:	d008      	beq.n	8028024 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8028012:	4b1b      	ldr	r3, [pc, #108]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8028014:	689b      	ldr	r3, [r3, #8]
 8028016:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802801a:	687b      	ldr	r3, [r7, #4]
 802801c:	68db      	ldr	r3, [r3, #12]
 802801e:	4918      	ldr	r1, [pc, #96]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8028020:	4313      	orrs	r3, r2
 8028022:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028024:	687b      	ldr	r3, [r7, #4]
 8028026:	681b      	ldr	r3, [r3, #0]
 8028028:	f003 0308 	and.w	r3, r3, #8
 802802c:	2b00      	cmp	r3, #0
 802802e:	d009      	beq.n	8028044 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8028030:	4b13      	ldr	r3, [pc, #76]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8028032:	689b      	ldr	r3, [r3, #8]
 8028034:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8028038:	687b      	ldr	r3, [r7, #4]
 802803a:	691b      	ldr	r3, [r3, #16]
 802803c:	00db      	lsls	r3, r3, #3
 802803e:	4910      	ldr	r1, [pc, #64]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 8028040:	4313      	orrs	r3, r2
 8028042:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8028044:	f000 f826 	bl	8028094 <HAL_RCC_GetSysClockFreq>
 8028048:	4602      	mov	r2, r0
 802804a:	4b0d      	ldr	r3, [pc, #52]	; (8028080 <HAL_RCC_ClockConfig+0x260>)
 802804c:	689b      	ldr	r3, [r3, #8]
 802804e:	091b      	lsrs	r3, r3, #4
 8028050:	f003 030f 	and.w	r3, r3, #15
 8028054:	490c      	ldr	r1, [pc, #48]	; (8028088 <HAL_RCC_ClockConfig+0x268>)
 8028056:	5ccb      	ldrb	r3, [r1, r3]
 8028058:	f003 031f 	and.w	r3, r3, #31
 802805c:	fa22 f303 	lsr.w	r3, r2, r3
 8028060:	4a0a      	ldr	r2, [pc, #40]	; (802808c <HAL_RCC_ClockConfig+0x26c>)
 8028062:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8028064:	4b0a      	ldr	r3, [pc, #40]	; (8028090 <HAL_RCC_ClockConfig+0x270>)
 8028066:	681b      	ldr	r3, [r3, #0]
 8028068:	4618      	mov	r0, r3
 802806a:	f7fc f8eb 	bl	8024244 <HAL_InitTick>
 802806e:	4603      	mov	r3, r0
 8028070:	73fb      	strb	r3, [r7, #15]

  return status;
 8028072:	7bfb      	ldrb	r3, [r7, #15]
}
 8028074:	4618      	mov	r0, r3
 8028076:	3718      	adds	r7, #24
 8028078:	46bd      	mov	sp, r7
 802807a:	bd80      	pop	{r7, pc}
 802807c:	40022000 	.word	0x40022000
 8028080:	40021000 	.word	0x40021000
 8028084:	04c4b400 	.word	0x04c4b400
 8028088:	08076580 	.word	0x08076580
 802808c:	20000228 	.word	0x20000228
 8028090:	20000294 	.word	0x20000294

08028094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028094:	b480      	push	{r7}
 8028096:	b089      	sub	sp, #36	; 0x24
 8028098:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 802809a:	2300      	movs	r3, #0
 802809c:	61fb      	str	r3, [r7, #28]
 802809e:	2300      	movs	r3, #0
 80280a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80280a2:	4b3e      	ldr	r3, [pc, #248]	; (802819c <HAL_RCC_GetSysClockFreq+0x108>)
 80280a4:	689b      	ldr	r3, [r3, #8]
 80280a6:	f003 030c 	and.w	r3, r3, #12
 80280aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80280ac:	4b3b      	ldr	r3, [pc, #236]	; (802819c <HAL_RCC_GetSysClockFreq+0x108>)
 80280ae:	68db      	ldr	r3, [r3, #12]
 80280b0:	f003 0303 	and.w	r3, r3, #3
 80280b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80280b6:	693b      	ldr	r3, [r7, #16]
 80280b8:	2b00      	cmp	r3, #0
 80280ba:	d005      	beq.n	80280c8 <HAL_RCC_GetSysClockFreq+0x34>
 80280bc:	693b      	ldr	r3, [r7, #16]
 80280be:	2b0c      	cmp	r3, #12
 80280c0:	d121      	bne.n	8028106 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80280c2:	68fb      	ldr	r3, [r7, #12]
 80280c4:	2b01      	cmp	r3, #1
 80280c6:	d11e      	bne.n	8028106 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80280c8:	4b34      	ldr	r3, [pc, #208]	; (802819c <HAL_RCC_GetSysClockFreq+0x108>)
 80280ca:	681b      	ldr	r3, [r3, #0]
 80280cc:	f003 0308 	and.w	r3, r3, #8
 80280d0:	2b00      	cmp	r3, #0
 80280d2:	d107      	bne.n	80280e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80280d4:	4b31      	ldr	r3, [pc, #196]	; (802819c <HAL_RCC_GetSysClockFreq+0x108>)
 80280d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80280da:	0a1b      	lsrs	r3, r3, #8
 80280dc:	f003 030f 	and.w	r3, r3, #15
 80280e0:	61fb      	str	r3, [r7, #28]
 80280e2:	e005      	b.n	80280f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80280e4:	4b2d      	ldr	r3, [pc, #180]	; (802819c <HAL_RCC_GetSysClockFreq+0x108>)
 80280e6:	681b      	ldr	r3, [r3, #0]
 80280e8:	091b      	lsrs	r3, r3, #4
 80280ea:	f003 030f 	and.w	r3, r3, #15
 80280ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80280f0:	4a2b      	ldr	r2, [pc, #172]	; (80281a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80280f2:	69fb      	ldr	r3, [r7, #28]
 80280f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80280f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80280fa:	693b      	ldr	r3, [r7, #16]
 80280fc:	2b00      	cmp	r3, #0
 80280fe:	d10d      	bne.n	802811c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8028100:	69fb      	ldr	r3, [r7, #28]
 8028102:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8028104:	e00a      	b.n	802811c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8028106:	693b      	ldr	r3, [r7, #16]
 8028108:	2b04      	cmp	r3, #4
 802810a:	d102      	bne.n	8028112 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 802810c:	4b25      	ldr	r3, [pc, #148]	; (80281a4 <HAL_RCC_GetSysClockFreq+0x110>)
 802810e:	61bb      	str	r3, [r7, #24]
 8028110:	e004      	b.n	802811c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8028112:	693b      	ldr	r3, [r7, #16]
 8028114:	2b08      	cmp	r3, #8
 8028116:	d101      	bne.n	802811c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8028118:	4b23      	ldr	r3, [pc, #140]	; (80281a8 <HAL_RCC_GetSysClockFreq+0x114>)
 802811a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 802811c:	693b      	ldr	r3, [r7, #16]
 802811e:	2b0c      	cmp	r3, #12
 8028120:	d134      	bne.n	802818c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8028122:	4b1e      	ldr	r3, [pc, #120]	; (802819c <HAL_RCC_GetSysClockFreq+0x108>)
 8028124:	68db      	ldr	r3, [r3, #12]
 8028126:	f003 0303 	and.w	r3, r3, #3
 802812a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 802812c:	68bb      	ldr	r3, [r7, #8]
 802812e:	2b02      	cmp	r3, #2
 8028130:	d003      	beq.n	802813a <HAL_RCC_GetSysClockFreq+0xa6>
 8028132:	68bb      	ldr	r3, [r7, #8]
 8028134:	2b03      	cmp	r3, #3
 8028136:	d003      	beq.n	8028140 <HAL_RCC_GetSysClockFreq+0xac>
 8028138:	e005      	b.n	8028146 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 802813a:	4b1a      	ldr	r3, [pc, #104]	; (80281a4 <HAL_RCC_GetSysClockFreq+0x110>)
 802813c:	617b      	str	r3, [r7, #20]
      break;
 802813e:	e005      	b.n	802814c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8028140:	4b19      	ldr	r3, [pc, #100]	; (80281a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8028142:	617b      	str	r3, [r7, #20]
      break;
 8028144:	e002      	b.n	802814c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8028146:	69fb      	ldr	r3, [r7, #28]
 8028148:	617b      	str	r3, [r7, #20]
      break;
 802814a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 802814c:	4b13      	ldr	r3, [pc, #76]	; (802819c <HAL_RCC_GetSysClockFreq+0x108>)
 802814e:	68db      	ldr	r3, [r3, #12]
 8028150:	091b      	lsrs	r3, r3, #4
 8028152:	f003 030f 	and.w	r3, r3, #15
 8028156:	3301      	adds	r3, #1
 8028158:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 802815a:	4b10      	ldr	r3, [pc, #64]	; (802819c <HAL_RCC_GetSysClockFreq+0x108>)
 802815c:	68db      	ldr	r3, [r3, #12]
 802815e:	0a1b      	lsrs	r3, r3, #8
 8028160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028164:	697a      	ldr	r2, [r7, #20]
 8028166:	fb03 f202 	mul.w	r2, r3, r2
 802816a:	687b      	ldr	r3, [r7, #4]
 802816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8028170:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8028172:	4b0a      	ldr	r3, [pc, #40]	; (802819c <HAL_RCC_GetSysClockFreq+0x108>)
 8028174:	68db      	ldr	r3, [r3, #12]
 8028176:	0e5b      	lsrs	r3, r3, #25
 8028178:	f003 0303 	and.w	r3, r3, #3
 802817c:	3301      	adds	r3, #1
 802817e:	005b      	lsls	r3, r3, #1
 8028180:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8028182:	697a      	ldr	r2, [r7, #20]
 8028184:	683b      	ldr	r3, [r7, #0]
 8028186:	fbb2 f3f3 	udiv	r3, r2, r3
 802818a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 802818c:	69bb      	ldr	r3, [r7, #24]
}
 802818e:	4618      	mov	r0, r3
 8028190:	3724      	adds	r7, #36	; 0x24
 8028192:	46bd      	mov	sp, r7
 8028194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028198:	4770      	bx	lr
 802819a:	bf00      	nop
 802819c:	40021000 	.word	0x40021000
 80281a0:	08076598 	.word	0x08076598
 80281a4:	00f42400 	.word	0x00f42400
 80281a8:	007a1200 	.word	0x007a1200

080281ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80281ac:	b480      	push	{r7}
 80281ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80281b0:	4b03      	ldr	r3, [pc, #12]	; (80281c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80281b2:	681b      	ldr	r3, [r3, #0]
}
 80281b4:	4618      	mov	r0, r3
 80281b6:	46bd      	mov	sp, r7
 80281b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281bc:	4770      	bx	lr
 80281be:	bf00      	nop
 80281c0:	20000228 	.word	0x20000228

080281c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80281c4:	b580      	push	{r7, lr}
 80281c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80281c8:	f7ff fff0 	bl	80281ac <HAL_RCC_GetHCLKFreq>
 80281cc:	4602      	mov	r2, r0
 80281ce:	4b06      	ldr	r3, [pc, #24]	; (80281e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80281d0:	689b      	ldr	r3, [r3, #8]
 80281d2:	0a1b      	lsrs	r3, r3, #8
 80281d4:	f003 0307 	and.w	r3, r3, #7
 80281d8:	4904      	ldr	r1, [pc, #16]	; (80281ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80281da:	5ccb      	ldrb	r3, [r1, r3]
 80281dc:	f003 031f 	and.w	r3, r3, #31
 80281e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80281e4:	4618      	mov	r0, r3
 80281e6:	bd80      	pop	{r7, pc}
 80281e8:	40021000 	.word	0x40021000
 80281ec:	08076590 	.word	0x08076590

080281f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80281f0:	b580      	push	{r7, lr}
 80281f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80281f4:	f7ff ffda 	bl	80281ac <HAL_RCC_GetHCLKFreq>
 80281f8:	4602      	mov	r2, r0
 80281fa:	4b06      	ldr	r3, [pc, #24]	; (8028214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80281fc:	689b      	ldr	r3, [r3, #8]
 80281fe:	0adb      	lsrs	r3, r3, #11
 8028200:	f003 0307 	and.w	r3, r3, #7
 8028204:	4904      	ldr	r1, [pc, #16]	; (8028218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8028206:	5ccb      	ldrb	r3, [r1, r3]
 8028208:	f003 031f 	and.w	r3, r3, #31
 802820c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8028210:	4618      	mov	r0, r3
 8028212:	bd80      	pop	{r7, pc}
 8028214:	40021000 	.word	0x40021000
 8028218:	08076590 	.word	0x08076590

0802821c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 802821c:	b580      	push	{r7, lr}
 802821e:	b086      	sub	sp, #24
 8028220:	af00      	add	r7, sp, #0
 8028222:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8028224:	2300      	movs	r3, #0
 8028226:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8028228:	4b27      	ldr	r3, [pc, #156]	; (80282c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802822a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802822c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028230:	2b00      	cmp	r3, #0
 8028232:	d003      	beq.n	802823c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8028234:	f7ff f916 	bl	8027464 <HAL_PWREx_GetVoltageRange>
 8028238:	6178      	str	r0, [r7, #20]
 802823a:	e014      	b.n	8028266 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 802823c:	4b22      	ldr	r3, [pc, #136]	; (80282c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802823e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028240:	4a21      	ldr	r2, [pc, #132]	; (80282c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8028242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028246:	6593      	str	r3, [r2, #88]	; 0x58
 8028248:	4b1f      	ldr	r3, [pc, #124]	; (80282c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802824a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802824c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028250:	60fb      	str	r3, [r7, #12]
 8028252:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8028254:	f7ff f906 	bl	8027464 <HAL_PWREx_GetVoltageRange>
 8028258:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 802825a:	4b1b      	ldr	r3, [pc, #108]	; (80282c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802825c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802825e:	4a1a      	ldr	r2, [pc, #104]	; (80282c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8028260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028264:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8028266:	697b      	ldr	r3, [r7, #20]
 8028268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802826c:	d10b      	bne.n	8028286 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 802826e:	687b      	ldr	r3, [r7, #4]
 8028270:	2b80      	cmp	r3, #128	; 0x80
 8028272:	d913      	bls.n	802829c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8028274:	687b      	ldr	r3, [r7, #4]
 8028276:	2ba0      	cmp	r3, #160	; 0xa0
 8028278:	d902      	bls.n	8028280 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 802827a:	2302      	movs	r3, #2
 802827c:	613b      	str	r3, [r7, #16]
 802827e:	e00d      	b.n	802829c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8028280:	2301      	movs	r3, #1
 8028282:	613b      	str	r3, [r7, #16]
 8028284:	e00a      	b.n	802829c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8028286:	687b      	ldr	r3, [r7, #4]
 8028288:	2b7f      	cmp	r3, #127	; 0x7f
 802828a:	d902      	bls.n	8028292 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 802828c:	2302      	movs	r3, #2
 802828e:	613b      	str	r3, [r7, #16]
 8028290:	e004      	b.n	802829c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8028292:	687b      	ldr	r3, [r7, #4]
 8028294:	2b70      	cmp	r3, #112	; 0x70
 8028296:	d101      	bne.n	802829c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8028298:	2301      	movs	r3, #1
 802829a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 802829c:	4b0b      	ldr	r3, [pc, #44]	; (80282cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802829e:	681b      	ldr	r3, [r3, #0]
 80282a0:	f023 020f 	bic.w	r2, r3, #15
 80282a4:	4909      	ldr	r1, [pc, #36]	; (80282cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80282a6:	693b      	ldr	r3, [r7, #16]
 80282a8:	4313      	orrs	r3, r2
 80282aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80282ac:	4b07      	ldr	r3, [pc, #28]	; (80282cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80282ae:	681b      	ldr	r3, [r3, #0]
 80282b0:	f003 030f 	and.w	r3, r3, #15
 80282b4:	693a      	ldr	r2, [r7, #16]
 80282b6:	429a      	cmp	r2, r3
 80282b8:	d001      	beq.n	80282be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80282ba:	2301      	movs	r3, #1
 80282bc:	e000      	b.n	80282c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80282be:	2300      	movs	r3, #0
}
 80282c0:	4618      	mov	r0, r3
 80282c2:	3718      	adds	r7, #24
 80282c4:	46bd      	mov	sp, r7
 80282c6:	bd80      	pop	{r7, pc}
 80282c8:	40021000 	.word	0x40021000
 80282cc:	40022000 	.word	0x40022000

080282d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80282d0:	b480      	push	{r7}
 80282d2:	b087      	sub	sp, #28
 80282d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80282d6:	4b2d      	ldr	r3, [pc, #180]	; (802838c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80282d8:	68db      	ldr	r3, [r3, #12]
 80282da:	f003 0303 	and.w	r3, r3, #3
 80282de:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80282e0:	68fb      	ldr	r3, [r7, #12]
 80282e2:	2b03      	cmp	r3, #3
 80282e4:	d00b      	beq.n	80282fe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80282e6:	68fb      	ldr	r3, [r7, #12]
 80282e8:	2b03      	cmp	r3, #3
 80282ea:	d825      	bhi.n	8028338 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80282ec:	68fb      	ldr	r3, [r7, #12]
 80282ee:	2b01      	cmp	r3, #1
 80282f0:	d008      	beq.n	8028304 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80282f2:	68fb      	ldr	r3, [r7, #12]
 80282f4:	2b02      	cmp	r3, #2
 80282f6:	d11f      	bne.n	8028338 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80282f8:	4b25      	ldr	r3, [pc, #148]	; (8028390 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80282fa:	613b      	str	r3, [r7, #16]
    break;
 80282fc:	e01f      	b.n	802833e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80282fe:	4b25      	ldr	r3, [pc, #148]	; (8028394 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8028300:	613b      	str	r3, [r7, #16]
    break;
 8028302:	e01c      	b.n	802833e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8028304:	4b21      	ldr	r3, [pc, #132]	; (802838c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8028306:	681b      	ldr	r3, [r3, #0]
 8028308:	f003 0308 	and.w	r3, r3, #8
 802830c:	2b00      	cmp	r3, #0
 802830e:	d107      	bne.n	8028320 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8028310:	4b1e      	ldr	r3, [pc, #120]	; (802838c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8028312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8028316:	0a1b      	lsrs	r3, r3, #8
 8028318:	f003 030f 	and.w	r3, r3, #15
 802831c:	617b      	str	r3, [r7, #20]
 802831e:	e005      	b.n	802832c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8028320:	4b1a      	ldr	r3, [pc, #104]	; (802838c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8028322:	681b      	ldr	r3, [r3, #0]
 8028324:	091b      	lsrs	r3, r3, #4
 8028326:	f003 030f 	and.w	r3, r3, #15
 802832a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 802832c:	4a1a      	ldr	r2, [pc, #104]	; (8028398 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 802832e:	697b      	ldr	r3, [r7, #20]
 8028330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028334:	613b      	str	r3, [r7, #16]
    break;
 8028336:	e002      	b.n	802833e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8028338:	2300      	movs	r3, #0
 802833a:	613b      	str	r3, [r7, #16]
    break;
 802833c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 802833e:	4b13      	ldr	r3, [pc, #76]	; (802838c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8028340:	68db      	ldr	r3, [r3, #12]
 8028342:	091b      	lsrs	r3, r3, #4
 8028344:	f003 030f 	and.w	r3, r3, #15
 8028348:	3301      	adds	r3, #1
 802834a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 802834c:	4b0f      	ldr	r3, [pc, #60]	; (802838c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802834e:	68db      	ldr	r3, [r3, #12]
 8028350:	0a1b      	lsrs	r3, r3, #8
 8028352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028356:	693a      	ldr	r2, [r7, #16]
 8028358:	fb03 f202 	mul.w	r2, r3, r2
 802835c:	68bb      	ldr	r3, [r7, #8]
 802835e:	fbb2 f3f3 	udiv	r3, r2, r3
 8028362:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8028364:	4b09      	ldr	r3, [pc, #36]	; (802838c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8028366:	68db      	ldr	r3, [r3, #12]
 8028368:	0e5b      	lsrs	r3, r3, #25
 802836a:	f003 0303 	and.w	r3, r3, #3
 802836e:	3301      	adds	r3, #1
 8028370:	005b      	lsls	r3, r3, #1
 8028372:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8028374:	693a      	ldr	r2, [r7, #16]
 8028376:	687b      	ldr	r3, [r7, #4]
 8028378:	fbb2 f3f3 	udiv	r3, r2, r3
 802837c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 802837e:	683b      	ldr	r3, [r7, #0]
}
 8028380:	4618      	mov	r0, r3
 8028382:	371c      	adds	r7, #28
 8028384:	46bd      	mov	sp, r7
 8028386:	f85d 7b04 	ldr.w	r7, [sp], #4
 802838a:	4770      	bx	lr
 802838c:	40021000 	.word	0x40021000
 8028390:	00f42400 	.word	0x00f42400
 8028394:	007a1200 	.word	0x007a1200
 8028398:	08076598 	.word	0x08076598

0802839c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802839c:	b580      	push	{r7, lr}
 802839e:	b086      	sub	sp, #24
 80283a0:	af00      	add	r7, sp, #0
 80283a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80283a4:	2300      	movs	r3, #0
 80283a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80283a8:	2300      	movs	r3, #0
 80283aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80283ac:	687b      	ldr	r3, [r7, #4]
 80283ae:	681b      	ldr	r3, [r3, #0]
 80283b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80283b4:	2b00      	cmp	r3, #0
 80283b6:	d040      	beq.n	802843a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80283b8:	687b      	ldr	r3, [r7, #4]
 80283ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80283bc:	2b80      	cmp	r3, #128	; 0x80
 80283be:	d02a      	beq.n	8028416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80283c0:	2b80      	cmp	r3, #128	; 0x80
 80283c2:	d825      	bhi.n	8028410 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80283c4:	2b60      	cmp	r3, #96	; 0x60
 80283c6:	d026      	beq.n	8028416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80283c8:	2b60      	cmp	r3, #96	; 0x60
 80283ca:	d821      	bhi.n	8028410 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80283cc:	2b40      	cmp	r3, #64	; 0x40
 80283ce:	d006      	beq.n	80283de <HAL_RCCEx_PeriphCLKConfig+0x42>
 80283d0:	2b40      	cmp	r3, #64	; 0x40
 80283d2:	d81d      	bhi.n	8028410 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80283d4:	2b00      	cmp	r3, #0
 80283d6:	d009      	beq.n	80283ec <HAL_RCCEx_PeriphCLKConfig+0x50>
 80283d8:	2b20      	cmp	r3, #32
 80283da:	d010      	beq.n	80283fe <HAL_RCCEx_PeriphCLKConfig+0x62>
 80283dc:	e018      	b.n	8028410 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80283de:	4b89      	ldr	r3, [pc, #548]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80283e0:	68db      	ldr	r3, [r3, #12]
 80283e2:	4a88      	ldr	r2, [pc, #544]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80283e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80283e8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80283ea:	e015      	b.n	8028418 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80283ec:	687b      	ldr	r3, [r7, #4]
 80283ee:	3304      	adds	r3, #4
 80283f0:	2100      	movs	r1, #0
 80283f2:	4618      	mov	r0, r3
 80283f4:	f000 fb02 	bl	80289fc <RCCEx_PLLSAI1_Config>
 80283f8:	4603      	mov	r3, r0
 80283fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80283fc:	e00c      	b.n	8028418 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80283fe:	687b      	ldr	r3, [r7, #4]
 8028400:	3320      	adds	r3, #32
 8028402:	2100      	movs	r1, #0
 8028404:	4618      	mov	r0, r3
 8028406:	f000 fbed 	bl	8028be4 <RCCEx_PLLSAI2_Config>
 802840a:	4603      	mov	r3, r0
 802840c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 802840e:	e003      	b.n	8028418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028410:	2301      	movs	r3, #1
 8028412:	74fb      	strb	r3, [r7, #19]
      break;
 8028414:	e000      	b.n	8028418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8028416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028418:	7cfb      	ldrb	r3, [r7, #19]
 802841a:	2b00      	cmp	r3, #0
 802841c:	d10b      	bne.n	8028436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802841e:	4b79      	ldr	r3, [pc, #484]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8028424:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8028428:	687b      	ldr	r3, [r7, #4]
 802842a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802842c:	4975      	ldr	r1, [pc, #468]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 802842e:	4313      	orrs	r3, r2
 8028430:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8028434:	e001      	b.n	802843a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028436:	7cfb      	ldrb	r3, [r7, #19]
 8028438:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 802843a:	687b      	ldr	r3, [r7, #4]
 802843c:	681b      	ldr	r3, [r3, #0]
 802843e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8028442:	2b00      	cmp	r3, #0
 8028444:	d047      	beq.n	80284d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8028446:	687b      	ldr	r3, [r7, #4]
 8028448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802844a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802844e:	d030      	beq.n	80284b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8028450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028454:	d82a      	bhi.n	80284ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8028456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802845a:	d02a      	beq.n	80284b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 802845c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8028460:	d824      	bhi.n	80284ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8028462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028466:	d008      	beq.n	802847a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8028468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802846c:	d81e      	bhi.n	80284ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 802846e:	2b00      	cmp	r3, #0
 8028470:	d00a      	beq.n	8028488 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8028472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8028476:	d010      	beq.n	802849a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8028478:	e018      	b.n	80284ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 802847a:	4b62      	ldr	r3, [pc, #392]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 802847c:	68db      	ldr	r3, [r3, #12]
 802847e:	4a61      	ldr	r2, [pc, #388]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028484:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8028486:	e015      	b.n	80284b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8028488:	687b      	ldr	r3, [r7, #4]
 802848a:	3304      	adds	r3, #4
 802848c:	2100      	movs	r1, #0
 802848e:	4618      	mov	r0, r3
 8028490:	f000 fab4 	bl	80289fc <RCCEx_PLLSAI1_Config>
 8028494:	4603      	mov	r3, r0
 8028496:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8028498:	e00c      	b.n	80284b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 802849a:	687b      	ldr	r3, [r7, #4]
 802849c:	3320      	adds	r3, #32
 802849e:	2100      	movs	r1, #0
 80284a0:	4618      	mov	r0, r3
 80284a2:	f000 fb9f 	bl	8028be4 <RCCEx_PLLSAI2_Config>
 80284a6:	4603      	mov	r3, r0
 80284a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80284aa:	e003      	b.n	80284b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80284ac:	2301      	movs	r3, #1
 80284ae:	74fb      	strb	r3, [r7, #19]
      break;
 80284b0:	e000      	b.n	80284b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80284b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80284b4:	7cfb      	ldrb	r3, [r7, #19]
 80284b6:	2b00      	cmp	r3, #0
 80284b8:	d10b      	bne.n	80284d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80284ba:	4b52      	ldr	r3, [pc, #328]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80284bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80284c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80284c4:	687b      	ldr	r3, [r7, #4]
 80284c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80284c8:	494e      	ldr	r1, [pc, #312]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80284ca:	4313      	orrs	r3, r2
 80284cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80284d0:	e001      	b.n	80284d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80284d2:	7cfb      	ldrb	r3, [r7, #19]
 80284d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80284d6:	687b      	ldr	r3, [r7, #4]
 80284d8:	681b      	ldr	r3, [r3, #0]
 80284da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80284de:	2b00      	cmp	r3, #0
 80284e0:	f000 809f 	beq.w	8028622 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80284e4:	2300      	movs	r3, #0
 80284e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80284e8:	4b46      	ldr	r3, [pc, #280]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80284ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80284ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80284f0:	2b00      	cmp	r3, #0
 80284f2:	d101      	bne.n	80284f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80284f4:	2301      	movs	r3, #1
 80284f6:	e000      	b.n	80284fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80284f8:	2300      	movs	r3, #0
 80284fa:	2b00      	cmp	r3, #0
 80284fc:	d00d      	beq.n	802851a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80284fe:	4b41      	ldr	r3, [pc, #260]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028502:	4a40      	ldr	r2, [pc, #256]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028508:	6593      	str	r3, [r2, #88]	; 0x58
 802850a:	4b3e      	ldr	r3, [pc, #248]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 802850c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802850e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028512:	60bb      	str	r3, [r7, #8]
 8028514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8028516:	2301      	movs	r3, #1
 8028518:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802851a:	4b3b      	ldr	r3, [pc, #236]	; (8028608 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 802851c:	681b      	ldr	r3, [r3, #0]
 802851e:	4a3a      	ldr	r2, [pc, #232]	; (8028608 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8028520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028524:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8028526:	f7fb fedd 	bl	80242e4 <HAL_GetTick>
 802852a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 802852c:	e009      	b.n	8028542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802852e:	f7fb fed9 	bl	80242e4 <HAL_GetTick>
 8028532:	4602      	mov	r2, r0
 8028534:	68fb      	ldr	r3, [r7, #12]
 8028536:	1ad3      	subs	r3, r2, r3
 8028538:	2b02      	cmp	r3, #2
 802853a:	d902      	bls.n	8028542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 802853c:	2303      	movs	r3, #3
 802853e:	74fb      	strb	r3, [r7, #19]
        break;
 8028540:	e005      	b.n	802854e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8028542:	4b31      	ldr	r3, [pc, #196]	; (8028608 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8028544:	681b      	ldr	r3, [r3, #0]
 8028546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802854a:	2b00      	cmp	r3, #0
 802854c:	d0ef      	beq.n	802852e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 802854e:	7cfb      	ldrb	r3, [r7, #19]
 8028550:	2b00      	cmp	r3, #0
 8028552:	d15b      	bne.n	802860c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8028554:	4b2b      	ldr	r3, [pc, #172]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802855a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802855e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8028560:	697b      	ldr	r3, [r7, #20]
 8028562:	2b00      	cmp	r3, #0
 8028564:	d01f      	beq.n	80285a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8028566:	687b      	ldr	r3, [r7, #4]
 8028568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802856c:	697a      	ldr	r2, [r7, #20]
 802856e:	429a      	cmp	r2, r3
 8028570:	d019      	beq.n	80285a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8028572:	4b24      	ldr	r3, [pc, #144]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8028578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802857c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 802857e:	4b21      	ldr	r3, [pc, #132]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8028584:	4a1f      	ldr	r2, [pc, #124]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802858a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 802858e:	4b1d      	ldr	r3, [pc, #116]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8028594:	4a1b      	ldr	r2, [pc, #108]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8028596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802859a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 802859e:	4a19      	ldr	r2, [pc, #100]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285a0:	697b      	ldr	r3, [r7, #20]
 80285a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80285a6:	697b      	ldr	r3, [r7, #20]
 80285a8:	f003 0301 	and.w	r3, r3, #1
 80285ac:	2b00      	cmp	r3, #0
 80285ae:	d016      	beq.n	80285de <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80285b0:	f7fb fe98 	bl	80242e4 <HAL_GetTick>
 80285b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80285b6:	e00b      	b.n	80285d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80285b8:	f7fb fe94 	bl	80242e4 <HAL_GetTick>
 80285bc:	4602      	mov	r2, r0
 80285be:	68fb      	ldr	r3, [r7, #12]
 80285c0:	1ad3      	subs	r3, r2, r3
 80285c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80285c6:	4293      	cmp	r3, r2
 80285c8:	d902      	bls.n	80285d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80285ca:	2303      	movs	r3, #3
 80285cc:	74fb      	strb	r3, [r7, #19]
            break;
 80285ce:	e006      	b.n	80285de <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80285d0:	4b0c      	ldr	r3, [pc, #48]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285d6:	f003 0302 	and.w	r3, r3, #2
 80285da:	2b00      	cmp	r3, #0
 80285dc:	d0ec      	beq.n	80285b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80285de:	7cfb      	ldrb	r3, [r7, #19]
 80285e0:	2b00      	cmp	r3, #0
 80285e2:	d10c      	bne.n	80285fe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80285e4:	4b07      	ldr	r3, [pc, #28]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80285ee:	687b      	ldr	r3, [r7, #4]
 80285f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285f4:	4903      	ldr	r1, [pc, #12]	; (8028604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80285f6:	4313      	orrs	r3, r2
 80285f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80285fc:	e008      	b.n	8028610 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80285fe:	7cfb      	ldrb	r3, [r7, #19]
 8028600:	74bb      	strb	r3, [r7, #18]
 8028602:	e005      	b.n	8028610 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8028604:	40021000 	.word	0x40021000
 8028608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 802860c:	7cfb      	ldrb	r3, [r7, #19]
 802860e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8028610:	7c7b      	ldrb	r3, [r7, #17]
 8028612:	2b01      	cmp	r3, #1
 8028614:	d105      	bne.n	8028622 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8028616:	4ba0      	ldr	r3, [pc, #640]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802861a:	4a9f      	ldr	r2, [pc, #636]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802861c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028620:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8028622:	687b      	ldr	r3, [r7, #4]
 8028624:	681b      	ldr	r3, [r3, #0]
 8028626:	f003 0301 	and.w	r3, r3, #1
 802862a:	2b00      	cmp	r3, #0
 802862c:	d00a      	beq.n	8028644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 802862e:	4b9a      	ldr	r3, [pc, #616]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028634:	f023 0203 	bic.w	r2, r3, #3
 8028638:	687b      	ldr	r3, [r7, #4]
 802863a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802863c:	4996      	ldr	r1, [pc, #600]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802863e:	4313      	orrs	r3, r2
 8028640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8028644:	687b      	ldr	r3, [r7, #4]
 8028646:	681b      	ldr	r3, [r3, #0]
 8028648:	f003 0302 	and.w	r3, r3, #2
 802864c:	2b00      	cmp	r3, #0
 802864e:	d00a      	beq.n	8028666 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8028650:	4b91      	ldr	r3, [pc, #580]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028656:	f023 020c 	bic.w	r2, r3, #12
 802865a:	687b      	ldr	r3, [r7, #4]
 802865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802865e:	498e      	ldr	r1, [pc, #568]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028660:	4313      	orrs	r3, r2
 8028662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8028666:	687b      	ldr	r3, [r7, #4]
 8028668:	681b      	ldr	r3, [r3, #0]
 802866a:	f003 0304 	and.w	r3, r3, #4
 802866e:	2b00      	cmp	r3, #0
 8028670:	d00a      	beq.n	8028688 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8028672:	4b89      	ldr	r3, [pc, #548]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028678:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 802867c:	687b      	ldr	r3, [r7, #4]
 802867e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028680:	4985      	ldr	r1, [pc, #532]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028682:	4313      	orrs	r3, r2
 8028684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8028688:	687b      	ldr	r3, [r7, #4]
 802868a:	681b      	ldr	r3, [r3, #0]
 802868c:	f003 0308 	and.w	r3, r3, #8
 8028690:	2b00      	cmp	r3, #0
 8028692:	d00a      	beq.n	80286aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8028694:	4b80      	ldr	r3, [pc, #512]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802869a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 802869e:	687b      	ldr	r3, [r7, #4]
 80286a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80286a2:	497d      	ldr	r1, [pc, #500]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286a4:	4313      	orrs	r3, r2
 80286a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80286aa:	687b      	ldr	r3, [r7, #4]
 80286ac:	681b      	ldr	r3, [r3, #0]
 80286ae:	f003 0310 	and.w	r3, r3, #16
 80286b2:	2b00      	cmp	r3, #0
 80286b4:	d00a      	beq.n	80286cc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80286b6:	4b78      	ldr	r3, [pc, #480]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80286bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80286c0:	687b      	ldr	r3, [r7, #4]
 80286c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80286c4:	4974      	ldr	r1, [pc, #464]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286c6:	4313      	orrs	r3, r2
 80286c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80286cc:	687b      	ldr	r3, [r7, #4]
 80286ce:	681b      	ldr	r3, [r3, #0]
 80286d0:	f003 0320 	and.w	r3, r3, #32
 80286d4:	2b00      	cmp	r3, #0
 80286d6:	d00a      	beq.n	80286ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80286d8:	4b6f      	ldr	r3, [pc, #444]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80286de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80286e2:	687b      	ldr	r3, [r7, #4]
 80286e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80286e6:	496c      	ldr	r1, [pc, #432]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286e8:	4313      	orrs	r3, r2
 80286ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80286ee:	687b      	ldr	r3, [r7, #4]
 80286f0:	681b      	ldr	r3, [r3, #0]
 80286f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80286f6:	2b00      	cmp	r3, #0
 80286f8:	d00a      	beq.n	8028710 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80286fa:	4b67      	ldr	r3, [pc, #412]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80286fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8028704:	687b      	ldr	r3, [r7, #4]
 8028706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028708:	4963      	ldr	r1, [pc, #396]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802870a:	4313      	orrs	r3, r2
 802870c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8028710:	687b      	ldr	r3, [r7, #4]
 8028712:	681b      	ldr	r3, [r3, #0]
 8028714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028718:	2b00      	cmp	r3, #0
 802871a:	d00a      	beq.n	8028732 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 802871c:	4b5e      	ldr	r3, [pc, #376]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802871e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8028726:	687b      	ldr	r3, [r7, #4]
 8028728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802872a:	495b      	ldr	r1, [pc, #364]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802872c:	4313      	orrs	r3, r2
 802872e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8028732:	687b      	ldr	r3, [r7, #4]
 8028734:	681b      	ldr	r3, [r3, #0]
 8028736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802873a:	2b00      	cmp	r3, #0
 802873c:	d00a      	beq.n	8028754 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 802873e:	4b56      	ldr	r3, [pc, #344]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028744:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8028748:	687b      	ldr	r3, [r7, #4]
 802874a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802874c:	4952      	ldr	r1, [pc, #328]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802874e:	4313      	orrs	r3, r2
 8028750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8028754:	687b      	ldr	r3, [r7, #4]
 8028756:	681b      	ldr	r3, [r3, #0]
 8028758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802875c:	2b00      	cmp	r3, #0
 802875e:	d00a      	beq.n	8028776 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8028760:	4b4d      	ldr	r3, [pc, #308]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028766:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 802876a:	687b      	ldr	r3, [r7, #4]
 802876c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802876e:	494a      	ldr	r1, [pc, #296]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028770:	4313      	orrs	r3, r2
 8028772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8028776:	687b      	ldr	r3, [r7, #4]
 8028778:	681b      	ldr	r3, [r3, #0]
 802877a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802877e:	2b00      	cmp	r3, #0
 8028780:	d00a      	beq.n	8028798 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8028782:	4b45      	ldr	r3, [pc, #276]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802878c:	687b      	ldr	r3, [r7, #4]
 802878e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028790:	4941      	ldr	r1, [pc, #260]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028792:	4313      	orrs	r3, r2
 8028794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8028798:	687b      	ldr	r3, [r7, #4]
 802879a:	681b      	ldr	r3, [r3, #0]
 802879c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80287a0:	2b00      	cmp	r3, #0
 80287a2:	d00a      	beq.n	80287ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80287a4:	4b3c      	ldr	r3, [pc, #240]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80287aa:	f023 0203 	bic.w	r2, r3, #3
 80287ae:	687b      	ldr	r3, [r7, #4]
 80287b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80287b2:	4939      	ldr	r1, [pc, #228]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287b4:	4313      	orrs	r3, r2
 80287b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80287ba:	687b      	ldr	r3, [r7, #4]
 80287bc:	681b      	ldr	r3, [r3, #0]
 80287be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80287c2:	2b00      	cmp	r3, #0
 80287c4:	d028      	beq.n	8028818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80287c6:	4b34      	ldr	r3, [pc, #208]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80287cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80287d0:	687b      	ldr	r3, [r7, #4]
 80287d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80287d4:	4930      	ldr	r1, [pc, #192]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287d6:	4313      	orrs	r3, r2
 80287d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80287dc:	687b      	ldr	r3, [r7, #4]
 80287de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80287e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80287e4:	d106      	bne.n	80287f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80287e6:	4b2c      	ldr	r3, [pc, #176]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287e8:	68db      	ldr	r3, [r3, #12]
 80287ea:	4a2b      	ldr	r2, [pc, #172]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80287ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80287f0:	60d3      	str	r3, [r2, #12]
 80287f2:	e011      	b.n	8028818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80287f4:	687b      	ldr	r3, [r7, #4]
 80287f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80287f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80287fc:	d10c      	bne.n	8028818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80287fe:	687b      	ldr	r3, [r7, #4]
 8028800:	3304      	adds	r3, #4
 8028802:	2101      	movs	r1, #1
 8028804:	4618      	mov	r0, r3
 8028806:	f000 f8f9 	bl	80289fc <RCCEx_PLLSAI1_Config>
 802880a:	4603      	mov	r3, r0
 802880c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 802880e:	7cfb      	ldrb	r3, [r7, #19]
 8028810:	2b00      	cmp	r3, #0
 8028812:	d001      	beq.n	8028818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8028814:	7cfb      	ldrb	r3, [r7, #19]
 8028816:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	681b      	ldr	r3, [r3, #0]
 802881c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8028820:	2b00      	cmp	r3, #0
 8028822:	d04d      	beq.n	80288c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8028824:	687b      	ldr	r3, [r7, #4]
 8028826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8028828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802882c:	d108      	bne.n	8028840 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 802882e:	4b1a      	ldr	r3, [pc, #104]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028830:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8028834:	4a18      	ldr	r2, [pc, #96]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802883a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 802883e:	e012      	b.n	8028866 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8028840:	4b15      	ldr	r3, [pc, #84]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8028846:	4a14      	ldr	r2, [pc, #80]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802884c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8028850:	4b11      	ldr	r3, [pc, #68]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028856:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 802885a:	687b      	ldr	r3, [r7, #4]
 802885c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802885e:	490e      	ldr	r1, [pc, #56]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028860:	4313      	orrs	r3, r2
 8028862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8028866:	687b      	ldr	r3, [r7, #4]
 8028868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802886a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802886e:	d106      	bne.n	802887e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8028870:	4b09      	ldr	r3, [pc, #36]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028872:	68db      	ldr	r3, [r3, #12]
 8028874:	4a08      	ldr	r2, [pc, #32]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8028876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802887a:	60d3      	str	r3, [r2, #12]
 802887c:	e020      	b.n	80288c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 802887e:	687b      	ldr	r3, [r7, #4]
 8028880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8028882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8028886:	d109      	bne.n	802889c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8028888:	4b03      	ldr	r3, [pc, #12]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802888a:	68db      	ldr	r3, [r3, #12]
 802888c:	4a02      	ldr	r2, [pc, #8]	; (8028898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 802888e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028892:	60d3      	str	r3, [r2, #12]
 8028894:	e014      	b.n	80288c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8028896:	bf00      	nop
 8028898:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 802889c:	687b      	ldr	r3, [r7, #4]
 802889e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80288a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80288a4:	d10c      	bne.n	80288c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80288a6:	687b      	ldr	r3, [r7, #4]
 80288a8:	3304      	adds	r3, #4
 80288aa:	2101      	movs	r1, #1
 80288ac:	4618      	mov	r0, r3
 80288ae:	f000 f8a5 	bl	80289fc <RCCEx_PLLSAI1_Config>
 80288b2:	4603      	mov	r3, r0
 80288b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80288b6:	7cfb      	ldrb	r3, [r7, #19]
 80288b8:	2b00      	cmp	r3, #0
 80288ba:	d001      	beq.n	80288c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80288bc:	7cfb      	ldrb	r3, [r7, #19]
 80288be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80288c0:	687b      	ldr	r3, [r7, #4]
 80288c2:	681b      	ldr	r3, [r3, #0]
 80288c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	d028      	beq.n	802891e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80288cc:	4b4a      	ldr	r3, [pc, #296]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80288ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80288d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80288d6:	687b      	ldr	r3, [r7, #4]
 80288d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80288da:	4947      	ldr	r1, [pc, #284]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80288dc:	4313      	orrs	r3, r2
 80288de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80288e2:	687b      	ldr	r3, [r7, #4]
 80288e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80288e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80288ea:	d106      	bne.n	80288fa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80288ec:	4b42      	ldr	r3, [pc, #264]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80288ee:	68db      	ldr	r3, [r3, #12]
 80288f0:	4a41      	ldr	r2, [pc, #260]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80288f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80288f6:	60d3      	str	r3, [r2, #12]
 80288f8:	e011      	b.n	802891e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80288fa:	687b      	ldr	r3, [r7, #4]
 80288fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80288fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8028902:	d10c      	bne.n	802891e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8028904:	687b      	ldr	r3, [r7, #4]
 8028906:	3304      	adds	r3, #4
 8028908:	2101      	movs	r1, #1
 802890a:	4618      	mov	r0, r3
 802890c:	f000 f876 	bl	80289fc <RCCEx_PLLSAI1_Config>
 8028910:	4603      	mov	r3, r0
 8028912:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8028914:	7cfb      	ldrb	r3, [r7, #19]
 8028916:	2b00      	cmp	r3, #0
 8028918:	d001      	beq.n	802891e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 802891a:	7cfb      	ldrb	r3, [r7, #19]
 802891c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 802891e:	687b      	ldr	r3, [r7, #4]
 8028920:	681b      	ldr	r3, [r3, #0]
 8028922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8028926:	2b00      	cmp	r3, #0
 8028928:	d01e      	beq.n	8028968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 802892a:	4b33      	ldr	r3, [pc, #204]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 802892c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028930:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8028934:	687b      	ldr	r3, [r7, #4]
 8028936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802893a:	492f      	ldr	r1, [pc, #188]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 802893c:	4313      	orrs	r3, r2
 802893e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8028942:	687b      	ldr	r3, [r7, #4]
 8028944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8028948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802894c:	d10c      	bne.n	8028968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 802894e:	687b      	ldr	r3, [r7, #4]
 8028950:	3304      	adds	r3, #4
 8028952:	2102      	movs	r1, #2
 8028954:	4618      	mov	r0, r3
 8028956:	f000 f851 	bl	80289fc <RCCEx_PLLSAI1_Config>
 802895a:	4603      	mov	r3, r0
 802895c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 802895e:	7cfb      	ldrb	r3, [r7, #19]
 8028960:	2b00      	cmp	r3, #0
 8028962:	d001      	beq.n	8028968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8028964:	7cfb      	ldrb	r3, [r7, #19]
 8028966:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8028968:	687b      	ldr	r3, [r7, #4]
 802896a:	681b      	ldr	r3, [r3, #0]
 802896c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8028970:	2b00      	cmp	r3, #0
 8028972:	d00b      	beq.n	802898c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8028974:	4b20      	ldr	r3, [pc, #128]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802897a:	f023 0204 	bic.w	r2, r3, #4
 802897e:	687b      	ldr	r3, [r7, #4]
 8028980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8028984:	491c      	ldr	r1, [pc, #112]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8028986:	4313      	orrs	r3, r2
 8028988:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 802898c:	687b      	ldr	r3, [r7, #4]
 802898e:	681b      	ldr	r3, [r3, #0]
 8028990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8028994:	2b00      	cmp	r3, #0
 8028996:	d00b      	beq.n	80289b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8028998:	4b17      	ldr	r3, [pc, #92]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 802899a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802899e:	f023 0218 	bic.w	r2, r3, #24
 80289a2:	687b      	ldr	r3, [r7, #4]
 80289a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80289a8:	4913      	ldr	r1, [pc, #76]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80289aa:	4313      	orrs	r3, r2
 80289ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80289b0:	687b      	ldr	r3, [r7, #4]
 80289b2:	681b      	ldr	r3, [r3, #0]
 80289b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80289b8:	2b00      	cmp	r3, #0
 80289ba:	d017      	beq.n	80289ec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80289bc:	4b0e      	ldr	r3, [pc, #56]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80289be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80289c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80289c6:	687b      	ldr	r3, [r7, #4]
 80289c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80289cc:	490a      	ldr	r1, [pc, #40]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80289ce:	4313      	orrs	r3, r2
 80289d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80289d4:	687b      	ldr	r3, [r7, #4]
 80289d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80289da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80289de:	d105      	bne.n	80289ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80289e0:	4b05      	ldr	r3, [pc, #20]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80289e2:	68db      	ldr	r3, [r3, #12]
 80289e4:	4a04      	ldr	r2, [pc, #16]	; (80289f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80289e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80289ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80289ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80289ee:	4618      	mov	r0, r3
 80289f0:	3718      	adds	r7, #24
 80289f2:	46bd      	mov	sp, r7
 80289f4:	bd80      	pop	{r7, pc}
 80289f6:	bf00      	nop
 80289f8:	40021000 	.word	0x40021000

080289fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80289fc:	b580      	push	{r7, lr}
 80289fe:	b084      	sub	sp, #16
 8028a00:	af00      	add	r7, sp, #0
 8028a02:	6078      	str	r0, [r7, #4]
 8028a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8028a06:	2300      	movs	r3, #0
 8028a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8028a0a:	4b72      	ldr	r3, [pc, #456]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028a0c:	68db      	ldr	r3, [r3, #12]
 8028a0e:	f003 0303 	and.w	r3, r3, #3
 8028a12:	2b00      	cmp	r3, #0
 8028a14:	d00e      	beq.n	8028a34 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8028a16:	4b6f      	ldr	r3, [pc, #444]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028a18:	68db      	ldr	r3, [r3, #12]
 8028a1a:	f003 0203 	and.w	r2, r3, #3
 8028a1e:	687b      	ldr	r3, [r7, #4]
 8028a20:	681b      	ldr	r3, [r3, #0]
 8028a22:	429a      	cmp	r2, r3
 8028a24:	d103      	bne.n	8028a2e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8028a26:	687b      	ldr	r3, [r7, #4]
 8028a28:	681b      	ldr	r3, [r3, #0]
       ||
 8028a2a:	2b00      	cmp	r3, #0
 8028a2c:	d142      	bne.n	8028ab4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8028a2e:	2301      	movs	r3, #1
 8028a30:	73fb      	strb	r3, [r7, #15]
 8028a32:	e03f      	b.n	8028ab4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8028a34:	687b      	ldr	r3, [r7, #4]
 8028a36:	681b      	ldr	r3, [r3, #0]
 8028a38:	2b03      	cmp	r3, #3
 8028a3a:	d018      	beq.n	8028a6e <RCCEx_PLLSAI1_Config+0x72>
 8028a3c:	2b03      	cmp	r3, #3
 8028a3e:	d825      	bhi.n	8028a8c <RCCEx_PLLSAI1_Config+0x90>
 8028a40:	2b01      	cmp	r3, #1
 8028a42:	d002      	beq.n	8028a4a <RCCEx_PLLSAI1_Config+0x4e>
 8028a44:	2b02      	cmp	r3, #2
 8028a46:	d009      	beq.n	8028a5c <RCCEx_PLLSAI1_Config+0x60>
 8028a48:	e020      	b.n	8028a8c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8028a4a:	4b62      	ldr	r3, [pc, #392]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028a4c:	681b      	ldr	r3, [r3, #0]
 8028a4e:	f003 0302 	and.w	r3, r3, #2
 8028a52:	2b00      	cmp	r3, #0
 8028a54:	d11d      	bne.n	8028a92 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8028a56:	2301      	movs	r3, #1
 8028a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8028a5a:	e01a      	b.n	8028a92 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8028a5c:	4b5d      	ldr	r3, [pc, #372]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028a5e:	681b      	ldr	r3, [r3, #0]
 8028a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028a64:	2b00      	cmp	r3, #0
 8028a66:	d116      	bne.n	8028a96 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8028a68:	2301      	movs	r3, #1
 8028a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8028a6c:	e013      	b.n	8028a96 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8028a6e:	4b59      	ldr	r3, [pc, #356]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028a70:	681b      	ldr	r3, [r3, #0]
 8028a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028a76:	2b00      	cmp	r3, #0
 8028a78:	d10f      	bne.n	8028a9a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8028a7a:	4b56      	ldr	r3, [pc, #344]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028a7c:	681b      	ldr	r3, [r3, #0]
 8028a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028a82:	2b00      	cmp	r3, #0
 8028a84:	d109      	bne.n	8028a9a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8028a86:	2301      	movs	r3, #1
 8028a88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8028a8a:	e006      	b.n	8028a9a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8028a8c:	2301      	movs	r3, #1
 8028a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8028a90:	e004      	b.n	8028a9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8028a92:	bf00      	nop
 8028a94:	e002      	b.n	8028a9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8028a96:	bf00      	nop
 8028a98:	e000      	b.n	8028a9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8028a9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8028a9c:	7bfb      	ldrb	r3, [r7, #15]
 8028a9e:	2b00      	cmp	r3, #0
 8028aa0:	d108      	bne.n	8028ab4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8028aa2:	4b4c      	ldr	r3, [pc, #304]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028aa4:	68db      	ldr	r3, [r3, #12]
 8028aa6:	f023 0203 	bic.w	r2, r3, #3
 8028aaa:	687b      	ldr	r3, [r7, #4]
 8028aac:	681b      	ldr	r3, [r3, #0]
 8028aae:	4949      	ldr	r1, [pc, #292]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028ab0:	4313      	orrs	r3, r2
 8028ab2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8028ab4:	7bfb      	ldrb	r3, [r7, #15]
 8028ab6:	2b00      	cmp	r3, #0
 8028ab8:	f040 8086 	bne.w	8028bc8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8028abc:	4b45      	ldr	r3, [pc, #276]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028abe:	681b      	ldr	r3, [r3, #0]
 8028ac0:	4a44      	ldr	r2, [pc, #272]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8028ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028ac8:	f7fb fc0c 	bl	80242e4 <HAL_GetTick>
 8028acc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8028ace:	e009      	b.n	8028ae4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8028ad0:	f7fb fc08 	bl	80242e4 <HAL_GetTick>
 8028ad4:	4602      	mov	r2, r0
 8028ad6:	68bb      	ldr	r3, [r7, #8]
 8028ad8:	1ad3      	subs	r3, r2, r3
 8028ada:	2b02      	cmp	r3, #2
 8028adc:	d902      	bls.n	8028ae4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8028ade:	2303      	movs	r3, #3
 8028ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8028ae2:	e005      	b.n	8028af0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8028ae4:	4b3b      	ldr	r3, [pc, #236]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028ae6:	681b      	ldr	r3, [r3, #0]
 8028ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028aec:	2b00      	cmp	r3, #0
 8028aee:	d1ef      	bne.n	8028ad0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8028af0:	7bfb      	ldrb	r3, [r7, #15]
 8028af2:	2b00      	cmp	r3, #0
 8028af4:	d168      	bne.n	8028bc8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8028af6:	683b      	ldr	r3, [r7, #0]
 8028af8:	2b00      	cmp	r3, #0
 8028afa:	d113      	bne.n	8028b24 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8028afc:	4b35      	ldr	r3, [pc, #212]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028afe:	691a      	ldr	r2, [r3, #16]
 8028b00:	4b35      	ldr	r3, [pc, #212]	; (8028bd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8028b02:	4013      	ands	r3, r2
 8028b04:	687a      	ldr	r2, [r7, #4]
 8028b06:	6892      	ldr	r2, [r2, #8]
 8028b08:	0211      	lsls	r1, r2, #8
 8028b0a:	687a      	ldr	r2, [r7, #4]
 8028b0c:	68d2      	ldr	r2, [r2, #12]
 8028b0e:	06d2      	lsls	r2, r2, #27
 8028b10:	4311      	orrs	r1, r2
 8028b12:	687a      	ldr	r2, [r7, #4]
 8028b14:	6852      	ldr	r2, [r2, #4]
 8028b16:	3a01      	subs	r2, #1
 8028b18:	0112      	lsls	r2, r2, #4
 8028b1a:	430a      	orrs	r2, r1
 8028b1c:	492d      	ldr	r1, [pc, #180]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b1e:	4313      	orrs	r3, r2
 8028b20:	610b      	str	r3, [r1, #16]
 8028b22:	e02d      	b.n	8028b80 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8028b24:	683b      	ldr	r3, [r7, #0]
 8028b26:	2b01      	cmp	r3, #1
 8028b28:	d115      	bne.n	8028b56 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8028b2a:	4b2a      	ldr	r3, [pc, #168]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b2c:	691a      	ldr	r2, [r3, #16]
 8028b2e:	4b2b      	ldr	r3, [pc, #172]	; (8028bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8028b30:	4013      	ands	r3, r2
 8028b32:	687a      	ldr	r2, [r7, #4]
 8028b34:	6892      	ldr	r2, [r2, #8]
 8028b36:	0211      	lsls	r1, r2, #8
 8028b38:	687a      	ldr	r2, [r7, #4]
 8028b3a:	6912      	ldr	r2, [r2, #16]
 8028b3c:	0852      	lsrs	r2, r2, #1
 8028b3e:	3a01      	subs	r2, #1
 8028b40:	0552      	lsls	r2, r2, #21
 8028b42:	4311      	orrs	r1, r2
 8028b44:	687a      	ldr	r2, [r7, #4]
 8028b46:	6852      	ldr	r2, [r2, #4]
 8028b48:	3a01      	subs	r2, #1
 8028b4a:	0112      	lsls	r2, r2, #4
 8028b4c:	430a      	orrs	r2, r1
 8028b4e:	4921      	ldr	r1, [pc, #132]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b50:	4313      	orrs	r3, r2
 8028b52:	610b      	str	r3, [r1, #16]
 8028b54:	e014      	b.n	8028b80 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8028b56:	4b1f      	ldr	r3, [pc, #124]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b58:	691a      	ldr	r2, [r3, #16]
 8028b5a:	4b21      	ldr	r3, [pc, #132]	; (8028be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8028b5c:	4013      	ands	r3, r2
 8028b5e:	687a      	ldr	r2, [r7, #4]
 8028b60:	6892      	ldr	r2, [r2, #8]
 8028b62:	0211      	lsls	r1, r2, #8
 8028b64:	687a      	ldr	r2, [r7, #4]
 8028b66:	6952      	ldr	r2, [r2, #20]
 8028b68:	0852      	lsrs	r2, r2, #1
 8028b6a:	3a01      	subs	r2, #1
 8028b6c:	0652      	lsls	r2, r2, #25
 8028b6e:	4311      	orrs	r1, r2
 8028b70:	687a      	ldr	r2, [r7, #4]
 8028b72:	6852      	ldr	r2, [r2, #4]
 8028b74:	3a01      	subs	r2, #1
 8028b76:	0112      	lsls	r2, r2, #4
 8028b78:	430a      	orrs	r2, r1
 8028b7a:	4916      	ldr	r1, [pc, #88]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b7c:	4313      	orrs	r3, r2
 8028b7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8028b80:	4b14      	ldr	r3, [pc, #80]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b82:	681b      	ldr	r3, [r3, #0]
 8028b84:	4a13      	ldr	r2, [pc, #76]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8028b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028b8c:	f7fb fbaa 	bl	80242e4 <HAL_GetTick>
 8028b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8028b92:	e009      	b.n	8028ba8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8028b94:	f7fb fba6 	bl	80242e4 <HAL_GetTick>
 8028b98:	4602      	mov	r2, r0
 8028b9a:	68bb      	ldr	r3, [r7, #8]
 8028b9c:	1ad3      	subs	r3, r2, r3
 8028b9e:	2b02      	cmp	r3, #2
 8028ba0:	d902      	bls.n	8028ba8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8028ba2:	2303      	movs	r3, #3
 8028ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8028ba6:	e005      	b.n	8028bb4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8028ba8:	4b0a      	ldr	r3, [pc, #40]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028baa:	681b      	ldr	r3, [r3, #0]
 8028bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028bb0:	2b00      	cmp	r3, #0
 8028bb2:	d0ef      	beq.n	8028b94 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8028bb4:	7bfb      	ldrb	r3, [r7, #15]
 8028bb6:	2b00      	cmp	r3, #0
 8028bb8:	d106      	bne.n	8028bc8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8028bba:	4b06      	ldr	r3, [pc, #24]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028bbc:	691a      	ldr	r2, [r3, #16]
 8028bbe:	687b      	ldr	r3, [r7, #4]
 8028bc0:	699b      	ldr	r3, [r3, #24]
 8028bc2:	4904      	ldr	r1, [pc, #16]	; (8028bd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8028bc4:	4313      	orrs	r3, r2
 8028bc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8028bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8028bca:	4618      	mov	r0, r3
 8028bcc:	3710      	adds	r7, #16
 8028bce:	46bd      	mov	sp, r7
 8028bd0:	bd80      	pop	{r7, pc}
 8028bd2:	bf00      	nop
 8028bd4:	40021000 	.word	0x40021000
 8028bd8:	07ff800f 	.word	0x07ff800f
 8028bdc:	ff9f800f 	.word	0xff9f800f
 8028be0:	f9ff800f 	.word	0xf9ff800f

08028be4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8028be4:	b580      	push	{r7, lr}
 8028be6:	b084      	sub	sp, #16
 8028be8:	af00      	add	r7, sp, #0
 8028bea:	6078      	str	r0, [r7, #4]
 8028bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8028bee:	2300      	movs	r3, #0
 8028bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8028bf2:	4b72      	ldr	r3, [pc, #456]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028bf4:	68db      	ldr	r3, [r3, #12]
 8028bf6:	f003 0303 	and.w	r3, r3, #3
 8028bfa:	2b00      	cmp	r3, #0
 8028bfc:	d00e      	beq.n	8028c1c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8028bfe:	4b6f      	ldr	r3, [pc, #444]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c00:	68db      	ldr	r3, [r3, #12]
 8028c02:	f003 0203 	and.w	r2, r3, #3
 8028c06:	687b      	ldr	r3, [r7, #4]
 8028c08:	681b      	ldr	r3, [r3, #0]
 8028c0a:	429a      	cmp	r2, r3
 8028c0c:	d103      	bne.n	8028c16 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8028c0e:	687b      	ldr	r3, [r7, #4]
 8028c10:	681b      	ldr	r3, [r3, #0]
       ||
 8028c12:	2b00      	cmp	r3, #0
 8028c14:	d142      	bne.n	8028c9c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8028c16:	2301      	movs	r3, #1
 8028c18:	73fb      	strb	r3, [r7, #15]
 8028c1a:	e03f      	b.n	8028c9c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8028c1c:	687b      	ldr	r3, [r7, #4]
 8028c1e:	681b      	ldr	r3, [r3, #0]
 8028c20:	2b03      	cmp	r3, #3
 8028c22:	d018      	beq.n	8028c56 <RCCEx_PLLSAI2_Config+0x72>
 8028c24:	2b03      	cmp	r3, #3
 8028c26:	d825      	bhi.n	8028c74 <RCCEx_PLLSAI2_Config+0x90>
 8028c28:	2b01      	cmp	r3, #1
 8028c2a:	d002      	beq.n	8028c32 <RCCEx_PLLSAI2_Config+0x4e>
 8028c2c:	2b02      	cmp	r3, #2
 8028c2e:	d009      	beq.n	8028c44 <RCCEx_PLLSAI2_Config+0x60>
 8028c30:	e020      	b.n	8028c74 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8028c32:	4b62      	ldr	r3, [pc, #392]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c34:	681b      	ldr	r3, [r3, #0]
 8028c36:	f003 0302 	and.w	r3, r3, #2
 8028c3a:	2b00      	cmp	r3, #0
 8028c3c:	d11d      	bne.n	8028c7a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8028c3e:	2301      	movs	r3, #1
 8028c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8028c42:	e01a      	b.n	8028c7a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8028c44:	4b5d      	ldr	r3, [pc, #372]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c46:	681b      	ldr	r3, [r3, #0]
 8028c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028c4c:	2b00      	cmp	r3, #0
 8028c4e:	d116      	bne.n	8028c7e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8028c50:	2301      	movs	r3, #1
 8028c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8028c54:	e013      	b.n	8028c7e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8028c56:	4b59      	ldr	r3, [pc, #356]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c58:	681b      	ldr	r3, [r3, #0]
 8028c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028c5e:	2b00      	cmp	r3, #0
 8028c60:	d10f      	bne.n	8028c82 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8028c62:	4b56      	ldr	r3, [pc, #344]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c64:	681b      	ldr	r3, [r3, #0]
 8028c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028c6a:	2b00      	cmp	r3, #0
 8028c6c:	d109      	bne.n	8028c82 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8028c6e:	2301      	movs	r3, #1
 8028c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8028c72:	e006      	b.n	8028c82 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8028c74:	2301      	movs	r3, #1
 8028c76:	73fb      	strb	r3, [r7, #15]
      break;
 8028c78:	e004      	b.n	8028c84 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8028c7a:	bf00      	nop
 8028c7c:	e002      	b.n	8028c84 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8028c7e:	bf00      	nop
 8028c80:	e000      	b.n	8028c84 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8028c82:	bf00      	nop
    }

    if(status == HAL_OK)
 8028c84:	7bfb      	ldrb	r3, [r7, #15]
 8028c86:	2b00      	cmp	r3, #0
 8028c88:	d108      	bne.n	8028c9c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8028c8a:	4b4c      	ldr	r3, [pc, #304]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c8c:	68db      	ldr	r3, [r3, #12]
 8028c8e:	f023 0203 	bic.w	r2, r3, #3
 8028c92:	687b      	ldr	r3, [r7, #4]
 8028c94:	681b      	ldr	r3, [r3, #0]
 8028c96:	4949      	ldr	r1, [pc, #292]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028c98:	4313      	orrs	r3, r2
 8028c9a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8028c9c:	7bfb      	ldrb	r3, [r7, #15]
 8028c9e:	2b00      	cmp	r3, #0
 8028ca0:	f040 8086 	bne.w	8028db0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8028ca4:	4b45      	ldr	r3, [pc, #276]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028ca6:	681b      	ldr	r3, [r3, #0]
 8028ca8:	4a44      	ldr	r2, [pc, #272]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028cb0:	f7fb fb18 	bl	80242e4 <HAL_GetTick>
 8028cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8028cb6:	e009      	b.n	8028ccc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8028cb8:	f7fb fb14 	bl	80242e4 <HAL_GetTick>
 8028cbc:	4602      	mov	r2, r0
 8028cbe:	68bb      	ldr	r3, [r7, #8]
 8028cc0:	1ad3      	subs	r3, r2, r3
 8028cc2:	2b02      	cmp	r3, #2
 8028cc4:	d902      	bls.n	8028ccc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8028cc6:	2303      	movs	r3, #3
 8028cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8028cca:	e005      	b.n	8028cd8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8028ccc:	4b3b      	ldr	r3, [pc, #236]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028cce:	681b      	ldr	r3, [r3, #0]
 8028cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8028cd4:	2b00      	cmp	r3, #0
 8028cd6:	d1ef      	bne.n	8028cb8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8028cd8:	7bfb      	ldrb	r3, [r7, #15]
 8028cda:	2b00      	cmp	r3, #0
 8028cdc:	d168      	bne.n	8028db0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8028cde:	683b      	ldr	r3, [r7, #0]
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	d113      	bne.n	8028d0c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8028ce4:	4b35      	ldr	r3, [pc, #212]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028ce6:	695a      	ldr	r2, [r3, #20]
 8028ce8:	4b35      	ldr	r3, [pc, #212]	; (8028dc0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8028cea:	4013      	ands	r3, r2
 8028cec:	687a      	ldr	r2, [r7, #4]
 8028cee:	6892      	ldr	r2, [r2, #8]
 8028cf0:	0211      	lsls	r1, r2, #8
 8028cf2:	687a      	ldr	r2, [r7, #4]
 8028cf4:	68d2      	ldr	r2, [r2, #12]
 8028cf6:	06d2      	lsls	r2, r2, #27
 8028cf8:	4311      	orrs	r1, r2
 8028cfa:	687a      	ldr	r2, [r7, #4]
 8028cfc:	6852      	ldr	r2, [r2, #4]
 8028cfe:	3a01      	subs	r2, #1
 8028d00:	0112      	lsls	r2, r2, #4
 8028d02:	430a      	orrs	r2, r1
 8028d04:	492d      	ldr	r1, [pc, #180]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d06:	4313      	orrs	r3, r2
 8028d08:	614b      	str	r3, [r1, #20]
 8028d0a:	e02d      	b.n	8028d68 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8028d0c:	683b      	ldr	r3, [r7, #0]
 8028d0e:	2b01      	cmp	r3, #1
 8028d10:	d115      	bne.n	8028d3e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8028d12:	4b2a      	ldr	r3, [pc, #168]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d14:	695a      	ldr	r2, [r3, #20]
 8028d16:	4b2b      	ldr	r3, [pc, #172]	; (8028dc4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8028d18:	4013      	ands	r3, r2
 8028d1a:	687a      	ldr	r2, [r7, #4]
 8028d1c:	6892      	ldr	r2, [r2, #8]
 8028d1e:	0211      	lsls	r1, r2, #8
 8028d20:	687a      	ldr	r2, [r7, #4]
 8028d22:	6912      	ldr	r2, [r2, #16]
 8028d24:	0852      	lsrs	r2, r2, #1
 8028d26:	3a01      	subs	r2, #1
 8028d28:	0552      	lsls	r2, r2, #21
 8028d2a:	4311      	orrs	r1, r2
 8028d2c:	687a      	ldr	r2, [r7, #4]
 8028d2e:	6852      	ldr	r2, [r2, #4]
 8028d30:	3a01      	subs	r2, #1
 8028d32:	0112      	lsls	r2, r2, #4
 8028d34:	430a      	orrs	r2, r1
 8028d36:	4921      	ldr	r1, [pc, #132]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d38:	4313      	orrs	r3, r2
 8028d3a:	614b      	str	r3, [r1, #20]
 8028d3c:	e014      	b.n	8028d68 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8028d3e:	4b1f      	ldr	r3, [pc, #124]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d40:	695a      	ldr	r2, [r3, #20]
 8028d42:	4b21      	ldr	r3, [pc, #132]	; (8028dc8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8028d44:	4013      	ands	r3, r2
 8028d46:	687a      	ldr	r2, [r7, #4]
 8028d48:	6892      	ldr	r2, [r2, #8]
 8028d4a:	0211      	lsls	r1, r2, #8
 8028d4c:	687a      	ldr	r2, [r7, #4]
 8028d4e:	6952      	ldr	r2, [r2, #20]
 8028d50:	0852      	lsrs	r2, r2, #1
 8028d52:	3a01      	subs	r2, #1
 8028d54:	0652      	lsls	r2, r2, #25
 8028d56:	4311      	orrs	r1, r2
 8028d58:	687a      	ldr	r2, [r7, #4]
 8028d5a:	6852      	ldr	r2, [r2, #4]
 8028d5c:	3a01      	subs	r2, #1
 8028d5e:	0112      	lsls	r2, r2, #4
 8028d60:	430a      	orrs	r2, r1
 8028d62:	4916      	ldr	r1, [pc, #88]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d64:	4313      	orrs	r3, r2
 8028d66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8028d68:	4b14      	ldr	r3, [pc, #80]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d6a:	681b      	ldr	r3, [r3, #0]
 8028d6c:	4a13      	ldr	r2, [pc, #76]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028d72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028d74:	f7fb fab6 	bl	80242e4 <HAL_GetTick>
 8028d78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8028d7a:	e009      	b.n	8028d90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8028d7c:	f7fb fab2 	bl	80242e4 <HAL_GetTick>
 8028d80:	4602      	mov	r2, r0
 8028d82:	68bb      	ldr	r3, [r7, #8]
 8028d84:	1ad3      	subs	r3, r2, r3
 8028d86:	2b02      	cmp	r3, #2
 8028d88:	d902      	bls.n	8028d90 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8028d8a:	2303      	movs	r3, #3
 8028d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8028d8e:	e005      	b.n	8028d9c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8028d90:	4b0a      	ldr	r3, [pc, #40]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028d92:	681b      	ldr	r3, [r3, #0]
 8028d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8028d98:	2b00      	cmp	r3, #0
 8028d9a:	d0ef      	beq.n	8028d7c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8028d9c:	7bfb      	ldrb	r3, [r7, #15]
 8028d9e:	2b00      	cmp	r3, #0
 8028da0:	d106      	bne.n	8028db0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8028da2:	4b06      	ldr	r3, [pc, #24]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028da4:	695a      	ldr	r2, [r3, #20]
 8028da6:	687b      	ldr	r3, [r7, #4]
 8028da8:	699b      	ldr	r3, [r3, #24]
 8028daa:	4904      	ldr	r1, [pc, #16]	; (8028dbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8028dac:	4313      	orrs	r3, r2
 8028dae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8028db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8028db2:	4618      	mov	r0, r3
 8028db4:	3710      	adds	r7, #16
 8028db6:	46bd      	mov	sp, r7
 8028db8:	bd80      	pop	{r7, pc}
 8028dba:	bf00      	nop
 8028dbc:	40021000 	.word	0x40021000
 8028dc0:	07ff800f 	.word	0x07ff800f
 8028dc4:	ff9f800f 	.word	0xff9f800f
 8028dc8:	f9ff800f 	.word	0xf9ff800f

08028dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028dcc:	b580      	push	{r7, lr}
 8028dce:	b082      	sub	sp, #8
 8028dd0:	af00      	add	r7, sp, #0
 8028dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028dd4:	687b      	ldr	r3, [r7, #4]
 8028dd6:	2b00      	cmp	r3, #0
 8028dd8:	d101      	bne.n	8028dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028dda:	2301      	movs	r3, #1
 8028ddc:	e049      	b.n	8028e72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028dde:	687b      	ldr	r3, [r7, #4]
 8028de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028de4:	b2db      	uxtb	r3, r3
 8028de6:	2b00      	cmp	r3, #0
 8028de8:	d106      	bne.n	8028df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028dea:	687b      	ldr	r3, [r7, #4]
 8028dec:	2200      	movs	r2, #0
 8028dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8028df2:	6878      	ldr	r0, [r7, #4]
 8028df4:	f7fa fdfe 	bl	80239f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028df8:	687b      	ldr	r3, [r7, #4]
 8028dfa:	2202      	movs	r2, #2
 8028dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028e00:	687b      	ldr	r3, [r7, #4]
 8028e02:	681a      	ldr	r2, [r3, #0]
 8028e04:	687b      	ldr	r3, [r7, #4]
 8028e06:	3304      	adds	r3, #4
 8028e08:	4619      	mov	r1, r3
 8028e0a:	4610      	mov	r0, r2
 8028e0c:	f000 fab6 	bl	802937c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028e10:	687b      	ldr	r3, [r7, #4]
 8028e12:	2201      	movs	r2, #1
 8028e14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028e18:	687b      	ldr	r3, [r7, #4]
 8028e1a:	2201      	movs	r2, #1
 8028e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028e20:	687b      	ldr	r3, [r7, #4]
 8028e22:	2201      	movs	r2, #1
 8028e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028e28:	687b      	ldr	r3, [r7, #4]
 8028e2a:	2201      	movs	r2, #1
 8028e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028e30:	687b      	ldr	r3, [r7, #4]
 8028e32:	2201      	movs	r2, #1
 8028e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8028e38:	687b      	ldr	r3, [r7, #4]
 8028e3a:	2201      	movs	r2, #1
 8028e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	2201      	movs	r2, #1
 8028e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028e48:	687b      	ldr	r3, [r7, #4]
 8028e4a:	2201      	movs	r2, #1
 8028e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028e50:	687b      	ldr	r3, [r7, #4]
 8028e52:	2201      	movs	r2, #1
 8028e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8028e58:	687b      	ldr	r3, [r7, #4]
 8028e5a:	2201      	movs	r2, #1
 8028e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8028e60:	687b      	ldr	r3, [r7, #4]
 8028e62:	2201      	movs	r2, #1
 8028e64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028e68:	687b      	ldr	r3, [r7, #4]
 8028e6a:	2201      	movs	r2, #1
 8028e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028e70:	2300      	movs	r3, #0
}
 8028e72:	4618      	mov	r0, r3
 8028e74:	3708      	adds	r7, #8
 8028e76:	46bd      	mov	sp, r7
 8028e78:	bd80      	pop	{r7, pc}
	...

08028e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028e7c:	b480      	push	{r7}
 8028e7e:	b085      	sub	sp, #20
 8028e80:	af00      	add	r7, sp, #0
 8028e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028e84:	687b      	ldr	r3, [r7, #4]
 8028e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028e8a:	b2db      	uxtb	r3, r3
 8028e8c:	2b01      	cmp	r3, #1
 8028e8e:	d001      	beq.n	8028e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028e90:	2301      	movs	r3, #1
 8028e92:	e04f      	b.n	8028f34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028e94:	687b      	ldr	r3, [r7, #4]
 8028e96:	2202      	movs	r2, #2
 8028e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028e9c:	687b      	ldr	r3, [r7, #4]
 8028e9e:	681b      	ldr	r3, [r3, #0]
 8028ea0:	68da      	ldr	r2, [r3, #12]
 8028ea2:	687b      	ldr	r3, [r7, #4]
 8028ea4:	681b      	ldr	r3, [r3, #0]
 8028ea6:	f042 0201 	orr.w	r2, r2, #1
 8028eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028eac:	687b      	ldr	r3, [r7, #4]
 8028eae:	681b      	ldr	r3, [r3, #0]
 8028eb0:	4a23      	ldr	r2, [pc, #140]	; (8028f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8028eb2:	4293      	cmp	r3, r2
 8028eb4:	d01d      	beq.n	8028ef2 <HAL_TIM_Base_Start_IT+0x76>
 8028eb6:	687b      	ldr	r3, [r7, #4]
 8028eb8:	681b      	ldr	r3, [r3, #0]
 8028eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028ebe:	d018      	beq.n	8028ef2 <HAL_TIM_Base_Start_IT+0x76>
 8028ec0:	687b      	ldr	r3, [r7, #4]
 8028ec2:	681b      	ldr	r3, [r3, #0]
 8028ec4:	4a1f      	ldr	r2, [pc, #124]	; (8028f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8028ec6:	4293      	cmp	r3, r2
 8028ec8:	d013      	beq.n	8028ef2 <HAL_TIM_Base_Start_IT+0x76>
 8028eca:	687b      	ldr	r3, [r7, #4]
 8028ecc:	681b      	ldr	r3, [r3, #0]
 8028ece:	4a1e      	ldr	r2, [pc, #120]	; (8028f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8028ed0:	4293      	cmp	r3, r2
 8028ed2:	d00e      	beq.n	8028ef2 <HAL_TIM_Base_Start_IT+0x76>
 8028ed4:	687b      	ldr	r3, [r7, #4]
 8028ed6:	681b      	ldr	r3, [r3, #0]
 8028ed8:	4a1c      	ldr	r2, [pc, #112]	; (8028f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8028eda:	4293      	cmp	r3, r2
 8028edc:	d009      	beq.n	8028ef2 <HAL_TIM_Base_Start_IT+0x76>
 8028ede:	687b      	ldr	r3, [r7, #4]
 8028ee0:	681b      	ldr	r3, [r3, #0]
 8028ee2:	4a1b      	ldr	r2, [pc, #108]	; (8028f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8028ee4:	4293      	cmp	r3, r2
 8028ee6:	d004      	beq.n	8028ef2 <HAL_TIM_Base_Start_IT+0x76>
 8028ee8:	687b      	ldr	r3, [r7, #4]
 8028eea:	681b      	ldr	r3, [r3, #0]
 8028eec:	4a19      	ldr	r2, [pc, #100]	; (8028f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8028eee:	4293      	cmp	r3, r2
 8028ef0:	d115      	bne.n	8028f1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028ef2:	687b      	ldr	r3, [r7, #4]
 8028ef4:	681b      	ldr	r3, [r3, #0]
 8028ef6:	689a      	ldr	r2, [r3, #8]
 8028ef8:	4b17      	ldr	r3, [pc, #92]	; (8028f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8028efa:	4013      	ands	r3, r2
 8028efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028efe:	68fb      	ldr	r3, [r7, #12]
 8028f00:	2b06      	cmp	r3, #6
 8028f02:	d015      	beq.n	8028f30 <HAL_TIM_Base_Start_IT+0xb4>
 8028f04:	68fb      	ldr	r3, [r7, #12]
 8028f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028f0a:	d011      	beq.n	8028f30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	681b      	ldr	r3, [r3, #0]
 8028f10:	681a      	ldr	r2, [r3, #0]
 8028f12:	687b      	ldr	r3, [r7, #4]
 8028f14:	681b      	ldr	r3, [r3, #0]
 8028f16:	f042 0201 	orr.w	r2, r2, #1
 8028f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028f1c:	e008      	b.n	8028f30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028f1e:	687b      	ldr	r3, [r7, #4]
 8028f20:	681b      	ldr	r3, [r3, #0]
 8028f22:	681a      	ldr	r2, [r3, #0]
 8028f24:	687b      	ldr	r3, [r7, #4]
 8028f26:	681b      	ldr	r3, [r3, #0]
 8028f28:	f042 0201 	orr.w	r2, r2, #1
 8028f2c:	601a      	str	r2, [r3, #0]
 8028f2e:	e000      	b.n	8028f32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028f30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8028f32:	2300      	movs	r3, #0
}
 8028f34:	4618      	mov	r0, r3
 8028f36:	3714      	adds	r7, #20
 8028f38:	46bd      	mov	sp, r7
 8028f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f3e:	4770      	bx	lr
 8028f40:	40012c00 	.word	0x40012c00
 8028f44:	40000400 	.word	0x40000400
 8028f48:	40000800 	.word	0x40000800
 8028f4c:	40000c00 	.word	0x40000c00
 8028f50:	40013400 	.word	0x40013400
 8028f54:	40014000 	.word	0x40014000
 8028f58:	00010007 	.word	0x00010007

08028f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028f5c:	b580      	push	{r7, lr}
 8028f5e:	b082      	sub	sp, #8
 8028f60:	af00      	add	r7, sp, #0
 8028f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028f64:	687b      	ldr	r3, [r7, #4]
 8028f66:	681b      	ldr	r3, [r3, #0]
 8028f68:	691b      	ldr	r3, [r3, #16]
 8028f6a:	f003 0302 	and.w	r3, r3, #2
 8028f6e:	2b02      	cmp	r3, #2
 8028f70:	d122      	bne.n	8028fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028f72:	687b      	ldr	r3, [r7, #4]
 8028f74:	681b      	ldr	r3, [r3, #0]
 8028f76:	68db      	ldr	r3, [r3, #12]
 8028f78:	f003 0302 	and.w	r3, r3, #2
 8028f7c:	2b02      	cmp	r3, #2
 8028f7e:	d11b      	bne.n	8028fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028f80:	687b      	ldr	r3, [r7, #4]
 8028f82:	681b      	ldr	r3, [r3, #0]
 8028f84:	f06f 0202 	mvn.w	r2, #2
 8028f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8028f8a:	687b      	ldr	r3, [r7, #4]
 8028f8c:	2201      	movs	r2, #1
 8028f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028f90:	687b      	ldr	r3, [r7, #4]
 8028f92:	681b      	ldr	r3, [r3, #0]
 8028f94:	699b      	ldr	r3, [r3, #24]
 8028f96:	f003 0303 	and.w	r3, r3, #3
 8028f9a:	2b00      	cmp	r3, #0
 8028f9c:	d003      	beq.n	8028fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8028f9e:	6878      	ldr	r0, [r7, #4]
 8028fa0:	f000 f9ce 	bl	8029340 <HAL_TIM_IC_CaptureCallback>
 8028fa4:	e005      	b.n	8028fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028fa6:	6878      	ldr	r0, [r7, #4]
 8028fa8:	f000 f9c0 	bl	802932c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028fac:	6878      	ldr	r0, [r7, #4]
 8028fae:	f000 f9d1 	bl	8029354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028fb2:	687b      	ldr	r3, [r7, #4]
 8028fb4:	2200      	movs	r2, #0
 8028fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028fb8:	687b      	ldr	r3, [r7, #4]
 8028fba:	681b      	ldr	r3, [r3, #0]
 8028fbc:	691b      	ldr	r3, [r3, #16]
 8028fbe:	f003 0304 	and.w	r3, r3, #4
 8028fc2:	2b04      	cmp	r3, #4
 8028fc4:	d122      	bne.n	802900c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8028fc6:	687b      	ldr	r3, [r7, #4]
 8028fc8:	681b      	ldr	r3, [r3, #0]
 8028fca:	68db      	ldr	r3, [r3, #12]
 8028fcc:	f003 0304 	and.w	r3, r3, #4
 8028fd0:	2b04      	cmp	r3, #4
 8028fd2:	d11b      	bne.n	802900c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8028fd4:	687b      	ldr	r3, [r7, #4]
 8028fd6:	681b      	ldr	r3, [r3, #0]
 8028fd8:	f06f 0204 	mvn.w	r2, #4
 8028fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8028fde:	687b      	ldr	r3, [r7, #4]
 8028fe0:	2202      	movs	r2, #2
 8028fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8028fe4:	687b      	ldr	r3, [r7, #4]
 8028fe6:	681b      	ldr	r3, [r3, #0]
 8028fe8:	699b      	ldr	r3, [r3, #24]
 8028fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028fee:	2b00      	cmp	r3, #0
 8028ff0:	d003      	beq.n	8028ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028ff2:	6878      	ldr	r0, [r7, #4]
 8028ff4:	f000 f9a4 	bl	8029340 <HAL_TIM_IC_CaptureCallback>
 8028ff8:	e005      	b.n	8029006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028ffa:	6878      	ldr	r0, [r7, #4]
 8028ffc:	f000 f996 	bl	802932c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029000:	6878      	ldr	r0, [r7, #4]
 8029002:	f000 f9a7 	bl	8029354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029006:	687b      	ldr	r3, [r7, #4]
 8029008:	2200      	movs	r2, #0
 802900a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802900c:	687b      	ldr	r3, [r7, #4]
 802900e:	681b      	ldr	r3, [r3, #0]
 8029010:	691b      	ldr	r3, [r3, #16]
 8029012:	f003 0308 	and.w	r3, r3, #8
 8029016:	2b08      	cmp	r3, #8
 8029018:	d122      	bne.n	8029060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802901a:	687b      	ldr	r3, [r7, #4]
 802901c:	681b      	ldr	r3, [r3, #0]
 802901e:	68db      	ldr	r3, [r3, #12]
 8029020:	f003 0308 	and.w	r3, r3, #8
 8029024:	2b08      	cmp	r3, #8
 8029026:	d11b      	bne.n	8029060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8029028:	687b      	ldr	r3, [r7, #4]
 802902a:	681b      	ldr	r3, [r3, #0]
 802902c:	f06f 0208 	mvn.w	r2, #8
 8029030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029032:	687b      	ldr	r3, [r7, #4]
 8029034:	2204      	movs	r2, #4
 8029036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8029038:	687b      	ldr	r3, [r7, #4]
 802903a:	681b      	ldr	r3, [r3, #0]
 802903c:	69db      	ldr	r3, [r3, #28]
 802903e:	f003 0303 	and.w	r3, r3, #3
 8029042:	2b00      	cmp	r3, #0
 8029044:	d003      	beq.n	802904e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029046:	6878      	ldr	r0, [r7, #4]
 8029048:	f000 f97a 	bl	8029340 <HAL_TIM_IC_CaptureCallback>
 802904c:	e005      	b.n	802905a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802904e:	6878      	ldr	r0, [r7, #4]
 8029050:	f000 f96c 	bl	802932c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029054:	6878      	ldr	r0, [r7, #4]
 8029056:	f000 f97d 	bl	8029354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802905a:	687b      	ldr	r3, [r7, #4]
 802905c:	2200      	movs	r2, #0
 802905e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029060:	687b      	ldr	r3, [r7, #4]
 8029062:	681b      	ldr	r3, [r3, #0]
 8029064:	691b      	ldr	r3, [r3, #16]
 8029066:	f003 0310 	and.w	r3, r3, #16
 802906a:	2b10      	cmp	r3, #16
 802906c:	d122      	bne.n	80290b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802906e:	687b      	ldr	r3, [r7, #4]
 8029070:	681b      	ldr	r3, [r3, #0]
 8029072:	68db      	ldr	r3, [r3, #12]
 8029074:	f003 0310 	and.w	r3, r3, #16
 8029078:	2b10      	cmp	r3, #16
 802907a:	d11b      	bne.n	80290b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802907c:	687b      	ldr	r3, [r7, #4]
 802907e:	681b      	ldr	r3, [r3, #0]
 8029080:	f06f 0210 	mvn.w	r2, #16
 8029084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8029086:	687b      	ldr	r3, [r7, #4]
 8029088:	2208      	movs	r2, #8
 802908a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802908c:	687b      	ldr	r3, [r7, #4]
 802908e:	681b      	ldr	r3, [r3, #0]
 8029090:	69db      	ldr	r3, [r3, #28]
 8029092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029096:	2b00      	cmp	r3, #0
 8029098:	d003      	beq.n	80290a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802909a:	6878      	ldr	r0, [r7, #4]
 802909c:	f000 f950 	bl	8029340 <HAL_TIM_IC_CaptureCallback>
 80290a0:	e005      	b.n	80290ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80290a2:	6878      	ldr	r0, [r7, #4]
 80290a4:	f000 f942 	bl	802932c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80290a8:	6878      	ldr	r0, [r7, #4]
 80290aa:	f000 f953 	bl	8029354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80290ae:	687b      	ldr	r3, [r7, #4]
 80290b0:	2200      	movs	r2, #0
 80290b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80290b4:	687b      	ldr	r3, [r7, #4]
 80290b6:	681b      	ldr	r3, [r3, #0]
 80290b8:	691b      	ldr	r3, [r3, #16]
 80290ba:	f003 0301 	and.w	r3, r3, #1
 80290be:	2b01      	cmp	r3, #1
 80290c0:	d10e      	bne.n	80290e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80290c2:	687b      	ldr	r3, [r7, #4]
 80290c4:	681b      	ldr	r3, [r3, #0]
 80290c6:	68db      	ldr	r3, [r3, #12]
 80290c8:	f003 0301 	and.w	r3, r3, #1
 80290cc:	2b01      	cmp	r3, #1
 80290ce:	d107      	bne.n	80290e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80290d0:	687b      	ldr	r3, [r7, #4]
 80290d2:	681b      	ldr	r3, [r3, #0]
 80290d4:	f06f 0201 	mvn.w	r2, #1
 80290d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80290da:	6878      	ldr	r0, [r7, #4]
 80290dc:	f7f8 fea2 	bl	8021e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80290e0:	687b      	ldr	r3, [r7, #4]
 80290e2:	681b      	ldr	r3, [r3, #0]
 80290e4:	691b      	ldr	r3, [r3, #16]
 80290e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80290ea:	2b80      	cmp	r3, #128	; 0x80
 80290ec:	d10e      	bne.n	802910c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80290ee:	687b      	ldr	r3, [r7, #4]
 80290f0:	681b      	ldr	r3, [r3, #0]
 80290f2:	68db      	ldr	r3, [r3, #12]
 80290f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80290f8:	2b80      	cmp	r3, #128	; 0x80
 80290fa:	d107      	bne.n	802910c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80290fc:	687b      	ldr	r3, [r7, #4]
 80290fe:	681b      	ldr	r3, [r3, #0]
 8029100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8029104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8029106:	6878      	ldr	r0, [r7, #4]
 8029108:	f000 fafe 	bl	8029708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 802910c:	687b      	ldr	r3, [r7, #4]
 802910e:	681b      	ldr	r3, [r3, #0]
 8029110:	691b      	ldr	r3, [r3, #16]
 8029112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802911a:	d10e      	bne.n	802913a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802911c:	687b      	ldr	r3, [r7, #4]
 802911e:	681b      	ldr	r3, [r3, #0]
 8029120:	68db      	ldr	r3, [r3, #12]
 8029122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029126:	2b80      	cmp	r3, #128	; 0x80
 8029128:	d107      	bne.n	802913a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 802912a:	687b      	ldr	r3, [r7, #4]
 802912c:	681b      	ldr	r3, [r3, #0]
 802912e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8029132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8029134:	6878      	ldr	r0, [r7, #4]
 8029136:	f000 faf1 	bl	802971c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802913a:	687b      	ldr	r3, [r7, #4]
 802913c:	681b      	ldr	r3, [r3, #0]
 802913e:	691b      	ldr	r3, [r3, #16]
 8029140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029144:	2b40      	cmp	r3, #64	; 0x40
 8029146:	d10e      	bne.n	8029166 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029148:	687b      	ldr	r3, [r7, #4]
 802914a:	681b      	ldr	r3, [r3, #0]
 802914c:	68db      	ldr	r3, [r3, #12]
 802914e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029152:	2b40      	cmp	r3, #64	; 0x40
 8029154:	d107      	bne.n	8029166 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8029156:	687b      	ldr	r3, [r7, #4]
 8029158:	681b      	ldr	r3, [r3, #0]
 802915a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802915e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029160:	6878      	ldr	r0, [r7, #4]
 8029162:	f000 f901 	bl	8029368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8029166:	687b      	ldr	r3, [r7, #4]
 8029168:	681b      	ldr	r3, [r3, #0]
 802916a:	691b      	ldr	r3, [r3, #16]
 802916c:	f003 0320 	and.w	r3, r3, #32
 8029170:	2b20      	cmp	r3, #32
 8029172:	d10e      	bne.n	8029192 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	681b      	ldr	r3, [r3, #0]
 8029178:	68db      	ldr	r3, [r3, #12]
 802917a:	f003 0320 	and.w	r3, r3, #32
 802917e:	2b20      	cmp	r3, #32
 8029180:	d107      	bne.n	8029192 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8029182:	687b      	ldr	r3, [r7, #4]
 8029184:	681b      	ldr	r3, [r3, #0]
 8029186:	f06f 0220 	mvn.w	r2, #32
 802918a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802918c:	6878      	ldr	r0, [r7, #4]
 802918e:	f000 fab1 	bl	80296f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8029192:	bf00      	nop
 8029194:	3708      	adds	r7, #8
 8029196:	46bd      	mov	sp, r7
 8029198:	bd80      	pop	{r7, pc}

0802919a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802919a:	b580      	push	{r7, lr}
 802919c:	b084      	sub	sp, #16
 802919e:	af00      	add	r7, sp, #0
 80291a0:	6078      	str	r0, [r7, #4]
 80291a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80291a4:	2300      	movs	r3, #0
 80291a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80291a8:	687b      	ldr	r3, [r7, #4]
 80291aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80291ae:	2b01      	cmp	r3, #1
 80291b0:	d101      	bne.n	80291b6 <HAL_TIM_ConfigClockSource+0x1c>
 80291b2:	2302      	movs	r3, #2
 80291b4:	e0b6      	b.n	8029324 <HAL_TIM_ConfigClockSource+0x18a>
 80291b6:	687b      	ldr	r3, [r7, #4]
 80291b8:	2201      	movs	r2, #1
 80291ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80291be:	687b      	ldr	r3, [r7, #4]
 80291c0:	2202      	movs	r2, #2
 80291c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80291c6:	687b      	ldr	r3, [r7, #4]
 80291c8:	681b      	ldr	r3, [r3, #0]
 80291ca:	689b      	ldr	r3, [r3, #8]
 80291cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80291ce:	68bb      	ldr	r3, [r7, #8]
 80291d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80291d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80291d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80291da:	68bb      	ldr	r3, [r7, #8]
 80291dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80291e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80291e2:	687b      	ldr	r3, [r7, #4]
 80291e4:	681b      	ldr	r3, [r3, #0]
 80291e6:	68ba      	ldr	r2, [r7, #8]
 80291e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80291ea:	683b      	ldr	r3, [r7, #0]
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80291f2:	d03e      	beq.n	8029272 <HAL_TIM_ConfigClockSource+0xd8>
 80291f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80291f8:	f200 8087 	bhi.w	802930a <HAL_TIM_ConfigClockSource+0x170>
 80291fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029200:	f000 8086 	beq.w	8029310 <HAL_TIM_ConfigClockSource+0x176>
 8029204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029208:	d87f      	bhi.n	802930a <HAL_TIM_ConfigClockSource+0x170>
 802920a:	2b70      	cmp	r3, #112	; 0x70
 802920c:	d01a      	beq.n	8029244 <HAL_TIM_ConfigClockSource+0xaa>
 802920e:	2b70      	cmp	r3, #112	; 0x70
 8029210:	d87b      	bhi.n	802930a <HAL_TIM_ConfigClockSource+0x170>
 8029212:	2b60      	cmp	r3, #96	; 0x60
 8029214:	d050      	beq.n	80292b8 <HAL_TIM_ConfigClockSource+0x11e>
 8029216:	2b60      	cmp	r3, #96	; 0x60
 8029218:	d877      	bhi.n	802930a <HAL_TIM_ConfigClockSource+0x170>
 802921a:	2b50      	cmp	r3, #80	; 0x50
 802921c:	d03c      	beq.n	8029298 <HAL_TIM_ConfigClockSource+0xfe>
 802921e:	2b50      	cmp	r3, #80	; 0x50
 8029220:	d873      	bhi.n	802930a <HAL_TIM_ConfigClockSource+0x170>
 8029222:	2b40      	cmp	r3, #64	; 0x40
 8029224:	d058      	beq.n	80292d8 <HAL_TIM_ConfigClockSource+0x13e>
 8029226:	2b40      	cmp	r3, #64	; 0x40
 8029228:	d86f      	bhi.n	802930a <HAL_TIM_ConfigClockSource+0x170>
 802922a:	2b30      	cmp	r3, #48	; 0x30
 802922c:	d064      	beq.n	80292f8 <HAL_TIM_ConfigClockSource+0x15e>
 802922e:	2b30      	cmp	r3, #48	; 0x30
 8029230:	d86b      	bhi.n	802930a <HAL_TIM_ConfigClockSource+0x170>
 8029232:	2b20      	cmp	r3, #32
 8029234:	d060      	beq.n	80292f8 <HAL_TIM_ConfigClockSource+0x15e>
 8029236:	2b20      	cmp	r3, #32
 8029238:	d867      	bhi.n	802930a <HAL_TIM_ConfigClockSource+0x170>
 802923a:	2b00      	cmp	r3, #0
 802923c:	d05c      	beq.n	80292f8 <HAL_TIM_ConfigClockSource+0x15e>
 802923e:	2b10      	cmp	r3, #16
 8029240:	d05a      	beq.n	80292f8 <HAL_TIM_ConfigClockSource+0x15e>
 8029242:	e062      	b.n	802930a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8029244:	687b      	ldr	r3, [r7, #4]
 8029246:	6818      	ldr	r0, [r3, #0]
 8029248:	683b      	ldr	r3, [r7, #0]
 802924a:	6899      	ldr	r1, [r3, #8]
 802924c:	683b      	ldr	r3, [r7, #0]
 802924e:	685a      	ldr	r2, [r3, #4]
 8029250:	683b      	ldr	r3, [r7, #0]
 8029252:	68db      	ldr	r3, [r3, #12]
 8029254:	f000 f9a6 	bl	80295a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8029258:	687b      	ldr	r3, [r7, #4]
 802925a:	681b      	ldr	r3, [r3, #0]
 802925c:	689b      	ldr	r3, [r3, #8]
 802925e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029260:	68bb      	ldr	r3, [r7, #8]
 8029262:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8029266:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8029268:	687b      	ldr	r3, [r7, #4]
 802926a:	681b      	ldr	r3, [r3, #0]
 802926c:	68ba      	ldr	r2, [r7, #8]
 802926e:	609a      	str	r2, [r3, #8]
      break;
 8029270:	e04f      	b.n	8029312 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8029272:	687b      	ldr	r3, [r7, #4]
 8029274:	6818      	ldr	r0, [r3, #0]
 8029276:	683b      	ldr	r3, [r7, #0]
 8029278:	6899      	ldr	r1, [r3, #8]
 802927a:	683b      	ldr	r3, [r7, #0]
 802927c:	685a      	ldr	r2, [r3, #4]
 802927e:	683b      	ldr	r3, [r7, #0]
 8029280:	68db      	ldr	r3, [r3, #12]
 8029282:	f000 f98f 	bl	80295a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8029286:	687b      	ldr	r3, [r7, #4]
 8029288:	681b      	ldr	r3, [r3, #0]
 802928a:	689a      	ldr	r2, [r3, #8]
 802928c:	687b      	ldr	r3, [r7, #4]
 802928e:	681b      	ldr	r3, [r3, #0]
 8029290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029294:	609a      	str	r2, [r3, #8]
      break;
 8029296:	e03c      	b.n	8029312 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8029298:	687b      	ldr	r3, [r7, #4]
 802929a:	6818      	ldr	r0, [r3, #0]
 802929c:	683b      	ldr	r3, [r7, #0]
 802929e:	6859      	ldr	r1, [r3, #4]
 80292a0:	683b      	ldr	r3, [r7, #0]
 80292a2:	68db      	ldr	r3, [r3, #12]
 80292a4:	461a      	mov	r2, r3
 80292a6:	f000 f903 	bl	80294b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80292aa:	687b      	ldr	r3, [r7, #4]
 80292ac:	681b      	ldr	r3, [r3, #0]
 80292ae:	2150      	movs	r1, #80	; 0x50
 80292b0:	4618      	mov	r0, r3
 80292b2:	f000 f95c 	bl	802956e <TIM_ITRx_SetConfig>
      break;
 80292b6:	e02c      	b.n	8029312 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80292b8:	687b      	ldr	r3, [r7, #4]
 80292ba:	6818      	ldr	r0, [r3, #0]
 80292bc:	683b      	ldr	r3, [r7, #0]
 80292be:	6859      	ldr	r1, [r3, #4]
 80292c0:	683b      	ldr	r3, [r7, #0]
 80292c2:	68db      	ldr	r3, [r3, #12]
 80292c4:	461a      	mov	r2, r3
 80292c6:	f000 f922 	bl	802950e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80292ca:	687b      	ldr	r3, [r7, #4]
 80292cc:	681b      	ldr	r3, [r3, #0]
 80292ce:	2160      	movs	r1, #96	; 0x60
 80292d0:	4618      	mov	r0, r3
 80292d2:	f000 f94c 	bl	802956e <TIM_ITRx_SetConfig>
      break;
 80292d6:	e01c      	b.n	8029312 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80292d8:	687b      	ldr	r3, [r7, #4]
 80292da:	6818      	ldr	r0, [r3, #0]
 80292dc:	683b      	ldr	r3, [r7, #0]
 80292de:	6859      	ldr	r1, [r3, #4]
 80292e0:	683b      	ldr	r3, [r7, #0]
 80292e2:	68db      	ldr	r3, [r3, #12]
 80292e4:	461a      	mov	r2, r3
 80292e6:	f000 f8e3 	bl	80294b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80292ea:	687b      	ldr	r3, [r7, #4]
 80292ec:	681b      	ldr	r3, [r3, #0]
 80292ee:	2140      	movs	r1, #64	; 0x40
 80292f0:	4618      	mov	r0, r3
 80292f2:	f000 f93c 	bl	802956e <TIM_ITRx_SetConfig>
      break;
 80292f6:	e00c      	b.n	8029312 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80292f8:	687b      	ldr	r3, [r7, #4]
 80292fa:	681a      	ldr	r2, [r3, #0]
 80292fc:	683b      	ldr	r3, [r7, #0]
 80292fe:	681b      	ldr	r3, [r3, #0]
 8029300:	4619      	mov	r1, r3
 8029302:	4610      	mov	r0, r2
 8029304:	f000 f933 	bl	802956e <TIM_ITRx_SetConfig>
      break;
 8029308:	e003      	b.n	8029312 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 802930a:	2301      	movs	r3, #1
 802930c:	73fb      	strb	r3, [r7, #15]
      break;
 802930e:	e000      	b.n	8029312 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8029310:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029312:	687b      	ldr	r3, [r7, #4]
 8029314:	2201      	movs	r2, #1
 8029316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802931a:	687b      	ldr	r3, [r7, #4]
 802931c:	2200      	movs	r2, #0
 802931e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8029322:	7bfb      	ldrb	r3, [r7, #15]
}
 8029324:	4618      	mov	r0, r3
 8029326:	3710      	adds	r7, #16
 8029328:	46bd      	mov	sp, r7
 802932a:	bd80      	pop	{r7, pc}

0802932c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802932c:	b480      	push	{r7}
 802932e:	b083      	sub	sp, #12
 8029330:	af00      	add	r7, sp, #0
 8029332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029334:	bf00      	nop
 8029336:	370c      	adds	r7, #12
 8029338:	46bd      	mov	sp, r7
 802933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802933e:	4770      	bx	lr

08029340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029340:	b480      	push	{r7}
 8029342:	b083      	sub	sp, #12
 8029344:	af00      	add	r7, sp, #0
 8029346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029348:	bf00      	nop
 802934a:	370c      	adds	r7, #12
 802934c:	46bd      	mov	sp, r7
 802934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029352:	4770      	bx	lr

08029354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029354:	b480      	push	{r7}
 8029356:	b083      	sub	sp, #12
 8029358:	af00      	add	r7, sp, #0
 802935a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802935c:	bf00      	nop
 802935e:	370c      	adds	r7, #12
 8029360:	46bd      	mov	sp, r7
 8029362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029366:	4770      	bx	lr

08029368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029368:	b480      	push	{r7}
 802936a:	b083      	sub	sp, #12
 802936c:	af00      	add	r7, sp, #0
 802936e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029370:	bf00      	nop
 8029372:	370c      	adds	r7, #12
 8029374:	46bd      	mov	sp, r7
 8029376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802937a:	4770      	bx	lr

0802937c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 802937c:	b480      	push	{r7}
 802937e:	b085      	sub	sp, #20
 8029380:	af00      	add	r7, sp, #0
 8029382:	6078      	str	r0, [r7, #4]
 8029384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029386:	687b      	ldr	r3, [r7, #4]
 8029388:	681b      	ldr	r3, [r3, #0]
 802938a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802938c:	687b      	ldr	r3, [r7, #4]
 802938e:	4a40      	ldr	r2, [pc, #256]	; (8029490 <TIM_Base_SetConfig+0x114>)
 8029390:	4293      	cmp	r3, r2
 8029392:	d013      	beq.n	80293bc <TIM_Base_SetConfig+0x40>
 8029394:	687b      	ldr	r3, [r7, #4]
 8029396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802939a:	d00f      	beq.n	80293bc <TIM_Base_SetConfig+0x40>
 802939c:	687b      	ldr	r3, [r7, #4]
 802939e:	4a3d      	ldr	r2, [pc, #244]	; (8029494 <TIM_Base_SetConfig+0x118>)
 80293a0:	4293      	cmp	r3, r2
 80293a2:	d00b      	beq.n	80293bc <TIM_Base_SetConfig+0x40>
 80293a4:	687b      	ldr	r3, [r7, #4]
 80293a6:	4a3c      	ldr	r2, [pc, #240]	; (8029498 <TIM_Base_SetConfig+0x11c>)
 80293a8:	4293      	cmp	r3, r2
 80293aa:	d007      	beq.n	80293bc <TIM_Base_SetConfig+0x40>
 80293ac:	687b      	ldr	r3, [r7, #4]
 80293ae:	4a3b      	ldr	r2, [pc, #236]	; (802949c <TIM_Base_SetConfig+0x120>)
 80293b0:	4293      	cmp	r3, r2
 80293b2:	d003      	beq.n	80293bc <TIM_Base_SetConfig+0x40>
 80293b4:	687b      	ldr	r3, [r7, #4]
 80293b6:	4a3a      	ldr	r2, [pc, #232]	; (80294a0 <TIM_Base_SetConfig+0x124>)
 80293b8:	4293      	cmp	r3, r2
 80293ba:	d108      	bne.n	80293ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80293bc:	68fb      	ldr	r3, [r7, #12]
 80293be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80293c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80293c4:	683b      	ldr	r3, [r7, #0]
 80293c6:	685b      	ldr	r3, [r3, #4]
 80293c8:	68fa      	ldr	r2, [r7, #12]
 80293ca:	4313      	orrs	r3, r2
 80293cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80293ce:	687b      	ldr	r3, [r7, #4]
 80293d0:	4a2f      	ldr	r2, [pc, #188]	; (8029490 <TIM_Base_SetConfig+0x114>)
 80293d2:	4293      	cmp	r3, r2
 80293d4:	d01f      	beq.n	8029416 <TIM_Base_SetConfig+0x9a>
 80293d6:	687b      	ldr	r3, [r7, #4]
 80293d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80293dc:	d01b      	beq.n	8029416 <TIM_Base_SetConfig+0x9a>
 80293de:	687b      	ldr	r3, [r7, #4]
 80293e0:	4a2c      	ldr	r2, [pc, #176]	; (8029494 <TIM_Base_SetConfig+0x118>)
 80293e2:	4293      	cmp	r3, r2
 80293e4:	d017      	beq.n	8029416 <TIM_Base_SetConfig+0x9a>
 80293e6:	687b      	ldr	r3, [r7, #4]
 80293e8:	4a2b      	ldr	r2, [pc, #172]	; (8029498 <TIM_Base_SetConfig+0x11c>)
 80293ea:	4293      	cmp	r3, r2
 80293ec:	d013      	beq.n	8029416 <TIM_Base_SetConfig+0x9a>
 80293ee:	687b      	ldr	r3, [r7, #4]
 80293f0:	4a2a      	ldr	r2, [pc, #168]	; (802949c <TIM_Base_SetConfig+0x120>)
 80293f2:	4293      	cmp	r3, r2
 80293f4:	d00f      	beq.n	8029416 <TIM_Base_SetConfig+0x9a>
 80293f6:	687b      	ldr	r3, [r7, #4]
 80293f8:	4a29      	ldr	r2, [pc, #164]	; (80294a0 <TIM_Base_SetConfig+0x124>)
 80293fa:	4293      	cmp	r3, r2
 80293fc:	d00b      	beq.n	8029416 <TIM_Base_SetConfig+0x9a>
 80293fe:	687b      	ldr	r3, [r7, #4]
 8029400:	4a28      	ldr	r2, [pc, #160]	; (80294a4 <TIM_Base_SetConfig+0x128>)
 8029402:	4293      	cmp	r3, r2
 8029404:	d007      	beq.n	8029416 <TIM_Base_SetConfig+0x9a>
 8029406:	687b      	ldr	r3, [r7, #4]
 8029408:	4a27      	ldr	r2, [pc, #156]	; (80294a8 <TIM_Base_SetConfig+0x12c>)
 802940a:	4293      	cmp	r3, r2
 802940c:	d003      	beq.n	8029416 <TIM_Base_SetConfig+0x9a>
 802940e:	687b      	ldr	r3, [r7, #4]
 8029410:	4a26      	ldr	r2, [pc, #152]	; (80294ac <TIM_Base_SetConfig+0x130>)
 8029412:	4293      	cmp	r3, r2
 8029414:	d108      	bne.n	8029428 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029416:	68fb      	ldr	r3, [r7, #12]
 8029418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802941c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802941e:	683b      	ldr	r3, [r7, #0]
 8029420:	68db      	ldr	r3, [r3, #12]
 8029422:	68fa      	ldr	r2, [r7, #12]
 8029424:	4313      	orrs	r3, r2
 8029426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029428:	68fb      	ldr	r3, [r7, #12]
 802942a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802942e:	683b      	ldr	r3, [r7, #0]
 8029430:	695b      	ldr	r3, [r3, #20]
 8029432:	4313      	orrs	r3, r2
 8029434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029436:	687b      	ldr	r3, [r7, #4]
 8029438:	68fa      	ldr	r2, [r7, #12]
 802943a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802943c:	683b      	ldr	r3, [r7, #0]
 802943e:	689a      	ldr	r2, [r3, #8]
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029444:	683b      	ldr	r3, [r7, #0]
 8029446:	681a      	ldr	r2, [r3, #0]
 8029448:	687b      	ldr	r3, [r7, #4]
 802944a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802944c:	687b      	ldr	r3, [r7, #4]
 802944e:	4a10      	ldr	r2, [pc, #64]	; (8029490 <TIM_Base_SetConfig+0x114>)
 8029450:	4293      	cmp	r3, r2
 8029452:	d00f      	beq.n	8029474 <TIM_Base_SetConfig+0xf8>
 8029454:	687b      	ldr	r3, [r7, #4]
 8029456:	4a12      	ldr	r2, [pc, #72]	; (80294a0 <TIM_Base_SetConfig+0x124>)
 8029458:	4293      	cmp	r3, r2
 802945a:	d00b      	beq.n	8029474 <TIM_Base_SetConfig+0xf8>
 802945c:	687b      	ldr	r3, [r7, #4]
 802945e:	4a11      	ldr	r2, [pc, #68]	; (80294a4 <TIM_Base_SetConfig+0x128>)
 8029460:	4293      	cmp	r3, r2
 8029462:	d007      	beq.n	8029474 <TIM_Base_SetConfig+0xf8>
 8029464:	687b      	ldr	r3, [r7, #4]
 8029466:	4a10      	ldr	r2, [pc, #64]	; (80294a8 <TIM_Base_SetConfig+0x12c>)
 8029468:	4293      	cmp	r3, r2
 802946a:	d003      	beq.n	8029474 <TIM_Base_SetConfig+0xf8>
 802946c:	687b      	ldr	r3, [r7, #4]
 802946e:	4a0f      	ldr	r2, [pc, #60]	; (80294ac <TIM_Base_SetConfig+0x130>)
 8029470:	4293      	cmp	r3, r2
 8029472:	d103      	bne.n	802947c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029474:	683b      	ldr	r3, [r7, #0]
 8029476:	691a      	ldr	r2, [r3, #16]
 8029478:	687b      	ldr	r3, [r7, #4]
 802947a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802947c:	687b      	ldr	r3, [r7, #4]
 802947e:	2201      	movs	r2, #1
 8029480:	615a      	str	r2, [r3, #20]
}
 8029482:	bf00      	nop
 8029484:	3714      	adds	r7, #20
 8029486:	46bd      	mov	sp, r7
 8029488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802948c:	4770      	bx	lr
 802948e:	bf00      	nop
 8029490:	40012c00 	.word	0x40012c00
 8029494:	40000400 	.word	0x40000400
 8029498:	40000800 	.word	0x40000800
 802949c:	40000c00 	.word	0x40000c00
 80294a0:	40013400 	.word	0x40013400
 80294a4:	40014000 	.word	0x40014000
 80294a8:	40014400 	.word	0x40014400
 80294ac:	40014800 	.word	0x40014800

080294b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80294b0:	b480      	push	{r7}
 80294b2:	b087      	sub	sp, #28
 80294b4:	af00      	add	r7, sp, #0
 80294b6:	60f8      	str	r0, [r7, #12]
 80294b8:	60b9      	str	r1, [r7, #8]
 80294ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80294bc:	68fb      	ldr	r3, [r7, #12]
 80294be:	6a1b      	ldr	r3, [r3, #32]
 80294c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80294c2:	68fb      	ldr	r3, [r7, #12]
 80294c4:	6a1b      	ldr	r3, [r3, #32]
 80294c6:	f023 0201 	bic.w	r2, r3, #1
 80294ca:	68fb      	ldr	r3, [r7, #12]
 80294cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80294ce:	68fb      	ldr	r3, [r7, #12]
 80294d0:	699b      	ldr	r3, [r3, #24]
 80294d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80294d4:	693b      	ldr	r3, [r7, #16]
 80294d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80294da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80294dc:	687b      	ldr	r3, [r7, #4]
 80294de:	011b      	lsls	r3, r3, #4
 80294e0:	693a      	ldr	r2, [r7, #16]
 80294e2:	4313      	orrs	r3, r2
 80294e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80294e6:	697b      	ldr	r3, [r7, #20]
 80294e8:	f023 030a 	bic.w	r3, r3, #10
 80294ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80294ee:	697a      	ldr	r2, [r7, #20]
 80294f0:	68bb      	ldr	r3, [r7, #8]
 80294f2:	4313      	orrs	r3, r2
 80294f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80294f6:	68fb      	ldr	r3, [r7, #12]
 80294f8:	693a      	ldr	r2, [r7, #16]
 80294fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80294fc:	68fb      	ldr	r3, [r7, #12]
 80294fe:	697a      	ldr	r2, [r7, #20]
 8029500:	621a      	str	r2, [r3, #32]
}
 8029502:	bf00      	nop
 8029504:	371c      	adds	r7, #28
 8029506:	46bd      	mov	sp, r7
 8029508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802950c:	4770      	bx	lr

0802950e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802950e:	b480      	push	{r7}
 8029510:	b087      	sub	sp, #28
 8029512:	af00      	add	r7, sp, #0
 8029514:	60f8      	str	r0, [r7, #12]
 8029516:	60b9      	str	r1, [r7, #8]
 8029518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802951a:	68fb      	ldr	r3, [r7, #12]
 802951c:	6a1b      	ldr	r3, [r3, #32]
 802951e:	f023 0210 	bic.w	r2, r3, #16
 8029522:	68fb      	ldr	r3, [r7, #12]
 8029524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029526:	68fb      	ldr	r3, [r7, #12]
 8029528:	699b      	ldr	r3, [r3, #24]
 802952a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802952c:	68fb      	ldr	r3, [r7, #12]
 802952e:	6a1b      	ldr	r3, [r3, #32]
 8029530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029532:	697b      	ldr	r3, [r7, #20]
 8029534:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802953a:	687b      	ldr	r3, [r7, #4]
 802953c:	031b      	lsls	r3, r3, #12
 802953e:	697a      	ldr	r2, [r7, #20]
 8029540:	4313      	orrs	r3, r2
 8029542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8029544:	693b      	ldr	r3, [r7, #16]
 8029546:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802954a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802954c:	68bb      	ldr	r3, [r7, #8]
 802954e:	011b      	lsls	r3, r3, #4
 8029550:	693a      	ldr	r2, [r7, #16]
 8029552:	4313      	orrs	r3, r2
 8029554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8029556:	68fb      	ldr	r3, [r7, #12]
 8029558:	697a      	ldr	r2, [r7, #20]
 802955a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802955c:	68fb      	ldr	r3, [r7, #12]
 802955e:	693a      	ldr	r2, [r7, #16]
 8029560:	621a      	str	r2, [r3, #32]
}
 8029562:	bf00      	nop
 8029564:	371c      	adds	r7, #28
 8029566:	46bd      	mov	sp, r7
 8029568:	f85d 7b04 	ldr.w	r7, [sp], #4
 802956c:	4770      	bx	lr

0802956e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802956e:	b480      	push	{r7}
 8029570:	b085      	sub	sp, #20
 8029572:	af00      	add	r7, sp, #0
 8029574:	6078      	str	r0, [r7, #4]
 8029576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8029578:	687b      	ldr	r3, [r7, #4]
 802957a:	689b      	ldr	r3, [r3, #8]
 802957c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802957e:	68fb      	ldr	r3, [r7, #12]
 8029580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8029586:	683a      	ldr	r2, [r7, #0]
 8029588:	68fb      	ldr	r3, [r7, #12]
 802958a:	4313      	orrs	r3, r2
 802958c:	f043 0307 	orr.w	r3, r3, #7
 8029590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029592:	687b      	ldr	r3, [r7, #4]
 8029594:	68fa      	ldr	r2, [r7, #12]
 8029596:	609a      	str	r2, [r3, #8]
}
 8029598:	bf00      	nop
 802959a:	3714      	adds	r7, #20
 802959c:	46bd      	mov	sp, r7
 802959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295a2:	4770      	bx	lr

080295a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80295a4:	b480      	push	{r7}
 80295a6:	b087      	sub	sp, #28
 80295a8:	af00      	add	r7, sp, #0
 80295aa:	60f8      	str	r0, [r7, #12]
 80295ac:	60b9      	str	r1, [r7, #8]
 80295ae:	607a      	str	r2, [r7, #4]
 80295b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80295b2:	68fb      	ldr	r3, [r7, #12]
 80295b4:	689b      	ldr	r3, [r3, #8]
 80295b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80295b8:	697b      	ldr	r3, [r7, #20]
 80295ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80295be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80295c0:	683b      	ldr	r3, [r7, #0]
 80295c2:	021a      	lsls	r2, r3, #8
 80295c4:	687b      	ldr	r3, [r7, #4]
 80295c6:	431a      	orrs	r2, r3
 80295c8:	68bb      	ldr	r3, [r7, #8]
 80295ca:	4313      	orrs	r3, r2
 80295cc:	697a      	ldr	r2, [r7, #20]
 80295ce:	4313      	orrs	r3, r2
 80295d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80295d2:	68fb      	ldr	r3, [r7, #12]
 80295d4:	697a      	ldr	r2, [r7, #20]
 80295d6:	609a      	str	r2, [r3, #8]
}
 80295d8:	bf00      	nop
 80295da:	371c      	adds	r7, #28
 80295dc:	46bd      	mov	sp, r7
 80295de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295e2:	4770      	bx	lr

080295e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80295e4:	b480      	push	{r7}
 80295e6:	b085      	sub	sp, #20
 80295e8:	af00      	add	r7, sp, #0
 80295ea:	6078      	str	r0, [r7, #4]
 80295ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80295ee:	687b      	ldr	r3, [r7, #4]
 80295f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80295f4:	2b01      	cmp	r3, #1
 80295f6:	d101      	bne.n	80295fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80295f8:	2302      	movs	r3, #2
 80295fa:	e068      	b.n	80296ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80295fc:	687b      	ldr	r3, [r7, #4]
 80295fe:	2201      	movs	r2, #1
 8029600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029604:	687b      	ldr	r3, [r7, #4]
 8029606:	2202      	movs	r2, #2
 8029608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	681b      	ldr	r3, [r3, #0]
 8029610:	685b      	ldr	r3, [r3, #4]
 8029612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029614:	687b      	ldr	r3, [r7, #4]
 8029616:	681b      	ldr	r3, [r3, #0]
 8029618:	689b      	ldr	r3, [r3, #8]
 802961a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 802961c:	687b      	ldr	r3, [r7, #4]
 802961e:	681b      	ldr	r3, [r3, #0]
 8029620:	4a2e      	ldr	r2, [pc, #184]	; (80296dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8029622:	4293      	cmp	r3, r2
 8029624:	d004      	beq.n	8029630 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8029626:	687b      	ldr	r3, [r7, #4]
 8029628:	681b      	ldr	r3, [r3, #0]
 802962a:	4a2d      	ldr	r2, [pc, #180]	; (80296e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 802962c:	4293      	cmp	r3, r2
 802962e:	d108      	bne.n	8029642 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8029630:	68fb      	ldr	r3, [r7, #12]
 8029632:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8029636:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8029638:	683b      	ldr	r3, [r7, #0]
 802963a:	685b      	ldr	r3, [r3, #4]
 802963c:	68fa      	ldr	r2, [r7, #12]
 802963e:	4313      	orrs	r3, r2
 8029640:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8029642:	68fb      	ldr	r3, [r7, #12]
 8029644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029648:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802964a:	683b      	ldr	r3, [r7, #0]
 802964c:	681b      	ldr	r3, [r3, #0]
 802964e:	68fa      	ldr	r2, [r7, #12]
 8029650:	4313      	orrs	r3, r2
 8029652:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8029654:	687b      	ldr	r3, [r7, #4]
 8029656:	681b      	ldr	r3, [r3, #0]
 8029658:	68fa      	ldr	r2, [r7, #12]
 802965a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802965c:	687b      	ldr	r3, [r7, #4]
 802965e:	681b      	ldr	r3, [r3, #0]
 8029660:	4a1e      	ldr	r2, [pc, #120]	; (80296dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8029662:	4293      	cmp	r3, r2
 8029664:	d01d      	beq.n	80296a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8029666:	687b      	ldr	r3, [r7, #4]
 8029668:	681b      	ldr	r3, [r3, #0]
 802966a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802966e:	d018      	beq.n	80296a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8029670:	687b      	ldr	r3, [r7, #4]
 8029672:	681b      	ldr	r3, [r3, #0]
 8029674:	4a1b      	ldr	r2, [pc, #108]	; (80296e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8029676:	4293      	cmp	r3, r2
 8029678:	d013      	beq.n	80296a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 802967a:	687b      	ldr	r3, [r7, #4]
 802967c:	681b      	ldr	r3, [r3, #0]
 802967e:	4a1a      	ldr	r2, [pc, #104]	; (80296e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8029680:	4293      	cmp	r3, r2
 8029682:	d00e      	beq.n	80296a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8029684:	687b      	ldr	r3, [r7, #4]
 8029686:	681b      	ldr	r3, [r3, #0]
 8029688:	4a18      	ldr	r2, [pc, #96]	; (80296ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802968a:	4293      	cmp	r3, r2
 802968c:	d009      	beq.n	80296a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 802968e:	687b      	ldr	r3, [r7, #4]
 8029690:	681b      	ldr	r3, [r3, #0]
 8029692:	4a13      	ldr	r2, [pc, #76]	; (80296e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8029694:	4293      	cmp	r3, r2
 8029696:	d004      	beq.n	80296a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8029698:	687b      	ldr	r3, [r7, #4]
 802969a:	681b      	ldr	r3, [r3, #0]
 802969c:	4a14      	ldr	r2, [pc, #80]	; (80296f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 802969e:	4293      	cmp	r3, r2
 80296a0:	d10c      	bne.n	80296bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80296a2:	68bb      	ldr	r3, [r7, #8]
 80296a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80296a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80296aa:	683b      	ldr	r3, [r7, #0]
 80296ac:	689b      	ldr	r3, [r3, #8]
 80296ae:	68ba      	ldr	r2, [r7, #8]
 80296b0:	4313      	orrs	r3, r2
 80296b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80296b4:	687b      	ldr	r3, [r7, #4]
 80296b6:	681b      	ldr	r3, [r3, #0]
 80296b8:	68ba      	ldr	r2, [r7, #8]
 80296ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80296bc:	687b      	ldr	r3, [r7, #4]
 80296be:	2201      	movs	r2, #1
 80296c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80296c4:	687b      	ldr	r3, [r7, #4]
 80296c6:	2200      	movs	r2, #0
 80296c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80296cc:	2300      	movs	r3, #0
}
 80296ce:	4618      	mov	r0, r3
 80296d0:	3714      	adds	r7, #20
 80296d2:	46bd      	mov	sp, r7
 80296d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296d8:	4770      	bx	lr
 80296da:	bf00      	nop
 80296dc:	40012c00 	.word	0x40012c00
 80296e0:	40013400 	.word	0x40013400
 80296e4:	40000400 	.word	0x40000400
 80296e8:	40000800 	.word	0x40000800
 80296ec:	40000c00 	.word	0x40000c00
 80296f0:	40014000 	.word	0x40014000

080296f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80296f4:	b480      	push	{r7}
 80296f6:	b083      	sub	sp, #12
 80296f8:	af00      	add	r7, sp, #0
 80296fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80296fc:	bf00      	nop
 80296fe:	370c      	adds	r7, #12
 8029700:	46bd      	mov	sp, r7
 8029702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029706:	4770      	bx	lr

08029708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029708:	b480      	push	{r7}
 802970a:	b083      	sub	sp, #12
 802970c:	af00      	add	r7, sp, #0
 802970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8029710:	bf00      	nop
 8029712:	370c      	adds	r7, #12
 8029714:	46bd      	mov	sp, r7
 8029716:	f85d 7b04 	ldr.w	r7, [sp], #4
 802971a:	4770      	bx	lr

0802971c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 802971c:	b480      	push	{r7}
 802971e:	b083      	sub	sp, #12
 8029720:	af00      	add	r7, sp, #0
 8029722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8029724:	bf00      	nop
 8029726:	370c      	adds	r7, #12
 8029728:	46bd      	mov	sp, r7
 802972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802972e:	4770      	bx	lr

08029730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8029730:	b580      	push	{r7, lr}
 8029732:	b082      	sub	sp, #8
 8029734:	af00      	add	r7, sp, #0
 8029736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8029738:	687b      	ldr	r3, [r7, #4]
 802973a:	2b00      	cmp	r3, #0
 802973c:	d101      	bne.n	8029742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802973e:	2301      	movs	r3, #1
 8029740:	e042      	b.n	80297c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8029742:	687b      	ldr	r3, [r7, #4]
 8029744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8029748:	2b00      	cmp	r3, #0
 802974a:	d106      	bne.n	802975a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802974c:	687b      	ldr	r3, [r7, #4]
 802974e:	2200      	movs	r2, #0
 8029750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8029754:	6878      	ldr	r0, [r7, #4]
 8029756:	f7fa f995 	bl	8023a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802975a:	687b      	ldr	r3, [r7, #4]
 802975c:	2224      	movs	r2, #36	; 0x24
 802975e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8029762:	687b      	ldr	r3, [r7, #4]
 8029764:	681b      	ldr	r3, [r3, #0]
 8029766:	681a      	ldr	r2, [r3, #0]
 8029768:	687b      	ldr	r3, [r7, #4]
 802976a:	681b      	ldr	r3, [r3, #0]
 802976c:	f022 0201 	bic.w	r2, r2, #1
 8029770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8029772:	6878      	ldr	r0, [r7, #4]
 8029774:	f000 f82c 	bl	80297d0 <UART_SetConfig>
 8029778:	4603      	mov	r3, r0
 802977a:	2b01      	cmp	r3, #1
 802977c:	d101      	bne.n	8029782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 802977e:	2301      	movs	r3, #1
 8029780:	e022      	b.n	80297c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8029782:	687b      	ldr	r3, [r7, #4]
 8029784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029786:	2b00      	cmp	r3, #0
 8029788:	d002      	beq.n	8029790 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 802978a:	6878      	ldr	r0, [r7, #4]
 802978c:	f000 fb1c 	bl	8029dc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8029790:	687b      	ldr	r3, [r7, #4]
 8029792:	681b      	ldr	r3, [r3, #0]
 8029794:	685a      	ldr	r2, [r3, #4]
 8029796:	687b      	ldr	r3, [r7, #4]
 8029798:	681b      	ldr	r3, [r3, #0]
 802979a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802979e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80297a0:	687b      	ldr	r3, [r7, #4]
 80297a2:	681b      	ldr	r3, [r3, #0]
 80297a4:	689a      	ldr	r2, [r3, #8]
 80297a6:	687b      	ldr	r3, [r7, #4]
 80297a8:	681b      	ldr	r3, [r3, #0]
 80297aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80297ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80297b0:	687b      	ldr	r3, [r7, #4]
 80297b2:	681b      	ldr	r3, [r3, #0]
 80297b4:	681a      	ldr	r2, [r3, #0]
 80297b6:	687b      	ldr	r3, [r7, #4]
 80297b8:	681b      	ldr	r3, [r3, #0]
 80297ba:	f042 0201 	orr.w	r2, r2, #1
 80297be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80297c0:	6878      	ldr	r0, [r7, #4]
 80297c2:	f000 fba3 	bl	8029f0c <UART_CheckIdleState>
 80297c6:	4603      	mov	r3, r0
}
 80297c8:	4618      	mov	r0, r3
 80297ca:	3708      	adds	r7, #8
 80297cc:	46bd      	mov	sp, r7
 80297ce:	bd80      	pop	{r7, pc}

080297d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80297d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80297d4:	b08c      	sub	sp, #48	; 0x30
 80297d6:	af00      	add	r7, sp, #0
 80297d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80297da:	2300      	movs	r3, #0
 80297dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80297e0:	697b      	ldr	r3, [r7, #20]
 80297e2:	689a      	ldr	r2, [r3, #8]
 80297e4:	697b      	ldr	r3, [r7, #20]
 80297e6:	691b      	ldr	r3, [r3, #16]
 80297e8:	431a      	orrs	r2, r3
 80297ea:	697b      	ldr	r3, [r7, #20]
 80297ec:	695b      	ldr	r3, [r3, #20]
 80297ee:	431a      	orrs	r2, r3
 80297f0:	697b      	ldr	r3, [r7, #20]
 80297f2:	69db      	ldr	r3, [r3, #28]
 80297f4:	4313      	orrs	r3, r2
 80297f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80297f8:	697b      	ldr	r3, [r7, #20]
 80297fa:	681b      	ldr	r3, [r3, #0]
 80297fc:	681a      	ldr	r2, [r3, #0]
 80297fe:	4baa      	ldr	r3, [pc, #680]	; (8029aa8 <UART_SetConfig+0x2d8>)
 8029800:	4013      	ands	r3, r2
 8029802:	697a      	ldr	r2, [r7, #20]
 8029804:	6812      	ldr	r2, [r2, #0]
 8029806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029808:	430b      	orrs	r3, r1
 802980a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802980c:	697b      	ldr	r3, [r7, #20]
 802980e:	681b      	ldr	r3, [r3, #0]
 8029810:	685b      	ldr	r3, [r3, #4]
 8029812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8029816:	697b      	ldr	r3, [r7, #20]
 8029818:	68da      	ldr	r2, [r3, #12]
 802981a:	697b      	ldr	r3, [r7, #20]
 802981c:	681b      	ldr	r3, [r3, #0]
 802981e:	430a      	orrs	r2, r1
 8029820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8029822:	697b      	ldr	r3, [r7, #20]
 8029824:	699b      	ldr	r3, [r3, #24]
 8029826:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8029828:	697b      	ldr	r3, [r7, #20]
 802982a:	681b      	ldr	r3, [r3, #0]
 802982c:	4a9f      	ldr	r2, [pc, #636]	; (8029aac <UART_SetConfig+0x2dc>)
 802982e:	4293      	cmp	r3, r2
 8029830:	d004      	beq.n	802983c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8029832:	697b      	ldr	r3, [r7, #20]
 8029834:	6a1b      	ldr	r3, [r3, #32]
 8029836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029838:	4313      	orrs	r3, r2
 802983a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802983c:	697b      	ldr	r3, [r7, #20]
 802983e:	681b      	ldr	r3, [r3, #0]
 8029840:	689b      	ldr	r3, [r3, #8]
 8029842:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8029846:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 802984a:	697a      	ldr	r2, [r7, #20]
 802984c:	6812      	ldr	r2, [r2, #0]
 802984e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029850:	430b      	orrs	r3, r1
 8029852:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8029854:	697b      	ldr	r3, [r7, #20]
 8029856:	681b      	ldr	r3, [r3, #0]
 8029858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802985a:	f023 010f 	bic.w	r1, r3, #15
 802985e:	697b      	ldr	r3, [r7, #20]
 8029860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8029862:	697b      	ldr	r3, [r7, #20]
 8029864:	681b      	ldr	r3, [r3, #0]
 8029866:	430a      	orrs	r2, r1
 8029868:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802986a:	697b      	ldr	r3, [r7, #20]
 802986c:	681b      	ldr	r3, [r3, #0]
 802986e:	4a90      	ldr	r2, [pc, #576]	; (8029ab0 <UART_SetConfig+0x2e0>)
 8029870:	4293      	cmp	r3, r2
 8029872:	d125      	bne.n	80298c0 <UART_SetConfig+0xf0>
 8029874:	4b8f      	ldr	r3, [pc, #572]	; (8029ab4 <UART_SetConfig+0x2e4>)
 8029876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802987a:	f003 0303 	and.w	r3, r3, #3
 802987e:	2b03      	cmp	r3, #3
 8029880:	d81a      	bhi.n	80298b8 <UART_SetConfig+0xe8>
 8029882:	a201      	add	r2, pc, #4	; (adr r2, 8029888 <UART_SetConfig+0xb8>)
 8029884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029888:	08029899 	.word	0x08029899
 802988c:	080298a9 	.word	0x080298a9
 8029890:	080298a1 	.word	0x080298a1
 8029894:	080298b1 	.word	0x080298b1
 8029898:	2301      	movs	r3, #1
 802989a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802989e:	e116      	b.n	8029ace <UART_SetConfig+0x2fe>
 80298a0:	2302      	movs	r3, #2
 80298a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80298a6:	e112      	b.n	8029ace <UART_SetConfig+0x2fe>
 80298a8:	2304      	movs	r3, #4
 80298aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80298ae:	e10e      	b.n	8029ace <UART_SetConfig+0x2fe>
 80298b0:	2308      	movs	r3, #8
 80298b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80298b6:	e10a      	b.n	8029ace <UART_SetConfig+0x2fe>
 80298b8:	2310      	movs	r3, #16
 80298ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80298be:	e106      	b.n	8029ace <UART_SetConfig+0x2fe>
 80298c0:	697b      	ldr	r3, [r7, #20]
 80298c2:	681b      	ldr	r3, [r3, #0]
 80298c4:	4a7c      	ldr	r2, [pc, #496]	; (8029ab8 <UART_SetConfig+0x2e8>)
 80298c6:	4293      	cmp	r3, r2
 80298c8:	d138      	bne.n	802993c <UART_SetConfig+0x16c>
 80298ca:	4b7a      	ldr	r3, [pc, #488]	; (8029ab4 <UART_SetConfig+0x2e4>)
 80298cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80298d0:	f003 030c 	and.w	r3, r3, #12
 80298d4:	2b0c      	cmp	r3, #12
 80298d6:	d82d      	bhi.n	8029934 <UART_SetConfig+0x164>
 80298d8:	a201      	add	r2, pc, #4	; (adr r2, 80298e0 <UART_SetConfig+0x110>)
 80298da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80298de:	bf00      	nop
 80298e0:	08029915 	.word	0x08029915
 80298e4:	08029935 	.word	0x08029935
 80298e8:	08029935 	.word	0x08029935
 80298ec:	08029935 	.word	0x08029935
 80298f0:	08029925 	.word	0x08029925
 80298f4:	08029935 	.word	0x08029935
 80298f8:	08029935 	.word	0x08029935
 80298fc:	08029935 	.word	0x08029935
 8029900:	0802991d 	.word	0x0802991d
 8029904:	08029935 	.word	0x08029935
 8029908:	08029935 	.word	0x08029935
 802990c:	08029935 	.word	0x08029935
 8029910:	0802992d 	.word	0x0802992d
 8029914:	2300      	movs	r3, #0
 8029916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802991a:	e0d8      	b.n	8029ace <UART_SetConfig+0x2fe>
 802991c:	2302      	movs	r3, #2
 802991e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029922:	e0d4      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029924:	2304      	movs	r3, #4
 8029926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802992a:	e0d0      	b.n	8029ace <UART_SetConfig+0x2fe>
 802992c:	2308      	movs	r3, #8
 802992e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029932:	e0cc      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029934:	2310      	movs	r3, #16
 8029936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802993a:	e0c8      	b.n	8029ace <UART_SetConfig+0x2fe>
 802993c:	697b      	ldr	r3, [r7, #20]
 802993e:	681b      	ldr	r3, [r3, #0]
 8029940:	4a5e      	ldr	r2, [pc, #376]	; (8029abc <UART_SetConfig+0x2ec>)
 8029942:	4293      	cmp	r3, r2
 8029944:	d125      	bne.n	8029992 <UART_SetConfig+0x1c2>
 8029946:	4b5b      	ldr	r3, [pc, #364]	; (8029ab4 <UART_SetConfig+0x2e4>)
 8029948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802994c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8029950:	2b30      	cmp	r3, #48	; 0x30
 8029952:	d016      	beq.n	8029982 <UART_SetConfig+0x1b2>
 8029954:	2b30      	cmp	r3, #48	; 0x30
 8029956:	d818      	bhi.n	802998a <UART_SetConfig+0x1ba>
 8029958:	2b20      	cmp	r3, #32
 802995a:	d00a      	beq.n	8029972 <UART_SetConfig+0x1a2>
 802995c:	2b20      	cmp	r3, #32
 802995e:	d814      	bhi.n	802998a <UART_SetConfig+0x1ba>
 8029960:	2b00      	cmp	r3, #0
 8029962:	d002      	beq.n	802996a <UART_SetConfig+0x19a>
 8029964:	2b10      	cmp	r3, #16
 8029966:	d008      	beq.n	802997a <UART_SetConfig+0x1aa>
 8029968:	e00f      	b.n	802998a <UART_SetConfig+0x1ba>
 802996a:	2300      	movs	r3, #0
 802996c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029970:	e0ad      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029972:	2302      	movs	r3, #2
 8029974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029978:	e0a9      	b.n	8029ace <UART_SetConfig+0x2fe>
 802997a:	2304      	movs	r3, #4
 802997c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029980:	e0a5      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029982:	2308      	movs	r3, #8
 8029984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029988:	e0a1      	b.n	8029ace <UART_SetConfig+0x2fe>
 802998a:	2310      	movs	r3, #16
 802998c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029990:	e09d      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029992:	697b      	ldr	r3, [r7, #20]
 8029994:	681b      	ldr	r3, [r3, #0]
 8029996:	4a4a      	ldr	r2, [pc, #296]	; (8029ac0 <UART_SetConfig+0x2f0>)
 8029998:	4293      	cmp	r3, r2
 802999a:	d125      	bne.n	80299e8 <UART_SetConfig+0x218>
 802999c:	4b45      	ldr	r3, [pc, #276]	; (8029ab4 <UART_SetConfig+0x2e4>)
 802999e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80299a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80299a6:	2bc0      	cmp	r3, #192	; 0xc0
 80299a8:	d016      	beq.n	80299d8 <UART_SetConfig+0x208>
 80299aa:	2bc0      	cmp	r3, #192	; 0xc0
 80299ac:	d818      	bhi.n	80299e0 <UART_SetConfig+0x210>
 80299ae:	2b80      	cmp	r3, #128	; 0x80
 80299b0:	d00a      	beq.n	80299c8 <UART_SetConfig+0x1f8>
 80299b2:	2b80      	cmp	r3, #128	; 0x80
 80299b4:	d814      	bhi.n	80299e0 <UART_SetConfig+0x210>
 80299b6:	2b00      	cmp	r3, #0
 80299b8:	d002      	beq.n	80299c0 <UART_SetConfig+0x1f0>
 80299ba:	2b40      	cmp	r3, #64	; 0x40
 80299bc:	d008      	beq.n	80299d0 <UART_SetConfig+0x200>
 80299be:	e00f      	b.n	80299e0 <UART_SetConfig+0x210>
 80299c0:	2300      	movs	r3, #0
 80299c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299c6:	e082      	b.n	8029ace <UART_SetConfig+0x2fe>
 80299c8:	2302      	movs	r3, #2
 80299ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299ce:	e07e      	b.n	8029ace <UART_SetConfig+0x2fe>
 80299d0:	2304      	movs	r3, #4
 80299d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299d6:	e07a      	b.n	8029ace <UART_SetConfig+0x2fe>
 80299d8:	2308      	movs	r3, #8
 80299da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299de:	e076      	b.n	8029ace <UART_SetConfig+0x2fe>
 80299e0:	2310      	movs	r3, #16
 80299e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80299e6:	e072      	b.n	8029ace <UART_SetConfig+0x2fe>
 80299e8:	697b      	ldr	r3, [r7, #20]
 80299ea:	681b      	ldr	r3, [r3, #0]
 80299ec:	4a35      	ldr	r2, [pc, #212]	; (8029ac4 <UART_SetConfig+0x2f4>)
 80299ee:	4293      	cmp	r3, r2
 80299f0:	d12a      	bne.n	8029a48 <UART_SetConfig+0x278>
 80299f2:	4b30      	ldr	r3, [pc, #192]	; (8029ab4 <UART_SetConfig+0x2e4>)
 80299f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80299f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80299fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8029a00:	d01a      	beq.n	8029a38 <UART_SetConfig+0x268>
 8029a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8029a06:	d81b      	bhi.n	8029a40 <UART_SetConfig+0x270>
 8029a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029a0c:	d00c      	beq.n	8029a28 <UART_SetConfig+0x258>
 8029a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029a12:	d815      	bhi.n	8029a40 <UART_SetConfig+0x270>
 8029a14:	2b00      	cmp	r3, #0
 8029a16:	d003      	beq.n	8029a20 <UART_SetConfig+0x250>
 8029a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029a1c:	d008      	beq.n	8029a30 <UART_SetConfig+0x260>
 8029a1e:	e00f      	b.n	8029a40 <UART_SetConfig+0x270>
 8029a20:	2300      	movs	r3, #0
 8029a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a26:	e052      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029a28:	2302      	movs	r3, #2
 8029a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a2e:	e04e      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029a30:	2304      	movs	r3, #4
 8029a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a36:	e04a      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029a38:	2308      	movs	r3, #8
 8029a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a3e:	e046      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029a40:	2310      	movs	r3, #16
 8029a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a46:	e042      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029a48:	697b      	ldr	r3, [r7, #20]
 8029a4a:	681b      	ldr	r3, [r3, #0]
 8029a4c:	4a17      	ldr	r2, [pc, #92]	; (8029aac <UART_SetConfig+0x2dc>)
 8029a4e:	4293      	cmp	r3, r2
 8029a50:	d13a      	bne.n	8029ac8 <UART_SetConfig+0x2f8>
 8029a52:	4b18      	ldr	r3, [pc, #96]	; (8029ab4 <UART_SetConfig+0x2e4>)
 8029a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8029a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8029a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8029a60:	d01a      	beq.n	8029a98 <UART_SetConfig+0x2c8>
 8029a62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8029a66:	d81b      	bhi.n	8029aa0 <UART_SetConfig+0x2d0>
 8029a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029a6c:	d00c      	beq.n	8029a88 <UART_SetConfig+0x2b8>
 8029a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029a72:	d815      	bhi.n	8029aa0 <UART_SetConfig+0x2d0>
 8029a74:	2b00      	cmp	r3, #0
 8029a76:	d003      	beq.n	8029a80 <UART_SetConfig+0x2b0>
 8029a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029a7c:	d008      	beq.n	8029a90 <UART_SetConfig+0x2c0>
 8029a7e:	e00f      	b.n	8029aa0 <UART_SetConfig+0x2d0>
 8029a80:	2300      	movs	r3, #0
 8029a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a86:	e022      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029a88:	2302      	movs	r3, #2
 8029a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a8e:	e01e      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029a90:	2304      	movs	r3, #4
 8029a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a96:	e01a      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029a98:	2308      	movs	r3, #8
 8029a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029a9e:	e016      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029aa0:	2310      	movs	r3, #16
 8029aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8029aa6:	e012      	b.n	8029ace <UART_SetConfig+0x2fe>
 8029aa8:	cfff69f3 	.word	0xcfff69f3
 8029aac:	40008000 	.word	0x40008000
 8029ab0:	40013800 	.word	0x40013800
 8029ab4:	40021000 	.word	0x40021000
 8029ab8:	40004400 	.word	0x40004400
 8029abc:	40004800 	.word	0x40004800
 8029ac0:	40004c00 	.word	0x40004c00
 8029ac4:	40005000 	.word	0x40005000
 8029ac8:	2310      	movs	r3, #16
 8029aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8029ace:	697b      	ldr	r3, [r7, #20]
 8029ad0:	681b      	ldr	r3, [r3, #0]
 8029ad2:	4aae      	ldr	r2, [pc, #696]	; (8029d8c <UART_SetConfig+0x5bc>)
 8029ad4:	4293      	cmp	r3, r2
 8029ad6:	f040 8097 	bne.w	8029c08 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8029ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029ade:	2b08      	cmp	r3, #8
 8029ae0:	d823      	bhi.n	8029b2a <UART_SetConfig+0x35a>
 8029ae2:	a201      	add	r2, pc, #4	; (adr r2, 8029ae8 <UART_SetConfig+0x318>)
 8029ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029ae8:	08029b0d 	.word	0x08029b0d
 8029aec:	08029b2b 	.word	0x08029b2b
 8029af0:	08029b15 	.word	0x08029b15
 8029af4:	08029b2b 	.word	0x08029b2b
 8029af8:	08029b1b 	.word	0x08029b1b
 8029afc:	08029b2b 	.word	0x08029b2b
 8029b00:	08029b2b 	.word	0x08029b2b
 8029b04:	08029b2b 	.word	0x08029b2b
 8029b08:	08029b23 	.word	0x08029b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8029b0c:	f7fe fb5a 	bl	80281c4 <HAL_RCC_GetPCLK1Freq>
 8029b10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029b12:	e010      	b.n	8029b36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8029b14:	4b9e      	ldr	r3, [pc, #632]	; (8029d90 <UART_SetConfig+0x5c0>)
 8029b16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029b18:	e00d      	b.n	8029b36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8029b1a:	f7fe fabb 	bl	8028094 <HAL_RCC_GetSysClockFreq>
 8029b1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029b20:	e009      	b.n	8029b36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8029b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029b26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029b28:	e005      	b.n	8029b36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8029b2a:	2300      	movs	r3, #0
 8029b2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8029b2e:	2301      	movs	r3, #1
 8029b30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8029b34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8029b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029b38:	2b00      	cmp	r3, #0
 8029b3a:	f000 8130 	beq.w	8029d9e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8029b3e:	697b      	ldr	r3, [r7, #20]
 8029b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029b42:	4a94      	ldr	r2, [pc, #592]	; (8029d94 <UART_SetConfig+0x5c4>)
 8029b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8029b48:	461a      	mov	r2, r3
 8029b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8029b50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8029b52:	697b      	ldr	r3, [r7, #20]
 8029b54:	685a      	ldr	r2, [r3, #4]
 8029b56:	4613      	mov	r3, r2
 8029b58:	005b      	lsls	r3, r3, #1
 8029b5a:	4413      	add	r3, r2
 8029b5c:	69ba      	ldr	r2, [r7, #24]
 8029b5e:	429a      	cmp	r2, r3
 8029b60:	d305      	bcc.n	8029b6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8029b62:	697b      	ldr	r3, [r7, #20]
 8029b64:	685b      	ldr	r3, [r3, #4]
 8029b66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8029b68:	69ba      	ldr	r2, [r7, #24]
 8029b6a:	429a      	cmp	r2, r3
 8029b6c:	d903      	bls.n	8029b76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8029b6e:	2301      	movs	r3, #1
 8029b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8029b74:	e113      	b.n	8029d9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8029b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029b78:	2200      	movs	r2, #0
 8029b7a:	60bb      	str	r3, [r7, #8]
 8029b7c:	60fa      	str	r2, [r7, #12]
 8029b7e:	697b      	ldr	r3, [r7, #20]
 8029b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029b82:	4a84      	ldr	r2, [pc, #528]	; (8029d94 <UART_SetConfig+0x5c4>)
 8029b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8029b88:	b29b      	uxth	r3, r3
 8029b8a:	2200      	movs	r2, #0
 8029b8c:	603b      	str	r3, [r7, #0]
 8029b8e:	607a      	str	r2, [r7, #4]
 8029b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8029b94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8029b98:	f7f6 ff86 	bl	8020aa8 <__aeabi_uldivmod>
 8029b9c:	4602      	mov	r2, r0
 8029b9e:	460b      	mov	r3, r1
 8029ba0:	4610      	mov	r0, r2
 8029ba2:	4619      	mov	r1, r3
 8029ba4:	f04f 0200 	mov.w	r2, #0
 8029ba8:	f04f 0300 	mov.w	r3, #0
 8029bac:	020b      	lsls	r3, r1, #8
 8029bae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8029bb2:	0202      	lsls	r2, r0, #8
 8029bb4:	6979      	ldr	r1, [r7, #20]
 8029bb6:	6849      	ldr	r1, [r1, #4]
 8029bb8:	0849      	lsrs	r1, r1, #1
 8029bba:	2000      	movs	r0, #0
 8029bbc:	460c      	mov	r4, r1
 8029bbe:	4605      	mov	r5, r0
 8029bc0:	eb12 0804 	adds.w	r8, r2, r4
 8029bc4:	eb43 0905 	adc.w	r9, r3, r5
 8029bc8:	697b      	ldr	r3, [r7, #20]
 8029bca:	685b      	ldr	r3, [r3, #4]
 8029bcc:	2200      	movs	r2, #0
 8029bce:	469a      	mov	sl, r3
 8029bd0:	4693      	mov	fp, r2
 8029bd2:	4652      	mov	r2, sl
 8029bd4:	465b      	mov	r3, fp
 8029bd6:	4640      	mov	r0, r8
 8029bd8:	4649      	mov	r1, r9
 8029bda:	f7f6 ff65 	bl	8020aa8 <__aeabi_uldivmod>
 8029bde:	4602      	mov	r2, r0
 8029be0:	460b      	mov	r3, r1
 8029be2:	4613      	mov	r3, r2
 8029be4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8029be6:	6a3b      	ldr	r3, [r7, #32]
 8029be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8029bec:	d308      	bcc.n	8029c00 <UART_SetConfig+0x430>
 8029bee:	6a3b      	ldr	r3, [r7, #32]
 8029bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8029bf4:	d204      	bcs.n	8029c00 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8029bf6:	697b      	ldr	r3, [r7, #20]
 8029bf8:	681b      	ldr	r3, [r3, #0]
 8029bfa:	6a3a      	ldr	r2, [r7, #32]
 8029bfc:	60da      	str	r2, [r3, #12]
 8029bfe:	e0ce      	b.n	8029d9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8029c00:	2301      	movs	r3, #1
 8029c02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8029c06:	e0ca      	b.n	8029d9e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8029c08:	697b      	ldr	r3, [r7, #20]
 8029c0a:	69db      	ldr	r3, [r3, #28]
 8029c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029c10:	d166      	bne.n	8029ce0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8029c12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029c16:	2b08      	cmp	r3, #8
 8029c18:	d827      	bhi.n	8029c6a <UART_SetConfig+0x49a>
 8029c1a:	a201      	add	r2, pc, #4	; (adr r2, 8029c20 <UART_SetConfig+0x450>)
 8029c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029c20:	08029c45 	.word	0x08029c45
 8029c24:	08029c4d 	.word	0x08029c4d
 8029c28:	08029c55 	.word	0x08029c55
 8029c2c:	08029c6b 	.word	0x08029c6b
 8029c30:	08029c5b 	.word	0x08029c5b
 8029c34:	08029c6b 	.word	0x08029c6b
 8029c38:	08029c6b 	.word	0x08029c6b
 8029c3c:	08029c6b 	.word	0x08029c6b
 8029c40:	08029c63 	.word	0x08029c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8029c44:	f7fe fabe 	bl	80281c4 <HAL_RCC_GetPCLK1Freq>
 8029c48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029c4a:	e014      	b.n	8029c76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8029c4c:	f7fe fad0 	bl	80281f0 <HAL_RCC_GetPCLK2Freq>
 8029c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029c52:	e010      	b.n	8029c76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8029c54:	4b4e      	ldr	r3, [pc, #312]	; (8029d90 <UART_SetConfig+0x5c0>)
 8029c56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029c58:	e00d      	b.n	8029c76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8029c5a:	f7fe fa1b 	bl	8028094 <HAL_RCC_GetSysClockFreq>
 8029c5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029c60:	e009      	b.n	8029c76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8029c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029c66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029c68:	e005      	b.n	8029c76 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8029c6a:	2300      	movs	r3, #0
 8029c6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8029c6e:	2301      	movs	r3, #1
 8029c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8029c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8029c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c78:	2b00      	cmp	r3, #0
 8029c7a:	f000 8090 	beq.w	8029d9e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8029c7e:	697b      	ldr	r3, [r7, #20]
 8029c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c82:	4a44      	ldr	r2, [pc, #272]	; (8029d94 <UART_SetConfig+0x5c4>)
 8029c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8029c88:	461a      	mov	r2, r3
 8029c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8029c90:	005a      	lsls	r2, r3, #1
 8029c92:	697b      	ldr	r3, [r7, #20]
 8029c94:	685b      	ldr	r3, [r3, #4]
 8029c96:	085b      	lsrs	r3, r3, #1
 8029c98:	441a      	add	r2, r3
 8029c9a:	697b      	ldr	r3, [r7, #20]
 8029c9c:	685b      	ldr	r3, [r3, #4]
 8029c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8029ca2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8029ca4:	6a3b      	ldr	r3, [r7, #32]
 8029ca6:	2b0f      	cmp	r3, #15
 8029ca8:	d916      	bls.n	8029cd8 <UART_SetConfig+0x508>
 8029caa:	6a3b      	ldr	r3, [r7, #32]
 8029cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029cb0:	d212      	bcs.n	8029cd8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8029cb2:	6a3b      	ldr	r3, [r7, #32]
 8029cb4:	b29b      	uxth	r3, r3
 8029cb6:	f023 030f 	bic.w	r3, r3, #15
 8029cba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8029cbc:	6a3b      	ldr	r3, [r7, #32]
 8029cbe:	085b      	lsrs	r3, r3, #1
 8029cc0:	b29b      	uxth	r3, r3
 8029cc2:	f003 0307 	and.w	r3, r3, #7
 8029cc6:	b29a      	uxth	r2, r3
 8029cc8:	8bfb      	ldrh	r3, [r7, #30]
 8029cca:	4313      	orrs	r3, r2
 8029ccc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8029cce:	697b      	ldr	r3, [r7, #20]
 8029cd0:	681b      	ldr	r3, [r3, #0]
 8029cd2:	8bfa      	ldrh	r2, [r7, #30]
 8029cd4:	60da      	str	r2, [r3, #12]
 8029cd6:	e062      	b.n	8029d9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8029cd8:	2301      	movs	r3, #1
 8029cda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8029cde:	e05e      	b.n	8029d9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8029ce0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029ce4:	2b08      	cmp	r3, #8
 8029ce6:	d828      	bhi.n	8029d3a <UART_SetConfig+0x56a>
 8029ce8:	a201      	add	r2, pc, #4	; (adr r2, 8029cf0 <UART_SetConfig+0x520>)
 8029cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029cee:	bf00      	nop
 8029cf0:	08029d15 	.word	0x08029d15
 8029cf4:	08029d1d 	.word	0x08029d1d
 8029cf8:	08029d25 	.word	0x08029d25
 8029cfc:	08029d3b 	.word	0x08029d3b
 8029d00:	08029d2b 	.word	0x08029d2b
 8029d04:	08029d3b 	.word	0x08029d3b
 8029d08:	08029d3b 	.word	0x08029d3b
 8029d0c:	08029d3b 	.word	0x08029d3b
 8029d10:	08029d33 	.word	0x08029d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8029d14:	f7fe fa56 	bl	80281c4 <HAL_RCC_GetPCLK1Freq>
 8029d18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029d1a:	e014      	b.n	8029d46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8029d1c:	f7fe fa68 	bl	80281f0 <HAL_RCC_GetPCLK2Freq>
 8029d20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029d22:	e010      	b.n	8029d46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8029d24:	4b1a      	ldr	r3, [pc, #104]	; (8029d90 <UART_SetConfig+0x5c0>)
 8029d26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029d28:	e00d      	b.n	8029d46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8029d2a:	f7fe f9b3 	bl	8028094 <HAL_RCC_GetSysClockFreq>
 8029d2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8029d30:	e009      	b.n	8029d46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8029d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029d36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8029d38:	e005      	b.n	8029d46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8029d3a:	2300      	movs	r3, #0
 8029d3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8029d3e:	2301      	movs	r3, #1
 8029d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8029d44:	bf00      	nop
    }

    if (pclk != 0U)
 8029d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029d48:	2b00      	cmp	r3, #0
 8029d4a:	d028      	beq.n	8029d9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8029d4c:	697b      	ldr	r3, [r7, #20]
 8029d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d50:	4a10      	ldr	r2, [pc, #64]	; (8029d94 <UART_SetConfig+0x5c4>)
 8029d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8029d56:	461a      	mov	r2, r3
 8029d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029d5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8029d5e:	697b      	ldr	r3, [r7, #20]
 8029d60:	685b      	ldr	r3, [r3, #4]
 8029d62:	085b      	lsrs	r3, r3, #1
 8029d64:	441a      	add	r2, r3
 8029d66:	697b      	ldr	r3, [r7, #20]
 8029d68:	685b      	ldr	r3, [r3, #4]
 8029d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8029d6e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8029d70:	6a3b      	ldr	r3, [r7, #32]
 8029d72:	2b0f      	cmp	r3, #15
 8029d74:	d910      	bls.n	8029d98 <UART_SetConfig+0x5c8>
 8029d76:	6a3b      	ldr	r3, [r7, #32]
 8029d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029d7c:	d20c      	bcs.n	8029d98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8029d7e:	6a3b      	ldr	r3, [r7, #32]
 8029d80:	b29a      	uxth	r2, r3
 8029d82:	697b      	ldr	r3, [r7, #20]
 8029d84:	681b      	ldr	r3, [r3, #0]
 8029d86:	60da      	str	r2, [r3, #12]
 8029d88:	e009      	b.n	8029d9e <UART_SetConfig+0x5ce>
 8029d8a:	bf00      	nop
 8029d8c:	40008000 	.word	0x40008000
 8029d90:	00f42400 	.word	0x00f42400
 8029d94:	080765c8 	.word	0x080765c8
      }
      else
      {
        ret = HAL_ERROR;
 8029d98:	2301      	movs	r3, #1
 8029d9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8029d9e:	697b      	ldr	r3, [r7, #20]
 8029da0:	2201      	movs	r2, #1
 8029da2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8029da6:	697b      	ldr	r3, [r7, #20]
 8029da8:	2201      	movs	r2, #1
 8029daa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8029dae:	697b      	ldr	r3, [r7, #20]
 8029db0:	2200      	movs	r2, #0
 8029db2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8029db4:	697b      	ldr	r3, [r7, #20]
 8029db6:	2200      	movs	r2, #0
 8029db8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8029dba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8029dbe:	4618      	mov	r0, r3
 8029dc0:	3730      	adds	r7, #48	; 0x30
 8029dc2:	46bd      	mov	sp, r7
 8029dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08029dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8029dc8:	b480      	push	{r7}
 8029dca:	b083      	sub	sp, #12
 8029dcc:	af00      	add	r7, sp, #0
 8029dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8029dd0:	687b      	ldr	r3, [r7, #4]
 8029dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029dd4:	f003 0301 	and.w	r3, r3, #1
 8029dd8:	2b00      	cmp	r3, #0
 8029dda:	d00a      	beq.n	8029df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8029ddc:	687b      	ldr	r3, [r7, #4]
 8029dde:	681b      	ldr	r3, [r3, #0]
 8029de0:	685b      	ldr	r3, [r3, #4]
 8029de2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8029de6:	687b      	ldr	r3, [r7, #4]
 8029de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029dea:	687b      	ldr	r3, [r7, #4]
 8029dec:	681b      	ldr	r3, [r3, #0]
 8029dee:	430a      	orrs	r2, r1
 8029df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8029df2:	687b      	ldr	r3, [r7, #4]
 8029df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029df6:	f003 0302 	and.w	r3, r3, #2
 8029dfa:	2b00      	cmp	r3, #0
 8029dfc:	d00a      	beq.n	8029e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8029dfe:	687b      	ldr	r3, [r7, #4]
 8029e00:	681b      	ldr	r3, [r3, #0]
 8029e02:	685b      	ldr	r3, [r3, #4]
 8029e04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8029e08:	687b      	ldr	r3, [r7, #4]
 8029e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029e0c:	687b      	ldr	r3, [r7, #4]
 8029e0e:	681b      	ldr	r3, [r3, #0]
 8029e10:	430a      	orrs	r2, r1
 8029e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8029e14:	687b      	ldr	r3, [r7, #4]
 8029e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e18:	f003 0304 	and.w	r3, r3, #4
 8029e1c:	2b00      	cmp	r3, #0
 8029e1e:	d00a      	beq.n	8029e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8029e20:	687b      	ldr	r3, [r7, #4]
 8029e22:	681b      	ldr	r3, [r3, #0]
 8029e24:	685b      	ldr	r3, [r3, #4]
 8029e26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8029e2a:	687b      	ldr	r3, [r7, #4]
 8029e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8029e2e:	687b      	ldr	r3, [r7, #4]
 8029e30:	681b      	ldr	r3, [r3, #0]
 8029e32:	430a      	orrs	r2, r1
 8029e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8029e36:	687b      	ldr	r3, [r7, #4]
 8029e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e3a:	f003 0308 	and.w	r3, r3, #8
 8029e3e:	2b00      	cmp	r3, #0
 8029e40:	d00a      	beq.n	8029e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8029e42:	687b      	ldr	r3, [r7, #4]
 8029e44:	681b      	ldr	r3, [r3, #0]
 8029e46:	685b      	ldr	r3, [r3, #4]
 8029e48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8029e4c:	687b      	ldr	r3, [r7, #4]
 8029e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8029e50:	687b      	ldr	r3, [r7, #4]
 8029e52:	681b      	ldr	r3, [r3, #0]
 8029e54:	430a      	orrs	r2, r1
 8029e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8029e58:	687b      	ldr	r3, [r7, #4]
 8029e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e5c:	f003 0310 	and.w	r3, r3, #16
 8029e60:	2b00      	cmp	r3, #0
 8029e62:	d00a      	beq.n	8029e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8029e64:	687b      	ldr	r3, [r7, #4]
 8029e66:	681b      	ldr	r3, [r3, #0]
 8029e68:	689b      	ldr	r3, [r3, #8]
 8029e6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8029e6e:	687b      	ldr	r3, [r7, #4]
 8029e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8029e72:	687b      	ldr	r3, [r7, #4]
 8029e74:	681b      	ldr	r3, [r3, #0]
 8029e76:	430a      	orrs	r2, r1
 8029e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8029e7a:	687b      	ldr	r3, [r7, #4]
 8029e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e7e:	f003 0320 	and.w	r3, r3, #32
 8029e82:	2b00      	cmp	r3, #0
 8029e84:	d00a      	beq.n	8029e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8029e86:	687b      	ldr	r3, [r7, #4]
 8029e88:	681b      	ldr	r3, [r3, #0]
 8029e8a:	689b      	ldr	r3, [r3, #8]
 8029e8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8029e90:	687b      	ldr	r3, [r7, #4]
 8029e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8029e94:	687b      	ldr	r3, [r7, #4]
 8029e96:	681b      	ldr	r3, [r3, #0]
 8029e98:	430a      	orrs	r2, r1
 8029e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8029e9c:	687b      	ldr	r3, [r7, #4]
 8029e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029ea4:	2b00      	cmp	r3, #0
 8029ea6:	d01a      	beq.n	8029ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8029ea8:	687b      	ldr	r3, [r7, #4]
 8029eaa:	681b      	ldr	r3, [r3, #0]
 8029eac:	685b      	ldr	r3, [r3, #4]
 8029eae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8029eb2:	687b      	ldr	r3, [r7, #4]
 8029eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029eb6:	687b      	ldr	r3, [r7, #4]
 8029eb8:	681b      	ldr	r3, [r3, #0]
 8029eba:	430a      	orrs	r2, r1
 8029ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8029ebe:	687b      	ldr	r3, [r7, #4]
 8029ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8029ec6:	d10a      	bne.n	8029ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8029ec8:	687b      	ldr	r3, [r7, #4]
 8029eca:	681b      	ldr	r3, [r3, #0]
 8029ecc:	685b      	ldr	r3, [r3, #4]
 8029ece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8029ed2:	687b      	ldr	r3, [r7, #4]
 8029ed4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8029ed6:	687b      	ldr	r3, [r7, #4]
 8029ed8:	681b      	ldr	r3, [r3, #0]
 8029eda:	430a      	orrs	r2, r1
 8029edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8029ede:	687b      	ldr	r3, [r7, #4]
 8029ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029ee6:	2b00      	cmp	r3, #0
 8029ee8:	d00a      	beq.n	8029f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8029eea:	687b      	ldr	r3, [r7, #4]
 8029eec:	681b      	ldr	r3, [r3, #0]
 8029eee:	685b      	ldr	r3, [r3, #4]
 8029ef0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8029ef4:	687b      	ldr	r3, [r7, #4]
 8029ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8029ef8:	687b      	ldr	r3, [r7, #4]
 8029efa:	681b      	ldr	r3, [r3, #0]
 8029efc:	430a      	orrs	r2, r1
 8029efe:	605a      	str	r2, [r3, #4]
  }
}
 8029f00:	bf00      	nop
 8029f02:	370c      	adds	r7, #12
 8029f04:	46bd      	mov	sp, r7
 8029f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f0a:	4770      	bx	lr

08029f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8029f0c:	b580      	push	{r7, lr}
 8029f0e:	b086      	sub	sp, #24
 8029f10:	af02      	add	r7, sp, #8
 8029f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029f14:	687b      	ldr	r3, [r7, #4]
 8029f16:	2200      	movs	r2, #0
 8029f18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8029f1c:	f7fa f9e2 	bl	80242e4 <HAL_GetTick>
 8029f20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8029f22:	687b      	ldr	r3, [r7, #4]
 8029f24:	681b      	ldr	r3, [r3, #0]
 8029f26:	681b      	ldr	r3, [r3, #0]
 8029f28:	f003 0308 	and.w	r3, r3, #8
 8029f2c:	2b08      	cmp	r3, #8
 8029f2e:	d10e      	bne.n	8029f4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8029f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8029f34:	9300      	str	r3, [sp, #0]
 8029f36:	68fb      	ldr	r3, [r7, #12]
 8029f38:	2200      	movs	r2, #0
 8029f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8029f3e:	6878      	ldr	r0, [r7, #4]
 8029f40:	f000 f82f 	bl	8029fa2 <UART_WaitOnFlagUntilTimeout>
 8029f44:	4603      	mov	r3, r0
 8029f46:	2b00      	cmp	r3, #0
 8029f48:	d001      	beq.n	8029f4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8029f4a:	2303      	movs	r3, #3
 8029f4c:	e025      	b.n	8029f9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8029f4e:	687b      	ldr	r3, [r7, #4]
 8029f50:	681b      	ldr	r3, [r3, #0]
 8029f52:	681b      	ldr	r3, [r3, #0]
 8029f54:	f003 0304 	and.w	r3, r3, #4
 8029f58:	2b04      	cmp	r3, #4
 8029f5a:	d10e      	bne.n	8029f7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8029f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8029f60:	9300      	str	r3, [sp, #0]
 8029f62:	68fb      	ldr	r3, [r7, #12]
 8029f64:	2200      	movs	r2, #0
 8029f66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8029f6a:	6878      	ldr	r0, [r7, #4]
 8029f6c:	f000 f819 	bl	8029fa2 <UART_WaitOnFlagUntilTimeout>
 8029f70:	4603      	mov	r3, r0
 8029f72:	2b00      	cmp	r3, #0
 8029f74:	d001      	beq.n	8029f7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8029f76:	2303      	movs	r3, #3
 8029f78:	e00f      	b.n	8029f9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8029f7a:	687b      	ldr	r3, [r7, #4]
 8029f7c:	2220      	movs	r2, #32
 8029f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8029f82:	687b      	ldr	r3, [r7, #4]
 8029f84:	2220      	movs	r2, #32
 8029f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029f8a:	687b      	ldr	r3, [r7, #4]
 8029f8c:	2200      	movs	r2, #0
 8029f8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8029f90:	687b      	ldr	r3, [r7, #4]
 8029f92:	2200      	movs	r2, #0
 8029f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8029f98:	2300      	movs	r3, #0
}
 8029f9a:	4618      	mov	r0, r3
 8029f9c:	3710      	adds	r7, #16
 8029f9e:	46bd      	mov	sp, r7
 8029fa0:	bd80      	pop	{r7, pc}

08029fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8029fa2:	b580      	push	{r7, lr}
 8029fa4:	b09c      	sub	sp, #112	; 0x70
 8029fa6:	af00      	add	r7, sp, #0
 8029fa8:	60f8      	str	r0, [r7, #12]
 8029faa:	60b9      	str	r1, [r7, #8]
 8029fac:	603b      	str	r3, [r7, #0]
 8029fae:	4613      	mov	r3, r2
 8029fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029fb2:	e0a9      	b.n	802a108 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8029fba:	f000 80a5 	beq.w	802a108 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8029fbe:	f7fa f991 	bl	80242e4 <HAL_GetTick>
 8029fc2:	4602      	mov	r2, r0
 8029fc4:	683b      	ldr	r3, [r7, #0]
 8029fc6:	1ad3      	subs	r3, r2, r3
 8029fc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8029fca:	429a      	cmp	r2, r3
 8029fcc:	d302      	bcc.n	8029fd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8029fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029fd0:	2b00      	cmp	r3, #0
 8029fd2:	d140      	bne.n	802a056 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8029fd4:	68fb      	ldr	r3, [r7, #12]
 8029fd6:	681b      	ldr	r3, [r3, #0]
 8029fd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029fdc:	e853 3f00 	ldrex	r3, [r3]
 8029fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8029fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029fe4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8029fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8029fea:	68fb      	ldr	r3, [r7, #12]
 8029fec:	681b      	ldr	r3, [r3, #0]
 8029fee:	461a      	mov	r2, r3
 8029ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029ff4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029ff6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8029ff8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029ffa:	e841 2300 	strex	r3, r2, [r1]
 8029ffe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 802a000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802a002:	2b00      	cmp	r3, #0
 802a004:	d1e6      	bne.n	8029fd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802a006:	68fb      	ldr	r3, [r7, #12]
 802a008:	681b      	ldr	r3, [r3, #0]
 802a00a:	3308      	adds	r3, #8
 802a00c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a010:	e853 3f00 	ldrex	r3, [r3]
 802a014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a018:	f023 0301 	bic.w	r3, r3, #1
 802a01c:	663b      	str	r3, [r7, #96]	; 0x60
 802a01e:	68fb      	ldr	r3, [r7, #12]
 802a020:	681b      	ldr	r3, [r3, #0]
 802a022:	3308      	adds	r3, #8
 802a024:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802a026:	64ba      	str	r2, [r7, #72]	; 0x48
 802a028:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a02a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802a02c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802a02e:	e841 2300 	strex	r3, r2, [r1]
 802a032:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 802a034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a036:	2b00      	cmp	r3, #0
 802a038:	d1e5      	bne.n	802a006 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 802a03a:	68fb      	ldr	r3, [r7, #12]
 802a03c:	2220      	movs	r2, #32
 802a03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 802a042:	68fb      	ldr	r3, [r7, #12]
 802a044:	2220      	movs	r2, #32
 802a046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 802a04a:	68fb      	ldr	r3, [r7, #12]
 802a04c:	2200      	movs	r2, #0
 802a04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 802a052:	2303      	movs	r3, #3
 802a054:	e069      	b.n	802a12a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 802a056:	68fb      	ldr	r3, [r7, #12]
 802a058:	681b      	ldr	r3, [r3, #0]
 802a05a:	681b      	ldr	r3, [r3, #0]
 802a05c:	f003 0304 	and.w	r3, r3, #4
 802a060:	2b00      	cmp	r3, #0
 802a062:	d051      	beq.n	802a108 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802a064:	68fb      	ldr	r3, [r7, #12]
 802a066:	681b      	ldr	r3, [r3, #0]
 802a068:	69db      	ldr	r3, [r3, #28]
 802a06a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802a06e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802a072:	d149      	bne.n	802a108 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802a074:	68fb      	ldr	r3, [r7, #12]
 802a076:	681b      	ldr	r3, [r3, #0]
 802a078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802a07c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802a07e:	68fb      	ldr	r3, [r7, #12]
 802a080:	681b      	ldr	r3, [r3, #0]
 802a082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a086:	e853 3f00 	ldrex	r3, [r3]
 802a08a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a08e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802a092:	66fb      	str	r3, [r7, #108]	; 0x6c
 802a094:	68fb      	ldr	r3, [r7, #12]
 802a096:	681b      	ldr	r3, [r3, #0]
 802a098:	461a      	mov	r2, r3
 802a09a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802a09c:	637b      	str	r3, [r7, #52]	; 0x34
 802a09e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a0a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802a0a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802a0a4:	e841 2300 	strex	r3, r2, [r1]
 802a0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a0ac:	2b00      	cmp	r3, #0
 802a0ae:	d1e6      	bne.n	802a07e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802a0b0:	68fb      	ldr	r3, [r7, #12]
 802a0b2:	681b      	ldr	r3, [r3, #0]
 802a0b4:	3308      	adds	r3, #8
 802a0b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a0b8:	697b      	ldr	r3, [r7, #20]
 802a0ba:	e853 3f00 	ldrex	r3, [r3]
 802a0be:	613b      	str	r3, [r7, #16]
   return(result);
 802a0c0:	693b      	ldr	r3, [r7, #16]
 802a0c2:	f023 0301 	bic.w	r3, r3, #1
 802a0c6:	66bb      	str	r3, [r7, #104]	; 0x68
 802a0c8:	68fb      	ldr	r3, [r7, #12]
 802a0ca:	681b      	ldr	r3, [r3, #0]
 802a0cc:	3308      	adds	r3, #8
 802a0ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802a0d0:	623a      	str	r2, [r7, #32]
 802a0d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a0d4:	69f9      	ldr	r1, [r7, #28]
 802a0d6:	6a3a      	ldr	r2, [r7, #32]
 802a0d8:	e841 2300 	strex	r3, r2, [r1]
 802a0dc:	61bb      	str	r3, [r7, #24]
   return(result);
 802a0de:	69bb      	ldr	r3, [r7, #24]
 802a0e0:	2b00      	cmp	r3, #0
 802a0e2:	d1e5      	bne.n	802a0b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 802a0e4:	68fb      	ldr	r3, [r7, #12]
 802a0e6:	2220      	movs	r2, #32
 802a0e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 802a0ec:	68fb      	ldr	r3, [r7, #12]
 802a0ee:	2220      	movs	r2, #32
 802a0f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802a0f4:	68fb      	ldr	r3, [r7, #12]
 802a0f6:	2220      	movs	r2, #32
 802a0f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802a0fc:	68fb      	ldr	r3, [r7, #12]
 802a0fe:	2200      	movs	r2, #0
 802a100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 802a104:	2303      	movs	r3, #3
 802a106:	e010      	b.n	802a12a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802a108:	68fb      	ldr	r3, [r7, #12]
 802a10a:	681b      	ldr	r3, [r3, #0]
 802a10c:	69da      	ldr	r2, [r3, #28]
 802a10e:	68bb      	ldr	r3, [r7, #8]
 802a110:	4013      	ands	r3, r2
 802a112:	68ba      	ldr	r2, [r7, #8]
 802a114:	429a      	cmp	r2, r3
 802a116:	bf0c      	ite	eq
 802a118:	2301      	moveq	r3, #1
 802a11a:	2300      	movne	r3, #0
 802a11c:	b2db      	uxtb	r3, r3
 802a11e:	461a      	mov	r2, r3
 802a120:	79fb      	ldrb	r3, [r7, #7]
 802a122:	429a      	cmp	r2, r3
 802a124:	f43f af46 	beq.w	8029fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802a128:	2300      	movs	r3, #0
}
 802a12a:	4618      	mov	r0, r3
 802a12c:	3770      	adds	r7, #112	; 0x70
 802a12e:	46bd      	mov	sp, r7
 802a130:	bd80      	pop	{r7, pc}

0802a132 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802a132:	b480      	push	{r7}
 802a134:	b085      	sub	sp, #20
 802a136:	af00      	add	r7, sp, #0
 802a138:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802a13a:	687b      	ldr	r3, [r7, #4]
 802a13c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802a140:	2b01      	cmp	r3, #1
 802a142:	d101      	bne.n	802a148 <HAL_UARTEx_DisableFifoMode+0x16>
 802a144:	2302      	movs	r3, #2
 802a146:	e027      	b.n	802a198 <HAL_UARTEx_DisableFifoMode+0x66>
 802a148:	687b      	ldr	r3, [r7, #4]
 802a14a:	2201      	movs	r2, #1
 802a14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802a150:	687b      	ldr	r3, [r7, #4]
 802a152:	2224      	movs	r2, #36	; 0x24
 802a154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802a158:	687b      	ldr	r3, [r7, #4]
 802a15a:	681b      	ldr	r3, [r3, #0]
 802a15c:	681b      	ldr	r3, [r3, #0]
 802a15e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802a160:	687b      	ldr	r3, [r7, #4]
 802a162:	681b      	ldr	r3, [r3, #0]
 802a164:	681a      	ldr	r2, [r3, #0]
 802a166:	687b      	ldr	r3, [r7, #4]
 802a168:	681b      	ldr	r3, [r3, #0]
 802a16a:	f022 0201 	bic.w	r2, r2, #1
 802a16e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802a170:	68fb      	ldr	r3, [r7, #12]
 802a172:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802a176:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802a178:	687b      	ldr	r3, [r7, #4]
 802a17a:	2200      	movs	r2, #0
 802a17c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802a17e:	687b      	ldr	r3, [r7, #4]
 802a180:	681b      	ldr	r3, [r3, #0]
 802a182:	68fa      	ldr	r2, [r7, #12]
 802a184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802a186:	687b      	ldr	r3, [r7, #4]
 802a188:	2220      	movs	r2, #32
 802a18a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802a18e:	687b      	ldr	r3, [r7, #4]
 802a190:	2200      	movs	r2, #0
 802a192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802a196:	2300      	movs	r3, #0
}
 802a198:	4618      	mov	r0, r3
 802a19a:	3714      	adds	r7, #20
 802a19c:	46bd      	mov	sp, r7
 802a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1a2:	4770      	bx	lr

0802a1a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802a1a4:	b580      	push	{r7, lr}
 802a1a6:	b084      	sub	sp, #16
 802a1a8:	af00      	add	r7, sp, #0
 802a1aa:	6078      	str	r0, [r7, #4]
 802a1ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802a1ae:	687b      	ldr	r3, [r7, #4]
 802a1b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802a1b4:	2b01      	cmp	r3, #1
 802a1b6:	d101      	bne.n	802a1bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802a1b8:	2302      	movs	r3, #2
 802a1ba:	e02d      	b.n	802a218 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802a1bc:	687b      	ldr	r3, [r7, #4]
 802a1be:	2201      	movs	r2, #1
 802a1c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802a1c4:	687b      	ldr	r3, [r7, #4]
 802a1c6:	2224      	movs	r2, #36	; 0x24
 802a1c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802a1cc:	687b      	ldr	r3, [r7, #4]
 802a1ce:	681b      	ldr	r3, [r3, #0]
 802a1d0:	681b      	ldr	r3, [r3, #0]
 802a1d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802a1d4:	687b      	ldr	r3, [r7, #4]
 802a1d6:	681b      	ldr	r3, [r3, #0]
 802a1d8:	681a      	ldr	r2, [r3, #0]
 802a1da:	687b      	ldr	r3, [r7, #4]
 802a1dc:	681b      	ldr	r3, [r3, #0]
 802a1de:	f022 0201 	bic.w	r2, r2, #1
 802a1e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802a1e4:	687b      	ldr	r3, [r7, #4]
 802a1e6:	681b      	ldr	r3, [r3, #0]
 802a1e8:	689b      	ldr	r3, [r3, #8]
 802a1ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 802a1ee:	687b      	ldr	r3, [r7, #4]
 802a1f0:	681b      	ldr	r3, [r3, #0]
 802a1f2:	683a      	ldr	r2, [r7, #0]
 802a1f4:	430a      	orrs	r2, r1
 802a1f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802a1f8:	6878      	ldr	r0, [r7, #4]
 802a1fa:	f000 f84f 	bl	802a29c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802a1fe:	687b      	ldr	r3, [r7, #4]
 802a200:	681b      	ldr	r3, [r3, #0]
 802a202:	68fa      	ldr	r2, [r7, #12]
 802a204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802a206:	687b      	ldr	r3, [r7, #4]
 802a208:	2220      	movs	r2, #32
 802a20a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802a20e:	687b      	ldr	r3, [r7, #4]
 802a210:	2200      	movs	r2, #0
 802a212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802a216:	2300      	movs	r3, #0
}
 802a218:	4618      	mov	r0, r3
 802a21a:	3710      	adds	r7, #16
 802a21c:	46bd      	mov	sp, r7
 802a21e:	bd80      	pop	{r7, pc}

0802a220 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802a220:	b580      	push	{r7, lr}
 802a222:	b084      	sub	sp, #16
 802a224:	af00      	add	r7, sp, #0
 802a226:	6078      	str	r0, [r7, #4]
 802a228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802a22a:	687b      	ldr	r3, [r7, #4]
 802a22c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802a230:	2b01      	cmp	r3, #1
 802a232:	d101      	bne.n	802a238 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802a234:	2302      	movs	r3, #2
 802a236:	e02d      	b.n	802a294 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802a238:	687b      	ldr	r3, [r7, #4]
 802a23a:	2201      	movs	r2, #1
 802a23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802a240:	687b      	ldr	r3, [r7, #4]
 802a242:	2224      	movs	r2, #36	; 0x24
 802a244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802a248:	687b      	ldr	r3, [r7, #4]
 802a24a:	681b      	ldr	r3, [r3, #0]
 802a24c:	681b      	ldr	r3, [r3, #0]
 802a24e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802a250:	687b      	ldr	r3, [r7, #4]
 802a252:	681b      	ldr	r3, [r3, #0]
 802a254:	681a      	ldr	r2, [r3, #0]
 802a256:	687b      	ldr	r3, [r7, #4]
 802a258:	681b      	ldr	r3, [r3, #0]
 802a25a:	f022 0201 	bic.w	r2, r2, #1
 802a25e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802a260:	687b      	ldr	r3, [r7, #4]
 802a262:	681b      	ldr	r3, [r3, #0]
 802a264:	689b      	ldr	r3, [r3, #8]
 802a266:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 802a26a:	687b      	ldr	r3, [r7, #4]
 802a26c:	681b      	ldr	r3, [r3, #0]
 802a26e:	683a      	ldr	r2, [r7, #0]
 802a270:	430a      	orrs	r2, r1
 802a272:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802a274:	6878      	ldr	r0, [r7, #4]
 802a276:	f000 f811 	bl	802a29c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802a27a:	687b      	ldr	r3, [r7, #4]
 802a27c:	681b      	ldr	r3, [r3, #0]
 802a27e:	68fa      	ldr	r2, [r7, #12]
 802a280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802a282:	687b      	ldr	r3, [r7, #4]
 802a284:	2220      	movs	r2, #32
 802a286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802a28a:	687b      	ldr	r3, [r7, #4]
 802a28c:	2200      	movs	r2, #0
 802a28e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802a292:	2300      	movs	r3, #0
}
 802a294:	4618      	mov	r0, r3
 802a296:	3710      	adds	r7, #16
 802a298:	46bd      	mov	sp, r7
 802a29a:	bd80      	pop	{r7, pc}

0802a29c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802a29c:	b480      	push	{r7}
 802a29e:	b085      	sub	sp, #20
 802a2a0:	af00      	add	r7, sp, #0
 802a2a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 802a2a4:	687b      	ldr	r3, [r7, #4]
 802a2a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802a2a8:	2b00      	cmp	r3, #0
 802a2aa:	d108      	bne.n	802a2be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802a2ac:	687b      	ldr	r3, [r7, #4]
 802a2ae:	2201      	movs	r2, #1
 802a2b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 802a2b4:	687b      	ldr	r3, [r7, #4]
 802a2b6:	2201      	movs	r2, #1
 802a2b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802a2bc:	e031      	b.n	802a322 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802a2be:	2308      	movs	r3, #8
 802a2c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802a2c2:	2308      	movs	r3, #8
 802a2c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802a2c6:	687b      	ldr	r3, [r7, #4]
 802a2c8:	681b      	ldr	r3, [r3, #0]
 802a2ca:	689b      	ldr	r3, [r3, #8]
 802a2cc:	0e5b      	lsrs	r3, r3, #25
 802a2ce:	b2db      	uxtb	r3, r3
 802a2d0:	f003 0307 	and.w	r3, r3, #7
 802a2d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802a2d6:	687b      	ldr	r3, [r7, #4]
 802a2d8:	681b      	ldr	r3, [r3, #0]
 802a2da:	689b      	ldr	r3, [r3, #8]
 802a2dc:	0f5b      	lsrs	r3, r3, #29
 802a2de:	b2db      	uxtb	r3, r3
 802a2e0:	f003 0307 	and.w	r3, r3, #7
 802a2e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802a2e6:	7bbb      	ldrb	r3, [r7, #14]
 802a2e8:	7b3a      	ldrb	r2, [r7, #12]
 802a2ea:	4911      	ldr	r1, [pc, #68]	; (802a330 <UARTEx_SetNbDataToProcess+0x94>)
 802a2ec:	5c8a      	ldrb	r2, [r1, r2]
 802a2ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802a2f2:	7b3a      	ldrb	r2, [r7, #12]
 802a2f4:	490f      	ldr	r1, [pc, #60]	; (802a334 <UARTEx_SetNbDataToProcess+0x98>)
 802a2f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802a2f8:	fb93 f3f2 	sdiv	r3, r3, r2
 802a2fc:	b29a      	uxth	r2, r3
 802a2fe:	687b      	ldr	r3, [r7, #4]
 802a300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802a304:	7bfb      	ldrb	r3, [r7, #15]
 802a306:	7b7a      	ldrb	r2, [r7, #13]
 802a308:	4909      	ldr	r1, [pc, #36]	; (802a330 <UARTEx_SetNbDataToProcess+0x94>)
 802a30a:	5c8a      	ldrb	r2, [r1, r2]
 802a30c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802a310:	7b7a      	ldrb	r2, [r7, #13]
 802a312:	4908      	ldr	r1, [pc, #32]	; (802a334 <UARTEx_SetNbDataToProcess+0x98>)
 802a314:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802a316:	fb93 f3f2 	sdiv	r3, r3, r2
 802a31a:	b29a      	uxth	r2, r3
 802a31c:	687b      	ldr	r3, [r7, #4]
 802a31e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 802a322:	bf00      	nop
 802a324:	3714      	adds	r7, #20
 802a326:	46bd      	mov	sp, r7
 802a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a32c:	4770      	bx	lr
 802a32e:	bf00      	nop
 802a330:	080765e0 	.word	0x080765e0
 802a334:	080765e8 	.word	0x080765e8

0802a338 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 802a338:	b480      	push	{r7}
 802a33a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 802a33c:	bf00      	nop
 802a33e:	46bd      	mov	sp, r7
 802a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a344:	4770      	bx	lr
	...

0802a348 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 802a348:	b580      	push	{r7, lr}
 802a34a:	b086      	sub	sp, #24
 802a34c:	af04      	add	r7, sp, #16
 802a34e:	4603      	mov	r3, r0
 802a350:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 802a352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a356:	9302      	str	r3, [sp, #8]
 802a358:	2301      	movs	r3, #1
 802a35a:	9301      	str	r3, [sp, #4]
 802a35c:	1dfb      	adds	r3, r7, #7
 802a35e:	9300      	str	r3, [sp, #0]
 802a360:	2301      	movs	r3, #1
 802a362:	2200      	movs	r2, #0
 802a364:	2178      	movs	r1, #120	; 0x78
 802a366:	4803      	ldr	r0, [pc, #12]	; (802a374 <ssd1306_WriteCommand+0x2c>)
 802a368:	f7fb fa94 	bl	8025894 <HAL_I2C_Mem_Write>
}
 802a36c:	bf00      	nop
 802a36e:	3708      	adds	r7, #8
 802a370:	46bd      	mov	sp, r7
 802a372:	bd80      	pop	{r7, pc}
 802a374:	200003e0 	.word	0x200003e0

0802a378 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 802a378:	b580      	push	{r7, lr}
 802a37a:	b086      	sub	sp, #24
 802a37c:	af04      	add	r7, sp, #16
 802a37e:	6078      	str	r0, [r7, #4]
 802a380:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 802a382:	683b      	ldr	r3, [r7, #0]
 802a384:	b29b      	uxth	r3, r3
 802a386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802a38a:	9202      	str	r2, [sp, #8]
 802a38c:	9301      	str	r3, [sp, #4]
 802a38e:	687b      	ldr	r3, [r7, #4]
 802a390:	9300      	str	r3, [sp, #0]
 802a392:	2301      	movs	r3, #1
 802a394:	2240      	movs	r2, #64	; 0x40
 802a396:	2178      	movs	r1, #120	; 0x78
 802a398:	4803      	ldr	r0, [pc, #12]	; (802a3a8 <ssd1306_WriteData+0x30>)
 802a39a:	f7fb fa7b 	bl	8025894 <HAL_I2C_Mem_Write>
}
 802a39e:	bf00      	nop
 802a3a0:	3708      	adds	r7, #8
 802a3a2:	46bd      	mov	sp, r7
 802a3a4:	bd80      	pop	{r7, pc}
 802a3a6:	bf00      	nop
 802a3a8:	200003e0 	.word	0x200003e0

0802a3ac <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 802a3ac:	b580      	push	{r7, lr}
 802a3ae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 802a3b0:	f7ff ffc2 	bl	802a338 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 802a3b4:	2064      	movs	r0, #100	; 0x64
 802a3b6:	f7f9 ffa1 	bl	80242fc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 802a3ba:	2000      	movs	r0, #0
 802a3bc:	f000 fa60 	bl	802a880 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 802a3c0:	2020      	movs	r0, #32
 802a3c2:	f7ff ffc1 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 802a3c6:	2000      	movs	r0, #0
 802a3c8:	f7ff ffbe 	bl	802a348 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 802a3cc:	20b0      	movs	r0, #176	; 0xb0
 802a3ce:	f7ff ffbb 	bl	802a348 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 802a3d2:	20c8      	movs	r0, #200	; 0xc8
 802a3d4:	f7ff ffb8 	bl	802a348 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 802a3d8:	2000      	movs	r0, #0
 802a3da:	f7ff ffb5 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 802a3de:	2010      	movs	r0, #16
 802a3e0:	f7ff ffb2 	bl	802a348 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 802a3e4:	2040      	movs	r0, #64	; 0x40
 802a3e6:	f7ff ffaf 	bl	802a348 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 802a3ea:	20ff      	movs	r0, #255	; 0xff
 802a3ec:	f000 fa35 	bl	802a85a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 802a3f0:	20a1      	movs	r0, #161	; 0xa1
 802a3f2:	f7ff ffa9 	bl	802a348 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 802a3f6:	20a6      	movs	r0, #166	; 0xa6
 802a3f8:	f7ff ffa6 	bl	802a348 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 802a3fc:	20a8      	movs	r0, #168	; 0xa8
 802a3fe:	f7ff ffa3 	bl	802a348 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 802a402:	203f      	movs	r0, #63	; 0x3f
 802a404:	f7ff ffa0 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 802a408:	20a4      	movs	r0, #164	; 0xa4
 802a40a:	f7ff ff9d 	bl	802a348 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 802a40e:	20d3      	movs	r0, #211	; 0xd3
 802a410:	f7ff ff9a 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 802a414:	2000      	movs	r0, #0
 802a416:	f7ff ff97 	bl	802a348 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 802a41a:	20d5      	movs	r0, #213	; 0xd5
 802a41c:	f7ff ff94 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 802a420:	20f0      	movs	r0, #240	; 0xf0
 802a422:	f7ff ff91 	bl	802a348 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 802a426:	20d9      	movs	r0, #217	; 0xd9
 802a428:	f7ff ff8e 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 802a42c:	2022      	movs	r0, #34	; 0x22
 802a42e:	f7ff ff8b 	bl	802a348 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 802a432:	20da      	movs	r0, #218	; 0xda
 802a434:	f7ff ff88 	bl	802a348 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 802a438:	2012      	movs	r0, #18
 802a43a:	f7ff ff85 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 802a43e:	20db      	movs	r0, #219	; 0xdb
 802a440:	f7ff ff82 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 802a444:	2020      	movs	r0, #32
 802a446:	f7ff ff7f 	bl	802a348 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 802a44a:	208d      	movs	r0, #141	; 0x8d
 802a44c:	f7ff ff7c 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 802a450:	2014      	movs	r0, #20
 802a452:	f7ff ff79 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 802a456:	2001      	movs	r0, #1
 802a458:	f000 fa12 	bl	802a880 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 802a45c:	2000      	movs	r0, #0
 802a45e:	f000 f80f 	bl	802a480 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 802a462:	f000 f831 	bl	802a4c8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 802a466:	4b05      	ldr	r3, [pc, #20]	; (802a47c <ssd1306_Init+0xd0>)
 802a468:	2200      	movs	r2, #0
 802a46a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 802a46c:	4b03      	ldr	r3, [pc, #12]	; (802a47c <ssd1306_Init+0xd0>)
 802a46e:	2200      	movs	r2, #0
 802a470:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 802a472:	4b02      	ldr	r3, [pc, #8]	; (802a47c <ssd1306_Init+0xd0>)
 802a474:	2201      	movs	r2, #1
 802a476:	711a      	strb	r2, [r3, #4]
}
 802a478:	bf00      	nop
 802a47a:	bd80      	pop	{r7, pc}
 802a47c:	20002ba0 	.word	0x20002ba0

0802a480 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 802a480:	b480      	push	{r7}
 802a482:	b085      	sub	sp, #20
 802a484:	af00      	add	r7, sp, #0
 802a486:	4603      	mov	r3, r0
 802a488:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 802a48a:	2300      	movs	r3, #0
 802a48c:	60fb      	str	r3, [r7, #12]
 802a48e:	e00d      	b.n	802a4ac <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 802a490:	79fb      	ldrb	r3, [r7, #7]
 802a492:	2b00      	cmp	r3, #0
 802a494:	d101      	bne.n	802a49a <ssd1306_Fill+0x1a>
 802a496:	2100      	movs	r1, #0
 802a498:	e000      	b.n	802a49c <ssd1306_Fill+0x1c>
 802a49a:	21ff      	movs	r1, #255	; 0xff
 802a49c:	4a09      	ldr	r2, [pc, #36]	; (802a4c4 <ssd1306_Fill+0x44>)
 802a49e:	68fb      	ldr	r3, [r7, #12]
 802a4a0:	4413      	add	r3, r2
 802a4a2:	460a      	mov	r2, r1
 802a4a4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 802a4a6:	68fb      	ldr	r3, [r7, #12]
 802a4a8:	3301      	adds	r3, #1
 802a4aa:	60fb      	str	r3, [r7, #12]
 802a4ac:	68fb      	ldr	r3, [r7, #12]
 802a4ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802a4b2:	d3ed      	bcc.n	802a490 <ssd1306_Fill+0x10>
    }
}
 802a4b4:	bf00      	nop
 802a4b6:	bf00      	nop
 802a4b8:	3714      	adds	r7, #20
 802a4ba:	46bd      	mov	sp, r7
 802a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4c0:	4770      	bx	lr
 802a4c2:	bf00      	nop
 802a4c4:	200027a0 	.word	0x200027a0

0802a4c8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 802a4c8:	b580      	push	{r7, lr}
 802a4ca:	b082      	sub	sp, #8
 802a4cc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 802a4ce:	2300      	movs	r3, #0
 802a4d0:	71fb      	strb	r3, [r7, #7]
 802a4d2:	e016      	b.n	802a502 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 802a4d4:	79fb      	ldrb	r3, [r7, #7]
 802a4d6:	3b50      	subs	r3, #80	; 0x50
 802a4d8:	b2db      	uxtb	r3, r3
 802a4da:	4618      	mov	r0, r3
 802a4dc:	f7ff ff34 	bl	802a348 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 802a4e0:	2000      	movs	r0, #0
 802a4e2:	f7ff ff31 	bl	802a348 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 802a4e6:	2010      	movs	r0, #16
 802a4e8:	f7ff ff2e 	bl	802a348 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 802a4ec:	79fb      	ldrb	r3, [r7, #7]
 802a4ee:	01db      	lsls	r3, r3, #7
 802a4f0:	4a08      	ldr	r2, [pc, #32]	; (802a514 <ssd1306_UpdateScreen+0x4c>)
 802a4f2:	4413      	add	r3, r2
 802a4f4:	2180      	movs	r1, #128	; 0x80
 802a4f6:	4618      	mov	r0, r3
 802a4f8:	f7ff ff3e 	bl	802a378 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 802a4fc:	79fb      	ldrb	r3, [r7, #7]
 802a4fe:	3301      	adds	r3, #1
 802a500:	71fb      	strb	r3, [r7, #7]
 802a502:	79fb      	ldrb	r3, [r7, #7]
 802a504:	2b07      	cmp	r3, #7
 802a506:	d9e5      	bls.n	802a4d4 <ssd1306_UpdateScreen+0xc>
    }
}
 802a508:	bf00      	nop
 802a50a:	bf00      	nop
 802a50c:	3708      	adds	r7, #8
 802a50e:	46bd      	mov	sp, r7
 802a510:	bd80      	pop	{r7, pc}
 802a512:	bf00      	nop
 802a514:	200027a0 	.word	0x200027a0

0802a518 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 802a518:	b480      	push	{r7}
 802a51a:	b083      	sub	sp, #12
 802a51c:	af00      	add	r7, sp, #0
 802a51e:	4603      	mov	r3, r0
 802a520:	71fb      	strb	r3, [r7, #7]
 802a522:	460b      	mov	r3, r1
 802a524:	71bb      	strb	r3, [r7, #6]
 802a526:	4613      	mov	r3, r2
 802a528:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 802a52a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a52e:	2b00      	cmp	r3, #0
 802a530:	db3d      	blt.n	802a5ae <ssd1306_DrawPixel+0x96>
 802a532:	79bb      	ldrb	r3, [r7, #6]
 802a534:	2b3f      	cmp	r3, #63	; 0x3f
 802a536:	d83a      	bhi.n	802a5ae <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 802a538:	797b      	ldrb	r3, [r7, #5]
 802a53a:	2b01      	cmp	r3, #1
 802a53c:	d11a      	bne.n	802a574 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 802a53e:	79fa      	ldrb	r2, [r7, #7]
 802a540:	79bb      	ldrb	r3, [r7, #6]
 802a542:	08db      	lsrs	r3, r3, #3
 802a544:	b2d8      	uxtb	r0, r3
 802a546:	4603      	mov	r3, r0
 802a548:	01db      	lsls	r3, r3, #7
 802a54a:	4413      	add	r3, r2
 802a54c:	4a1b      	ldr	r2, [pc, #108]	; (802a5bc <ssd1306_DrawPixel+0xa4>)
 802a54e:	5cd3      	ldrb	r3, [r2, r3]
 802a550:	b25a      	sxtb	r2, r3
 802a552:	79bb      	ldrb	r3, [r7, #6]
 802a554:	f003 0307 	and.w	r3, r3, #7
 802a558:	2101      	movs	r1, #1
 802a55a:	fa01 f303 	lsl.w	r3, r1, r3
 802a55e:	b25b      	sxtb	r3, r3
 802a560:	4313      	orrs	r3, r2
 802a562:	b259      	sxtb	r1, r3
 802a564:	79fa      	ldrb	r2, [r7, #7]
 802a566:	4603      	mov	r3, r0
 802a568:	01db      	lsls	r3, r3, #7
 802a56a:	4413      	add	r3, r2
 802a56c:	b2c9      	uxtb	r1, r1
 802a56e:	4a13      	ldr	r2, [pc, #76]	; (802a5bc <ssd1306_DrawPixel+0xa4>)
 802a570:	54d1      	strb	r1, [r2, r3]
 802a572:	e01d      	b.n	802a5b0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 802a574:	79fa      	ldrb	r2, [r7, #7]
 802a576:	79bb      	ldrb	r3, [r7, #6]
 802a578:	08db      	lsrs	r3, r3, #3
 802a57a:	b2d8      	uxtb	r0, r3
 802a57c:	4603      	mov	r3, r0
 802a57e:	01db      	lsls	r3, r3, #7
 802a580:	4413      	add	r3, r2
 802a582:	4a0e      	ldr	r2, [pc, #56]	; (802a5bc <ssd1306_DrawPixel+0xa4>)
 802a584:	5cd3      	ldrb	r3, [r2, r3]
 802a586:	b25a      	sxtb	r2, r3
 802a588:	79bb      	ldrb	r3, [r7, #6]
 802a58a:	f003 0307 	and.w	r3, r3, #7
 802a58e:	2101      	movs	r1, #1
 802a590:	fa01 f303 	lsl.w	r3, r1, r3
 802a594:	b25b      	sxtb	r3, r3
 802a596:	43db      	mvns	r3, r3
 802a598:	b25b      	sxtb	r3, r3
 802a59a:	4013      	ands	r3, r2
 802a59c:	b259      	sxtb	r1, r3
 802a59e:	79fa      	ldrb	r2, [r7, #7]
 802a5a0:	4603      	mov	r3, r0
 802a5a2:	01db      	lsls	r3, r3, #7
 802a5a4:	4413      	add	r3, r2
 802a5a6:	b2c9      	uxtb	r1, r1
 802a5a8:	4a04      	ldr	r2, [pc, #16]	; (802a5bc <ssd1306_DrawPixel+0xa4>)
 802a5aa:	54d1      	strb	r1, [r2, r3]
 802a5ac:	e000      	b.n	802a5b0 <ssd1306_DrawPixel+0x98>
        return;
 802a5ae:	bf00      	nop
    }
}
 802a5b0:	370c      	adds	r7, #12
 802a5b2:	46bd      	mov	sp, r7
 802a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5b8:	4770      	bx	lr
 802a5ba:	bf00      	nop
 802a5bc:	200027a0 	.word	0x200027a0

0802a5c0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 802a5c0:	b590      	push	{r4, r7, lr}
 802a5c2:	b089      	sub	sp, #36	; 0x24
 802a5c4:	af00      	add	r7, sp, #0
 802a5c6:	4604      	mov	r4, r0
 802a5c8:	1d38      	adds	r0, r7, #4
 802a5ca:	e880 0006 	stmia.w	r0, {r1, r2}
 802a5ce:	461a      	mov	r2, r3
 802a5d0:	4623      	mov	r3, r4
 802a5d2:	73fb      	strb	r3, [r7, #15]
 802a5d4:	4613      	mov	r3, r2
 802a5d6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 802a5d8:	7bfb      	ldrb	r3, [r7, #15]
 802a5da:	2b1f      	cmp	r3, #31
 802a5dc:	d902      	bls.n	802a5e4 <ssd1306_WriteChar+0x24>
 802a5de:	7bfb      	ldrb	r3, [r7, #15]
 802a5e0:	2b7e      	cmp	r3, #126	; 0x7e
 802a5e2:	d901      	bls.n	802a5e8 <ssd1306_WriteChar+0x28>
        return 0;
 802a5e4:	2300      	movs	r3, #0
 802a5e6:	e06d      	b.n	802a6c4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 802a5e8:	4b38      	ldr	r3, [pc, #224]	; (802a6cc <ssd1306_WriteChar+0x10c>)
 802a5ea:	881b      	ldrh	r3, [r3, #0]
 802a5ec:	461a      	mov	r2, r3
 802a5ee:	793b      	ldrb	r3, [r7, #4]
 802a5f0:	4413      	add	r3, r2
 802a5f2:	2b80      	cmp	r3, #128	; 0x80
 802a5f4:	dc06      	bgt.n	802a604 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 802a5f6:	4b35      	ldr	r3, [pc, #212]	; (802a6cc <ssd1306_WriteChar+0x10c>)
 802a5f8:	885b      	ldrh	r3, [r3, #2]
 802a5fa:	461a      	mov	r2, r3
 802a5fc:	797b      	ldrb	r3, [r7, #5]
 802a5fe:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 802a600:	2b40      	cmp	r3, #64	; 0x40
 802a602:	dd01      	ble.n	802a608 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 802a604:	2300      	movs	r3, #0
 802a606:	e05d      	b.n	802a6c4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 802a608:	2300      	movs	r3, #0
 802a60a:	61fb      	str	r3, [r7, #28]
 802a60c:	e04c      	b.n	802a6a8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 802a60e:	68ba      	ldr	r2, [r7, #8]
 802a610:	7bfb      	ldrb	r3, [r7, #15]
 802a612:	3b20      	subs	r3, #32
 802a614:	7979      	ldrb	r1, [r7, #5]
 802a616:	fb01 f303 	mul.w	r3, r1, r3
 802a61a:	4619      	mov	r1, r3
 802a61c:	69fb      	ldr	r3, [r7, #28]
 802a61e:	440b      	add	r3, r1
 802a620:	005b      	lsls	r3, r3, #1
 802a622:	4413      	add	r3, r2
 802a624:	881b      	ldrh	r3, [r3, #0]
 802a626:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 802a628:	2300      	movs	r3, #0
 802a62a:	61bb      	str	r3, [r7, #24]
 802a62c:	e034      	b.n	802a698 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 802a62e:	697a      	ldr	r2, [r7, #20]
 802a630:	69bb      	ldr	r3, [r7, #24]
 802a632:	fa02 f303 	lsl.w	r3, r2, r3
 802a636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a63a:	2b00      	cmp	r3, #0
 802a63c:	d012      	beq.n	802a664 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 802a63e:	4b23      	ldr	r3, [pc, #140]	; (802a6cc <ssd1306_WriteChar+0x10c>)
 802a640:	881b      	ldrh	r3, [r3, #0]
 802a642:	b2da      	uxtb	r2, r3
 802a644:	69bb      	ldr	r3, [r7, #24]
 802a646:	b2db      	uxtb	r3, r3
 802a648:	4413      	add	r3, r2
 802a64a:	b2d8      	uxtb	r0, r3
 802a64c:	4b1f      	ldr	r3, [pc, #124]	; (802a6cc <ssd1306_WriteChar+0x10c>)
 802a64e:	885b      	ldrh	r3, [r3, #2]
 802a650:	b2da      	uxtb	r2, r3
 802a652:	69fb      	ldr	r3, [r7, #28]
 802a654:	b2db      	uxtb	r3, r3
 802a656:	4413      	add	r3, r2
 802a658:	b2db      	uxtb	r3, r3
 802a65a:	7bba      	ldrb	r2, [r7, #14]
 802a65c:	4619      	mov	r1, r3
 802a65e:	f7ff ff5b 	bl	802a518 <ssd1306_DrawPixel>
 802a662:	e016      	b.n	802a692 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 802a664:	4b19      	ldr	r3, [pc, #100]	; (802a6cc <ssd1306_WriteChar+0x10c>)
 802a666:	881b      	ldrh	r3, [r3, #0]
 802a668:	b2da      	uxtb	r2, r3
 802a66a:	69bb      	ldr	r3, [r7, #24]
 802a66c:	b2db      	uxtb	r3, r3
 802a66e:	4413      	add	r3, r2
 802a670:	b2d8      	uxtb	r0, r3
 802a672:	4b16      	ldr	r3, [pc, #88]	; (802a6cc <ssd1306_WriteChar+0x10c>)
 802a674:	885b      	ldrh	r3, [r3, #2]
 802a676:	b2da      	uxtb	r2, r3
 802a678:	69fb      	ldr	r3, [r7, #28]
 802a67a:	b2db      	uxtb	r3, r3
 802a67c:	4413      	add	r3, r2
 802a67e:	b2d9      	uxtb	r1, r3
 802a680:	7bbb      	ldrb	r3, [r7, #14]
 802a682:	2b00      	cmp	r3, #0
 802a684:	bf0c      	ite	eq
 802a686:	2301      	moveq	r3, #1
 802a688:	2300      	movne	r3, #0
 802a68a:	b2db      	uxtb	r3, r3
 802a68c:	461a      	mov	r2, r3
 802a68e:	f7ff ff43 	bl	802a518 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 802a692:	69bb      	ldr	r3, [r7, #24]
 802a694:	3301      	adds	r3, #1
 802a696:	61bb      	str	r3, [r7, #24]
 802a698:	793b      	ldrb	r3, [r7, #4]
 802a69a:	461a      	mov	r2, r3
 802a69c:	69bb      	ldr	r3, [r7, #24]
 802a69e:	4293      	cmp	r3, r2
 802a6a0:	d3c5      	bcc.n	802a62e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 802a6a2:	69fb      	ldr	r3, [r7, #28]
 802a6a4:	3301      	adds	r3, #1
 802a6a6:	61fb      	str	r3, [r7, #28]
 802a6a8:	797b      	ldrb	r3, [r7, #5]
 802a6aa:	461a      	mov	r2, r3
 802a6ac:	69fb      	ldr	r3, [r7, #28]
 802a6ae:	4293      	cmp	r3, r2
 802a6b0:	d3ad      	bcc.n	802a60e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 802a6b2:	4b06      	ldr	r3, [pc, #24]	; (802a6cc <ssd1306_WriteChar+0x10c>)
 802a6b4:	881a      	ldrh	r2, [r3, #0]
 802a6b6:	793b      	ldrb	r3, [r7, #4]
 802a6b8:	b29b      	uxth	r3, r3
 802a6ba:	4413      	add	r3, r2
 802a6bc:	b29a      	uxth	r2, r3
 802a6be:	4b03      	ldr	r3, [pc, #12]	; (802a6cc <ssd1306_WriteChar+0x10c>)
 802a6c0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 802a6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 802a6c4:	4618      	mov	r0, r3
 802a6c6:	3724      	adds	r7, #36	; 0x24
 802a6c8:	46bd      	mov	sp, r7
 802a6ca:	bd90      	pop	{r4, r7, pc}
 802a6cc:	20002ba0 	.word	0x20002ba0

0802a6d0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 802a6d0:	b580      	push	{r7, lr}
 802a6d2:	b084      	sub	sp, #16
 802a6d4:	af00      	add	r7, sp, #0
 802a6d6:	60f8      	str	r0, [r7, #12]
 802a6d8:	1d38      	adds	r0, r7, #4
 802a6da:	e880 0006 	stmia.w	r0, {r1, r2}
 802a6de:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 802a6e0:	e012      	b.n	802a708 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 802a6e2:	68fb      	ldr	r3, [r7, #12]
 802a6e4:	7818      	ldrb	r0, [r3, #0]
 802a6e6:	78fb      	ldrb	r3, [r7, #3]
 802a6e8:	1d3a      	adds	r2, r7, #4
 802a6ea:	ca06      	ldmia	r2, {r1, r2}
 802a6ec:	f7ff ff68 	bl	802a5c0 <ssd1306_WriteChar>
 802a6f0:	4603      	mov	r3, r0
 802a6f2:	461a      	mov	r2, r3
 802a6f4:	68fb      	ldr	r3, [r7, #12]
 802a6f6:	781b      	ldrb	r3, [r3, #0]
 802a6f8:	429a      	cmp	r2, r3
 802a6fa:	d002      	beq.n	802a702 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 802a6fc:	68fb      	ldr	r3, [r7, #12]
 802a6fe:	781b      	ldrb	r3, [r3, #0]
 802a700:	e008      	b.n	802a714 <ssd1306_WriteString+0x44>
        }
        str++;
 802a702:	68fb      	ldr	r3, [r7, #12]
 802a704:	3301      	adds	r3, #1
 802a706:	60fb      	str	r3, [r7, #12]
    while (*str) {
 802a708:	68fb      	ldr	r3, [r7, #12]
 802a70a:	781b      	ldrb	r3, [r3, #0]
 802a70c:	2b00      	cmp	r3, #0
 802a70e:	d1e8      	bne.n	802a6e2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 802a710:	68fb      	ldr	r3, [r7, #12]
 802a712:	781b      	ldrb	r3, [r3, #0]
}
 802a714:	4618      	mov	r0, r3
 802a716:	3710      	adds	r7, #16
 802a718:	46bd      	mov	sp, r7
 802a71a:	bd80      	pop	{r7, pc}

0802a71c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 802a71c:	b480      	push	{r7}
 802a71e:	b083      	sub	sp, #12
 802a720:	af00      	add	r7, sp, #0
 802a722:	4603      	mov	r3, r0
 802a724:	460a      	mov	r2, r1
 802a726:	71fb      	strb	r3, [r7, #7]
 802a728:	4613      	mov	r3, r2
 802a72a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 802a72c:	79fb      	ldrb	r3, [r7, #7]
 802a72e:	b29a      	uxth	r2, r3
 802a730:	4b05      	ldr	r3, [pc, #20]	; (802a748 <ssd1306_SetCursor+0x2c>)
 802a732:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 802a734:	79bb      	ldrb	r3, [r7, #6]
 802a736:	b29a      	uxth	r2, r3
 802a738:	4b03      	ldr	r3, [pc, #12]	; (802a748 <ssd1306_SetCursor+0x2c>)
 802a73a:	805a      	strh	r2, [r3, #2]
}
 802a73c:	bf00      	nop
 802a73e:	370c      	adds	r7, #12
 802a740:	46bd      	mov	sp, r7
 802a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a746:	4770      	bx	lr
 802a748:	20002ba0 	.word	0x20002ba0

0802a74c <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 802a74c:	b590      	push	{r4, r7, lr}
 802a74e:	b087      	sub	sp, #28
 802a750:	af00      	add	r7, sp, #0
 802a752:	4604      	mov	r4, r0
 802a754:	4608      	mov	r0, r1
 802a756:	4611      	mov	r1, r2
 802a758:	461a      	mov	r2, r3
 802a75a:	4623      	mov	r3, r4
 802a75c:	71fb      	strb	r3, [r7, #7]
 802a75e:	4603      	mov	r3, r0
 802a760:	71bb      	strb	r3, [r7, #6]
 802a762:	460b      	mov	r3, r1
 802a764:	717b      	strb	r3, [r7, #5]
 802a766:	4613      	mov	r3, r2
 802a768:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 802a76a:	797b      	ldrb	r3, [r7, #5]
 802a76c:	425b      	negs	r3, r3
 802a76e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 802a770:	2300      	movs	r3, #0
 802a772:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 802a774:	797b      	ldrb	r3, [r7, #5]
 802a776:	f1c3 0301 	rsb	r3, r3, #1
 802a77a:	005b      	lsls	r3, r3, #1
 802a77c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 802a77e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a782:	2b00      	cmp	r3, #0
 802a784:	db65      	blt.n	802a852 <ssd1306_DrawCircle+0x106>
 802a786:	79bb      	ldrb	r3, [r7, #6]
 802a788:	2b3f      	cmp	r3, #63	; 0x3f
 802a78a:	d862      	bhi.n	802a852 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 802a78c:	697b      	ldr	r3, [r7, #20]
 802a78e:	b2db      	uxtb	r3, r3
 802a790:	79fa      	ldrb	r2, [r7, #7]
 802a792:	1ad3      	subs	r3, r2, r3
 802a794:	b2d8      	uxtb	r0, r3
 802a796:	693b      	ldr	r3, [r7, #16]
 802a798:	b2da      	uxtb	r2, r3
 802a79a:	79bb      	ldrb	r3, [r7, #6]
 802a79c:	4413      	add	r3, r2
 802a79e:	b2db      	uxtb	r3, r3
 802a7a0:	793a      	ldrb	r2, [r7, #4]
 802a7a2:	4619      	mov	r1, r3
 802a7a4:	f7ff feb8 	bl	802a518 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 802a7a8:	697b      	ldr	r3, [r7, #20]
 802a7aa:	b2da      	uxtb	r2, r3
 802a7ac:	79fb      	ldrb	r3, [r7, #7]
 802a7ae:	4413      	add	r3, r2
 802a7b0:	b2d8      	uxtb	r0, r3
 802a7b2:	693b      	ldr	r3, [r7, #16]
 802a7b4:	b2da      	uxtb	r2, r3
 802a7b6:	79bb      	ldrb	r3, [r7, #6]
 802a7b8:	4413      	add	r3, r2
 802a7ba:	b2db      	uxtb	r3, r3
 802a7bc:	793a      	ldrb	r2, [r7, #4]
 802a7be:	4619      	mov	r1, r3
 802a7c0:	f7ff feaa 	bl	802a518 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 802a7c4:	697b      	ldr	r3, [r7, #20]
 802a7c6:	b2da      	uxtb	r2, r3
 802a7c8:	79fb      	ldrb	r3, [r7, #7]
 802a7ca:	4413      	add	r3, r2
 802a7cc:	b2d8      	uxtb	r0, r3
 802a7ce:	693b      	ldr	r3, [r7, #16]
 802a7d0:	b2db      	uxtb	r3, r3
 802a7d2:	79ba      	ldrb	r2, [r7, #6]
 802a7d4:	1ad3      	subs	r3, r2, r3
 802a7d6:	b2db      	uxtb	r3, r3
 802a7d8:	793a      	ldrb	r2, [r7, #4]
 802a7da:	4619      	mov	r1, r3
 802a7dc:	f7ff fe9c 	bl	802a518 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 802a7e0:	697b      	ldr	r3, [r7, #20]
 802a7e2:	b2db      	uxtb	r3, r3
 802a7e4:	79fa      	ldrb	r2, [r7, #7]
 802a7e6:	1ad3      	subs	r3, r2, r3
 802a7e8:	b2d8      	uxtb	r0, r3
 802a7ea:	693b      	ldr	r3, [r7, #16]
 802a7ec:	b2db      	uxtb	r3, r3
 802a7ee:	79ba      	ldrb	r2, [r7, #6]
 802a7f0:	1ad3      	subs	r3, r2, r3
 802a7f2:	b2db      	uxtb	r3, r3
 802a7f4:	793a      	ldrb	r2, [r7, #4]
 802a7f6:	4619      	mov	r1, r3
 802a7f8:	f7ff fe8e 	bl	802a518 <ssd1306_DrawPixel>
        e2 = err;
 802a7fc:	68fb      	ldr	r3, [r7, #12]
 802a7fe:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 802a800:	68ba      	ldr	r2, [r7, #8]
 802a802:	693b      	ldr	r3, [r7, #16]
 802a804:	429a      	cmp	r2, r3
 802a806:	dc13      	bgt.n	802a830 <ssd1306_DrawCircle+0xe4>
            y++;
 802a808:	693b      	ldr	r3, [r7, #16]
 802a80a:	3301      	adds	r3, #1
 802a80c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 802a80e:	693b      	ldr	r3, [r7, #16]
 802a810:	005b      	lsls	r3, r3, #1
 802a812:	3301      	adds	r3, #1
 802a814:	68fa      	ldr	r2, [r7, #12]
 802a816:	4413      	add	r3, r2
 802a818:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 802a81a:	697b      	ldr	r3, [r7, #20]
 802a81c:	425b      	negs	r3, r3
 802a81e:	693a      	ldr	r2, [r7, #16]
 802a820:	429a      	cmp	r2, r3
 802a822:	d105      	bne.n	802a830 <ssd1306_DrawCircle+0xe4>
 802a824:	68ba      	ldr	r2, [r7, #8]
 802a826:	697b      	ldr	r3, [r7, #20]
 802a828:	429a      	cmp	r2, r3
 802a82a:	dc01      	bgt.n	802a830 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 802a82c:	2300      	movs	r3, #0
 802a82e:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 802a830:	68ba      	ldr	r2, [r7, #8]
 802a832:	697b      	ldr	r3, [r7, #20]
 802a834:	429a      	cmp	r2, r3
 802a836:	dd08      	ble.n	802a84a <ssd1306_DrawCircle+0xfe>
            x++;
 802a838:	697b      	ldr	r3, [r7, #20]
 802a83a:	3301      	adds	r3, #1
 802a83c:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 802a83e:	697b      	ldr	r3, [r7, #20]
 802a840:	005b      	lsls	r3, r3, #1
 802a842:	3301      	adds	r3, #1
 802a844:	68fa      	ldr	r2, [r7, #12]
 802a846:	4413      	add	r3, r2
 802a848:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 802a84a:	697b      	ldr	r3, [r7, #20]
 802a84c:	2b00      	cmp	r3, #0
 802a84e:	dd9d      	ble.n	802a78c <ssd1306_DrawCircle+0x40>

    return;
 802a850:	e000      	b.n	802a854 <ssd1306_DrawCircle+0x108>
        return;
 802a852:	bf00      	nop
}
 802a854:	371c      	adds	r7, #28
 802a856:	46bd      	mov	sp, r7
 802a858:	bd90      	pop	{r4, r7, pc}

0802a85a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 802a85a:	b580      	push	{r7, lr}
 802a85c:	b084      	sub	sp, #16
 802a85e:	af00      	add	r7, sp, #0
 802a860:	4603      	mov	r3, r0
 802a862:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 802a864:	2381      	movs	r3, #129	; 0x81
 802a866:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 802a868:	7bfb      	ldrb	r3, [r7, #15]
 802a86a:	4618      	mov	r0, r3
 802a86c:	f7ff fd6c 	bl	802a348 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 802a870:	79fb      	ldrb	r3, [r7, #7]
 802a872:	4618      	mov	r0, r3
 802a874:	f7ff fd68 	bl	802a348 <ssd1306_WriteCommand>
}
 802a878:	bf00      	nop
 802a87a:	3710      	adds	r7, #16
 802a87c:	46bd      	mov	sp, r7
 802a87e:	bd80      	pop	{r7, pc}

0802a880 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 802a880:	b580      	push	{r7, lr}
 802a882:	b084      	sub	sp, #16
 802a884:	af00      	add	r7, sp, #0
 802a886:	4603      	mov	r3, r0
 802a888:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 802a88a:	79fb      	ldrb	r3, [r7, #7]
 802a88c:	2b00      	cmp	r3, #0
 802a88e:	d005      	beq.n	802a89c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 802a890:	23af      	movs	r3, #175	; 0xaf
 802a892:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 802a894:	4b08      	ldr	r3, [pc, #32]	; (802a8b8 <ssd1306_SetDisplayOn+0x38>)
 802a896:	2201      	movs	r2, #1
 802a898:	715a      	strb	r2, [r3, #5]
 802a89a:	e004      	b.n	802a8a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 802a89c:	23ae      	movs	r3, #174	; 0xae
 802a89e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 802a8a0:	4b05      	ldr	r3, [pc, #20]	; (802a8b8 <ssd1306_SetDisplayOn+0x38>)
 802a8a2:	2200      	movs	r2, #0
 802a8a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 802a8a6:	7bfb      	ldrb	r3, [r7, #15]
 802a8a8:	4618      	mov	r0, r3
 802a8aa:	f7ff fd4d 	bl	802a348 <ssd1306_WriteCommand>
}
 802a8ae:	bf00      	nop
 802a8b0:	3710      	adds	r7, #16
 802a8b2:	46bd      	mov	sp, r7
 802a8b4:	bd80      	pop	{r7, pc}
 802a8b6:	bf00      	nop
 802a8b8:	20002ba0 	.word	0x20002ba0

0802a8bc <arm_sin_f32>:
 802a8bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802a93c <arm_sin_f32+0x80>
 802a8c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 802a8c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a8cc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802a8d0:	d504      	bpl.n	802a8dc <arm_sin_f32+0x20>
 802a8d2:	ee17 3a90 	vmov	r3, s15
 802a8d6:	3b01      	subs	r3, #1
 802a8d8:	ee07 3a90 	vmov	s15, r3
 802a8dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802a8e0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 802a940 <arm_sin_f32+0x84>
 802a8e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 802a8e8:	ee20 0a07 	vmul.f32	s0, s0, s14
 802a8ec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 802a8f0:	ee17 3a90 	vmov	r3, s15
 802a8f4:	b29b      	uxth	r3, r3
 802a8f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a8fa:	d21a      	bcs.n	802a932 <arm_sin_f32+0x76>
 802a8fc:	ee07 3a90 	vmov	s15, r3
 802a900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a904:	1c59      	adds	r1, r3, #1
 802a906:	ee30 0a67 	vsub.f32	s0, s0, s15
 802a90a:	4a0e      	ldr	r2, [pc, #56]	; (802a944 <arm_sin_f32+0x88>)
 802a90c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802a910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a914:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 802a918:	ed93 7a00 	vldr	s14, [r3]
 802a91c:	edd2 6a00 	vldr	s13, [r2]
 802a920:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802a924:	ee20 0a26 	vmul.f32	s0, s0, s13
 802a928:	ee67 7a87 	vmul.f32	s15, s15, s14
 802a92c:	ee37 0a80 	vadd.f32	s0, s15, s0
 802a930:	4770      	bx	lr
 802a932:	ee30 0a47 	vsub.f32	s0, s0, s14
 802a936:	2101      	movs	r1, #1
 802a938:	2300      	movs	r3, #0
 802a93a:	e7e6      	b.n	802a90a <arm_sin_f32+0x4e>
 802a93c:	3e22f983 	.word	0x3e22f983
 802a940:	44000000 	.word	0x44000000
 802a944:	0807793c 	.word	0x0807793c

0802a948 <__errno>:
 802a948:	4b01      	ldr	r3, [pc, #4]	; (802a950 <__errno+0x8>)
 802a94a:	6818      	ldr	r0, [r3, #0]
 802a94c:	4770      	bx	lr
 802a94e:	bf00      	nop
 802a950:	200002ac 	.word	0x200002ac

0802a954 <__libc_init_array>:
 802a954:	b570      	push	{r4, r5, r6, lr}
 802a956:	4d0d      	ldr	r5, [pc, #52]	; (802a98c <__libc_init_array+0x38>)
 802a958:	4c0d      	ldr	r4, [pc, #52]	; (802a990 <__libc_init_array+0x3c>)
 802a95a:	1b64      	subs	r4, r4, r5
 802a95c:	10a4      	asrs	r4, r4, #2
 802a95e:	2600      	movs	r6, #0
 802a960:	42a6      	cmp	r6, r4
 802a962:	d109      	bne.n	802a978 <__libc_init_array+0x24>
 802a964:	4d0b      	ldr	r5, [pc, #44]	; (802a994 <__libc_init_array+0x40>)
 802a966:	4c0c      	ldr	r4, [pc, #48]	; (802a998 <__libc_init_array+0x44>)
 802a968:	f001 fdec 	bl	802c544 <_init>
 802a96c:	1b64      	subs	r4, r4, r5
 802a96e:	10a4      	asrs	r4, r4, #2
 802a970:	2600      	movs	r6, #0
 802a972:	42a6      	cmp	r6, r4
 802a974:	d105      	bne.n	802a982 <__libc_init_array+0x2e>
 802a976:	bd70      	pop	{r4, r5, r6, pc}
 802a978:	f855 3b04 	ldr.w	r3, [r5], #4
 802a97c:	4798      	blx	r3
 802a97e:	3601      	adds	r6, #1
 802a980:	e7ee      	b.n	802a960 <__libc_init_array+0xc>
 802a982:	f855 3b04 	ldr.w	r3, [r5], #4
 802a986:	4798      	blx	r3
 802a988:	3601      	adds	r6, #1
 802a98a:	e7f2      	b.n	802a972 <__libc_init_array+0x1e>
 802a98c:	08078300 	.word	0x08078300
 802a990:	08078300 	.word	0x08078300
 802a994:	08078300 	.word	0x08078300
 802a998:	08078304 	.word	0x08078304

0802a99c <memcpy>:
 802a99c:	440a      	add	r2, r1
 802a99e:	4291      	cmp	r1, r2
 802a9a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802a9a4:	d100      	bne.n	802a9a8 <memcpy+0xc>
 802a9a6:	4770      	bx	lr
 802a9a8:	b510      	push	{r4, lr}
 802a9aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a9ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a9b2:	4291      	cmp	r1, r2
 802a9b4:	d1f9      	bne.n	802a9aa <memcpy+0xe>
 802a9b6:	bd10      	pop	{r4, pc}

0802a9b8 <memmove>:
 802a9b8:	4288      	cmp	r0, r1
 802a9ba:	b510      	push	{r4, lr}
 802a9bc:	eb01 0402 	add.w	r4, r1, r2
 802a9c0:	d902      	bls.n	802a9c8 <memmove+0x10>
 802a9c2:	4284      	cmp	r4, r0
 802a9c4:	4623      	mov	r3, r4
 802a9c6:	d807      	bhi.n	802a9d8 <memmove+0x20>
 802a9c8:	1e43      	subs	r3, r0, #1
 802a9ca:	42a1      	cmp	r1, r4
 802a9cc:	d008      	beq.n	802a9e0 <memmove+0x28>
 802a9ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a9d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a9d6:	e7f8      	b.n	802a9ca <memmove+0x12>
 802a9d8:	4402      	add	r2, r0
 802a9da:	4601      	mov	r1, r0
 802a9dc:	428a      	cmp	r2, r1
 802a9de:	d100      	bne.n	802a9e2 <memmove+0x2a>
 802a9e0:	bd10      	pop	{r4, pc}
 802a9e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a9e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a9ea:	e7f7      	b.n	802a9dc <memmove+0x24>

0802a9ec <memset>:
 802a9ec:	4402      	add	r2, r0
 802a9ee:	4603      	mov	r3, r0
 802a9f0:	4293      	cmp	r3, r2
 802a9f2:	d100      	bne.n	802a9f6 <memset+0xa>
 802a9f4:	4770      	bx	lr
 802a9f6:	f803 1b01 	strb.w	r1, [r3], #1
 802a9fa:	e7f9      	b.n	802a9f0 <memset+0x4>

0802a9fc <srand>:
 802a9fc:	b538      	push	{r3, r4, r5, lr}
 802a9fe:	4b10      	ldr	r3, [pc, #64]	; (802aa40 <srand+0x44>)
 802aa00:	681d      	ldr	r5, [r3, #0]
 802aa02:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802aa04:	4604      	mov	r4, r0
 802aa06:	b9b3      	cbnz	r3, 802aa36 <srand+0x3a>
 802aa08:	2018      	movs	r0, #24
 802aa0a:	f000 f8df 	bl	802abcc <malloc>
 802aa0e:	4602      	mov	r2, r0
 802aa10:	63a8      	str	r0, [r5, #56]	; 0x38
 802aa12:	b920      	cbnz	r0, 802aa1e <srand+0x22>
 802aa14:	4b0b      	ldr	r3, [pc, #44]	; (802aa44 <srand+0x48>)
 802aa16:	480c      	ldr	r0, [pc, #48]	; (802aa48 <srand+0x4c>)
 802aa18:	2142      	movs	r1, #66	; 0x42
 802aa1a:	f000 f895 	bl	802ab48 <__assert_func>
 802aa1e:	490b      	ldr	r1, [pc, #44]	; (802aa4c <srand+0x50>)
 802aa20:	4b0b      	ldr	r3, [pc, #44]	; (802aa50 <srand+0x54>)
 802aa22:	e9c0 1300 	strd	r1, r3, [r0]
 802aa26:	4b0b      	ldr	r3, [pc, #44]	; (802aa54 <srand+0x58>)
 802aa28:	6083      	str	r3, [r0, #8]
 802aa2a:	230b      	movs	r3, #11
 802aa2c:	8183      	strh	r3, [r0, #12]
 802aa2e:	2100      	movs	r1, #0
 802aa30:	2001      	movs	r0, #1
 802aa32:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802aa36:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802aa38:	2200      	movs	r2, #0
 802aa3a:	611c      	str	r4, [r3, #16]
 802aa3c:	615a      	str	r2, [r3, #20]
 802aa3e:	bd38      	pop	{r3, r4, r5, pc}
 802aa40:	200002ac 	.word	0x200002ac
 802aa44:	08078144 	.word	0x08078144
 802aa48:	0807815b 	.word	0x0807815b
 802aa4c:	abcd330e 	.word	0xabcd330e
 802aa50:	e66d1234 	.word	0xe66d1234
 802aa54:	0005deec 	.word	0x0005deec

0802aa58 <rand>:
 802aa58:	4b16      	ldr	r3, [pc, #88]	; (802aab4 <rand+0x5c>)
 802aa5a:	b510      	push	{r4, lr}
 802aa5c:	681c      	ldr	r4, [r3, #0]
 802aa5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802aa60:	b9b3      	cbnz	r3, 802aa90 <rand+0x38>
 802aa62:	2018      	movs	r0, #24
 802aa64:	f000 f8b2 	bl	802abcc <malloc>
 802aa68:	63a0      	str	r0, [r4, #56]	; 0x38
 802aa6a:	b928      	cbnz	r0, 802aa78 <rand+0x20>
 802aa6c:	4602      	mov	r2, r0
 802aa6e:	4b12      	ldr	r3, [pc, #72]	; (802aab8 <rand+0x60>)
 802aa70:	4812      	ldr	r0, [pc, #72]	; (802aabc <rand+0x64>)
 802aa72:	214e      	movs	r1, #78	; 0x4e
 802aa74:	f000 f868 	bl	802ab48 <__assert_func>
 802aa78:	4a11      	ldr	r2, [pc, #68]	; (802aac0 <rand+0x68>)
 802aa7a:	4b12      	ldr	r3, [pc, #72]	; (802aac4 <rand+0x6c>)
 802aa7c:	e9c0 2300 	strd	r2, r3, [r0]
 802aa80:	4b11      	ldr	r3, [pc, #68]	; (802aac8 <rand+0x70>)
 802aa82:	6083      	str	r3, [r0, #8]
 802aa84:	230b      	movs	r3, #11
 802aa86:	8183      	strh	r3, [r0, #12]
 802aa88:	2201      	movs	r2, #1
 802aa8a:	2300      	movs	r3, #0
 802aa8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802aa90:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802aa92:	4a0e      	ldr	r2, [pc, #56]	; (802aacc <rand+0x74>)
 802aa94:	6920      	ldr	r0, [r4, #16]
 802aa96:	6963      	ldr	r3, [r4, #20]
 802aa98:	490d      	ldr	r1, [pc, #52]	; (802aad0 <rand+0x78>)
 802aa9a:	4342      	muls	r2, r0
 802aa9c:	fb01 2203 	mla	r2, r1, r3, r2
 802aaa0:	fba0 0101 	umull	r0, r1, r0, r1
 802aaa4:	1c43      	adds	r3, r0, #1
 802aaa6:	eb42 0001 	adc.w	r0, r2, r1
 802aaaa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802aaae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802aab2:	bd10      	pop	{r4, pc}
 802aab4:	200002ac 	.word	0x200002ac
 802aab8:	08078144 	.word	0x08078144
 802aabc:	0807815b 	.word	0x0807815b
 802aac0:	abcd330e 	.word	0xabcd330e
 802aac4:	e66d1234 	.word	0xe66d1234
 802aac8:	0005deec 	.word	0x0005deec
 802aacc:	5851f42d 	.word	0x5851f42d
 802aad0:	4c957f2d 	.word	0x4c957f2d

0802aad4 <siprintf>:
 802aad4:	b40e      	push	{r1, r2, r3}
 802aad6:	b500      	push	{lr}
 802aad8:	b09c      	sub	sp, #112	; 0x70
 802aada:	ab1d      	add	r3, sp, #116	; 0x74
 802aadc:	9002      	str	r0, [sp, #8]
 802aade:	9006      	str	r0, [sp, #24]
 802aae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802aae4:	4809      	ldr	r0, [pc, #36]	; (802ab0c <siprintf+0x38>)
 802aae6:	9107      	str	r1, [sp, #28]
 802aae8:	9104      	str	r1, [sp, #16]
 802aaea:	4909      	ldr	r1, [pc, #36]	; (802ab10 <siprintf+0x3c>)
 802aaec:	f853 2b04 	ldr.w	r2, [r3], #4
 802aaf0:	9105      	str	r1, [sp, #20]
 802aaf2:	6800      	ldr	r0, [r0, #0]
 802aaf4:	9301      	str	r3, [sp, #4]
 802aaf6:	a902      	add	r1, sp, #8
 802aaf8:	f000 f9ac 	bl	802ae54 <_svfiprintf_r>
 802aafc:	9b02      	ldr	r3, [sp, #8]
 802aafe:	2200      	movs	r2, #0
 802ab00:	701a      	strb	r2, [r3, #0]
 802ab02:	b01c      	add	sp, #112	; 0x70
 802ab04:	f85d eb04 	ldr.w	lr, [sp], #4
 802ab08:	b003      	add	sp, #12
 802ab0a:	4770      	bx	lr
 802ab0c:	200002ac 	.word	0x200002ac
 802ab10:	ffff0208 	.word	0xffff0208

0802ab14 <time>:
 802ab14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ab16:	4b0b      	ldr	r3, [pc, #44]	; (802ab44 <time+0x30>)
 802ab18:	2200      	movs	r2, #0
 802ab1a:	4669      	mov	r1, sp
 802ab1c:	4604      	mov	r4, r0
 802ab1e:	6818      	ldr	r0, [r3, #0]
 802ab20:	f000 f842 	bl	802aba8 <_gettimeofday_r>
 802ab24:	2800      	cmp	r0, #0
 802ab26:	bfbe      	ittt	lt
 802ab28:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 802ab2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802ab30:	e9cd 2300 	strdlt	r2, r3, [sp]
 802ab34:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ab38:	b10c      	cbz	r4, 802ab3e <time+0x2a>
 802ab3a:	e9c4 0100 	strd	r0, r1, [r4]
 802ab3e:	b004      	add	sp, #16
 802ab40:	bd10      	pop	{r4, pc}
 802ab42:	bf00      	nop
 802ab44:	200002ac 	.word	0x200002ac

0802ab48 <__assert_func>:
 802ab48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ab4a:	4614      	mov	r4, r2
 802ab4c:	461a      	mov	r2, r3
 802ab4e:	4b09      	ldr	r3, [pc, #36]	; (802ab74 <__assert_func+0x2c>)
 802ab50:	681b      	ldr	r3, [r3, #0]
 802ab52:	4605      	mov	r5, r0
 802ab54:	68d8      	ldr	r0, [r3, #12]
 802ab56:	b14c      	cbz	r4, 802ab6c <__assert_func+0x24>
 802ab58:	4b07      	ldr	r3, [pc, #28]	; (802ab78 <__assert_func+0x30>)
 802ab5a:	9100      	str	r1, [sp, #0]
 802ab5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802ab60:	4906      	ldr	r1, [pc, #24]	; (802ab7c <__assert_func+0x34>)
 802ab62:	462b      	mov	r3, r5
 802ab64:	f000 f80e 	bl	802ab84 <fiprintf>
 802ab68:	f000 fe32 	bl	802b7d0 <abort>
 802ab6c:	4b04      	ldr	r3, [pc, #16]	; (802ab80 <__assert_func+0x38>)
 802ab6e:	461c      	mov	r4, r3
 802ab70:	e7f3      	b.n	802ab5a <__assert_func+0x12>
 802ab72:	bf00      	nop
 802ab74:	200002ac 	.word	0x200002ac
 802ab78:	080781b6 	.word	0x080781b6
 802ab7c:	080781c3 	.word	0x080781c3
 802ab80:	080781f1 	.word	0x080781f1

0802ab84 <fiprintf>:
 802ab84:	b40e      	push	{r1, r2, r3}
 802ab86:	b503      	push	{r0, r1, lr}
 802ab88:	4601      	mov	r1, r0
 802ab8a:	ab03      	add	r3, sp, #12
 802ab8c:	4805      	ldr	r0, [pc, #20]	; (802aba4 <fiprintf+0x20>)
 802ab8e:	f853 2b04 	ldr.w	r2, [r3], #4
 802ab92:	6800      	ldr	r0, [r0, #0]
 802ab94:	9301      	str	r3, [sp, #4]
 802ab96:	f000 fa87 	bl	802b0a8 <_vfiprintf_r>
 802ab9a:	b002      	add	sp, #8
 802ab9c:	f85d eb04 	ldr.w	lr, [sp], #4
 802aba0:	b003      	add	sp, #12
 802aba2:	4770      	bx	lr
 802aba4:	200002ac 	.word	0x200002ac

0802aba8 <_gettimeofday_r>:
 802aba8:	b538      	push	{r3, r4, r5, lr}
 802abaa:	4d07      	ldr	r5, [pc, #28]	; (802abc8 <_gettimeofday_r+0x20>)
 802abac:	2300      	movs	r3, #0
 802abae:	4604      	mov	r4, r0
 802abb0:	4608      	mov	r0, r1
 802abb2:	4611      	mov	r1, r2
 802abb4:	602b      	str	r3, [r5, #0]
 802abb6:	f001 fcbd 	bl	802c534 <_gettimeofday>
 802abba:	1c43      	adds	r3, r0, #1
 802abbc:	d102      	bne.n	802abc4 <_gettimeofday_r+0x1c>
 802abbe:	682b      	ldr	r3, [r5, #0]
 802abc0:	b103      	cbz	r3, 802abc4 <_gettimeofday_r+0x1c>
 802abc2:	6023      	str	r3, [r4, #0]
 802abc4:	bd38      	pop	{r3, r4, r5, pc}
 802abc6:	bf00      	nop
 802abc8:	20002bb0 	.word	0x20002bb0

0802abcc <malloc>:
 802abcc:	4b02      	ldr	r3, [pc, #8]	; (802abd8 <malloc+0xc>)
 802abce:	4601      	mov	r1, r0
 802abd0:	6818      	ldr	r0, [r3, #0]
 802abd2:	f000 b86f 	b.w	802acb4 <_malloc_r>
 802abd6:	bf00      	nop
 802abd8:	200002ac 	.word	0x200002ac

0802abdc <_free_r>:
 802abdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802abde:	2900      	cmp	r1, #0
 802abe0:	d044      	beq.n	802ac6c <_free_r+0x90>
 802abe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802abe6:	9001      	str	r0, [sp, #4]
 802abe8:	2b00      	cmp	r3, #0
 802abea:	f1a1 0404 	sub.w	r4, r1, #4
 802abee:	bfb8      	it	lt
 802abf0:	18e4      	addlt	r4, r4, r3
 802abf2:	f001 f815 	bl	802bc20 <__malloc_lock>
 802abf6:	4a1e      	ldr	r2, [pc, #120]	; (802ac70 <_free_r+0x94>)
 802abf8:	9801      	ldr	r0, [sp, #4]
 802abfa:	6813      	ldr	r3, [r2, #0]
 802abfc:	b933      	cbnz	r3, 802ac0c <_free_r+0x30>
 802abfe:	6063      	str	r3, [r4, #4]
 802ac00:	6014      	str	r4, [r2, #0]
 802ac02:	b003      	add	sp, #12
 802ac04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ac08:	f001 b810 	b.w	802bc2c <__malloc_unlock>
 802ac0c:	42a3      	cmp	r3, r4
 802ac0e:	d908      	bls.n	802ac22 <_free_r+0x46>
 802ac10:	6825      	ldr	r5, [r4, #0]
 802ac12:	1961      	adds	r1, r4, r5
 802ac14:	428b      	cmp	r3, r1
 802ac16:	bf01      	itttt	eq
 802ac18:	6819      	ldreq	r1, [r3, #0]
 802ac1a:	685b      	ldreq	r3, [r3, #4]
 802ac1c:	1949      	addeq	r1, r1, r5
 802ac1e:	6021      	streq	r1, [r4, #0]
 802ac20:	e7ed      	b.n	802abfe <_free_r+0x22>
 802ac22:	461a      	mov	r2, r3
 802ac24:	685b      	ldr	r3, [r3, #4]
 802ac26:	b10b      	cbz	r3, 802ac2c <_free_r+0x50>
 802ac28:	42a3      	cmp	r3, r4
 802ac2a:	d9fa      	bls.n	802ac22 <_free_r+0x46>
 802ac2c:	6811      	ldr	r1, [r2, #0]
 802ac2e:	1855      	adds	r5, r2, r1
 802ac30:	42a5      	cmp	r5, r4
 802ac32:	d10b      	bne.n	802ac4c <_free_r+0x70>
 802ac34:	6824      	ldr	r4, [r4, #0]
 802ac36:	4421      	add	r1, r4
 802ac38:	1854      	adds	r4, r2, r1
 802ac3a:	42a3      	cmp	r3, r4
 802ac3c:	6011      	str	r1, [r2, #0]
 802ac3e:	d1e0      	bne.n	802ac02 <_free_r+0x26>
 802ac40:	681c      	ldr	r4, [r3, #0]
 802ac42:	685b      	ldr	r3, [r3, #4]
 802ac44:	6053      	str	r3, [r2, #4]
 802ac46:	4421      	add	r1, r4
 802ac48:	6011      	str	r1, [r2, #0]
 802ac4a:	e7da      	b.n	802ac02 <_free_r+0x26>
 802ac4c:	d902      	bls.n	802ac54 <_free_r+0x78>
 802ac4e:	230c      	movs	r3, #12
 802ac50:	6003      	str	r3, [r0, #0]
 802ac52:	e7d6      	b.n	802ac02 <_free_r+0x26>
 802ac54:	6825      	ldr	r5, [r4, #0]
 802ac56:	1961      	adds	r1, r4, r5
 802ac58:	428b      	cmp	r3, r1
 802ac5a:	bf04      	itt	eq
 802ac5c:	6819      	ldreq	r1, [r3, #0]
 802ac5e:	685b      	ldreq	r3, [r3, #4]
 802ac60:	6063      	str	r3, [r4, #4]
 802ac62:	bf04      	itt	eq
 802ac64:	1949      	addeq	r1, r1, r5
 802ac66:	6021      	streq	r1, [r4, #0]
 802ac68:	6054      	str	r4, [r2, #4]
 802ac6a:	e7ca      	b.n	802ac02 <_free_r+0x26>
 802ac6c:	b003      	add	sp, #12
 802ac6e:	bd30      	pop	{r4, r5, pc}
 802ac70:	20002ba8 	.word	0x20002ba8

0802ac74 <sbrk_aligned>:
 802ac74:	b570      	push	{r4, r5, r6, lr}
 802ac76:	4e0e      	ldr	r6, [pc, #56]	; (802acb0 <sbrk_aligned+0x3c>)
 802ac78:	460c      	mov	r4, r1
 802ac7a:	6831      	ldr	r1, [r6, #0]
 802ac7c:	4605      	mov	r5, r0
 802ac7e:	b911      	cbnz	r1, 802ac86 <sbrk_aligned+0x12>
 802ac80:	f000 fcd6 	bl	802b630 <_sbrk_r>
 802ac84:	6030      	str	r0, [r6, #0]
 802ac86:	4621      	mov	r1, r4
 802ac88:	4628      	mov	r0, r5
 802ac8a:	f000 fcd1 	bl	802b630 <_sbrk_r>
 802ac8e:	1c43      	adds	r3, r0, #1
 802ac90:	d00a      	beq.n	802aca8 <sbrk_aligned+0x34>
 802ac92:	1cc4      	adds	r4, r0, #3
 802ac94:	f024 0403 	bic.w	r4, r4, #3
 802ac98:	42a0      	cmp	r0, r4
 802ac9a:	d007      	beq.n	802acac <sbrk_aligned+0x38>
 802ac9c:	1a21      	subs	r1, r4, r0
 802ac9e:	4628      	mov	r0, r5
 802aca0:	f000 fcc6 	bl	802b630 <_sbrk_r>
 802aca4:	3001      	adds	r0, #1
 802aca6:	d101      	bne.n	802acac <sbrk_aligned+0x38>
 802aca8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 802acac:	4620      	mov	r0, r4
 802acae:	bd70      	pop	{r4, r5, r6, pc}
 802acb0:	20002bac 	.word	0x20002bac

0802acb4 <_malloc_r>:
 802acb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802acb8:	1ccd      	adds	r5, r1, #3
 802acba:	f025 0503 	bic.w	r5, r5, #3
 802acbe:	3508      	adds	r5, #8
 802acc0:	2d0c      	cmp	r5, #12
 802acc2:	bf38      	it	cc
 802acc4:	250c      	movcc	r5, #12
 802acc6:	2d00      	cmp	r5, #0
 802acc8:	4607      	mov	r7, r0
 802acca:	db01      	blt.n	802acd0 <_malloc_r+0x1c>
 802accc:	42a9      	cmp	r1, r5
 802acce:	d905      	bls.n	802acdc <_malloc_r+0x28>
 802acd0:	230c      	movs	r3, #12
 802acd2:	603b      	str	r3, [r7, #0]
 802acd4:	2600      	movs	r6, #0
 802acd6:	4630      	mov	r0, r6
 802acd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802acdc:	4e2e      	ldr	r6, [pc, #184]	; (802ad98 <_malloc_r+0xe4>)
 802acde:	f000 ff9f 	bl	802bc20 <__malloc_lock>
 802ace2:	6833      	ldr	r3, [r6, #0]
 802ace4:	461c      	mov	r4, r3
 802ace6:	bb34      	cbnz	r4, 802ad36 <_malloc_r+0x82>
 802ace8:	4629      	mov	r1, r5
 802acea:	4638      	mov	r0, r7
 802acec:	f7ff ffc2 	bl	802ac74 <sbrk_aligned>
 802acf0:	1c43      	adds	r3, r0, #1
 802acf2:	4604      	mov	r4, r0
 802acf4:	d14d      	bne.n	802ad92 <_malloc_r+0xde>
 802acf6:	6834      	ldr	r4, [r6, #0]
 802acf8:	4626      	mov	r6, r4
 802acfa:	2e00      	cmp	r6, #0
 802acfc:	d140      	bne.n	802ad80 <_malloc_r+0xcc>
 802acfe:	6823      	ldr	r3, [r4, #0]
 802ad00:	4631      	mov	r1, r6
 802ad02:	4638      	mov	r0, r7
 802ad04:	eb04 0803 	add.w	r8, r4, r3
 802ad08:	f000 fc92 	bl	802b630 <_sbrk_r>
 802ad0c:	4580      	cmp	r8, r0
 802ad0e:	d13a      	bne.n	802ad86 <_malloc_r+0xd2>
 802ad10:	6821      	ldr	r1, [r4, #0]
 802ad12:	3503      	adds	r5, #3
 802ad14:	1a6d      	subs	r5, r5, r1
 802ad16:	f025 0503 	bic.w	r5, r5, #3
 802ad1a:	3508      	adds	r5, #8
 802ad1c:	2d0c      	cmp	r5, #12
 802ad1e:	bf38      	it	cc
 802ad20:	250c      	movcc	r5, #12
 802ad22:	4629      	mov	r1, r5
 802ad24:	4638      	mov	r0, r7
 802ad26:	f7ff ffa5 	bl	802ac74 <sbrk_aligned>
 802ad2a:	3001      	adds	r0, #1
 802ad2c:	d02b      	beq.n	802ad86 <_malloc_r+0xd2>
 802ad2e:	6823      	ldr	r3, [r4, #0]
 802ad30:	442b      	add	r3, r5
 802ad32:	6023      	str	r3, [r4, #0]
 802ad34:	e00e      	b.n	802ad54 <_malloc_r+0xa0>
 802ad36:	6822      	ldr	r2, [r4, #0]
 802ad38:	1b52      	subs	r2, r2, r5
 802ad3a:	d41e      	bmi.n	802ad7a <_malloc_r+0xc6>
 802ad3c:	2a0b      	cmp	r2, #11
 802ad3e:	d916      	bls.n	802ad6e <_malloc_r+0xba>
 802ad40:	1961      	adds	r1, r4, r5
 802ad42:	42a3      	cmp	r3, r4
 802ad44:	6025      	str	r5, [r4, #0]
 802ad46:	bf18      	it	ne
 802ad48:	6059      	strne	r1, [r3, #4]
 802ad4a:	6863      	ldr	r3, [r4, #4]
 802ad4c:	bf08      	it	eq
 802ad4e:	6031      	streq	r1, [r6, #0]
 802ad50:	5162      	str	r2, [r4, r5]
 802ad52:	604b      	str	r3, [r1, #4]
 802ad54:	4638      	mov	r0, r7
 802ad56:	f104 060b 	add.w	r6, r4, #11
 802ad5a:	f000 ff67 	bl	802bc2c <__malloc_unlock>
 802ad5e:	f026 0607 	bic.w	r6, r6, #7
 802ad62:	1d23      	adds	r3, r4, #4
 802ad64:	1af2      	subs	r2, r6, r3
 802ad66:	d0b6      	beq.n	802acd6 <_malloc_r+0x22>
 802ad68:	1b9b      	subs	r3, r3, r6
 802ad6a:	50a3      	str	r3, [r4, r2]
 802ad6c:	e7b3      	b.n	802acd6 <_malloc_r+0x22>
 802ad6e:	6862      	ldr	r2, [r4, #4]
 802ad70:	42a3      	cmp	r3, r4
 802ad72:	bf0c      	ite	eq
 802ad74:	6032      	streq	r2, [r6, #0]
 802ad76:	605a      	strne	r2, [r3, #4]
 802ad78:	e7ec      	b.n	802ad54 <_malloc_r+0xa0>
 802ad7a:	4623      	mov	r3, r4
 802ad7c:	6864      	ldr	r4, [r4, #4]
 802ad7e:	e7b2      	b.n	802ace6 <_malloc_r+0x32>
 802ad80:	4634      	mov	r4, r6
 802ad82:	6876      	ldr	r6, [r6, #4]
 802ad84:	e7b9      	b.n	802acfa <_malloc_r+0x46>
 802ad86:	230c      	movs	r3, #12
 802ad88:	603b      	str	r3, [r7, #0]
 802ad8a:	4638      	mov	r0, r7
 802ad8c:	f000 ff4e 	bl	802bc2c <__malloc_unlock>
 802ad90:	e7a1      	b.n	802acd6 <_malloc_r+0x22>
 802ad92:	6025      	str	r5, [r4, #0]
 802ad94:	e7de      	b.n	802ad54 <_malloc_r+0xa0>
 802ad96:	bf00      	nop
 802ad98:	20002ba8 	.word	0x20002ba8

0802ad9c <__ssputs_r>:
 802ad9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ada0:	688e      	ldr	r6, [r1, #8]
 802ada2:	429e      	cmp	r6, r3
 802ada4:	4682      	mov	sl, r0
 802ada6:	460c      	mov	r4, r1
 802ada8:	4690      	mov	r8, r2
 802adaa:	461f      	mov	r7, r3
 802adac:	d838      	bhi.n	802ae20 <__ssputs_r+0x84>
 802adae:	898a      	ldrh	r2, [r1, #12]
 802adb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802adb4:	d032      	beq.n	802ae1c <__ssputs_r+0x80>
 802adb6:	6825      	ldr	r5, [r4, #0]
 802adb8:	6909      	ldr	r1, [r1, #16]
 802adba:	eba5 0901 	sub.w	r9, r5, r1
 802adbe:	6965      	ldr	r5, [r4, #20]
 802adc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802adc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802adc8:	3301      	adds	r3, #1
 802adca:	444b      	add	r3, r9
 802adcc:	106d      	asrs	r5, r5, #1
 802adce:	429d      	cmp	r5, r3
 802add0:	bf38      	it	cc
 802add2:	461d      	movcc	r5, r3
 802add4:	0553      	lsls	r3, r2, #21
 802add6:	d531      	bpl.n	802ae3c <__ssputs_r+0xa0>
 802add8:	4629      	mov	r1, r5
 802adda:	f7ff ff6b 	bl	802acb4 <_malloc_r>
 802adde:	4606      	mov	r6, r0
 802ade0:	b950      	cbnz	r0, 802adf8 <__ssputs_r+0x5c>
 802ade2:	230c      	movs	r3, #12
 802ade4:	f8ca 3000 	str.w	r3, [sl]
 802ade8:	89a3      	ldrh	r3, [r4, #12]
 802adea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802adee:	81a3      	strh	r3, [r4, #12]
 802adf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802adf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802adf8:	6921      	ldr	r1, [r4, #16]
 802adfa:	464a      	mov	r2, r9
 802adfc:	f7ff fdce 	bl	802a99c <memcpy>
 802ae00:	89a3      	ldrh	r3, [r4, #12]
 802ae02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802ae06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ae0a:	81a3      	strh	r3, [r4, #12]
 802ae0c:	6126      	str	r6, [r4, #16]
 802ae0e:	6165      	str	r5, [r4, #20]
 802ae10:	444e      	add	r6, r9
 802ae12:	eba5 0509 	sub.w	r5, r5, r9
 802ae16:	6026      	str	r6, [r4, #0]
 802ae18:	60a5      	str	r5, [r4, #8]
 802ae1a:	463e      	mov	r6, r7
 802ae1c:	42be      	cmp	r6, r7
 802ae1e:	d900      	bls.n	802ae22 <__ssputs_r+0x86>
 802ae20:	463e      	mov	r6, r7
 802ae22:	6820      	ldr	r0, [r4, #0]
 802ae24:	4632      	mov	r2, r6
 802ae26:	4641      	mov	r1, r8
 802ae28:	f7ff fdc6 	bl	802a9b8 <memmove>
 802ae2c:	68a3      	ldr	r3, [r4, #8]
 802ae2e:	1b9b      	subs	r3, r3, r6
 802ae30:	60a3      	str	r3, [r4, #8]
 802ae32:	6823      	ldr	r3, [r4, #0]
 802ae34:	4433      	add	r3, r6
 802ae36:	6023      	str	r3, [r4, #0]
 802ae38:	2000      	movs	r0, #0
 802ae3a:	e7db      	b.n	802adf4 <__ssputs_r+0x58>
 802ae3c:	462a      	mov	r2, r5
 802ae3e:	f000 fefb 	bl	802bc38 <_realloc_r>
 802ae42:	4606      	mov	r6, r0
 802ae44:	2800      	cmp	r0, #0
 802ae46:	d1e1      	bne.n	802ae0c <__ssputs_r+0x70>
 802ae48:	6921      	ldr	r1, [r4, #16]
 802ae4a:	4650      	mov	r0, sl
 802ae4c:	f7ff fec6 	bl	802abdc <_free_r>
 802ae50:	e7c7      	b.n	802ade2 <__ssputs_r+0x46>
	...

0802ae54 <_svfiprintf_r>:
 802ae54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ae58:	4698      	mov	r8, r3
 802ae5a:	898b      	ldrh	r3, [r1, #12]
 802ae5c:	061b      	lsls	r3, r3, #24
 802ae5e:	b09d      	sub	sp, #116	; 0x74
 802ae60:	4607      	mov	r7, r0
 802ae62:	460d      	mov	r5, r1
 802ae64:	4614      	mov	r4, r2
 802ae66:	d50e      	bpl.n	802ae86 <_svfiprintf_r+0x32>
 802ae68:	690b      	ldr	r3, [r1, #16]
 802ae6a:	b963      	cbnz	r3, 802ae86 <_svfiprintf_r+0x32>
 802ae6c:	2140      	movs	r1, #64	; 0x40
 802ae6e:	f7ff ff21 	bl	802acb4 <_malloc_r>
 802ae72:	6028      	str	r0, [r5, #0]
 802ae74:	6128      	str	r0, [r5, #16]
 802ae76:	b920      	cbnz	r0, 802ae82 <_svfiprintf_r+0x2e>
 802ae78:	230c      	movs	r3, #12
 802ae7a:	603b      	str	r3, [r7, #0]
 802ae7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802ae80:	e0d1      	b.n	802b026 <_svfiprintf_r+0x1d2>
 802ae82:	2340      	movs	r3, #64	; 0x40
 802ae84:	616b      	str	r3, [r5, #20]
 802ae86:	2300      	movs	r3, #0
 802ae88:	9309      	str	r3, [sp, #36]	; 0x24
 802ae8a:	2320      	movs	r3, #32
 802ae8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ae90:	f8cd 800c 	str.w	r8, [sp, #12]
 802ae94:	2330      	movs	r3, #48	; 0x30
 802ae96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802b040 <_svfiprintf_r+0x1ec>
 802ae9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ae9e:	f04f 0901 	mov.w	r9, #1
 802aea2:	4623      	mov	r3, r4
 802aea4:	469a      	mov	sl, r3
 802aea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802aeaa:	b10a      	cbz	r2, 802aeb0 <_svfiprintf_r+0x5c>
 802aeac:	2a25      	cmp	r2, #37	; 0x25
 802aeae:	d1f9      	bne.n	802aea4 <_svfiprintf_r+0x50>
 802aeb0:	ebba 0b04 	subs.w	fp, sl, r4
 802aeb4:	d00b      	beq.n	802aece <_svfiprintf_r+0x7a>
 802aeb6:	465b      	mov	r3, fp
 802aeb8:	4622      	mov	r2, r4
 802aeba:	4629      	mov	r1, r5
 802aebc:	4638      	mov	r0, r7
 802aebe:	f7ff ff6d 	bl	802ad9c <__ssputs_r>
 802aec2:	3001      	adds	r0, #1
 802aec4:	f000 80aa 	beq.w	802b01c <_svfiprintf_r+0x1c8>
 802aec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802aeca:	445a      	add	r2, fp
 802aecc:	9209      	str	r2, [sp, #36]	; 0x24
 802aece:	f89a 3000 	ldrb.w	r3, [sl]
 802aed2:	2b00      	cmp	r3, #0
 802aed4:	f000 80a2 	beq.w	802b01c <_svfiprintf_r+0x1c8>
 802aed8:	2300      	movs	r3, #0
 802aeda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802aede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802aee2:	f10a 0a01 	add.w	sl, sl, #1
 802aee6:	9304      	str	r3, [sp, #16]
 802aee8:	9307      	str	r3, [sp, #28]
 802aeea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802aeee:	931a      	str	r3, [sp, #104]	; 0x68
 802aef0:	4654      	mov	r4, sl
 802aef2:	2205      	movs	r2, #5
 802aef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aef8:	4851      	ldr	r0, [pc, #324]	; (802b040 <_svfiprintf_r+0x1ec>)
 802aefa:	f7f5 f8c9 	bl	8020090 <memchr>
 802aefe:	9a04      	ldr	r2, [sp, #16]
 802af00:	b9d8      	cbnz	r0, 802af3a <_svfiprintf_r+0xe6>
 802af02:	06d0      	lsls	r0, r2, #27
 802af04:	bf44      	itt	mi
 802af06:	2320      	movmi	r3, #32
 802af08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802af0c:	0711      	lsls	r1, r2, #28
 802af0e:	bf44      	itt	mi
 802af10:	232b      	movmi	r3, #43	; 0x2b
 802af12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802af16:	f89a 3000 	ldrb.w	r3, [sl]
 802af1a:	2b2a      	cmp	r3, #42	; 0x2a
 802af1c:	d015      	beq.n	802af4a <_svfiprintf_r+0xf6>
 802af1e:	9a07      	ldr	r2, [sp, #28]
 802af20:	4654      	mov	r4, sl
 802af22:	2000      	movs	r0, #0
 802af24:	f04f 0c0a 	mov.w	ip, #10
 802af28:	4621      	mov	r1, r4
 802af2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802af2e:	3b30      	subs	r3, #48	; 0x30
 802af30:	2b09      	cmp	r3, #9
 802af32:	d94e      	bls.n	802afd2 <_svfiprintf_r+0x17e>
 802af34:	b1b0      	cbz	r0, 802af64 <_svfiprintf_r+0x110>
 802af36:	9207      	str	r2, [sp, #28]
 802af38:	e014      	b.n	802af64 <_svfiprintf_r+0x110>
 802af3a:	eba0 0308 	sub.w	r3, r0, r8
 802af3e:	fa09 f303 	lsl.w	r3, r9, r3
 802af42:	4313      	orrs	r3, r2
 802af44:	9304      	str	r3, [sp, #16]
 802af46:	46a2      	mov	sl, r4
 802af48:	e7d2      	b.n	802aef0 <_svfiprintf_r+0x9c>
 802af4a:	9b03      	ldr	r3, [sp, #12]
 802af4c:	1d19      	adds	r1, r3, #4
 802af4e:	681b      	ldr	r3, [r3, #0]
 802af50:	9103      	str	r1, [sp, #12]
 802af52:	2b00      	cmp	r3, #0
 802af54:	bfbb      	ittet	lt
 802af56:	425b      	neglt	r3, r3
 802af58:	f042 0202 	orrlt.w	r2, r2, #2
 802af5c:	9307      	strge	r3, [sp, #28]
 802af5e:	9307      	strlt	r3, [sp, #28]
 802af60:	bfb8      	it	lt
 802af62:	9204      	strlt	r2, [sp, #16]
 802af64:	7823      	ldrb	r3, [r4, #0]
 802af66:	2b2e      	cmp	r3, #46	; 0x2e
 802af68:	d10c      	bne.n	802af84 <_svfiprintf_r+0x130>
 802af6a:	7863      	ldrb	r3, [r4, #1]
 802af6c:	2b2a      	cmp	r3, #42	; 0x2a
 802af6e:	d135      	bne.n	802afdc <_svfiprintf_r+0x188>
 802af70:	9b03      	ldr	r3, [sp, #12]
 802af72:	1d1a      	adds	r2, r3, #4
 802af74:	681b      	ldr	r3, [r3, #0]
 802af76:	9203      	str	r2, [sp, #12]
 802af78:	2b00      	cmp	r3, #0
 802af7a:	bfb8      	it	lt
 802af7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802af80:	3402      	adds	r4, #2
 802af82:	9305      	str	r3, [sp, #20]
 802af84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802b050 <_svfiprintf_r+0x1fc>
 802af88:	7821      	ldrb	r1, [r4, #0]
 802af8a:	2203      	movs	r2, #3
 802af8c:	4650      	mov	r0, sl
 802af8e:	f7f5 f87f 	bl	8020090 <memchr>
 802af92:	b140      	cbz	r0, 802afa6 <_svfiprintf_r+0x152>
 802af94:	2340      	movs	r3, #64	; 0x40
 802af96:	eba0 000a 	sub.w	r0, r0, sl
 802af9a:	fa03 f000 	lsl.w	r0, r3, r0
 802af9e:	9b04      	ldr	r3, [sp, #16]
 802afa0:	4303      	orrs	r3, r0
 802afa2:	3401      	adds	r4, #1
 802afa4:	9304      	str	r3, [sp, #16]
 802afa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802afaa:	4826      	ldr	r0, [pc, #152]	; (802b044 <_svfiprintf_r+0x1f0>)
 802afac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802afb0:	2206      	movs	r2, #6
 802afb2:	f7f5 f86d 	bl	8020090 <memchr>
 802afb6:	2800      	cmp	r0, #0
 802afb8:	d038      	beq.n	802b02c <_svfiprintf_r+0x1d8>
 802afba:	4b23      	ldr	r3, [pc, #140]	; (802b048 <_svfiprintf_r+0x1f4>)
 802afbc:	bb1b      	cbnz	r3, 802b006 <_svfiprintf_r+0x1b2>
 802afbe:	9b03      	ldr	r3, [sp, #12]
 802afc0:	3307      	adds	r3, #7
 802afc2:	f023 0307 	bic.w	r3, r3, #7
 802afc6:	3308      	adds	r3, #8
 802afc8:	9303      	str	r3, [sp, #12]
 802afca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802afcc:	4433      	add	r3, r6
 802afce:	9309      	str	r3, [sp, #36]	; 0x24
 802afd0:	e767      	b.n	802aea2 <_svfiprintf_r+0x4e>
 802afd2:	fb0c 3202 	mla	r2, ip, r2, r3
 802afd6:	460c      	mov	r4, r1
 802afd8:	2001      	movs	r0, #1
 802afda:	e7a5      	b.n	802af28 <_svfiprintf_r+0xd4>
 802afdc:	2300      	movs	r3, #0
 802afde:	3401      	adds	r4, #1
 802afe0:	9305      	str	r3, [sp, #20]
 802afe2:	4619      	mov	r1, r3
 802afe4:	f04f 0c0a 	mov.w	ip, #10
 802afe8:	4620      	mov	r0, r4
 802afea:	f810 2b01 	ldrb.w	r2, [r0], #1
 802afee:	3a30      	subs	r2, #48	; 0x30
 802aff0:	2a09      	cmp	r2, #9
 802aff2:	d903      	bls.n	802affc <_svfiprintf_r+0x1a8>
 802aff4:	2b00      	cmp	r3, #0
 802aff6:	d0c5      	beq.n	802af84 <_svfiprintf_r+0x130>
 802aff8:	9105      	str	r1, [sp, #20]
 802affa:	e7c3      	b.n	802af84 <_svfiprintf_r+0x130>
 802affc:	fb0c 2101 	mla	r1, ip, r1, r2
 802b000:	4604      	mov	r4, r0
 802b002:	2301      	movs	r3, #1
 802b004:	e7f0      	b.n	802afe8 <_svfiprintf_r+0x194>
 802b006:	ab03      	add	r3, sp, #12
 802b008:	9300      	str	r3, [sp, #0]
 802b00a:	462a      	mov	r2, r5
 802b00c:	4b0f      	ldr	r3, [pc, #60]	; (802b04c <_svfiprintf_r+0x1f8>)
 802b00e:	a904      	add	r1, sp, #16
 802b010:	4638      	mov	r0, r7
 802b012:	f3af 8000 	nop.w
 802b016:	1c42      	adds	r2, r0, #1
 802b018:	4606      	mov	r6, r0
 802b01a:	d1d6      	bne.n	802afca <_svfiprintf_r+0x176>
 802b01c:	89ab      	ldrh	r3, [r5, #12]
 802b01e:	065b      	lsls	r3, r3, #25
 802b020:	f53f af2c 	bmi.w	802ae7c <_svfiprintf_r+0x28>
 802b024:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b026:	b01d      	add	sp, #116	; 0x74
 802b028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b02c:	ab03      	add	r3, sp, #12
 802b02e:	9300      	str	r3, [sp, #0]
 802b030:	462a      	mov	r2, r5
 802b032:	4b06      	ldr	r3, [pc, #24]	; (802b04c <_svfiprintf_r+0x1f8>)
 802b034:	a904      	add	r1, sp, #16
 802b036:	4638      	mov	r0, r7
 802b038:	f000 f9d4 	bl	802b3e4 <_printf_i>
 802b03c:	e7eb      	b.n	802b016 <_svfiprintf_r+0x1c2>
 802b03e:	bf00      	nop
 802b040:	080781f2 	.word	0x080781f2
 802b044:	080781fc 	.word	0x080781fc
 802b048:	00000000 	.word	0x00000000
 802b04c:	0802ad9d 	.word	0x0802ad9d
 802b050:	080781f8 	.word	0x080781f8

0802b054 <__sfputc_r>:
 802b054:	6893      	ldr	r3, [r2, #8]
 802b056:	3b01      	subs	r3, #1
 802b058:	2b00      	cmp	r3, #0
 802b05a:	b410      	push	{r4}
 802b05c:	6093      	str	r3, [r2, #8]
 802b05e:	da08      	bge.n	802b072 <__sfputc_r+0x1e>
 802b060:	6994      	ldr	r4, [r2, #24]
 802b062:	42a3      	cmp	r3, r4
 802b064:	db01      	blt.n	802b06a <__sfputc_r+0x16>
 802b066:	290a      	cmp	r1, #10
 802b068:	d103      	bne.n	802b072 <__sfputc_r+0x1e>
 802b06a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b06e:	f000 baef 	b.w	802b650 <__swbuf_r>
 802b072:	6813      	ldr	r3, [r2, #0]
 802b074:	1c58      	adds	r0, r3, #1
 802b076:	6010      	str	r0, [r2, #0]
 802b078:	7019      	strb	r1, [r3, #0]
 802b07a:	4608      	mov	r0, r1
 802b07c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b080:	4770      	bx	lr

0802b082 <__sfputs_r>:
 802b082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b084:	4606      	mov	r6, r0
 802b086:	460f      	mov	r7, r1
 802b088:	4614      	mov	r4, r2
 802b08a:	18d5      	adds	r5, r2, r3
 802b08c:	42ac      	cmp	r4, r5
 802b08e:	d101      	bne.n	802b094 <__sfputs_r+0x12>
 802b090:	2000      	movs	r0, #0
 802b092:	e007      	b.n	802b0a4 <__sfputs_r+0x22>
 802b094:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b098:	463a      	mov	r2, r7
 802b09a:	4630      	mov	r0, r6
 802b09c:	f7ff ffda 	bl	802b054 <__sfputc_r>
 802b0a0:	1c43      	adds	r3, r0, #1
 802b0a2:	d1f3      	bne.n	802b08c <__sfputs_r+0xa>
 802b0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b0a8 <_vfiprintf_r>:
 802b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b0ac:	460d      	mov	r5, r1
 802b0ae:	b09d      	sub	sp, #116	; 0x74
 802b0b0:	4614      	mov	r4, r2
 802b0b2:	4698      	mov	r8, r3
 802b0b4:	4606      	mov	r6, r0
 802b0b6:	b118      	cbz	r0, 802b0c0 <_vfiprintf_r+0x18>
 802b0b8:	6983      	ldr	r3, [r0, #24]
 802b0ba:	b90b      	cbnz	r3, 802b0c0 <_vfiprintf_r+0x18>
 802b0bc:	f000 fcaa 	bl	802ba14 <__sinit>
 802b0c0:	4b89      	ldr	r3, [pc, #548]	; (802b2e8 <_vfiprintf_r+0x240>)
 802b0c2:	429d      	cmp	r5, r3
 802b0c4:	d11b      	bne.n	802b0fe <_vfiprintf_r+0x56>
 802b0c6:	6875      	ldr	r5, [r6, #4]
 802b0c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b0ca:	07d9      	lsls	r1, r3, #31
 802b0cc:	d405      	bmi.n	802b0da <_vfiprintf_r+0x32>
 802b0ce:	89ab      	ldrh	r3, [r5, #12]
 802b0d0:	059a      	lsls	r2, r3, #22
 802b0d2:	d402      	bmi.n	802b0da <_vfiprintf_r+0x32>
 802b0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b0d6:	f000 fd3b 	bl	802bb50 <__retarget_lock_acquire_recursive>
 802b0da:	89ab      	ldrh	r3, [r5, #12]
 802b0dc:	071b      	lsls	r3, r3, #28
 802b0de:	d501      	bpl.n	802b0e4 <_vfiprintf_r+0x3c>
 802b0e0:	692b      	ldr	r3, [r5, #16]
 802b0e2:	b9eb      	cbnz	r3, 802b120 <_vfiprintf_r+0x78>
 802b0e4:	4629      	mov	r1, r5
 802b0e6:	4630      	mov	r0, r6
 802b0e8:	f000 fb04 	bl	802b6f4 <__swsetup_r>
 802b0ec:	b1c0      	cbz	r0, 802b120 <_vfiprintf_r+0x78>
 802b0ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b0f0:	07dc      	lsls	r4, r3, #31
 802b0f2:	d50e      	bpl.n	802b112 <_vfiprintf_r+0x6a>
 802b0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b0f8:	b01d      	add	sp, #116	; 0x74
 802b0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b0fe:	4b7b      	ldr	r3, [pc, #492]	; (802b2ec <_vfiprintf_r+0x244>)
 802b100:	429d      	cmp	r5, r3
 802b102:	d101      	bne.n	802b108 <_vfiprintf_r+0x60>
 802b104:	68b5      	ldr	r5, [r6, #8]
 802b106:	e7df      	b.n	802b0c8 <_vfiprintf_r+0x20>
 802b108:	4b79      	ldr	r3, [pc, #484]	; (802b2f0 <_vfiprintf_r+0x248>)
 802b10a:	429d      	cmp	r5, r3
 802b10c:	bf08      	it	eq
 802b10e:	68f5      	ldreq	r5, [r6, #12]
 802b110:	e7da      	b.n	802b0c8 <_vfiprintf_r+0x20>
 802b112:	89ab      	ldrh	r3, [r5, #12]
 802b114:	0598      	lsls	r0, r3, #22
 802b116:	d4ed      	bmi.n	802b0f4 <_vfiprintf_r+0x4c>
 802b118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b11a:	f000 fd1a 	bl	802bb52 <__retarget_lock_release_recursive>
 802b11e:	e7e9      	b.n	802b0f4 <_vfiprintf_r+0x4c>
 802b120:	2300      	movs	r3, #0
 802b122:	9309      	str	r3, [sp, #36]	; 0x24
 802b124:	2320      	movs	r3, #32
 802b126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b12a:	f8cd 800c 	str.w	r8, [sp, #12]
 802b12e:	2330      	movs	r3, #48	; 0x30
 802b130:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802b2f4 <_vfiprintf_r+0x24c>
 802b134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b138:	f04f 0901 	mov.w	r9, #1
 802b13c:	4623      	mov	r3, r4
 802b13e:	469a      	mov	sl, r3
 802b140:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b144:	b10a      	cbz	r2, 802b14a <_vfiprintf_r+0xa2>
 802b146:	2a25      	cmp	r2, #37	; 0x25
 802b148:	d1f9      	bne.n	802b13e <_vfiprintf_r+0x96>
 802b14a:	ebba 0b04 	subs.w	fp, sl, r4
 802b14e:	d00b      	beq.n	802b168 <_vfiprintf_r+0xc0>
 802b150:	465b      	mov	r3, fp
 802b152:	4622      	mov	r2, r4
 802b154:	4629      	mov	r1, r5
 802b156:	4630      	mov	r0, r6
 802b158:	f7ff ff93 	bl	802b082 <__sfputs_r>
 802b15c:	3001      	adds	r0, #1
 802b15e:	f000 80aa 	beq.w	802b2b6 <_vfiprintf_r+0x20e>
 802b162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b164:	445a      	add	r2, fp
 802b166:	9209      	str	r2, [sp, #36]	; 0x24
 802b168:	f89a 3000 	ldrb.w	r3, [sl]
 802b16c:	2b00      	cmp	r3, #0
 802b16e:	f000 80a2 	beq.w	802b2b6 <_vfiprintf_r+0x20e>
 802b172:	2300      	movs	r3, #0
 802b174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802b178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b17c:	f10a 0a01 	add.w	sl, sl, #1
 802b180:	9304      	str	r3, [sp, #16]
 802b182:	9307      	str	r3, [sp, #28]
 802b184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b188:	931a      	str	r3, [sp, #104]	; 0x68
 802b18a:	4654      	mov	r4, sl
 802b18c:	2205      	movs	r2, #5
 802b18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b192:	4858      	ldr	r0, [pc, #352]	; (802b2f4 <_vfiprintf_r+0x24c>)
 802b194:	f7f4 ff7c 	bl	8020090 <memchr>
 802b198:	9a04      	ldr	r2, [sp, #16]
 802b19a:	b9d8      	cbnz	r0, 802b1d4 <_vfiprintf_r+0x12c>
 802b19c:	06d1      	lsls	r1, r2, #27
 802b19e:	bf44      	itt	mi
 802b1a0:	2320      	movmi	r3, #32
 802b1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b1a6:	0713      	lsls	r3, r2, #28
 802b1a8:	bf44      	itt	mi
 802b1aa:	232b      	movmi	r3, #43	; 0x2b
 802b1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b1b0:	f89a 3000 	ldrb.w	r3, [sl]
 802b1b4:	2b2a      	cmp	r3, #42	; 0x2a
 802b1b6:	d015      	beq.n	802b1e4 <_vfiprintf_r+0x13c>
 802b1b8:	9a07      	ldr	r2, [sp, #28]
 802b1ba:	4654      	mov	r4, sl
 802b1bc:	2000      	movs	r0, #0
 802b1be:	f04f 0c0a 	mov.w	ip, #10
 802b1c2:	4621      	mov	r1, r4
 802b1c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b1c8:	3b30      	subs	r3, #48	; 0x30
 802b1ca:	2b09      	cmp	r3, #9
 802b1cc:	d94e      	bls.n	802b26c <_vfiprintf_r+0x1c4>
 802b1ce:	b1b0      	cbz	r0, 802b1fe <_vfiprintf_r+0x156>
 802b1d0:	9207      	str	r2, [sp, #28]
 802b1d2:	e014      	b.n	802b1fe <_vfiprintf_r+0x156>
 802b1d4:	eba0 0308 	sub.w	r3, r0, r8
 802b1d8:	fa09 f303 	lsl.w	r3, r9, r3
 802b1dc:	4313      	orrs	r3, r2
 802b1de:	9304      	str	r3, [sp, #16]
 802b1e0:	46a2      	mov	sl, r4
 802b1e2:	e7d2      	b.n	802b18a <_vfiprintf_r+0xe2>
 802b1e4:	9b03      	ldr	r3, [sp, #12]
 802b1e6:	1d19      	adds	r1, r3, #4
 802b1e8:	681b      	ldr	r3, [r3, #0]
 802b1ea:	9103      	str	r1, [sp, #12]
 802b1ec:	2b00      	cmp	r3, #0
 802b1ee:	bfbb      	ittet	lt
 802b1f0:	425b      	neglt	r3, r3
 802b1f2:	f042 0202 	orrlt.w	r2, r2, #2
 802b1f6:	9307      	strge	r3, [sp, #28]
 802b1f8:	9307      	strlt	r3, [sp, #28]
 802b1fa:	bfb8      	it	lt
 802b1fc:	9204      	strlt	r2, [sp, #16]
 802b1fe:	7823      	ldrb	r3, [r4, #0]
 802b200:	2b2e      	cmp	r3, #46	; 0x2e
 802b202:	d10c      	bne.n	802b21e <_vfiprintf_r+0x176>
 802b204:	7863      	ldrb	r3, [r4, #1]
 802b206:	2b2a      	cmp	r3, #42	; 0x2a
 802b208:	d135      	bne.n	802b276 <_vfiprintf_r+0x1ce>
 802b20a:	9b03      	ldr	r3, [sp, #12]
 802b20c:	1d1a      	adds	r2, r3, #4
 802b20e:	681b      	ldr	r3, [r3, #0]
 802b210:	9203      	str	r2, [sp, #12]
 802b212:	2b00      	cmp	r3, #0
 802b214:	bfb8      	it	lt
 802b216:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802b21a:	3402      	adds	r4, #2
 802b21c:	9305      	str	r3, [sp, #20]
 802b21e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802b304 <_vfiprintf_r+0x25c>
 802b222:	7821      	ldrb	r1, [r4, #0]
 802b224:	2203      	movs	r2, #3
 802b226:	4650      	mov	r0, sl
 802b228:	f7f4 ff32 	bl	8020090 <memchr>
 802b22c:	b140      	cbz	r0, 802b240 <_vfiprintf_r+0x198>
 802b22e:	2340      	movs	r3, #64	; 0x40
 802b230:	eba0 000a 	sub.w	r0, r0, sl
 802b234:	fa03 f000 	lsl.w	r0, r3, r0
 802b238:	9b04      	ldr	r3, [sp, #16]
 802b23a:	4303      	orrs	r3, r0
 802b23c:	3401      	adds	r4, #1
 802b23e:	9304      	str	r3, [sp, #16]
 802b240:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b244:	482c      	ldr	r0, [pc, #176]	; (802b2f8 <_vfiprintf_r+0x250>)
 802b246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b24a:	2206      	movs	r2, #6
 802b24c:	f7f4 ff20 	bl	8020090 <memchr>
 802b250:	2800      	cmp	r0, #0
 802b252:	d03f      	beq.n	802b2d4 <_vfiprintf_r+0x22c>
 802b254:	4b29      	ldr	r3, [pc, #164]	; (802b2fc <_vfiprintf_r+0x254>)
 802b256:	bb1b      	cbnz	r3, 802b2a0 <_vfiprintf_r+0x1f8>
 802b258:	9b03      	ldr	r3, [sp, #12]
 802b25a:	3307      	adds	r3, #7
 802b25c:	f023 0307 	bic.w	r3, r3, #7
 802b260:	3308      	adds	r3, #8
 802b262:	9303      	str	r3, [sp, #12]
 802b264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b266:	443b      	add	r3, r7
 802b268:	9309      	str	r3, [sp, #36]	; 0x24
 802b26a:	e767      	b.n	802b13c <_vfiprintf_r+0x94>
 802b26c:	fb0c 3202 	mla	r2, ip, r2, r3
 802b270:	460c      	mov	r4, r1
 802b272:	2001      	movs	r0, #1
 802b274:	e7a5      	b.n	802b1c2 <_vfiprintf_r+0x11a>
 802b276:	2300      	movs	r3, #0
 802b278:	3401      	adds	r4, #1
 802b27a:	9305      	str	r3, [sp, #20]
 802b27c:	4619      	mov	r1, r3
 802b27e:	f04f 0c0a 	mov.w	ip, #10
 802b282:	4620      	mov	r0, r4
 802b284:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b288:	3a30      	subs	r2, #48	; 0x30
 802b28a:	2a09      	cmp	r2, #9
 802b28c:	d903      	bls.n	802b296 <_vfiprintf_r+0x1ee>
 802b28e:	2b00      	cmp	r3, #0
 802b290:	d0c5      	beq.n	802b21e <_vfiprintf_r+0x176>
 802b292:	9105      	str	r1, [sp, #20]
 802b294:	e7c3      	b.n	802b21e <_vfiprintf_r+0x176>
 802b296:	fb0c 2101 	mla	r1, ip, r1, r2
 802b29a:	4604      	mov	r4, r0
 802b29c:	2301      	movs	r3, #1
 802b29e:	e7f0      	b.n	802b282 <_vfiprintf_r+0x1da>
 802b2a0:	ab03      	add	r3, sp, #12
 802b2a2:	9300      	str	r3, [sp, #0]
 802b2a4:	462a      	mov	r2, r5
 802b2a6:	4b16      	ldr	r3, [pc, #88]	; (802b300 <_vfiprintf_r+0x258>)
 802b2a8:	a904      	add	r1, sp, #16
 802b2aa:	4630      	mov	r0, r6
 802b2ac:	f3af 8000 	nop.w
 802b2b0:	4607      	mov	r7, r0
 802b2b2:	1c78      	adds	r0, r7, #1
 802b2b4:	d1d6      	bne.n	802b264 <_vfiprintf_r+0x1bc>
 802b2b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b2b8:	07d9      	lsls	r1, r3, #31
 802b2ba:	d405      	bmi.n	802b2c8 <_vfiprintf_r+0x220>
 802b2bc:	89ab      	ldrh	r3, [r5, #12]
 802b2be:	059a      	lsls	r2, r3, #22
 802b2c0:	d402      	bmi.n	802b2c8 <_vfiprintf_r+0x220>
 802b2c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b2c4:	f000 fc45 	bl	802bb52 <__retarget_lock_release_recursive>
 802b2c8:	89ab      	ldrh	r3, [r5, #12]
 802b2ca:	065b      	lsls	r3, r3, #25
 802b2cc:	f53f af12 	bmi.w	802b0f4 <_vfiprintf_r+0x4c>
 802b2d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b2d2:	e711      	b.n	802b0f8 <_vfiprintf_r+0x50>
 802b2d4:	ab03      	add	r3, sp, #12
 802b2d6:	9300      	str	r3, [sp, #0]
 802b2d8:	462a      	mov	r2, r5
 802b2da:	4b09      	ldr	r3, [pc, #36]	; (802b300 <_vfiprintf_r+0x258>)
 802b2dc:	a904      	add	r1, sp, #16
 802b2de:	4630      	mov	r0, r6
 802b2e0:	f000 f880 	bl	802b3e4 <_printf_i>
 802b2e4:	e7e4      	b.n	802b2b0 <_vfiprintf_r+0x208>
 802b2e6:	bf00      	nop
 802b2e8:	08078248 	.word	0x08078248
 802b2ec:	08078268 	.word	0x08078268
 802b2f0:	08078228 	.word	0x08078228
 802b2f4:	080781f2 	.word	0x080781f2
 802b2f8:	080781fc 	.word	0x080781fc
 802b2fc:	00000000 	.word	0x00000000
 802b300:	0802b083 	.word	0x0802b083
 802b304:	080781f8 	.word	0x080781f8

0802b308 <_printf_common>:
 802b308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b30c:	4616      	mov	r6, r2
 802b30e:	4699      	mov	r9, r3
 802b310:	688a      	ldr	r2, [r1, #8]
 802b312:	690b      	ldr	r3, [r1, #16]
 802b314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b318:	4293      	cmp	r3, r2
 802b31a:	bfb8      	it	lt
 802b31c:	4613      	movlt	r3, r2
 802b31e:	6033      	str	r3, [r6, #0]
 802b320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b324:	4607      	mov	r7, r0
 802b326:	460c      	mov	r4, r1
 802b328:	b10a      	cbz	r2, 802b32e <_printf_common+0x26>
 802b32a:	3301      	adds	r3, #1
 802b32c:	6033      	str	r3, [r6, #0]
 802b32e:	6823      	ldr	r3, [r4, #0]
 802b330:	0699      	lsls	r1, r3, #26
 802b332:	bf42      	ittt	mi
 802b334:	6833      	ldrmi	r3, [r6, #0]
 802b336:	3302      	addmi	r3, #2
 802b338:	6033      	strmi	r3, [r6, #0]
 802b33a:	6825      	ldr	r5, [r4, #0]
 802b33c:	f015 0506 	ands.w	r5, r5, #6
 802b340:	d106      	bne.n	802b350 <_printf_common+0x48>
 802b342:	f104 0a19 	add.w	sl, r4, #25
 802b346:	68e3      	ldr	r3, [r4, #12]
 802b348:	6832      	ldr	r2, [r6, #0]
 802b34a:	1a9b      	subs	r3, r3, r2
 802b34c:	42ab      	cmp	r3, r5
 802b34e:	dc26      	bgt.n	802b39e <_printf_common+0x96>
 802b350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802b354:	1e13      	subs	r3, r2, #0
 802b356:	6822      	ldr	r2, [r4, #0]
 802b358:	bf18      	it	ne
 802b35a:	2301      	movne	r3, #1
 802b35c:	0692      	lsls	r2, r2, #26
 802b35e:	d42b      	bmi.n	802b3b8 <_printf_common+0xb0>
 802b360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b364:	4649      	mov	r1, r9
 802b366:	4638      	mov	r0, r7
 802b368:	47c0      	blx	r8
 802b36a:	3001      	adds	r0, #1
 802b36c:	d01e      	beq.n	802b3ac <_printf_common+0xa4>
 802b36e:	6823      	ldr	r3, [r4, #0]
 802b370:	68e5      	ldr	r5, [r4, #12]
 802b372:	6832      	ldr	r2, [r6, #0]
 802b374:	f003 0306 	and.w	r3, r3, #6
 802b378:	2b04      	cmp	r3, #4
 802b37a:	bf08      	it	eq
 802b37c:	1aad      	subeq	r5, r5, r2
 802b37e:	68a3      	ldr	r3, [r4, #8]
 802b380:	6922      	ldr	r2, [r4, #16]
 802b382:	bf0c      	ite	eq
 802b384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b388:	2500      	movne	r5, #0
 802b38a:	4293      	cmp	r3, r2
 802b38c:	bfc4      	itt	gt
 802b38e:	1a9b      	subgt	r3, r3, r2
 802b390:	18ed      	addgt	r5, r5, r3
 802b392:	2600      	movs	r6, #0
 802b394:	341a      	adds	r4, #26
 802b396:	42b5      	cmp	r5, r6
 802b398:	d11a      	bne.n	802b3d0 <_printf_common+0xc8>
 802b39a:	2000      	movs	r0, #0
 802b39c:	e008      	b.n	802b3b0 <_printf_common+0xa8>
 802b39e:	2301      	movs	r3, #1
 802b3a0:	4652      	mov	r2, sl
 802b3a2:	4649      	mov	r1, r9
 802b3a4:	4638      	mov	r0, r7
 802b3a6:	47c0      	blx	r8
 802b3a8:	3001      	adds	r0, #1
 802b3aa:	d103      	bne.n	802b3b4 <_printf_common+0xac>
 802b3ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b3b4:	3501      	adds	r5, #1
 802b3b6:	e7c6      	b.n	802b346 <_printf_common+0x3e>
 802b3b8:	18e1      	adds	r1, r4, r3
 802b3ba:	1c5a      	adds	r2, r3, #1
 802b3bc:	2030      	movs	r0, #48	; 0x30
 802b3be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b3c2:	4422      	add	r2, r4
 802b3c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b3c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b3cc:	3302      	adds	r3, #2
 802b3ce:	e7c7      	b.n	802b360 <_printf_common+0x58>
 802b3d0:	2301      	movs	r3, #1
 802b3d2:	4622      	mov	r2, r4
 802b3d4:	4649      	mov	r1, r9
 802b3d6:	4638      	mov	r0, r7
 802b3d8:	47c0      	blx	r8
 802b3da:	3001      	adds	r0, #1
 802b3dc:	d0e6      	beq.n	802b3ac <_printf_common+0xa4>
 802b3de:	3601      	adds	r6, #1
 802b3e0:	e7d9      	b.n	802b396 <_printf_common+0x8e>
	...

0802b3e4 <_printf_i>:
 802b3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b3e8:	7e0f      	ldrb	r7, [r1, #24]
 802b3ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b3ec:	2f78      	cmp	r7, #120	; 0x78
 802b3ee:	4691      	mov	r9, r2
 802b3f0:	4680      	mov	r8, r0
 802b3f2:	460c      	mov	r4, r1
 802b3f4:	469a      	mov	sl, r3
 802b3f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802b3fa:	d807      	bhi.n	802b40c <_printf_i+0x28>
 802b3fc:	2f62      	cmp	r7, #98	; 0x62
 802b3fe:	d80a      	bhi.n	802b416 <_printf_i+0x32>
 802b400:	2f00      	cmp	r7, #0
 802b402:	f000 80d8 	beq.w	802b5b6 <_printf_i+0x1d2>
 802b406:	2f58      	cmp	r7, #88	; 0x58
 802b408:	f000 80a3 	beq.w	802b552 <_printf_i+0x16e>
 802b40c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802b414:	e03a      	b.n	802b48c <_printf_i+0xa8>
 802b416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802b41a:	2b15      	cmp	r3, #21
 802b41c:	d8f6      	bhi.n	802b40c <_printf_i+0x28>
 802b41e:	a101      	add	r1, pc, #4	; (adr r1, 802b424 <_printf_i+0x40>)
 802b420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b424:	0802b47d 	.word	0x0802b47d
 802b428:	0802b491 	.word	0x0802b491
 802b42c:	0802b40d 	.word	0x0802b40d
 802b430:	0802b40d 	.word	0x0802b40d
 802b434:	0802b40d 	.word	0x0802b40d
 802b438:	0802b40d 	.word	0x0802b40d
 802b43c:	0802b491 	.word	0x0802b491
 802b440:	0802b40d 	.word	0x0802b40d
 802b444:	0802b40d 	.word	0x0802b40d
 802b448:	0802b40d 	.word	0x0802b40d
 802b44c:	0802b40d 	.word	0x0802b40d
 802b450:	0802b59d 	.word	0x0802b59d
 802b454:	0802b4c1 	.word	0x0802b4c1
 802b458:	0802b57f 	.word	0x0802b57f
 802b45c:	0802b40d 	.word	0x0802b40d
 802b460:	0802b40d 	.word	0x0802b40d
 802b464:	0802b5bf 	.word	0x0802b5bf
 802b468:	0802b40d 	.word	0x0802b40d
 802b46c:	0802b4c1 	.word	0x0802b4c1
 802b470:	0802b40d 	.word	0x0802b40d
 802b474:	0802b40d 	.word	0x0802b40d
 802b478:	0802b587 	.word	0x0802b587
 802b47c:	682b      	ldr	r3, [r5, #0]
 802b47e:	1d1a      	adds	r2, r3, #4
 802b480:	681b      	ldr	r3, [r3, #0]
 802b482:	602a      	str	r2, [r5, #0]
 802b484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b48c:	2301      	movs	r3, #1
 802b48e:	e0a3      	b.n	802b5d8 <_printf_i+0x1f4>
 802b490:	6820      	ldr	r0, [r4, #0]
 802b492:	6829      	ldr	r1, [r5, #0]
 802b494:	0606      	lsls	r6, r0, #24
 802b496:	f101 0304 	add.w	r3, r1, #4
 802b49a:	d50a      	bpl.n	802b4b2 <_printf_i+0xce>
 802b49c:	680e      	ldr	r6, [r1, #0]
 802b49e:	602b      	str	r3, [r5, #0]
 802b4a0:	2e00      	cmp	r6, #0
 802b4a2:	da03      	bge.n	802b4ac <_printf_i+0xc8>
 802b4a4:	232d      	movs	r3, #45	; 0x2d
 802b4a6:	4276      	negs	r6, r6
 802b4a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b4ac:	485e      	ldr	r0, [pc, #376]	; (802b628 <_printf_i+0x244>)
 802b4ae:	230a      	movs	r3, #10
 802b4b0:	e019      	b.n	802b4e6 <_printf_i+0x102>
 802b4b2:	680e      	ldr	r6, [r1, #0]
 802b4b4:	602b      	str	r3, [r5, #0]
 802b4b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b4ba:	bf18      	it	ne
 802b4bc:	b236      	sxthne	r6, r6
 802b4be:	e7ef      	b.n	802b4a0 <_printf_i+0xbc>
 802b4c0:	682b      	ldr	r3, [r5, #0]
 802b4c2:	6820      	ldr	r0, [r4, #0]
 802b4c4:	1d19      	adds	r1, r3, #4
 802b4c6:	6029      	str	r1, [r5, #0]
 802b4c8:	0601      	lsls	r1, r0, #24
 802b4ca:	d501      	bpl.n	802b4d0 <_printf_i+0xec>
 802b4cc:	681e      	ldr	r6, [r3, #0]
 802b4ce:	e002      	b.n	802b4d6 <_printf_i+0xf2>
 802b4d0:	0646      	lsls	r6, r0, #25
 802b4d2:	d5fb      	bpl.n	802b4cc <_printf_i+0xe8>
 802b4d4:	881e      	ldrh	r6, [r3, #0]
 802b4d6:	4854      	ldr	r0, [pc, #336]	; (802b628 <_printf_i+0x244>)
 802b4d8:	2f6f      	cmp	r7, #111	; 0x6f
 802b4da:	bf0c      	ite	eq
 802b4dc:	2308      	moveq	r3, #8
 802b4de:	230a      	movne	r3, #10
 802b4e0:	2100      	movs	r1, #0
 802b4e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b4e6:	6865      	ldr	r5, [r4, #4]
 802b4e8:	60a5      	str	r5, [r4, #8]
 802b4ea:	2d00      	cmp	r5, #0
 802b4ec:	bfa2      	ittt	ge
 802b4ee:	6821      	ldrge	r1, [r4, #0]
 802b4f0:	f021 0104 	bicge.w	r1, r1, #4
 802b4f4:	6021      	strge	r1, [r4, #0]
 802b4f6:	b90e      	cbnz	r6, 802b4fc <_printf_i+0x118>
 802b4f8:	2d00      	cmp	r5, #0
 802b4fa:	d04d      	beq.n	802b598 <_printf_i+0x1b4>
 802b4fc:	4615      	mov	r5, r2
 802b4fe:	fbb6 f1f3 	udiv	r1, r6, r3
 802b502:	fb03 6711 	mls	r7, r3, r1, r6
 802b506:	5dc7      	ldrb	r7, [r0, r7]
 802b508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802b50c:	4637      	mov	r7, r6
 802b50e:	42bb      	cmp	r3, r7
 802b510:	460e      	mov	r6, r1
 802b512:	d9f4      	bls.n	802b4fe <_printf_i+0x11a>
 802b514:	2b08      	cmp	r3, #8
 802b516:	d10b      	bne.n	802b530 <_printf_i+0x14c>
 802b518:	6823      	ldr	r3, [r4, #0]
 802b51a:	07de      	lsls	r6, r3, #31
 802b51c:	d508      	bpl.n	802b530 <_printf_i+0x14c>
 802b51e:	6923      	ldr	r3, [r4, #16]
 802b520:	6861      	ldr	r1, [r4, #4]
 802b522:	4299      	cmp	r1, r3
 802b524:	bfde      	ittt	le
 802b526:	2330      	movle	r3, #48	; 0x30
 802b528:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b52c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802b530:	1b52      	subs	r2, r2, r5
 802b532:	6122      	str	r2, [r4, #16]
 802b534:	f8cd a000 	str.w	sl, [sp]
 802b538:	464b      	mov	r3, r9
 802b53a:	aa03      	add	r2, sp, #12
 802b53c:	4621      	mov	r1, r4
 802b53e:	4640      	mov	r0, r8
 802b540:	f7ff fee2 	bl	802b308 <_printf_common>
 802b544:	3001      	adds	r0, #1
 802b546:	d14c      	bne.n	802b5e2 <_printf_i+0x1fe>
 802b548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b54c:	b004      	add	sp, #16
 802b54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b552:	4835      	ldr	r0, [pc, #212]	; (802b628 <_printf_i+0x244>)
 802b554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802b558:	6829      	ldr	r1, [r5, #0]
 802b55a:	6823      	ldr	r3, [r4, #0]
 802b55c:	f851 6b04 	ldr.w	r6, [r1], #4
 802b560:	6029      	str	r1, [r5, #0]
 802b562:	061d      	lsls	r5, r3, #24
 802b564:	d514      	bpl.n	802b590 <_printf_i+0x1ac>
 802b566:	07df      	lsls	r7, r3, #31
 802b568:	bf44      	itt	mi
 802b56a:	f043 0320 	orrmi.w	r3, r3, #32
 802b56e:	6023      	strmi	r3, [r4, #0]
 802b570:	b91e      	cbnz	r6, 802b57a <_printf_i+0x196>
 802b572:	6823      	ldr	r3, [r4, #0]
 802b574:	f023 0320 	bic.w	r3, r3, #32
 802b578:	6023      	str	r3, [r4, #0]
 802b57a:	2310      	movs	r3, #16
 802b57c:	e7b0      	b.n	802b4e0 <_printf_i+0xfc>
 802b57e:	6823      	ldr	r3, [r4, #0]
 802b580:	f043 0320 	orr.w	r3, r3, #32
 802b584:	6023      	str	r3, [r4, #0]
 802b586:	2378      	movs	r3, #120	; 0x78
 802b588:	4828      	ldr	r0, [pc, #160]	; (802b62c <_printf_i+0x248>)
 802b58a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802b58e:	e7e3      	b.n	802b558 <_printf_i+0x174>
 802b590:	0659      	lsls	r1, r3, #25
 802b592:	bf48      	it	mi
 802b594:	b2b6      	uxthmi	r6, r6
 802b596:	e7e6      	b.n	802b566 <_printf_i+0x182>
 802b598:	4615      	mov	r5, r2
 802b59a:	e7bb      	b.n	802b514 <_printf_i+0x130>
 802b59c:	682b      	ldr	r3, [r5, #0]
 802b59e:	6826      	ldr	r6, [r4, #0]
 802b5a0:	6961      	ldr	r1, [r4, #20]
 802b5a2:	1d18      	adds	r0, r3, #4
 802b5a4:	6028      	str	r0, [r5, #0]
 802b5a6:	0635      	lsls	r5, r6, #24
 802b5a8:	681b      	ldr	r3, [r3, #0]
 802b5aa:	d501      	bpl.n	802b5b0 <_printf_i+0x1cc>
 802b5ac:	6019      	str	r1, [r3, #0]
 802b5ae:	e002      	b.n	802b5b6 <_printf_i+0x1d2>
 802b5b0:	0670      	lsls	r0, r6, #25
 802b5b2:	d5fb      	bpl.n	802b5ac <_printf_i+0x1c8>
 802b5b4:	8019      	strh	r1, [r3, #0]
 802b5b6:	2300      	movs	r3, #0
 802b5b8:	6123      	str	r3, [r4, #16]
 802b5ba:	4615      	mov	r5, r2
 802b5bc:	e7ba      	b.n	802b534 <_printf_i+0x150>
 802b5be:	682b      	ldr	r3, [r5, #0]
 802b5c0:	1d1a      	adds	r2, r3, #4
 802b5c2:	602a      	str	r2, [r5, #0]
 802b5c4:	681d      	ldr	r5, [r3, #0]
 802b5c6:	6862      	ldr	r2, [r4, #4]
 802b5c8:	2100      	movs	r1, #0
 802b5ca:	4628      	mov	r0, r5
 802b5cc:	f7f4 fd60 	bl	8020090 <memchr>
 802b5d0:	b108      	cbz	r0, 802b5d6 <_printf_i+0x1f2>
 802b5d2:	1b40      	subs	r0, r0, r5
 802b5d4:	6060      	str	r0, [r4, #4]
 802b5d6:	6863      	ldr	r3, [r4, #4]
 802b5d8:	6123      	str	r3, [r4, #16]
 802b5da:	2300      	movs	r3, #0
 802b5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b5e0:	e7a8      	b.n	802b534 <_printf_i+0x150>
 802b5e2:	6923      	ldr	r3, [r4, #16]
 802b5e4:	462a      	mov	r2, r5
 802b5e6:	4649      	mov	r1, r9
 802b5e8:	4640      	mov	r0, r8
 802b5ea:	47d0      	blx	sl
 802b5ec:	3001      	adds	r0, #1
 802b5ee:	d0ab      	beq.n	802b548 <_printf_i+0x164>
 802b5f0:	6823      	ldr	r3, [r4, #0]
 802b5f2:	079b      	lsls	r3, r3, #30
 802b5f4:	d413      	bmi.n	802b61e <_printf_i+0x23a>
 802b5f6:	68e0      	ldr	r0, [r4, #12]
 802b5f8:	9b03      	ldr	r3, [sp, #12]
 802b5fa:	4298      	cmp	r0, r3
 802b5fc:	bfb8      	it	lt
 802b5fe:	4618      	movlt	r0, r3
 802b600:	e7a4      	b.n	802b54c <_printf_i+0x168>
 802b602:	2301      	movs	r3, #1
 802b604:	4632      	mov	r2, r6
 802b606:	4649      	mov	r1, r9
 802b608:	4640      	mov	r0, r8
 802b60a:	47d0      	blx	sl
 802b60c:	3001      	adds	r0, #1
 802b60e:	d09b      	beq.n	802b548 <_printf_i+0x164>
 802b610:	3501      	adds	r5, #1
 802b612:	68e3      	ldr	r3, [r4, #12]
 802b614:	9903      	ldr	r1, [sp, #12]
 802b616:	1a5b      	subs	r3, r3, r1
 802b618:	42ab      	cmp	r3, r5
 802b61a:	dcf2      	bgt.n	802b602 <_printf_i+0x21e>
 802b61c:	e7eb      	b.n	802b5f6 <_printf_i+0x212>
 802b61e:	2500      	movs	r5, #0
 802b620:	f104 0619 	add.w	r6, r4, #25
 802b624:	e7f5      	b.n	802b612 <_printf_i+0x22e>
 802b626:	bf00      	nop
 802b628:	08078203 	.word	0x08078203
 802b62c:	08078214 	.word	0x08078214

0802b630 <_sbrk_r>:
 802b630:	b538      	push	{r3, r4, r5, lr}
 802b632:	4d06      	ldr	r5, [pc, #24]	; (802b64c <_sbrk_r+0x1c>)
 802b634:	2300      	movs	r3, #0
 802b636:	4604      	mov	r4, r0
 802b638:	4608      	mov	r0, r1
 802b63a:	602b      	str	r3, [r5, #0]
 802b63c:	f7f8 fb4e 	bl	8023cdc <_sbrk>
 802b640:	1c43      	adds	r3, r0, #1
 802b642:	d102      	bne.n	802b64a <_sbrk_r+0x1a>
 802b644:	682b      	ldr	r3, [r5, #0]
 802b646:	b103      	cbz	r3, 802b64a <_sbrk_r+0x1a>
 802b648:	6023      	str	r3, [r4, #0]
 802b64a:	bd38      	pop	{r3, r4, r5, pc}
 802b64c:	20002bb0 	.word	0x20002bb0

0802b650 <__swbuf_r>:
 802b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b652:	460e      	mov	r6, r1
 802b654:	4614      	mov	r4, r2
 802b656:	4605      	mov	r5, r0
 802b658:	b118      	cbz	r0, 802b662 <__swbuf_r+0x12>
 802b65a:	6983      	ldr	r3, [r0, #24]
 802b65c:	b90b      	cbnz	r3, 802b662 <__swbuf_r+0x12>
 802b65e:	f000 f9d9 	bl	802ba14 <__sinit>
 802b662:	4b21      	ldr	r3, [pc, #132]	; (802b6e8 <__swbuf_r+0x98>)
 802b664:	429c      	cmp	r4, r3
 802b666:	d12b      	bne.n	802b6c0 <__swbuf_r+0x70>
 802b668:	686c      	ldr	r4, [r5, #4]
 802b66a:	69a3      	ldr	r3, [r4, #24]
 802b66c:	60a3      	str	r3, [r4, #8]
 802b66e:	89a3      	ldrh	r3, [r4, #12]
 802b670:	071a      	lsls	r2, r3, #28
 802b672:	d52f      	bpl.n	802b6d4 <__swbuf_r+0x84>
 802b674:	6923      	ldr	r3, [r4, #16]
 802b676:	b36b      	cbz	r3, 802b6d4 <__swbuf_r+0x84>
 802b678:	6923      	ldr	r3, [r4, #16]
 802b67a:	6820      	ldr	r0, [r4, #0]
 802b67c:	1ac0      	subs	r0, r0, r3
 802b67e:	6963      	ldr	r3, [r4, #20]
 802b680:	b2f6      	uxtb	r6, r6
 802b682:	4283      	cmp	r3, r0
 802b684:	4637      	mov	r7, r6
 802b686:	dc04      	bgt.n	802b692 <__swbuf_r+0x42>
 802b688:	4621      	mov	r1, r4
 802b68a:	4628      	mov	r0, r5
 802b68c:	f000 f92e 	bl	802b8ec <_fflush_r>
 802b690:	bb30      	cbnz	r0, 802b6e0 <__swbuf_r+0x90>
 802b692:	68a3      	ldr	r3, [r4, #8]
 802b694:	3b01      	subs	r3, #1
 802b696:	60a3      	str	r3, [r4, #8]
 802b698:	6823      	ldr	r3, [r4, #0]
 802b69a:	1c5a      	adds	r2, r3, #1
 802b69c:	6022      	str	r2, [r4, #0]
 802b69e:	701e      	strb	r6, [r3, #0]
 802b6a0:	6963      	ldr	r3, [r4, #20]
 802b6a2:	3001      	adds	r0, #1
 802b6a4:	4283      	cmp	r3, r0
 802b6a6:	d004      	beq.n	802b6b2 <__swbuf_r+0x62>
 802b6a8:	89a3      	ldrh	r3, [r4, #12]
 802b6aa:	07db      	lsls	r3, r3, #31
 802b6ac:	d506      	bpl.n	802b6bc <__swbuf_r+0x6c>
 802b6ae:	2e0a      	cmp	r6, #10
 802b6b0:	d104      	bne.n	802b6bc <__swbuf_r+0x6c>
 802b6b2:	4621      	mov	r1, r4
 802b6b4:	4628      	mov	r0, r5
 802b6b6:	f000 f919 	bl	802b8ec <_fflush_r>
 802b6ba:	b988      	cbnz	r0, 802b6e0 <__swbuf_r+0x90>
 802b6bc:	4638      	mov	r0, r7
 802b6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b6c0:	4b0a      	ldr	r3, [pc, #40]	; (802b6ec <__swbuf_r+0x9c>)
 802b6c2:	429c      	cmp	r4, r3
 802b6c4:	d101      	bne.n	802b6ca <__swbuf_r+0x7a>
 802b6c6:	68ac      	ldr	r4, [r5, #8]
 802b6c8:	e7cf      	b.n	802b66a <__swbuf_r+0x1a>
 802b6ca:	4b09      	ldr	r3, [pc, #36]	; (802b6f0 <__swbuf_r+0xa0>)
 802b6cc:	429c      	cmp	r4, r3
 802b6ce:	bf08      	it	eq
 802b6d0:	68ec      	ldreq	r4, [r5, #12]
 802b6d2:	e7ca      	b.n	802b66a <__swbuf_r+0x1a>
 802b6d4:	4621      	mov	r1, r4
 802b6d6:	4628      	mov	r0, r5
 802b6d8:	f000 f80c 	bl	802b6f4 <__swsetup_r>
 802b6dc:	2800      	cmp	r0, #0
 802b6de:	d0cb      	beq.n	802b678 <__swbuf_r+0x28>
 802b6e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802b6e4:	e7ea      	b.n	802b6bc <__swbuf_r+0x6c>
 802b6e6:	bf00      	nop
 802b6e8:	08078248 	.word	0x08078248
 802b6ec:	08078268 	.word	0x08078268
 802b6f0:	08078228 	.word	0x08078228

0802b6f4 <__swsetup_r>:
 802b6f4:	4b32      	ldr	r3, [pc, #200]	; (802b7c0 <__swsetup_r+0xcc>)
 802b6f6:	b570      	push	{r4, r5, r6, lr}
 802b6f8:	681d      	ldr	r5, [r3, #0]
 802b6fa:	4606      	mov	r6, r0
 802b6fc:	460c      	mov	r4, r1
 802b6fe:	b125      	cbz	r5, 802b70a <__swsetup_r+0x16>
 802b700:	69ab      	ldr	r3, [r5, #24]
 802b702:	b913      	cbnz	r3, 802b70a <__swsetup_r+0x16>
 802b704:	4628      	mov	r0, r5
 802b706:	f000 f985 	bl	802ba14 <__sinit>
 802b70a:	4b2e      	ldr	r3, [pc, #184]	; (802b7c4 <__swsetup_r+0xd0>)
 802b70c:	429c      	cmp	r4, r3
 802b70e:	d10f      	bne.n	802b730 <__swsetup_r+0x3c>
 802b710:	686c      	ldr	r4, [r5, #4]
 802b712:	89a3      	ldrh	r3, [r4, #12]
 802b714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b718:	0719      	lsls	r1, r3, #28
 802b71a:	d42c      	bmi.n	802b776 <__swsetup_r+0x82>
 802b71c:	06dd      	lsls	r5, r3, #27
 802b71e:	d411      	bmi.n	802b744 <__swsetup_r+0x50>
 802b720:	2309      	movs	r3, #9
 802b722:	6033      	str	r3, [r6, #0]
 802b724:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b728:	81a3      	strh	r3, [r4, #12]
 802b72a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b72e:	e03e      	b.n	802b7ae <__swsetup_r+0xba>
 802b730:	4b25      	ldr	r3, [pc, #148]	; (802b7c8 <__swsetup_r+0xd4>)
 802b732:	429c      	cmp	r4, r3
 802b734:	d101      	bne.n	802b73a <__swsetup_r+0x46>
 802b736:	68ac      	ldr	r4, [r5, #8]
 802b738:	e7eb      	b.n	802b712 <__swsetup_r+0x1e>
 802b73a:	4b24      	ldr	r3, [pc, #144]	; (802b7cc <__swsetup_r+0xd8>)
 802b73c:	429c      	cmp	r4, r3
 802b73e:	bf08      	it	eq
 802b740:	68ec      	ldreq	r4, [r5, #12]
 802b742:	e7e6      	b.n	802b712 <__swsetup_r+0x1e>
 802b744:	0758      	lsls	r0, r3, #29
 802b746:	d512      	bpl.n	802b76e <__swsetup_r+0x7a>
 802b748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b74a:	b141      	cbz	r1, 802b75e <__swsetup_r+0x6a>
 802b74c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b750:	4299      	cmp	r1, r3
 802b752:	d002      	beq.n	802b75a <__swsetup_r+0x66>
 802b754:	4630      	mov	r0, r6
 802b756:	f7ff fa41 	bl	802abdc <_free_r>
 802b75a:	2300      	movs	r3, #0
 802b75c:	6363      	str	r3, [r4, #52]	; 0x34
 802b75e:	89a3      	ldrh	r3, [r4, #12]
 802b760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b764:	81a3      	strh	r3, [r4, #12]
 802b766:	2300      	movs	r3, #0
 802b768:	6063      	str	r3, [r4, #4]
 802b76a:	6923      	ldr	r3, [r4, #16]
 802b76c:	6023      	str	r3, [r4, #0]
 802b76e:	89a3      	ldrh	r3, [r4, #12]
 802b770:	f043 0308 	orr.w	r3, r3, #8
 802b774:	81a3      	strh	r3, [r4, #12]
 802b776:	6923      	ldr	r3, [r4, #16]
 802b778:	b94b      	cbnz	r3, 802b78e <__swsetup_r+0x9a>
 802b77a:	89a3      	ldrh	r3, [r4, #12]
 802b77c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b784:	d003      	beq.n	802b78e <__swsetup_r+0x9a>
 802b786:	4621      	mov	r1, r4
 802b788:	4630      	mov	r0, r6
 802b78a:	f000 fa09 	bl	802bba0 <__smakebuf_r>
 802b78e:	89a0      	ldrh	r0, [r4, #12]
 802b790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b794:	f010 0301 	ands.w	r3, r0, #1
 802b798:	d00a      	beq.n	802b7b0 <__swsetup_r+0xbc>
 802b79a:	2300      	movs	r3, #0
 802b79c:	60a3      	str	r3, [r4, #8]
 802b79e:	6963      	ldr	r3, [r4, #20]
 802b7a0:	425b      	negs	r3, r3
 802b7a2:	61a3      	str	r3, [r4, #24]
 802b7a4:	6923      	ldr	r3, [r4, #16]
 802b7a6:	b943      	cbnz	r3, 802b7ba <__swsetup_r+0xc6>
 802b7a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b7ac:	d1ba      	bne.n	802b724 <__swsetup_r+0x30>
 802b7ae:	bd70      	pop	{r4, r5, r6, pc}
 802b7b0:	0781      	lsls	r1, r0, #30
 802b7b2:	bf58      	it	pl
 802b7b4:	6963      	ldrpl	r3, [r4, #20]
 802b7b6:	60a3      	str	r3, [r4, #8]
 802b7b8:	e7f4      	b.n	802b7a4 <__swsetup_r+0xb0>
 802b7ba:	2000      	movs	r0, #0
 802b7bc:	e7f7      	b.n	802b7ae <__swsetup_r+0xba>
 802b7be:	bf00      	nop
 802b7c0:	200002ac 	.word	0x200002ac
 802b7c4:	08078248 	.word	0x08078248
 802b7c8:	08078268 	.word	0x08078268
 802b7cc:	08078228 	.word	0x08078228

0802b7d0 <abort>:
 802b7d0:	b508      	push	{r3, lr}
 802b7d2:	2006      	movs	r0, #6
 802b7d4:	f000 fa88 	bl	802bce8 <raise>
 802b7d8:	2001      	movs	r0, #1
 802b7da:	f7f8 fa23 	bl	8023c24 <_exit>
	...

0802b7e0 <__sflush_r>:
 802b7e0:	898a      	ldrh	r2, [r1, #12]
 802b7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b7e6:	4605      	mov	r5, r0
 802b7e8:	0710      	lsls	r0, r2, #28
 802b7ea:	460c      	mov	r4, r1
 802b7ec:	d458      	bmi.n	802b8a0 <__sflush_r+0xc0>
 802b7ee:	684b      	ldr	r3, [r1, #4]
 802b7f0:	2b00      	cmp	r3, #0
 802b7f2:	dc05      	bgt.n	802b800 <__sflush_r+0x20>
 802b7f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b7f6:	2b00      	cmp	r3, #0
 802b7f8:	dc02      	bgt.n	802b800 <__sflush_r+0x20>
 802b7fa:	2000      	movs	r0, #0
 802b7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b802:	2e00      	cmp	r6, #0
 802b804:	d0f9      	beq.n	802b7fa <__sflush_r+0x1a>
 802b806:	2300      	movs	r3, #0
 802b808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b80c:	682f      	ldr	r7, [r5, #0]
 802b80e:	602b      	str	r3, [r5, #0]
 802b810:	d032      	beq.n	802b878 <__sflush_r+0x98>
 802b812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b814:	89a3      	ldrh	r3, [r4, #12]
 802b816:	075a      	lsls	r2, r3, #29
 802b818:	d505      	bpl.n	802b826 <__sflush_r+0x46>
 802b81a:	6863      	ldr	r3, [r4, #4]
 802b81c:	1ac0      	subs	r0, r0, r3
 802b81e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b820:	b10b      	cbz	r3, 802b826 <__sflush_r+0x46>
 802b822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b824:	1ac0      	subs	r0, r0, r3
 802b826:	2300      	movs	r3, #0
 802b828:	4602      	mov	r2, r0
 802b82a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b82c:	6a21      	ldr	r1, [r4, #32]
 802b82e:	4628      	mov	r0, r5
 802b830:	47b0      	blx	r6
 802b832:	1c43      	adds	r3, r0, #1
 802b834:	89a3      	ldrh	r3, [r4, #12]
 802b836:	d106      	bne.n	802b846 <__sflush_r+0x66>
 802b838:	6829      	ldr	r1, [r5, #0]
 802b83a:	291d      	cmp	r1, #29
 802b83c:	d82c      	bhi.n	802b898 <__sflush_r+0xb8>
 802b83e:	4a2a      	ldr	r2, [pc, #168]	; (802b8e8 <__sflush_r+0x108>)
 802b840:	40ca      	lsrs	r2, r1
 802b842:	07d6      	lsls	r6, r2, #31
 802b844:	d528      	bpl.n	802b898 <__sflush_r+0xb8>
 802b846:	2200      	movs	r2, #0
 802b848:	6062      	str	r2, [r4, #4]
 802b84a:	04d9      	lsls	r1, r3, #19
 802b84c:	6922      	ldr	r2, [r4, #16]
 802b84e:	6022      	str	r2, [r4, #0]
 802b850:	d504      	bpl.n	802b85c <__sflush_r+0x7c>
 802b852:	1c42      	adds	r2, r0, #1
 802b854:	d101      	bne.n	802b85a <__sflush_r+0x7a>
 802b856:	682b      	ldr	r3, [r5, #0]
 802b858:	b903      	cbnz	r3, 802b85c <__sflush_r+0x7c>
 802b85a:	6560      	str	r0, [r4, #84]	; 0x54
 802b85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b85e:	602f      	str	r7, [r5, #0]
 802b860:	2900      	cmp	r1, #0
 802b862:	d0ca      	beq.n	802b7fa <__sflush_r+0x1a>
 802b864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b868:	4299      	cmp	r1, r3
 802b86a:	d002      	beq.n	802b872 <__sflush_r+0x92>
 802b86c:	4628      	mov	r0, r5
 802b86e:	f7ff f9b5 	bl	802abdc <_free_r>
 802b872:	2000      	movs	r0, #0
 802b874:	6360      	str	r0, [r4, #52]	; 0x34
 802b876:	e7c1      	b.n	802b7fc <__sflush_r+0x1c>
 802b878:	6a21      	ldr	r1, [r4, #32]
 802b87a:	2301      	movs	r3, #1
 802b87c:	4628      	mov	r0, r5
 802b87e:	47b0      	blx	r6
 802b880:	1c41      	adds	r1, r0, #1
 802b882:	d1c7      	bne.n	802b814 <__sflush_r+0x34>
 802b884:	682b      	ldr	r3, [r5, #0]
 802b886:	2b00      	cmp	r3, #0
 802b888:	d0c4      	beq.n	802b814 <__sflush_r+0x34>
 802b88a:	2b1d      	cmp	r3, #29
 802b88c:	d001      	beq.n	802b892 <__sflush_r+0xb2>
 802b88e:	2b16      	cmp	r3, #22
 802b890:	d101      	bne.n	802b896 <__sflush_r+0xb6>
 802b892:	602f      	str	r7, [r5, #0]
 802b894:	e7b1      	b.n	802b7fa <__sflush_r+0x1a>
 802b896:	89a3      	ldrh	r3, [r4, #12]
 802b898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b89c:	81a3      	strh	r3, [r4, #12]
 802b89e:	e7ad      	b.n	802b7fc <__sflush_r+0x1c>
 802b8a0:	690f      	ldr	r7, [r1, #16]
 802b8a2:	2f00      	cmp	r7, #0
 802b8a4:	d0a9      	beq.n	802b7fa <__sflush_r+0x1a>
 802b8a6:	0793      	lsls	r3, r2, #30
 802b8a8:	680e      	ldr	r6, [r1, #0]
 802b8aa:	bf08      	it	eq
 802b8ac:	694b      	ldreq	r3, [r1, #20]
 802b8ae:	600f      	str	r7, [r1, #0]
 802b8b0:	bf18      	it	ne
 802b8b2:	2300      	movne	r3, #0
 802b8b4:	eba6 0807 	sub.w	r8, r6, r7
 802b8b8:	608b      	str	r3, [r1, #8]
 802b8ba:	f1b8 0f00 	cmp.w	r8, #0
 802b8be:	dd9c      	ble.n	802b7fa <__sflush_r+0x1a>
 802b8c0:	6a21      	ldr	r1, [r4, #32]
 802b8c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b8c4:	4643      	mov	r3, r8
 802b8c6:	463a      	mov	r2, r7
 802b8c8:	4628      	mov	r0, r5
 802b8ca:	47b0      	blx	r6
 802b8cc:	2800      	cmp	r0, #0
 802b8ce:	dc06      	bgt.n	802b8de <__sflush_r+0xfe>
 802b8d0:	89a3      	ldrh	r3, [r4, #12]
 802b8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b8d6:	81a3      	strh	r3, [r4, #12]
 802b8d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b8dc:	e78e      	b.n	802b7fc <__sflush_r+0x1c>
 802b8de:	4407      	add	r7, r0
 802b8e0:	eba8 0800 	sub.w	r8, r8, r0
 802b8e4:	e7e9      	b.n	802b8ba <__sflush_r+0xda>
 802b8e6:	bf00      	nop
 802b8e8:	20400001 	.word	0x20400001

0802b8ec <_fflush_r>:
 802b8ec:	b538      	push	{r3, r4, r5, lr}
 802b8ee:	690b      	ldr	r3, [r1, #16]
 802b8f0:	4605      	mov	r5, r0
 802b8f2:	460c      	mov	r4, r1
 802b8f4:	b913      	cbnz	r3, 802b8fc <_fflush_r+0x10>
 802b8f6:	2500      	movs	r5, #0
 802b8f8:	4628      	mov	r0, r5
 802b8fa:	bd38      	pop	{r3, r4, r5, pc}
 802b8fc:	b118      	cbz	r0, 802b906 <_fflush_r+0x1a>
 802b8fe:	6983      	ldr	r3, [r0, #24]
 802b900:	b90b      	cbnz	r3, 802b906 <_fflush_r+0x1a>
 802b902:	f000 f887 	bl	802ba14 <__sinit>
 802b906:	4b14      	ldr	r3, [pc, #80]	; (802b958 <_fflush_r+0x6c>)
 802b908:	429c      	cmp	r4, r3
 802b90a:	d11b      	bne.n	802b944 <_fflush_r+0x58>
 802b90c:	686c      	ldr	r4, [r5, #4]
 802b90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b912:	2b00      	cmp	r3, #0
 802b914:	d0ef      	beq.n	802b8f6 <_fflush_r+0xa>
 802b916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b918:	07d0      	lsls	r0, r2, #31
 802b91a:	d404      	bmi.n	802b926 <_fflush_r+0x3a>
 802b91c:	0599      	lsls	r1, r3, #22
 802b91e:	d402      	bmi.n	802b926 <_fflush_r+0x3a>
 802b920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b922:	f000 f915 	bl	802bb50 <__retarget_lock_acquire_recursive>
 802b926:	4628      	mov	r0, r5
 802b928:	4621      	mov	r1, r4
 802b92a:	f7ff ff59 	bl	802b7e0 <__sflush_r>
 802b92e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b930:	07da      	lsls	r2, r3, #31
 802b932:	4605      	mov	r5, r0
 802b934:	d4e0      	bmi.n	802b8f8 <_fflush_r+0xc>
 802b936:	89a3      	ldrh	r3, [r4, #12]
 802b938:	059b      	lsls	r3, r3, #22
 802b93a:	d4dd      	bmi.n	802b8f8 <_fflush_r+0xc>
 802b93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b93e:	f000 f908 	bl	802bb52 <__retarget_lock_release_recursive>
 802b942:	e7d9      	b.n	802b8f8 <_fflush_r+0xc>
 802b944:	4b05      	ldr	r3, [pc, #20]	; (802b95c <_fflush_r+0x70>)
 802b946:	429c      	cmp	r4, r3
 802b948:	d101      	bne.n	802b94e <_fflush_r+0x62>
 802b94a:	68ac      	ldr	r4, [r5, #8]
 802b94c:	e7df      	b.n	802b90e <_fflush_r+0x22>
 802b94e:	4b04      	ldr	r3, [pc, #16]	; (802b960 <_fflush_r+0x74>)
 802b950:	429c      	cmp	r4, r3
 802b952:	bf08      	it	eq
 802b954:	68ec      	ldreq	r4, [r5, #12]
 802b956:	e7da      	b.n	802b90e <_fflush_r+0x22>
 802b958:	08078248 	.word	0x08078248
 802b95c:	08078268 	.word	0x08078268
 802b960:	08078228 	.word	0x08078228

0802b964 <std>:
 802b964:	2300      	movs	r3, #0
 802b966:	b510      	push	{r4, lr}
 802b968:	4604      	mov	r4, r0
 802b96a:	e9c0 3300 	strd	r3, r3, [r0]
 802b96e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b972:	6083      	str	r3, [r0, #8]
 802b974:	8181      	strh	r1, [r0, #12]
 802b976:	6643      	str	r3, [r0, #100]	; 0x64
 802b978:	81c2      	strh	r2, [r0, #14]
 802b97a:	6183      	str	r3, [r0, #24]
 802b97c:	4619      	mov	r1, r3
 802b97e:	2208      	movs	r2, #8
 802b980:	305c      	adds	r0, #92	; 0x5c
 802b982:	f7ff f833 	bl	802a9ec <memset>
 802b986:	4b05      	ldr	r3, [pc, #20]	; (802b99c <std+0x38>)
 802b988:	6263      	str	r3, [r4, #36]	; 0x24
 802b98a:	4b05      	ldr	r3, [pc, #20]	; (802b9a0 <std+0x3c>)
 802b98c:	62a3      	str	r3, [r4, #40]	; 0x28
 802b98e:	4b05      	ldr	r3, [pc, #20]	; (802b9a4 <std+0x40>)
 802b990:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b992:	4b05      	ldr	r3, [pc, #20]	; (802b9a8 <std+0x44>)
 802b994:	6224      	str	r4, [r4, #32]
 802b996:	6323      	str	r3, [r4, #48]	; 0x30
 802b998:	bd10      	pop	{r4, pc}
 802b99a:	bf00      	nop
 802b99c:	0802bd21 	.word	0x0802bd21
 802b9a0:	0802bd43 	.word	0x0802bd43
 802b9a4:	0802bd7b 	.word	0x0802bd7b
 802b9a8:	0802bd9f 	.word	0x0802bd9f

0802b9ac <_cleanup_r>:
 802b9ac:	4901      	ldr	r1, [pc, #4]	; (802b9b4 <_cleanup_r+0x8>)
 802b9ae:	f000 b8af 	b.w	802bb10 <_fwalk_reent>
 802b9b2:	bf00      	nop
 802b9b4:	0802b8ed 	.word	0x0802b8ed

0802b9b8 <__sfmoreglue>:
 802b9b8:	b570      	push	{r4, r5, r6, lr}
 802b9ba:	2268      	movs	r2, #104	; 0x68
 802b9bc:	1e4d      	subs	r5, r1, #1
 802b9be:	4355      	muls	r5, r2
 802b9c0:	460e      	mov	r6, r1
 802b9c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802b9c6:	f7ff f975 	bl	802acb4 <_malloc_r>
 802b9ca:	4604      	mov	r4, r0
 802b9cc:	b140      	cbz	r0, 802b9e0 <__sfmoreglue+0x28>
 802b9ce:	2100      	movs	r1, #0
 802b9d0:	e9c0 1600 	strd	r1, r6, [r0]
 802b9d4:	300c      	adds	r0, #12
 802b9d6:	60a0      	str	r0, [r4, #8]
 802b9d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802b9dc:	f7ff f806 	bl	802a9ec <memset>
 802b9e0:	4620      	mov	r0, r4
 802b9e2:	bd70      	pop	{r4, r5, r6, pc}

0802b9e4 <__sfp_lock_acquire>:
 802b9e4:	4801      	ldr	r0, [pc, #4]	; (802b9ec <__sfp_lock_acquire+0x8>)
 802b9e6:	f000 b8b3 	b.w	802bb50 <__retarget_lock_acquire_recursive>
 802b9ea:	bf00      	nop
 802b9ec:	20002bb5 	.word	0x20002bb5

0802b9f0 <__sfp_lock_release>:
 802b9f0:	4801      	ldr	r0, [pc, #4]	; (802b9f8 <__sfp_lock_release+0x8>)
 802b9f2:	f000 b8ae 	b.w	802bb52 <__retarget_lock_release_recursive>
 802b9f6:	bf00      	nop
 802b9f8:	20002bb5 	.word	0x20002bb5

0802b9fc <__sinit_lock_acquire>:
 802b9fc:	4801      	ldr	r0, [pc, #4]	; (802ba04 <__sinit_lock_acquire+0x8>)
 802b9fe:	f000 b8a7 	b.w	802bb50 <__retarget_lock_acquire_recursive>
 802ba02:	bf00      	nop
 802ba04:	20002bb6 	.word	0x20002bb6

0802ba08 <__sinit_lock_release>:
 802ba08:	4801      	ldr	r0, [pc, #4]	; (802ba10 <__sinit_lock_release+0x8>)
 802ba0a:	f000 b8a2 	b.w	802bb52 <__retarget_lock_release_recursive>
 802ba0e:	bf00      	nop
 802ba10:	20002bb6 	.word	0x20002bb6

0802ba14 <__sinit>:
 802ba14:	b510      	push	{r4, lr}
 802ba16:	4604      	mov	r4, r0
 802ba18:	f7ff fff0 	bl	802b9fc <__sinit_lock_acquire>
 802ba1c:	69a3      	ldr	r3, [r4, #24]
 802ba1e:	b11b      	cbz	r3, 802ba28 <__sinit+0x14>
 802ba20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ba24:	f7ff bff0 	b.w	802ba08 <__sinit_lock_release>
 802ba28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802ba2c:	6523      	str	r3, [r4, #80]	; 0x50
 802ba2e:	4b13      	ldr	r3, [pc, #76]	; (802ba7c <__sinit+0x68>)
 802ba30:	4a13      	ldr	r2, [pc, #76]	; (802ba80 <__sinit+0x6c>)
 802ba32:	681b      	ldr	r3, [r3, #0]
 802ba34:	62a2      	str	r2, [r4, #40]	; 0x28
 802ba36:	42a3      	cmp	r3, r4
 802ba38:	bf04      	itt	eq
 802ba3a:	2301      	moveq	r3, #1
 802ba3c:	61a3      	streq	r3, [r4, #24]
 802ba3e:	4620      	mov	r0, r4
 802ba40:	f000 f820 	bl	802ba84 <__sfp>
 802ba44:	6060      	str	r0, [r4, #4]
 802ba46:	4620      	mov	r0, r4
 802ba48:	f000 f81c 	bl	802ba84 <__sfp>
 802ba4c:	60a0      	str	r0, [r4, #8]
 802ba4e:	4620      	mov	r0, r4
 802ba50:	f000 f818 	bl	802ba84 <__sfp>
 802ba54:	2200      	movs	r2, #0
 802ba56:	60e0      	str	r0, [r4, #12]
 802ba58:	2104      	movs	r1, #4
 802ba5a:	6860      	ldr	r0, [r4, #4]
 802ba5c:	f7ff ff82 	bl	802b964 <std>
 802ba60:	68a0      	ldr	r0, [r4, #8]
 802ba62:	2201      	movs	r2, #1
 802ba64:	2109      	movs	r1, #9
 802ba66:	f7ff ff7d 	bl	802b964 <std>
 802ba6a:	68e0      	ldr	r0, [r4, #12]
 802ba6c:	2202      	movs	r2, #2
 802ba6e:	2112      	movs	r1, #18
 802ba70:	f7ff ff78 	bl	802b964 <std>
 802ba74:	2301      	movs	r3, #1
 802ba76:	61a3      	str	r3, [r4, #24]
 802ba78:	e7d2      	b.n	802ba20 <__sinit+0xc>
 802ba7a:	bf00      	nop
 802ba7c:	08078140 	.word	0x08078140
 802ba80:	0802b9ad 	.word	0x0802b9ad

0802ba84 <__sfp>:
 802ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ba86:	4607      	mov	r7, r0
 802ba88:	f7ff ffac 	bl	802b9e4 <__sfp_lock_acquire>
 802ba8c:	4b1e      	ldr	r3, [pc, #120]	; (802bb08 <__sfp+0x84>)
 802ba8e:	681e      	ldr	r6, [r3, #0]
 802ba90:	69b3      	ldr	r3, [r6, #24]
 802ba92:	b913      	cbnz	r3, 802ba9a <__sfp+0x16>
 802ba94:	4630      	mov	r0, r6
 802ba96:	f7ff ffbd 	bl	802ba14 <__sinit>
 802ba9a:	3648      	adds	r6, #72	; 0x48
 802ba9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802baa0:	3b01      	subs	r3, #1
 802baa2:	d503      	bpl.n	802baac <__sfp+0x28>
 802baa4:	6833      	ldr	r3, [r6, #0]
 802baa6:	b30b      	cbz	r3, 802baec <__sfp+0x68>
 802baa8:	6836      	ldr	r6, [r6, #0]
 802baaa:	e7f7      	b.n	802ba9c <__sfp+0x18>
 802baac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802bab0:	b9d5      	cbnz	r5, 802bae8 <__sfp+0x64>
 802bab2:	4b16      	ldr	r3, [pc, #88]	; (802bb0c <__sfp+0x88>)
 802bab4:	60e3      	str	r3, [r4, #12]
 802bab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802baba:	6665      	str	r5, [r4, #100]	; 0x64
 802babc:	f000 f847 	bl	802bb4e <__retarget_lock_init_recursive>
 802bac0:	f7ff ff96 	bl	802b9f0 <__sfp_lock_release>
 802bac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802bac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802bacc:	6025      	str	r5, [r4, #0]
 802bace:	61a5      	str	r5, [r4, #24]
 802bad0:	2208      	movs	r2, #8
 802bad2:	4629      	mov	r1, r5
 802bad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802bad8:	f7fe ff88 	bl	802a9ec <memset>
 802badc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802bae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802bae4:	4620      	mov	r0, r4
 802bae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bae8:	3468      	adds	r4, #104	; 0x68
 802baea:	e7d9      	b.n	802baa0 <__sfp+0x1c>
 802baec:	2104      	movs	r1, #4
 802baee:	4638      	mov	r0, r7
 802baf0:	f7ff ff62 	bl	802b9b8 <__sfmoreglue>
 802baf4:	4604      	mov	r4, r0
 802baf6:	6030      	str	r0, [r6, #0]
 802baf8:	2800      	cmp	r0, #0
 802bafa:	d1d5      	bne.n	802baa8 <__sfp+0x24>
 802bafc:	f7ff ff78 	bl	802b9f0 <__sfp_lock_release>
 802bb00:	230c      	movs	r3, #12
 802bb02:	603b      	str	r3, [r7, #0]
 802bb04:	e7ee      	b.n	802bae4 <__sfp+0x60>
 802bb06:	bf00      	nop
 802bb08:	08078140 	.word	0x08078140
 802bb0c:	ffff0001 	.word	0xffff0001

0802bb10 <_fwalk_reent>:
 802bb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bb14:	4606      	mov	r6, r0
 802bb16:	4688      	mov	r8, r1
 802bb18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802bb1c:	2700      	movs	r7, #0
 802bb1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802bb22:	f1b9 0901 	subs.w	r9, r9, #1
 802bb26:	d505      	bpl.n	802bb34 <_fwalk_reent+0x24>
 802bb28:	6824      	ldr	r4, [r4, #0]
 802bb2a:	2c00      	cmp	r4, #0
 802bb2c:	d1f7      	bne.n	802bb1e <_fwalk_reent+0xe>
 802bb2e:	4638      	mov	r0, r7
 802bb30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bb34:	89ab      	ldrh	r3, [r5, #12]
 802bb36:	2b01      	cmp	r3, #1
 802bb38:	d907      	bls.n	802bb4a <_fwalk_reent+0x3a>
 802bb3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802bb3e:	3301      	adds	r3, #1
 802bb40:	d003      	beq.n	802bb4a <_fwalk_reent+0x3a>
 802bb42:	4629      	mov	r1, r5
 802bb44:	4630      	mov	r0, r6
 802bb46:	47c0      	blx	r8
 802bb48:	4307      	orrs	r7, r0
 802bb4a:	3568      	adds	r5, #104	; 0x68
 802bb4c:	e7e9      	b.n	802bb22 <_fwalk_reent+0x12>

0802bb4e <__retarget_lock_init_recursive>:
 802bb4e:	4770      	bx	lr

0802bb50 <__retarget_lock_acquire_recursive>:
 802bb50:	4770      	bx	lr

0802bb52 <__retarget_lock_release_recursive>:
 802bb52:	4770      	bx	lr

0802bb54 <__swhatbuf_r>:
 802bb54:	b570      	push	{r4, r5, r6, lr}
 802bb56:	460e      	mov	r6, r1
 802bb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bb5c:	2900      	cmp	r1, #0
 802bb5e:	b096      	sub	sp, #88	; 0x58
 802bb60:	4614      	mov	r4, r2
 802bb62:	461d      	mov	r5, r3
 802bb64:	da08      	bge.n	802bb78 <__swhatbuf_r+0x24>
 802bb66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802bb6a:	2200      	movs	r2, #0
 802bb6c:	602a      	str	r2, [r5, #0]
 802bb6e:	061a      	lsls	r2, r3, #24
 802bb70:	d410      	bmi.n	802bb94 <__swhatbuf_r+0x40>
 802bb72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bb76:	e00e      	b.n	802bb96 <__swhatbuf_r+0x42>
 802bb78:	466a      	mov	r2, sp
 802bb7a:	f000 f937 	bl	802bdec <_fstat_r>
 802bb7e:	2800      	cmp	r0, #0
 802bb80:	dbf1      	blt.n	802bb66 <__swhatbuf_r+0x12>
 802bb82:	9a01      	ldr	r2, [sp, #4]
 802bb84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802bb88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802bb8c:	425a      	negs	r2, r3
 802bb8e:	415a      	adcs	r2, r3
 802bb90:	602a      	str	r2, [r5, #0]
 802bb92:	e7ee      	b.n	802bb72 <__swhatbuf_r+0x1e>
 802bb94:	2340      	movs	r3, #64	; 0x40
 802bb96:	2000      	movs	r0, #0
 802bb98:	6023      	str	r3, [r4, #0]
 802bb9a:	b016      	add	sp, #88	; 0x58
 802bb9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0802bba0 <__smakebuf_r>:
 802bba0:	898b      	ldrh	r3, [r1, #12]
 802bba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802bba4:	079d      	lsls	r5, r3, #30
 802bba6:	4606      	mov	r6, r0
 802bba8:	460c      	mov	r4, r1
 802bbaa:	d507      	bpl.n	802bbbc <__smakebuf_r+0x1c>
 802bbac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802bbb0:	6023      	str	r3, [r4, #0]
 802bbb2:	6123      	str	r3, [r4, #16]
 802bbb4:	2301      	movs	r3, #1
 802bbb6:	6163      	str	r3, [r4, #20]
 802bbb8:	b002      	add	sp, #8
 802bbba:	bd70      	pop	{r4, r5, r6, pc}
 802bbbc:	ab01      	add	r3, sp, #4
 802bbbe:	466a      	mov	r2, sp
 802bbc0:	f7ff ffc8 	bl	802bb54 <__swhatbuf_r>
 802bbc4:	9900      	ldr	r1, [sp, #0]
 802bbc6:	4605      	mov	r5, r0
 802bbc8:	4630      	mov	r0, r6
 802bbca:	f7ff f873 	bl	802acb4 <_malloc_r>
 802bbce:	b948      	cbnz	r0, 802bbe4 <__smakebuf_r+0x44>
 802bbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bbd4:	059a      	lsls	r2, r3, #22
 802bbd6:	d4ef      	bmi.n	802bbb8 <__smakebuf_r+0x18>
 802bbd8:	f023 0303 	bic.w	r3, r3, #3
 802bbdc:	f043 0302 	orr.w	r3, r3, #2
 802bbe0:	81a3      	strh	r3, [r4, #12]
 802bbe2:	e7e3      	b.n	802bbac <__smakebuf_r+0xc>
 802bbe4:	4b0d      	ldr	r3, [pc, #52]	; (802bc1c <__smakebuf_r+0x7c>)
 802bbe6:	62b3      	str	r3, [r6, #40]	; 0x28
 802bbe8:	89a3      	ldrh	r3, [r4, #12]
 802bbea:	6020      	str	r0, [r4, #0]
 802bbec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bbf0:	81a3      	strh	r3, [r4, #12]
 802bbf2:	9b00      	ldr	r3, [sp, #0]
 802bbf4:	6163      	str	r3, [r4, #20]
 802bbf6:	9b01      	ldr	r3, [sp, #4]
 802bbf8:	6120      	str	r0, [r4, #16]
 802bbfa:	b15b      	cbz	r3, 802bc14 <__smakebuf_r+0x74>
 802bbfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bc00:	4630      	mov	r0, r6
 802bc02:	f000 f905 	bl	802be10 <_isatty_r>
 802bc06:	b128      	cbz	r0, 802bc14 <__smakebuf_r+0x74>
 802bc08:	89a3      	ldrh	r3, [r4, #12]
 802bc0a:	f023 0303 	bic.w	r3, r3, #3
 802bc0e:	f043 0301 	orr.w	r3, r3, #1
 802bc12:	81a3      	strh	r3, [r4, #12]
 802bc14:	89a0      	ldrh	r0, [r4, #12]
 802bc16:	4305      	orrs	r5, r0
 802bc18:	81a5      	strh	r5, [r4, #12]
 802bc1a:	e7cd      	b.n	802bbb8 <__smakebuf_r+0x18>
 802bc1c:	0802b9ad 	.word	0x0802b9ad

0802bc20 <__malloc_lock>:
 802bc20:	4801      	ldr	r0, [pc, #4]	; (802bc28 <__malloc_lock+0x8>)
 802bc22:	f7ff bf95 	b.w	802bb50 <__retarget_lock_acquire_recursive>
 802bc26:	bf00      	nop
 802bc28:	20002bb4 	.word	0x20002bb4

0802bc2c <__malloc_unlock>:
 802bc2c:	4801      	ldr	r0, [pc, #4]	; (802bc34 <__malloc_unlock+0x8>)
 802bc2e:	f7ff bf90 	b.w	802bb52 <__retarget_lock_release_recursive>
 802bc32:	bf00      	nop
 802bc34:	20002bb4 	.word	0x20002bb4

0802bc38 <_realloc_r>:
 802bc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bc3c:	4680      	mov	r8, r0
 802bc3e:	4614      	mov	r4, r2
 802bc40:	460e      	mov	r6, r1
 802bc42:	b921      	cbnz	r1, 802bc4e <_realloc_r+0x16>
 802bc44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bc48:	4611      	mov	r1, r2
 802bc4a:	f7ff b833 	b.w	802acb4 <_malloc_r>
 802bc4e:	b92a      	cbnz	r2, 802bc5c <_realloc_r+0x24>
 802bc50:	f7fe ffc4 	bl	802abdc <_free_r>
 802bc54:	4625      	mov	r5, r4
 802bc56:	4628      	mov	r0, r5
 802bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bc5c:	f000 f8fa 	bl	802be54 <_malloc_usable_size_r>
 802bc60:	4284      	cmp	r4, r0
 802bc62:	4607      	mov	r7, r0
 802bc64:	d802      	bhi.n	802bc6c <_realloc_r+0x34>
 802bc66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802bc6a:	d812      	bhi.n	802bc92 <_realloc_r+0x5a>
 802bc6c:	4621      	mov	r1, r4
 802bc6e:	4640      	mov	r0, r8
 802bc70:	f7ff f820 	bl	802acb4 <_malloc_r>
 802bc74:	4605      	mov	r5, r0
 802bc76:	2800      	cmp	r0, #0
 802bc78:	d0ed      	beq.n	802bc56 <_realloc_r+0x1e>
 802bc7a:	42bc      	cmp	r4, r7
 802bc7c:	4622      	mov	r2, r4
 802bc7e:	4631      	mov	r1, r6
 802bc80:	bf28      	it	cs
 802bc82:	463a      	movcs	r2, r7
 802bc84:	f7fe fe8a 	bl	802a99c <memcpy>
 802bc88:	4631      	mov	r1, r6
 802bc8a:	4640      	mov	r0, r8
 802bc8c:	f7fe ffa6 	bl	802abdc <_free_r>
 802bc90:	e7e1      	b.n	802bc56 <_realloc_r+0x1e>
 802bc92:	4635      	mov	r5, r6
 802bc94:	e7df      	b.n	802bc56 <_realloc_r+0x1e>

0802bc96 <_raise_r>:
 802bc96:	291f      	cmp	r1, #31
 802bc98:	b538      	push	{r3, r4, r5, lr}
 802bc9a:	4604      	mov	r4, r0
 802bc9c:	460d      	mov	r5, r1
 802bc9e:	d904      	bls.n	802bcaa <_raise_r+0x14>
 802bca0:	2316      	movs	r3, #22
 802bca2:	6003      	str	r3, [r0, #0]
 802bca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802bca8:	bd38      	pop	{r3, r4, r5, pc}
 802bcaa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802bcac:	b112      	cbz	r2, 802bcb4 <_raise_r+0x1e>
 802bcae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802bcb2:	b94b      	cbnz	r3, 802bcc8 <_raise_r+0x32>
 802bcb4:	4620      	mov	r0, r4
 802bcb6:	f000 f831 	bl	802bd1c <_getpid_r>
 802bcba:	462a      	mov	r2, r5
 802bcbc:	4601      	mov	r1, r0
 802bcbe:	4620      	mov	r0, r4
 802bcc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bcc4:	f000 b818 	b.w	802bcf8 <_kill_r>
 802bcc8:	2b01      	cmp	r3, #1
 802bcca:	d00a      	beq.n	802bce2 <_raise_r+0x4c>
 802bccc:	1c59      	adds	r1, r3, #1
 802bcce:	d103      	bne.n	802bcd8 <_raise_r+0x42>
 802bcd0:	2316      	movs	r3, #22
 802bcd2:	6003      	str	r3, [r0, #0]
 802bcd4:	2001      	movs	r0, #1
 802bcd6:	e7e7      	b.n	802bca8 <_raise_r+0x12>
 802bcd8:	2400      	movs	r4, #0
 802bcda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802bcde:	4628      	mov	r0, r5
 802bce0:	4798      	blx	r3
 802bce2:	2000      	movs	r0, #0
 802bce4:	e7e0      	b.n	802bca8 <_raise_r+0x12>
	...

0802bce8 <raise>:
 802bce8:	4b02      	ldr	r3, [pc, #8]	; (802bcf4 <raise+0xc>)
 802bcea:	4601      	mov	r1, r0
 802bcec:	6818      	ldr	r0, [r3, #0]
 802bcee:	f7ff bfd2 	b.w	802bc96 <_raise_r>
 802bcf2:	bf00      	nop
 802bcf4:	200002ac 	.word	0x200002ac

0802bcf8 <_kill_r>:
 802bcf8:	b538      	push	{r3, r4, r5, lr}
 802bcfa:	4d07      	ldr	r5, [pc, #28]	; (802bd18 <_kill_r+0x20>)
 802bcfc:	2300      	movs	r3, #0
 802bcfe:	4604      	mov	r4, r0
 802bd00:	4608      	mov	r0, r1
 802bd02:	4611      	mov	r1, r2
 802bd04:	602b      	str	r3, [r5, #0]
 802bd06:	f7f7 ff7d 	bl	8023c04 <_kill>
 802bd0a:	1c43      	adds	r3, r0, #1
 802bd0c:	d102      	bne.n	802bd14 <_kill_r+0x1c>
 802bd0e:	682b      	ldr	r3, [r5, #0]
 802bd10:	b103      	cbz	r3, 802bd14 <_kill_r+0x1c>
 802bd12:	6023      	str	r3, [r4, #0]
 802bd14:	bd38      	pop	{r3, r4, r5, pc}
 802bd16:	bf00      	nop
 802bd18:	20002bb0 	.word	0x20002bb0

0802bd1c <_getpid_r>:
 802bd1c:	f7f7 bf6a 	b.w	8023bf4 <_getpid>

0802bd20 <__sread>:
 802bd20:	b510      	push	{r4, lr}
 802bd22:	460c      	mov	r4, r1
 802bd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bd28:	f000 f89c 	bl	802be64 <_read_r>
 802bd2c:	2800      	cmp	r0, #0
 802bd2e:	bfab      	itete	ge
 802bd30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802bd32:	89a3      	ldrhlt	r3, [r4, #12]
 802bd34:	181b      	addge	r3, r3, r0
 802bd36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802bd3a:	bfac      	ite	ge
 802bd3c:	6563      	strge	r3, [r4, #84]	; 0x54
 802bd3e:	81a3      	strhlt	r3, [r4, #12]
 802bd40:	bd10      	pop	{r4, pc}

0802bd42 <__swrite>:
 802bd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bd46:	461f      	mov	r7, r3
 802bd48:	898b      	ldrh	r3, [r1, #12]
 802bd4a:	05db      	lsls	r3, r3, #23
 802bd4c:	4605      	mov	r5, r0
 802bd4e:	460c      	mov	r4, r1
 802bd50:	4616      	mov	r6, r2
 802bd52:	d505      	bpl.n	802bd60 <__swrite+0x1e>
 802bd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bd58:	2302      	movs	r3, #2
 802bd5a:	2200      	movs	r2, #0
 802bd5c:	f000 f868 	bl	802be30 <_lseek_r>
 802bd60:	89a3      	ldrh	r3, [r4, #12]
 802bd62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bd66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802bd6a:	81a3      	strh	r3, [r4, #12]
 802bd6c:	4632      	mov	r2, r6
 802bd6e:	463b      	mov	r3, r7
 802bd70:	4628      	mov	r0, r5
 802bd72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bd76:	f000 b817 	b.w	802bda8 <_write_r>

0802bd7a <__sseek>:
 802bd7a:	b510      	push	{r4, lr}
 802bd7c:	460c      	mov	r4, r1
 802bd7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bd82:	f000 f855 	bl	802be30 <_lseek_r>
 802bd86:	1c43      	adds	r3, r0, #1
 802bd88:	89a3      	ldrh	r3, [r4, #12]
 802bd8a:	bf15      	itete	ne
 802bd8c:	6560      	strne	r0, [r4, #84]	; 0x54
 802bd8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802bd92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802bd96:	81a3      	strheq	r3, [r4, #12]
 802bd98:	bf18      	it	ne
 802bd9a:	81a3      	strhne	r3, [r4, #12]
 802bd9c:	bd10      	pop	{r4, pc}

0802bd9e <__sclose>:
 802bd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bda2:	f000 b813 	b.w	802bdcc <_close_r>
	...

0802bda8 <_write_r>:
 802bda8:	b538      	push	{r3, r4, r5, lr}
 802bdaa:	4d07      	ldr	r5, [pc, #28]	; (802bdc8 <_write_r+0x20>)
 802bdac:	4604      	mov	r4, r0
 802bdae:	4608      	mov	r0, r1
 802bdb0:	4611      	mov	r1, r2
 802bdb2:	2200      	movs	r2, #0
 802bdb4:	602a      	str	r2, [r5, #0]
 802bdb6:	461a      	mov	r2, r3
 802bdb8:	f7f6 f8a0 	bl	8021efc <_write>
 802bdbc:	1c43      	adds	r3, r0, #1
 802bdbe:	d102      	bne.n	802bdc6 <_write_r+0x1e>
 802bdc0:	682b      	ldr	r3, [r5, #0]
 802bdc2:	b103      	cbz	r3, 802bdc6 <_write_r+0x1e>
 802bdc4:	6023      	str	r3, [r4, #0]
 802bdc6:	bd38      	pop	{r3, r4, r5, pc}
 802bdc8:	20002bb0 	.word	0x20002bb0

0802bdcc <_close_r>:
 802bdcc:	b538      	push	{r3, r4, r5, lr}
 802bdce:	4d06      	ldr	r5, [pc, #24]	; (802bde8 <_close_r+0x1c>)
 802bdd0:	2300      	movs	r3, #0
 802bdd2:	4604      	mov	r4, r0
 802bdd4:	4608      	mov	r0, r1
 802bdd6:	602b      	str	r3, [r5, #0]
 802bdd8:	f7f7 ff4b 	bl	8023c72 <_close>
 802bddc:	1c43      	adds	r3, r0, #1
 802bdde:	d102      	bne.n	802bde6 <_close_r+0x1a>
 802bde0:	682b      	ldr	r3, [r5, #0]
 802bde2:	b103      	cbz	r3, 802bde6 <_close_r+0x1a>
 802bde4:	6023      	str	r3, [r4, #0]
 802bde6:	bd38      	pop	{r3, r4, r5, pc}
 802bde8:	20002bb0 	.word	0x20002bb0

0802bdec <_fstat_r>:
 802bdec:	b538      	push	{r3, r4, r5, lr}
 802bdee:	4d07      	ldr	r5, [pc, #28]	; (802be0c <_fstat_r+0x20>)
 802bdf0:	2300      	movs	r3, #0
 802bdf2:	4604      	mov	r4, r0
 802bdf4:	4608      	mov	r0, r1
 802bdf6:	4611      	mov	r1, r2
 802bdf8:	602b      	str	r3, [r5, #0]
 802bdfa:	f7f7 ff46 	bl	8023c8a <_fstat>
 802bdfe:	1c43      	adds	r3, r0, #1
 802be00:	d102      	bne.n	802be08 <_fstat_r+0x1c>
 802be02:	682b      	ldr	r3, [r5, #0]
 802be04:	b103      	cbz	r3, 802be08 <_fstat_r+0x1c>
 802be06:	6023      	str	r3, [r4, #0]
 802be08:	bd38      	pop	{r3, r4, r5, pc}
 802be0a:	bf00      	nop
 802be0c:	20002bb0 	.word	0x20002bb0

0802be10 <_isatty_r>:
 802be10:	b538      	push	{r3, r4, r5, lr}
 802be12:	4d06      	ldr	r5, [pc, #24]	; (802be2c <_isatty_r+0x1c>)
 802be14:	2300      	movs	r3, #0
 802be16:	4604      	mov	r4, r0
 802be18:	4608      	mov	r0, r1
 802be1a:	602b      	str	r3, [r5, #0]
 802be1c:	f7f7 ff45 	bl	8023caa <_isatty>
 802be20:	1c43      	adds	r3, r0, #1
 802be22:	d102      	bne.n	802be2a <_isatty_r+0x1a>
 802be24:	682b      	ldr	r3, [r5, #0]
 802be26:	b103      	cbz	r3, 802be2a <_isatty_r+0x1a>
 802be28:	6023      	str	r3, [r4, #0]
 802be2a:	bd38      	pop	{r3, r4, r5, pc}
 802be2c:	20002bb0 	.word	0x20002bb0

0802be30 <_lseek_r>:
 802be30:	b538      	push	{r3, r4, r5, lr}
 802be32:	4d07      	ldr	r5, [pc, #28]	; (802be50 <_lseek_r+0x20>)
 802be34:	4604      	mov	r4, r0
 802be36:	4608      	mov	r0, r1
 802be38:	4611      	mov	r1, r2
 802be3a:	2200      	movs	r2, #0
 802be3c:	602a      	str	r2, [r5, #0]
 802be3e:	461a      	mov	r2, r3
 802be40:	f7f7 ff3e 	bl	8023cc0 <_lseek>
 802be44:	1c43      	adds	r3, r0, #1
 802be46:	d102      	bne.n	802be4e <_lseek_r+0x1e>
 802be48:	682b      	ldr	r3, [r5, #0]
 802be4a:	b103      	cbz	r3, 802be4e <_lseek_r+0x1e>
 802be4c:	6023      	str	r3, [r4, #0]
 802be4e:	bd38      	pop	{r3, r4, r5, pc}
 802be50:	20002bb0 	.word	0x20002bb0

0802be54 <_malloc_usable_size_r>:
 802be54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802be58:	1f18      	subs	r0, r3, #4
 802be5a:	2b00      	cmp	r3, #0
 802be5c:	bfbc      	itt	lt
 802be5e:	580b      	ldrlt	r3, [r1, r0]
 802be60:	18c0      	addlt	r0, r0, r3
 802be62:	4770      	bx	lr

0802be64 <_read_r>:
 802be64:	b538      	push	{r3, r4, r5, lr}
 802be66:	4d07      	ldr	r5, [pc, #28]	; (802be84 <_read_r+0x20>)
 802be68:	4604      	mov	r4, r0
 802be6a:	4608      	mov	r0, r1
 802be6c:	4611      	mov	r1, r2
 802be6e:	2200      	movs	r2, #0
 802be70:	602a      	str	r2, [r5, #0]
 802be72:	461a      	mov	r2, r3
 802be74:	f7f7 fee0 	bl	8023c38 <_read>
 802be78:	1c43      	adds	r3, r0, #1
 802be7a:	d102      	bne.n	802be82 <_read_r+0x1e>
 802be7c:	682b      	ldr	r3, [r5, #0]
 802be7e:	b103      	cbz	r3, 802be82 <_read_r+0x1e>
 802be80:	6023      	str	r3, [r4, #0]
 802be82:	bd38      	pop	{r3, r4, r5, pc}
 802be84:	20002bb0 	.word	0x20002bb0

0802be88 <atan2>:
 802be88:	f000 b82e 	b.w	802bee8 <__ieee754_atan2>

0802be8c <sqrt>:
 802be8c:	b538      	push	{r3, r4, r5, lr}
 802be8e:	ed2d 8b02 	vpush	{d8}
 802be92:	ec55 4b10 	vmov	r4, r5, d0
 802be96:	f000 f8f1 	bl	802c07c <__ieee754_sqrt>
 802be9a:	4622      	mov	r2, r4
 802be9c:	462b      	mov	r3, r5
 802be9e:	4620      	mov	r0, r4
 802bea0:	4629      	mov	r1, r5
 802bea2:	eeb0 8a40 	vmov.f32	s16, s0
 802bea6:	eef0 8a60 	vmov.f32	s17, s1
 802beaa:	f7f4 fd97 	bl	80209dc <__aeabi_dcmpun>
 802beae:	b990      	cbnz	r0, 802bed6 <sqrt+0x4a>
 802beb0:	2200      	movs	r2, #0
 802beb2:	2300      	movs	r3, #0
 802beb4:	4620      	mov	r0, r4
 802beb6:	4629      	mov	r1, r5
 802beb8:	f7f4 fd68 	bl	802098c <__aeabi_dcmplt>
 802bebc:	b158      	cbz	r0, 802bed6 <sqrt+0x4a>
 802bebe:	f7fe fd43 	bl	802a948 <__errno>
 802bec2:	2321      	movs	r3, #33	; 0x21
 802bec4:	6003      	str	r3, [r0, #0]
 802bec6:	2200      	movs	r2, #0
 802bec8:	2300      	movs	r3, #0
 802beca:	4610      	mov	r0, r2
 802becc:	4619      	mov	r1, r3
 802bece:	f7f4 fc15 	bl	80206fc <__aeabi_ddiv>
 802bed2:	ec41 0b18 	vmov	d8, r0, r1
 802bed6:	eeb0 0a48 	vmov.f32	s0, s16
 802beda:	eef0 0a68 	vmov.f32	s1, s17
 802bede:	ecbd 8b02 	vpop	{d8}
 802bee2:	bd38      	pop	{r3, r4, r5, pc}
 802bee4:	0000      	movs	r0, r0
	...

0802bee8 <__ieee754_atan2>:
 802bee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802beec:	ec57 6b11 	vmov	r6, r7, d1
 802bef0:	4273      	negs	r3, r6
 802bef2:	f8df e184 	ldr.w	lr, [pc, #388]	; 802c078 <__ieee754_atan2+0x190>
 802bef6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 802befa:	4333      	orrs	r3, r6
 802befc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 802bf00:	4573      	cmp	r3, lr
 802bf02:	ec51 0b10 	vmov	r0, r1, d0
 802bf06:	ee11 8a10 	vmov	r8, s2
 802bf0a:	d80a      	bhi.n	802bf22 <__ieee754_atan2+0x3a>
 802bf0c:	4244      	negs	r4, r0
 802bf0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802bf12:	4304      	orrs	r4, r0
 802bf14:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 802bf18:	4574      	cmp	r4, lr
 802bf1a:	ee10 9a10 	vmov	r9, s0
 802bf1e:	468c      	mov	ip, r1
 802bf20:	d907      	bls.n	802bf32 <__ieee754_atan2+0x4a>
 802bf22:	4632      	mov	r2, r6
 802bf24:	463b      	mov	r3, r7
 802bf26:	f7f4 f909 	bl	802013c <__adddf3>
 802bf2a:	ec41 0b10 	vmov	d0, r0, r1
 802bf2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bf32:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 802bf36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802bf3a:	4334      	orrs	r4, r6
 802bf3c:	d103      	bne.n	802bf46 <__ieee754_atan2+0x5e>
 802bf3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bf42:	f000 b94d 	b.w	802c1e0 <atan>
 802bf46:	17bc      	asrs	r4, r7, #30
 802bf48:	f004 0402 	and.w	r4, r4, #2
 802bf4c:	ea53 0909 	orrs.w	r9, r3, r9
 802bf50:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 802bf54:	d107      	bne.n	802bf66 <__ieee754_atan2+0x7e>
 802bf56:	2c02      	cmp	r4, #2
 802bf58:	d060      	beq.n	802c01c <__ieee754_atan2+0x134>
 802bf5a:	2c03      	cmp	r4, #3
 802bf5c:	d1e5      	bne.n	802bf2a <__ieee754_atan2+0x42>
 802bf5e:	a142      	add	r1, pc, #264	; (adr r1, 802c068 <__ieee754_atan2+0x180>)
 802bf60:	e9d1 0100 	ldrd	r0, r1, [r1]
 802bf64:	e7e1      	b.n	802bf2a <__ieee754_atan2+0x42>
 802bf66:	ea52 0808 	orrs.w	r8, r2, r8
 802bf6a:	d106      	bne.n	802bf7a <__ieee754_atan2+0x92>
 802bf6c:	f1bc 0f00 	cmp.w	ip, #0
 802bf70:	da5f      	bge.n	802c032 <__ieee754_atan2+0x14a>
 802bf72:	a13f      	add	r1, pc, #252	; (adr r1, 802c070 <__ieee754_atan2+0x188>)
 802bf74:	e9d1 0100 	ldrd	r0, r1, [r1]
 802bf78:	e7d7      	b.n	802bf2a <__ieee754_atan2+0x42>
 802bf7a:	4572      	cmp	r2, lr
 802bf7c:	d10f      	bne.n	802bf9e <__ieee754_atan2+0xb6>
 802bf7e:	4293      	cmp	r3, r2
 802bf80:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 802bf84:	d107      	bne.n	802bf96 <__ieee754_atan2+0xae>
 802bf86:	2c02      	cmp	r4, #2
 802bf88:	d84c      	bhi.n	802c024 <__ieee754_atan2+0x13c>
 802bf8a:	4b35      	ldr	r3, [pc, #212]	; (802c060 <__ieee754_atan2+0x178>)
 802bf8c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802bf90:	e9d4 0100 	ldrd	r0, r1, [r4]
 802bf94:	e7c9      	b.n	802bf2a <__ieee754_atan2+0x42>
 802bf96:	2c02      	cmp	r4, #2
 802bf98:	d848      	bhi.n	802c02c <__ieee754_atan2+0x144>
 802bf9a:	4b32      	ldr	r3, [pc, #200]	; (802c064 <__ieee754_atan2+0x17c>)
 802bf9c:	e7f6      	b.n	802bf8c <__ieee754_atan2+0xa4>
 802bf9e:	4573      	cmp	r3, lr
 802bfa0:	d0e4      	beq.n	802bf6c <__ieee754_atan2+0x84>
 802bfa2:	1a9b      	subs	r3, r3, r2
 802bfa4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 802bfa8:	ea4f 5223 	mov.w	r2, r3, asr #20
 802bfac:	da1e      	bge.n	802bfec <__ieee754_atan2+0x104>
 802bfae:	2f00      	cmp	r7, #0
 802bfb0:	da01      	bge.n	802bfb6 <__ieee754_atan2+0xce>
 802bfb2:	323c      	adds	r2, #60	; 0x3c
 802bfb4:	db1e      	blt.n	802bff4 <__ieee754_atan2+0x10c>
 802bfb6:	4632      	mov	r2, r6
 802bfb8:	463b      	mov	r3, r7
 802bfba:	f7f4 fb9f 	bl	80206fc <__aeabi_ddiv>
 802bfbe:	ec41 0b10 	vmov	d0, r0, r1
 802bfc2:	f000 faad 	bl	802c520 <fabs>
 802bfc6:	f000 f90b 	bl	802c1e0 <atan>
 802bfca:	ec51 0b10 	vmov	r0, r1, d0
 802bfce:	2c01      	cmp	r4, #1
 802bfd0:	d013      	beq.n	802bffa <__ieee754_atan2+0x112>
 802bfd2:	2c02      	cmp	r4, #2
 802bfd4:	d015      	beq.n	802c002 <__ieee754_atan2+0x11a>
 802bfd6:	2c00      	cmp	r4, #0
 802bfd8:	d0a7      	beq.n	802bf2a <__ieee754_atan2+0x42>
 802bfda:	a319      	add	r3, pc, #100	; (adr r3, 802c040 <__ieee754_atan2+0x158>)
 802bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bfe0:	f7f4 f8aa 	bl	8020138 <__aeabi_dsub>
 802bfe4:	a318      	add	r3, pc, #96	; (adr r3, 802c048 <__ieee754_atan2+0x160>)
 802bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bfea:	e014      	b.n	802c016 <__ieee754_atan2+0x12e>
 802bfec:	a118      	add	r1, pc, #96	; (adr r1, 802c050 <__ieee754_atan2+0x168>)
 802bfee:	e9d1 0100 	ldrd	r0, r1, [r1]
 802bff2:	e7ec      	b.n	802bfce <__ieee754_atan2+0xe6>
 802bff4:	2000      	movs	r0, #0
 802bff6:	2100      	movs	r1, #0
 802bff8:	e7e9      	b.n	802bfce <__ieee754_atan2+0xe6>
 802bffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802bffe:	4619      	mov	r1, r3
 802c000:	e793      	b.n	802bf2a <__ieee754_atan2+0x42>
 802c002:	a30f      	add	r3, pc, #60	; (adr r3, 802c040 <__ieee754_atan2+0x158>)
 802c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c008:	f7f4 f896 	bl	8020138 <__aeabi_dsub>
 802c00c:	4602      	mov	r2, r0
 802c00e:	460b      	mov	r3, r1
 802c010:	a10d      	add	r1, pc, #52	; (adr r1, 802c048 <__ieee754_atan2+0x160>)
 802c012:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c016:	f7f4 f88f 	bl	8020138 <__aeabi_dsub>
 802c01a:	e786      	b.n	802bf2a <__ieee754_atan2+0x42>
 802c01c:	a10a      	add	r1, pc, #40	; (adr r1, 802c048 <__ieee754_atan2+0x160>)
 802c01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c022:	e782      	b.n	802bf2a <__ieee754_atan2+0x42>
 802c024:	a10c      	add	r1, pc, #48	; (adr r1, 802c058 <__ieee754_atan2+0x170>)
 802c026:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c02a:	e77e      	b.n	802bf2a <__ieee754_atan2+0x42>
 802c02c:	2000      	movs	r0, #0
 802c02e:	2100      	movs	r1, #0
 802c030:	e77b      	b.n	802bf2a <__ieee754_atan2+0x42>
 802c032:	a107      	add	r1, pc, #28	; (adr r1, 802c050 <__ieee754_atan2+0x168>)
 802c034:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c038:	e777      	b.n	802bf2a <__ieee754_atan2+0x42>
 802c03a:	bf00      	nop
 802c03c:	f3af 8000 	nop.w
 802c040:	33145c07 	.word	0x33145c07
 802c044:	3ca1a626 	.word	0x3ca1a626
 802c048:	54442d18 	.word	0x54442d18
 802c04c:	400921fb 	.word	0x400921fb
 802c050:	54442d18 	.word	0x54442d18
 802c054:	3ff921fb 	.word	0x3ff921fb
 802c058:	54442d18 	.word	0x54442d18
 802c05c:	3fe921fb 	.word	0x3fe921fb
 802c060:	08078288 	.word	0x08078288
 802c064:	080782a0 	.word	0x080782a0
 802c068:	54442d18 	.word	0x54442d18
 802c06c:	c00921fb 	.word	0xc00921fb
 802c070:	54442d18 	.word	0x54442d18
 802c074:	bff921fb 	.word	0xbff921fb
 802c078:	7ff00000 	.word	0x7ff00000

0802c07c <__ieee754_sqrt>:
 802c07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c080:	ec55 4b10 	vmov	r4, r5, d0
 802c084:	4e55      	ldr	r6, [pc, #340]	; (802c1dc <__ieee754_sqrt+0x160>)
 802c086:	43ae      	bics	r6, r5
 802c088:	ee10 0a10 	vmov	r0, s0
 802c08c:	ee10 3a10 	vmov	r3, s0
 802c090:	462a      	mov	r2, r5
 802c092:	4629      	mov	r1, r5
 802c094:	d110      	bne.n	802c0b8 <__ieee754_sqrt+0x3c>
 802c096:	ee10 2a10 	vmov	r2, s0
 802c09a:	462b      	mov	r3, r5
 802c09c:	f7f4 fa04 	bl	80204a8 <__aeabi_dmul>
 802c0a0:	4602      	mov	r2, r0
 802c0a2:	460b      	mov	r3, r1
 802c0a4:	4620      	mov	r0, r4
 802c0a6:	4629      	mov	r1, r5
 802c0a8:	f7f4 f848 	bl	802013c <__adddf3>
 802c0ac:	4604      	mov	r4, r0
 802c0ae:	460d      	mov	r5, r1
 802c0b0:	ec45 4b10 	vmov	d0, r4, r5
 802c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c0b8:	2d00      	cmp	r5, #0
 802c0ba:	dc10      	bgt.n	802c0de <__ieee754_sqrt+0x62>
 802c0bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802c0c0:	4330      	orrs	r0, r6
 802c0c2:	d0f5      	beq.n	802c0b0 <__ieee754_sqrt+0x34>
 802c0c4:	b15d      	cbz	r5, 802c0de <__ieee754_sqrt+0x62>
 802c0c6:	ee10 2a10 	vmov	r2, s0
 802c0ca:	462b      	mov	r3, r5
 802c0cc:	ee10 0a10 	vmov	r0, s0
 802c0d0:	f7f4 f832 	bl	8020138 <__aeabi_dsub>
 802c0d4:	4602      	mov	r2, r0
 802c0d6:	460b      	mov	r3, r1
 802c0d8:	f7f4 fb10 	bl	80206fc <__aeabi_ddiv>
 802c0dc:	e7e6      	b.n	802c0ac <__ieee754_sqrt+0x30>
 802c0de:	1512      	asrs	r2, r2, #20
 802c0e0:	d074      	beq.n	802c1cc <__ieee754_sqrt+0x150>
 802c0e2:	07d4      	lsls	r4, r2, #31
 802c0e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 802c0e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 802c0ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802c0f0:	bf5e      	ittt	pl
 802c0f2:	0fda      	lsrpl	r2, r3, #31
 802c0f4:	005b      	lslpl	r3, r3, #1
 802c0f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 802c0fa:	2400      	movs	r4, #0
 802c0fc:	0fda      	lsrs	r2, r3, #31
 802c0fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802c102:	107f      	asrs	r7, r7, #1
 802c104:	005b      	lsls	r3, r3, #1
 802c106:	2516      	movs	r5, #22
 802c108:	4620      	mov	r0, r4
 802c10a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 802c10e:	1886      	adds	r6, r0, r2
 802c110:	428e      	cmp	r6, r1
 802c112:	bfde      	ittt	le
 802c114:	1b89      	suble	r1, r1, r6
 802c116:	18b0      	addle	r0, r6, r2
 802c118:	18a4      	addle	r4, r4, r2
 802c11a:	0049      	lsls	r1, r1, #1
 802c11c:	3d01      	subs	r5, #1
 802c11e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 802c122:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802c126:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802c12a:	d1f0      	bne.n	802c10e <__ieee754_sqrt+0x92>
 802c12c:	462a      	mov	r2, r5
 802c12e:	f04f 0e20 	mov.w	lr, #32
 802c132:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802c136:	4281      	cmp	r1, r0
 802c138:	eb06 0c05 	add.w	ip, r6, r5
 802c13c:	dc02      	bgt.n	802c144 <__ieee754_sqrt+0xc8>
 802c13e:	d113      	bne.n	802c168 <__ieee754_sqrt+0xec>
 802c140:	459c      	cmp	ip, r3
 802c142:	d811      	bhi.n	802c168 <__ieee754_sqrt+0xec>
 802c144:	f1bc 0f00 	cmp.w	ip, #0
 802c148:	eb0c 0506 	add.w	r5, ip, r6
 802c14c:	da43      	bge.n	802c1d6 <__ieee754_sqrt+0x15a>
 802c14e:	2d00      	cmp	r5, #0
 802c150:	db41      	blt.n	802c1d6 <__ieee754_sqrt+0x15a>
 802c152:	f100 0801 	add.w	r8, r0, #1
 802c156:	1a09      	subs	r1, r1, r0
 802c158:	459c      	cmp	ip, r3
 802c15a:	bf88      	it	hi
 802c15c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 802c160:	eba3 030c 	sub.w	r3, r3, ip
 802c164:	4432      	add	r2, r6
 802c166:	4640      	mov	r0, r8
 802c168:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 802c16c:	f1be 0e01 	subs.w	lr, lr, #1
 802c170:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 802c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802c178:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802c17c:	d1db      	bne.n	802c136 <__ieee754_sqrt+0xba>
 802c17e:	430b      	orrs	r3, r1
 802c180:	d006      	beq.n	802c190 <__ieee754_sqrt+0x114>
 802c182:	1c50      	adds	r0, r2, #1
 802c184:	bf13      	iteet	ne
 802c186:	3201      	addne	r2, #1
 802c188:	3401      	addeq	r4, #1
 802c18a:	4672      	moveq	r2, lr
 802c18c:	f022 0201 	bicne.w	r2, r2, #1
 802c190:	1063      	asrs	r3, r4, #1
 802c192:	0852      	lsrs	r2, r2, #1
 802c194:	07e1      	lsls	r1, r4, #31
 802c196:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802c19a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802c19e:	bf48      	it	mi
 802c1a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 802c1a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 802c1a8:	4614      	mov	r4, r2
 802c1aa:	e781      	b.n	802c0b0 <__ieee754_sqrt+0x34>
 802c1ac:	0ad9      	lsrs	r1, r3, #11
 802c1ae:	3815      	subs	r0, #21
 802c1b0:	055b      	lsls	r3, r3, #21
 802c1b2:	2900      	cmp	r1, #0
 802c1b4:	d0fa      	beq.n	802c1ac <__ieee754_sqrt+0x130>
 802c1b6:	02cd      	lsls	r5, r1, #11
 802c1b8:	d50a      	bpl.n	802c1d0 <__ieee754_sqrt+0x154>
 802c1ba:	f1c2 0420 	rsb	r4, r2, #32
 802c1be:	fa23 f404 	lsr.w	r4, r3, r4
 802c1c2:	1e55      	subs	r5, r2, #1
 802c1c4:	4093      	lsls	r3, r2
 802c1c6:	4321      	orrs	r1, r4
 802c1c8:	1b42      	subs	r2, r0, r5
 802c1ca:	e78a      	b.n	802c0e2 <__ieee754_sqrt+0x66>
 802c1cc:	4610      	mov	r0, r2
 802c1ce:	e7f0      	b.n	802c1b2 <__ieee754_sqrt+0x136>
 802c1d0:	0049      	lsls	r1, r1, #1
 802c1d2:	3201      	adds	r2, #1
 802c1d4:	e7ef      	b.n	802c1b6 <__ieee754_sqrt+0x13a>
 802c1d6:	4680      	mov	r8, r0
 802c1d8:	e7bd      	b.n	802c156 <__ieee754_sqrt+0xda>
 802c1da:	bf00      	nop
 802c1dc:	7ff00000 	.word	0x7ff00000

0802c1e0 <atan>:
 802c1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c1e4:	ec55 4b10 	vmov	r4, r5, d0
 802c1e8:	4bc3      	ldr	r3, [pc, #780]	; (802c4f8 <atan+0x318>)
 802c1ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802c1ee:	429e      	cmp	r6, r3
 802c1f0:	46ab      	mov	fp, r5
 802c1f2:	dd18      	ble.n	802c226 <atan+0x46>
 802c1f4:	4bc1      	ldr	r3, [pc, #772]	; (802c4fc <atan+0x31c>)
 802c1f6:	429e      	cmp	r6, r3
 802c1f8:	dc01      	bgt.n	802c1fe <atan+0x1e>
 802c1fa:	d109      	bne.n	802c210 <atan+0x30>
 802c1fc:	b144      	cbz	r4, 802c210 <atan+0x30>
 802c1fe:	4622      	mov	r2, r4
 802c200:	462b      	mov	r3, r5
 802c202:	4620      	mov	r0, r4
 802c204:	4629      	mov	r1, r5
 802c206:	f7f3 ff99 	bl	802013c <__adddf3>
 802c20a:	4604      	mov	r4, r0
 802c20c:	460d      	mov	r5, r1
 802c20e:	e006      	b.n	802c21e <atan+0x3e>
 802c210:	f1bb 0f00 	cmp.w	fp, #0
 802c214:	f300 8131 	bgt.w	802c47a <atan+0x29a>
 802c218:	a59b      	add	r5, pc, #620	; (adr r5, 802c488 <atan+0x2a8>)
 802c21a:	e9d5 4500 	ldrd	r4, r5, [r5]
 802c21e:	ec45 4b10 	vmov	d0, r4, r5
 802c222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c226:	4bb6      	ldr	r3, [pc, #728]	; (802c500 <atan+0x320>)
 802c228:	429e      	cmp	r6, r3
 802c22a:	dc14      	bgt.n	802c256 <atan+0x76>
 802c22c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 802c230:	429e      	cmp	r6, r3
 802c232:	dc0d      	bgt.n	802c250 <atan+0x70>
 802c234:	a396      	add	r3, pc, #600	; (adr r3, 802c490 <atan+0x2b0>)
 802c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c23a:	ee10 0a10 	vmov	r0, s0
 802c23e:	4629      	mov	r1, r5
 802c240:	f7f3 ff7c 	bl	802013c <__adddf3>
 802c244:	4baf      	ldr	r3, [pc, #700]	; (802c504 <atan+0x324>)
 802c246:	2200      	movs	r2, #0
 802c248:	f7f4 fbbe 	bl	80209c8 <__aeabi_dcmpgt>
 802c24c:	2800      	cmp	r0, #0
 802c24e:	d1e6      	bne.n	802c21e <atan+0x3e>
 802c250:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 802c254:	e02b      	b.n	802c2ae <atan+0xce>
 802c256:	f000 f963 	bl	802c520 <fabs>
 802c25a:	4bab      	ldr	r3, [pc, #684]	; (802c508 <atan+0x328>)
 802c25c:	429e      	cmp	r6, r3
 802c25e:	ec55 4b10 	vmov	r4, r5, d0
 802c262:	f300 80bf 	bgt.w	802c3e4 <atan+0x204>
 802c266:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 802c26a:	429e      	cmp	r6, r3
 802c26c:	f300 80a0 	bgt.w	802c3b0 <atan+0x1d0>
 802c270:	ee10 2a10 	vmov	r2, s0
 802c274:	ee10 0a10 	vmov	r0, s0
 802c278:	462b      	mov	r3, r5
 802c27a:	4629      	mov	r1, r5
 802c27c:	f7f3 ff5e 	bl	802013c <__adddf3>
 802c280:	4ba0      	ldr	r3, [pc, #640]	; (802c504 <atan+0x324>)
 802c282:	2200      	movs	r2, #0
 802c284:	f7f3 ff58 	bl	8020138 <__aeabi_dsub>
 802c288:	2200      	movs	r2, #0
 802c28a:	4606      	mov	r6, r0
 802c28c:	460f      	mov	r7, r1
 802c28e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802c292:	4620      	mov	r0, r4
 802c294:	4629      	mov	r1, r5
 802c296:	f7f3 ff51 	bl	802013c <__adddf3>
 802c29a:	4602      	mov	r2, r0
 802c29c:	460b      	mov	r3, r1
 802c29e:	4630      	mov	r0, r6
 802c2a0:	4639      	mov	r1, r7
 802c2a2:	f7f4 fa2b 	bl	80206fc <__aeabi_ddiv>
 802c2a6:	f04f 0a00 	mov.w	sl, #0
 802c2aa:	4604      	mov	r4, r0
 802c2ac:	460d      	mov	r5, r1
 802c2ae:	4622      	mov	r2, r4
 802c2b0:	462b      	mov	r3, r5
 802c2b2:	4620      	mov	r0, r4
 802c2b4:	4629      	mov	r1, r5
 802c2b6:	f7f4 f8f7 	bl	80204a8 <__aeabi_dmul>
 802c2ba:	4602      	mov	r2, r0
 802c2bc:	460b      	mov	r3, r1
 802c2be:	4680      	mov	r8, r0
 802c2c0:	4689      	mov	r9, r1
 802c2c2:	f7f4 f8f1 	bl	80204a8 <__aeabi_dmul>
 802c2c6:	a374      	add	r3, pc, #464	; (adr r3, 802c498 <atan+0x2b8>)
 802c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2cc:	4606      	mov	r6, r0
 802c2ce:	460f      	mov	r7, r1
 802c2d0:	f7f4 f8ea 	bl	80204a8 <__aeabi_dmul>
 802c2d4:	a372      	add	r3, pc, #456	; (adr r3, 802c4a0 <atan+0x2c0>)
 802c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2da:	f7f3 ff2f 	bl	802013c <__adddf3>
 802c2de:	4632      	mov	r2, r6
 802c2e0:	463b      	mov	r3, r7
 802c2e2:	f7f4 f8e1 	bl	80204a8 <__aeabi_dmul>
 802c2e6:	a370      	add	r3, pc, #448	; (adr r3, 802c4a8 <atan+0x2c8>)
 802c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2ec:	f7f3 ff26 	bl	802013c <__adddf3>
 802c2f0:	4632      	mov	r2, r6
 802c2f2:	463b      	mov	r3, r7
 802c2f4:	f7f4 f8d8 	bl	80204a8 <__aeabi_dmul>
 802c2f8:	a36d      	add	r3, pc, #436	; (adr r3, 802c4b0 <atan+0x2d0>)
 802c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2fe:	f7f3 ff1d 	bl	802013c <__adddf3>
 802c302:	4632      	mov	r2, r6
 802c304:	463b      	mov	r3, r7
 802c306:	f7f4 f8cf 	bl	80204a8 <__aeabi_dmul>
 802c30a:	a36b      	add	r3, pc, #428	; (adr r3, 802c4b8 <atan+0x2d8>)
 802c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c310:	f7f3 ff14 	bl	802013c <__adddf3>
 802c314:	4632      	mov	r2, r6
 802c316:	463b      	mov	r3, r7
 802c318:	f7f4 f8c6 	bl	80204a8 <__aeabi_dmul>
 802c31c:	a368      	add	r3, pc, #416	; (adr r3, 802c4c0 <atan+0x2e0>)
 802c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c322:	f7f3 ff0b 	bl	802013c <__adddf3>
 802c326:	4642      	mov	r2, r8
 802c328:	464b      	mov	r3, r9
 802c32a:	f7f4 f8bd 	bl	80204a8 <__aeabi_dmul>
 802c32e:	a366      	add	r3, pc, #408	; (adr r3, 802c4c8 <atan+0x2e8>)
 802c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c334:	4680      	mov	r8, r0
 802c336:	4689      	mov	r9, r1
 802c338:	4630      	mov	r0, r6
 802c33a:	4639      	mov	r1, r7
 802c33c:	f7f4 f8b4 	bl	80204a8 <__aeabi_dmul>
 802c340:	a363      	add	r3, pc, #396	; (adr r3, 802c4d0 <atan+0x2f0>)
 802c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c346:	f7f3 fef7 	bl	8020138 <__aeabi_dsub>
 802c34a:	4632      	mov	r2, r6
 802c34c:	463b      	mov	r3, r7
 802c34e:	f7f4 f8ab 	bl	80204a8 <__aeabi_dmul>
 802c352:	a361      	add	r3, pc, #388	; (adr r3, 802c4d8 <atan+0x2f8>)
 802c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c358:	f7f3 feee 	bl	8020138 <__aeabi_dsub>
 802c35c:	4632      	mov	r2, r6
 802c35e:	463b      	mov	r3, r7
 802c360:	f7f4 f8a2 	bl	80204a8 <__aeabi_dmul>
 802c364:	a35e      	add	r3, pc, #376	; (adr r3, 802c4e0 <atan+0x300>)
 802c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c36a:	f7f3 fee5 	bl	8020138 <__aeabi_dsub>
 802c36e:	4632      	mov	r2, r6
 802c370:	463b      	mov	r3, r7
 802c372:	f7f4 f899 	bl	80204a8 <__aeabi_dmul>
 802c376:	a35c      	add	r3, pc, #368	; (adr r3, 802c4e8 <atan+0x308>)
 802c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c37c:	f7f3 fedc 	bl	8020138 <__aeabi_dsub>
 802c380:	4632      	mov	r2, r6
 802c382:	463b      	mov	r3, r7
 802c384:	f7f4 f890 	bl	80204a8 <__aeabi_dmul>
 802c388:	4602      	mov	r2, r0
 802c38a:	460b      	mov	r3, r1
 802c38c:	4640      	mov	r0, r8
 802c38e:	4649      	mov	r1, r9
 802c390:	f7f3 fed4 	bl	802013c <__adddf3>
 802c394:	4622      	mov	r2, r4
 802c396:	462b      	mov	r3, r5
 802c398:	f7f4 f886 	bl	80204a8 <__aeabi_dmul>
 802c39c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 802c3a0:	4602      	mov	r2, r0
 802c3a2:	460b      	mov	r3, r1
 802c3a4:	d14b      	bne.n	802c43e <atan+0x25e>
 802c3a6:	4620      	mov	r0, r4
 802c3a8:	4629      	mov	r1, r5
 802c3aa:	f7f3 fec5 	bl	8020138 <__aeabi_dsub>
 802c3ae:	e72c      	b.n	802c20a <atan+0x2a>
 802c3b0:	ee10 0a10 	vmov	r0, s0
 802c3b4:	4b53      	ldr	r3, [pc, #332]	; (802c504 <atan+0x324>)
 802c3b6:	2200      	movs	r2, #0
 802c3b8:	4629      	mov	r1, r5
 802c3ba:	f7f3 febd 	bl	8020138 <__aeabi_dsub>
 802c3be:	4b51      	ldr	r3, [pc, #324]	; (802c504 <atan+0x324>)
 802c3c0:	4606      	mov	r6, r0
 802c3c2:	460f      	mov	r7, r1
 802c3c4:	2200      	movs	r2, #0
 802c3c6:	4620      	mov	r0, r4
 802c3c8:	4629      	mov	r1, r5
 802c3ca:	f7f3 feb7 	bl	802013c <__adddf3>
 802c3ce:	4602      	mov	r2, r0
 802c3d0:	460b      	mov	r3, r1
 802c3d2:	4630      	mov	r0, r6
 802c3d4:	4639      	mov	r1, r7
 802c3d6:	f7f4 f991 	bl	80206fc <__aeabi_ddiv>
 802c3da:	f04f 0a01 	mov.w	sl, #1
 802c3de:	4604      	mov	r4, r0
 802c3e0:	460d      	mov	r5, r1
 802c3e2:	e764      	b.n	802c2ae <atan+0xce>
 802c3e4:	4b49      	ldr	r3, [pc, #292]	; (802c50c <atan+0x32c>)
 802c3e6:	429e      	cmp	r6, r3
 802c3e8:	da1d      	bge.n	802c426 <atan+0x246>
 802c3ea:	ee10 0a10 	vmov	r0, s0
 802c3ee:	4b48      	ldr	r3, [pc, #288]	; (802c510 <atan+0x330>)
 802c3f0:	2200      	movs	r2, #0
 802c3f2:	4629      	mov	r1, r5
 802c3f4:	f7f3 fea0 	bl	8020138 <__aeabi_dsub>
 802c3f8:	4b45      	ldr	r3, [pc, #276]	; (802c510 <atan+0x330>)
 802c3fa:	4606      	mov	r6, r0
 802c3fc:	460f      	mov	r7, r1
 802c3fe:	2200      	movs	r2, #0
 802c400:	4620      	mov	r0, r4
 802c402:	4629      	mov	r1, r5
 802c404:	f7f4 f850 	bl	80204a8 <__aeabi_dmul>
 802c408:	4b3e      	ldr	r3, [pc, #248]	; (802c504 <atan+0x324>)
 802c40a:	2200      	movs	r2, #0
 802c40c:	f7f3 fe96 	bl	802013c <__adddf3>
 802c410:	4602      	mov	r2, r0
 802c412:	460b      	mov	r3, r1
 802c414:	4630      	mov	r0, r6
 802c416:	4639      	mov	r1, r7
 802c418:	f7f4 f970 	bl	80206fc <__aeabi_ddiv>
 802c41c:	f04f 0a02 	mov.w	sl, #2
 802c420:	4604      	mov	r4, r0
 802c422:	460d      	mov	r5, r1
 802c424:	e743      	b.n	802c2ae <atan+0xce>
 802c426:	462b      	mov	r3, r5
 802c428:	ee10 2a10 	vmov	r2, s0
 802c42c:	4939      	ldr	r1, [pc, #228]	; (802c514 <atan+0x334>)
 802c42e:	2000      	movs	r0, #0
 802c430:	f7f4 f964 	bl	80206fc <__aeabi_ddiv>
 802c434:	f04f 0a03 	mov.w	sl, #3
 802c438:	4604      	mov	r4, r0
 802c43a:	460d      	mov	r5, r1
 802c43c:	e737      	b.n	802c2ae <atan+0xce>
 802c43e:	4b36      	ldr	r3, [pc, #216]	; (802c518 <atan+0x338>)
 802c440:	4e36      	ldr	r6, [pc, #216]	; (802c51c <atan+0x33c>)
 802c442:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 802c446:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 802c44a:	e9da 2300 	ldrd	r2, r3, [sl]
 802c44e:	f7f3 fe73 	bl	8020138 <__aeabi_dsub>
 802c452:	4622      	mov	r2, r4
 802c454:	462b      	mov	r3, r5
 802c456:	f7f3 fe6f 	bl	8020138 <__aeabi_dsub>
 802c45a:	4602      	mov	r2, r0
 802c45c:	460b      	mov	r3, r1
 802c45e:	e9d6 0100 	ldrd	r0, r1, [r6]
 802c462:	f7f3 fe69 	bl	8020138 <__aeabi_dsub>
 802c466:	f1bb 0f00 	cmp.w	fp, #0
 802c46a:	4604      	mov	r4, r0
 802c46c:	460d      	mov	r5, r1
 802c46e:	f6bf aed6 	bge.w	802c21e <atan+0x3e>
 802c472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802c476:	461d      	mov	r5, r3
 802c478:	e6d1      	b.n	802c21e <atan+0x3e>
 802c47a:	a51d      	add	r5, pc, #116	; (adr r5, 802c4f0 <atan+0x310>)
 802c47c:	e9d5 4500 	ldrd	r4, r5, [r5]
 802c480:	e6cd      	b.n	802c21e <atan+0x3e>
 802c482:	bf00      	nop
 802c484:	f3af 8000 	nop.w
 802c488:	54442d18 	.word	0x54442d18
 802c48c:	bff921fb 	.word	0xbff921fb
 802c490:	8800759c 	.word	0x8800759c
 802c494:	7e37e43c 	.word	0x7e37e43c
 802c498:	e322da11 	.word	0xe322da11
 802c49c:	3f90ad3a 	.word	0x3f90ad3a
 802c4a0:	24760deb 	.word	0x24760deb
 802c4a4:	3fa97b4b 	.word	0x3fa97b4b
 802c4a8:	a0d03d51 	.word	0xa0d03d51
 802c4ac:	3fb10d66 	.word	0x3fb10d66
 802c4b0:	c54c206e 	.word	0xc54c206e
 802c4b4:	3fb745cd 	.word	0x3fb745cd
 802c4b8:	920083ff 	.word	0x920083ff
 802c4bc:	3fc24924 	.word	0x3fc24924
 802c4c0:	5555550d 	.word	0x5555550d
 802c4c4:	3fd55555 	.word	0x3fd55555
 802c4c8:	2c6a6c2f 	.word	0x2c6a6c2f
 802c4cc:	bfa2b444 	.word	0xbfa2b444
 802c4d0:	52defd9a 	.word	0x52defd9a
 802c4d4:	3fadde2d 	.word	0x3fadde2d
 802c4d8:	af749a6d 	.word	0xaf749a6d
 802c4dc:	3fb3b0f2 	.word	0x3fb3b0f2
 802c4e0:	fe231671 	.word	0xfe231671
 802c4e4:	3fbc71c6 	.word	0x3fbc71c6
 802c4e8:	9998ebc4 	.word	0x9998ebc4
 802c4ec:	3fc99999 	.word	0x3fc99999
 802c4f0:	54442d18 	.word	0x54442d18
 802c4f4:	3ff921fb 	.word	0x3ff921fb
 802c4f8:	440fffff 	.word	0x440fffff
 802c4fc:	7ff00000 	.word	0x7ff00000
 802c500:	3fdbffff 	.word	0x3fdbffff
 802c504:	3ff00000 	.word	0x3ff00000
 802c508:	3ff2ffff 	.word	0x3ff2ffff
 802c50c:	40038000 	.word	0x40038000
 802c510:	3ff80000 	.word	0x3ff80000
 802c514:	bff00000 	.word	0xbff00000
 802c518:	080782d8 	.word	0x080782d8
 802c51c:	080782b8 	.word	0x080782b8

0802c520 <fabs>:
 802c520:	ec51 0b10 	vmov	r0, r1, d0
 802c524:	ee10 2a10 	vmov	r2, s0
 802c528:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802c52c:	ec43 2b10 	vmov	d0, r2, r3
 802c530:	4770      	bx	lr
	...

0802c534 <_gettimeofday>:
 802c534:	4b02      	ldr	r3, [pc, #8]	; (802c540 <_gettimeofday+0xc>)
 802c536:	2258      	movs	r2, #88	; 0x58
 802c538:	601a      	str	r2, [r3, #0]
 802c53a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c53e:	4770      	bx	lr
 802c540:	20002bb0 	.word	0x20002bb0

0802c544 <_init>:
 802c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c546:	bf00      	nop
 802c548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c54a:	bc08      	pop	{r3}
 802c54c:	469e      	mov	lr, r3
 802c54e:	4770      	bx	lr

0802c550 <_fini>:
 802c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c552:	bf00      	nop
 802c554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c556:	bc08      	pop	{r3}
 802c558:	469e      	mov	lr, r3
 802c55a:	4770      	bx	lr
